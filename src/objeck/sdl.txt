method : public : HasIntersection(B : Rect) ~ Bool {
	array_args := Base->New[3];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@A);
	array_args[2] := B;

	@lib_proxy := Proxy->GetDllProxy();
	@lib_proxy->CallFunction("sdl_rect_has_intersection", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get() = 0 ? false : true;
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_rect_has_intersection(VMContext& context) {
		SDL_Rect* A = (Rect*)APITools_GetIntValue(context, 1);
		const long* B = (long*)APITools_GetObjectValue(context, 2);
		const int return_value = SDL_HasIntersection(A, B);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : Intersect(B : Rect, result : Rect) ~ Bool {
	array_args := Base->New[4];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@A);
	array_args[2] := B;
	array_args[3] := result;

	@lib_proxy := Proxy->GetDllProxy();
	@lib_proxy->CallFunction("sdl_rect_intersect", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get() = 0 ? false : true;
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_rect_intersect(VMContext& context) {
		SDL_Rect* A = (Rect*)APITools_GetIntValue(context, 1);
		const long* B = (long*)APITools_GetObjectValue(context, 2);
		const long* result = (long*)APITools_GetObjectValue(context, 3);
		const int return_value = SDL_IntersectRect(A, B, result);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : Union(B : Rect, result : Rect) ~ Nil {
	array_args := Base->New[3];
	array_args[0] := IntHolder->New(@A);
	array_args[1] := B;
	array_args[2] := result;

	@lib_proxy := Proxy->GetDllProxy();
	@lib_proxy->CallFunction("sdl_rect_union", array_args);

}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_rect_union(VMContext& context) {
		SDL_Rect* A = (Rect*)APITools_GetIntValue(context, 0);
		const long* B = (long*)APITools_GetObjectValue(context, 1);
		const long* result = (long*)APITools_GetObjectValue(context, 2);
		SDL_UnionRect(A, B, result);
	}

---
method : public : EnclosePoints(points : Point, count : Int, clip : Rect, result : Rect) ~ Bool {
	array_args := Base->New[5];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(points);
	array_args[2] := IntHolder->New(count);
	array_args[3] := clip;
	array_args[4] := result;

	@lib_proxy := Proxy->GetDllProxy();
	@lib_proxy->CallFunction("sdl_rect_enclose_points", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get() = 0 ? false : true;
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_rect_enclose_points(VMContext& context) {
		const long* points = (long*)APITools_GetObjectValue(context, 1);
		const int count = APITools_GetIntValue(context, 2);
		const long* clip = (long*)APITools_GetObjectValue(context, 3);
		const long* result = (long*)APITools_GetObjectValue(context, 4);
		const int return_value = SDL_EnclosePoints(points, count, clip, result);
		APITools_SetIntValue(context, 0, return_value);
	}

---
================
method : public : IntersectAndLine(X1 : Int, Y1 : Int, X2 : Int, Y2 : Int) ~ Bool {
	array_args := Base->New[6];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@rect);
	array_args[2] := IntHolder->New(X1);
	array_args[3] := IntHolder->New(Y1);
	array_args[4] := IntHolder->New(X2);
	array_args[5] := IntHolder->New(Y2);

	@lib_proxy := Proxy->GetDllProxy();
	@lib_proxy->CallFunction("sdl_rect_intersect_and_line", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get() = 0 ? false : true;
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_rect_intersect_and_line(VMContext& context) {
		SDL_Rect* rect = (Rect*)APITools_GetIntValue(context, 1);
		const int X1 = APITools_GetIntValue(context, 2);
		const int Y1 = APITools_GetIntValue(context, 3);
		const int X2 = APITools_GetIntValue(context, 4);
		const int Y2 = APITools_GetIntValue(context, 5);
		const int return_value = SDL_IntersectRectAndLine(rect, X1, Y1, X2, Y2);
		APITools_SetIntValue(context, 0, return_value);
	}

---

#~
Lesson 05
Optimized Surface Loading and Soft Stretching

http://lazyfoo.net/tutorials/SDL/05_optimized_surface_loading_and_soft_stretching/index.php
~#

use SDL;

class Test {
	# Key press surfaces constants
	enum KeyPressSurfaces {
		KEY_PRESS_SURFACE_DEFAULT,
		KEY_PRESS_SURFACE_UP,
		KEY_PRESS_SURFACE_DOWN,
		KEY_PRESS_SURFACE_LEFT,
		KEY_PRESS_SURFACE_RIGHT,
		KEY_PRESS_SURFACE_TOTAL
	}

	@window : static : Window;
	@screen_surface : static : Surface;
	@key_press_surfaces : static : Surface[];
	
	function : Main(args : String[]) ~ Nil {
		@key_press_surfaces := Surface->New[KeyPressSurfaces->KEY_PRESS_SURFACE_TOTAL]; 
		
		# Start up SDL and create window
		if( <>Init() ) {
			"Failed to initialize!"->ErrorLine();
		}
		else {
			# Load media
			if( <>LoadMedia() ) {
				"Failed to load media!"->PrintLine();
			}
			else {			
				# Main loop flag
				quit := false;
				
				# Event handler
				e := Event->New();
				
				# Set default current surface
				@current_surface := @key_press_surfaces[ KeyPressSurfaces->KEY_PRESS_SURFACE_DEFAULT ];

				# While application is running
				while( <>quit )
				{
					# Handle events on queue
					while( e->Poll() <> 0 ) {
						# User requests quit
						if( e->GetType() = Flags->SDL_QUIT->As(Int) ) {
							quit := true;
						}
						# User presses a key
						else if( e->GetType() = Flags->SDL_KEY_DOWN->As(Int) ) {
							# Select surfaces based on key press
							select( e->GetKey()->GetKeysym()->GetScancode() )
							{							
								label Scancode->SCANCODE_UP: {
									@current_surface := @key_press_surfaces[ KeyPressSurfaces->KEY_PRESS_SURFACE_UP ];
								}

								label Scancode->SCANCODE_DOWN: {
									@current_surface := @key_press_surfaces[ KeyPressSurfaces->KEY_PRESS_SURFACE_DOWN ];
								}

								label Scancode->SCANCODE_LEFT: {
									@current_surface := @key_press_surfaces[ KeyPressSurfaces->KEY_PRESS_SURFACE_LEFT ];
								}

								label Scancode->SCANCODE_RIGHT: {
									@current_surface := @key_press_surfaces[ KeyPressSurfaces->KEY_PRESS_SURFACE_RIGHT ];
								}

								other: {
									@current_surface := @key_press_surfaces[ KeyPressSurfaces->KEY_PRESS_SURFACE_DEFAULT ];
								}							
							};							
						};
					};

					# Apply the image
					
					stretchRect := Rect->New();
					stretchRect->SetX(0);
					stretchRect->SetY(0);
					stretchRect->SetW(640);
					stretchRect->SetH(480);
					@current_surface->BlitScaled( Nil, @screen_surface, stretchRect );
				
					# Update the surface
					@window->UpdateSurface();
				};
			};
		};
		
		Close();
	}
	
	function : Init() ~ Bool {
		# Initialization flag
		success := true;
		
		# Initialize SDL
		if(Core->Init(Flags->SDL_INIT_VIDEO->As(Int)) < 0) {
			"SDL could not initialize!"->ErrorLine();
			success := false;
		}
		else {
			# Create window
			@window := Window->New( "SDL Tutorial", Flags->SDL_WINDOW_POS_UNDEFINED->As(Int), 
				Flags->SDL_WINDOW_POS_UNDEFINED->As(Int), 640, 480, Flags->SDL_WINDOW_SHOWN->As(Int));
			# Get window surface
			@screen_surface := @window->GetSurface();
		};
		
		return success;
	}
	
	function : LoadMedia() ~ Bool {
		success := true;
		
		# Load default surface
		@key_press_surfaces[ KeyPressSurfaces->KEY_PRESS_SURFACE_DEFAULT ] := loadSurface( "images/press.bmp" );
		if( @key_press_surfaces[ KeyPressSurfaces->KEY_PRESS_SURFACE_DEFAULT ] = Nil ) {
			"Failed to load default image!"->ErrorLine();
			success := false;
		};
		
		# Load up surface
		@key_press_surfaces[ KeyPressSurfaces->KEY_PRESS_SURFACE_UP ] := loadSurface( "images/up.bmp" );
		if( @key_press_surfaces[ KeyPressSurfaces->KEY_PRESS_SURFACE_UP ] = Nil ) {
			"Failed to load up image!"->ErrorLine();
			success := false;
		};
		
		# Load down surface
		@key_press_surfaces[ KeyPressSurfaces->KEY_PRESS_SURFACE_DOWN ] := loadSurface( "images/down.bmp" );
		if( @key_press_surfaces[ KeyPressSurfaces->KEY_PRESS_SURFACE_DOWN ] = Nil ) {
			"Failed to load down image!"->ErrorLine();
			success := false;
		};
		
		# Load left surface
		@key_press_surfaces[ KeyPressSurfaces->KEY_PRESS_SURFACE_LEFT ] := loadSurface( "images/left.bmp" );
		if( @key_press_surfaces[ KeyPressSurfaces->KEY_PRESS_SURFACE_LEFT ] = Nil ) {
			"Failed to load left image!"->ErrorLine();
			success := false;
		};
		
		# Load right surface
		@key_press_surfaces[ KeyPressSurfaces->KEY_PRESS_SURFACE_RIGHT ] := loadSurface( "images/right.bmp" );
		if( @key_press_surfaces[ KeyPressSurfaces->KEY_PRESS_SURFACE_RIGHT ] = Nil ) {
			"Failed to load right image!"->ErrorLine();
			success := false;
		};
		
		return success;
	}
	
	function : loadSurface(path : String) ~ Surface {
		# Load image at specified path
		loadedSurface := Surface->LoadBMP( path );
		
		optimizedSurface := loadedSurface->Convert( @screen_surface->GetPixelFormat(), 0 );
		
		return loadedSurface;
	}
	
	function : Close() ~ Nil {
		# Deallocate surfaces
		for( i := 0; i < KeyPressSurfaces->KEY_PRESS_SURFACE_TOTAL->As(Int); i++; ) {
			@key_press_surfaces[ i ]->Free();
			@key_press_surfaces[ i ] := Nil;
		};

		# Destroy window
		@window->Destroy();
		@window := Nil;

		# Quit SDL subsystems
		Core->Quit();
	}
}

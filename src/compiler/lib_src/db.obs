use Collection;

bundle TinyDB {
	class Table {
		@name : String;
		@keys : IntMap;
		@column_names : String[];
		@head : Row;
		@tail : Row;
		@count : Int;
		
		New(name : String, column_names : String[]) {
			@name := name;
			@column_names := String->New[column_names->Size() + 1];
			@column_names[0] := "pk";
			each(i : column_names) {
				@column_names[i + 1] := column_names[i];
			};
			@keys := IntMap->New();
		}
		
		method : public : Where(conds : Vector) ~ Vector {
			matches := Vector->New();
			
			row := @head;
			while(row <> Nil) {
				each(j : conds) {
					cond := conds->Get(j)->As(Conditional);
					left := row->Get(cond->GetIndex());
					if(left <> Nil) {
						right := cond->GetValue();
						select(cond->GetQualifier()) {
							label Conditional->Qualifier->EQUAL: {
								if(left->Compare(right) = 0) {
									matches->AddBack(row);
								};			
							}
							
							label Conditional->Qualifier->NOT_EQUAL: {
								if(left->Compare(right) <> 0) {
									matches->AddBack(row);
								};
							}
							
							label Conditional->Qualifier->GREATER: {
								if(left->Compare(right) > 0) {
									matches->AddBack(row);
								};
							}
							
							label Conditional->Qualifier->LESS: {
								if(left->Compare(right) < 0) {
									matches->AddBack(row);
								};
							}
							
							label Conditional->Qualifier->GREATER_EQUAL: {
								if(left->Compare(right) >= 0) {
									matches->AddBack(row);
								};
							}
							
							label Conditional->Qualifier->LESS_EQUAL: {
								if(left->Compare(right) <= 0) {
									matches->AddBack(row);
								};
							}
							
							label Conditional->Qualifier->LIKE: {
							}
						};
					};
				};
				row := row->Next();
			};
			
			return matches;
		}
		
		method : public : Insert() ~ Row {
			pk := IntHolder->New(@count);
			values := Compare->New[@column_names->Size()];
			values[0] := pk;
			row := Row->New(values);
			@keys->Insert(pk->Get(), row);
			@count += 1;
			
			if(@head = Nil) {
				@head := row;
				@tail := row;
			}
			else {
				@tail->Next(row);
				row->Prev(@tail);
				@tail := row;
			};
			
			return row;
		}
		
		method : public : Delete(pk : Int) ~ Bool {
			row := @keys->Find(pk)->As(Row);
			if(row <> Nil) {
				if(row = @head) {
					@head := row->Next();
					row->Next(Nil);
					@head->Prev(Nil);
				}
				else if(row = @tail) {
					@tail := row->Prev();
					row->Prev(Nil);
					@tail->Next(Nil);
				}
				else {
					row->Prev()->Next(row->Next());
					row->Next()->Prev(row->Prev());
					row->Next(Nil);
					row->Prev(Nil);					
				};
				
				@keys->Remove(pk);
				return true;
			};
			
			return false;
		}
		
		method : public : Size() ~ Int {
			return @count;
		}
		
		method : public : ToString() ~ String {
			buffer := "";
			
			row := @head;
			while(row <> Nil) {
				buffer += row->ToString();
				buffer += "\r\n";
				row := row->Next();
			};
			
			return buffer;
		}
	}
	
	class Conditional {
		@index : Int;
		@qualifier : Conditional->Qualifier;
		@value : Compare;
		
		enum Qualifier {
			EQUAL,
			NOT_EQUAL,
			GREATER,
			LESS,
			GREATER_EQUAL,
			LESS_EQUAL,
			LIKE
		}
		
		New(index : Int, qualifier : Conditional->Qualifier, value : Compare) {
			@index := index;
			@qualifier := qualifier;
			@value := value;
		}
		
		method : public : GetQualifier() ~ Qualifier {
			return @qualifier;
		}
		
		method : public : GetValue() ~ Compare {
			return @value;
		}
		
		method : public : GetIndex() ~ Int {
			return @index;
		}
	}
	
	class Row {
		@values : Compare[];
		@next : Row;
		@prev : Row;
		
		New(values : Compare[]) {
			@values := values;
		}
		
		method : public : Get(i : Int) ~ Compare {
			if(i < 0 | i >= @values->Size()) {
				return Nil;
			};
			
			return @values[i];
		}
		
		method : public : Set(i : Int, value : Compare) ~ Bool {
			if(i < 0 | i >= @values->Size()) {
				return false;
			};
			
			@values[i] := value;
			return true;
		}
		
		method : public : Next() ~ Row {
			return @next;
		}
		
		method : public : Next(next : Row) ~ Nil {
			@next := next;
		}
		
		method : public : Prev() ~ Row {
			return @prev;
		}
		
		method : public : Prev(prev : Row) ~ Nil {
			@prev := prev;
		}
		
		method : public : Size() ~ Int {
			return @values->Size();
		}
		
		method : public : Select(indices : Vector) ~ Vector {
			return Nil;
		}
		
		method : public : ToString() ~ String {
			buffer := "";

			each(i : @values) {
				value := @values[i];
				if(value <> Nil) {
					if(value->TypeOf(IntHolder)) {
						buffer += value->As(IntHolder)->Get()->ToString();
					}
					else if(value->TypeOf(FloatHolder)) {
						buffer += value->As(FloatHolder)->Get()->ToString();
					}
					else if(value->TypeOf(String)) {
						buffer += value->As(String);
					}
					else {
						buffer += value->GetClass()->GetName();
					};
				}
				else {
						buffer += "<Nil>";
				};	
					
				if(i + 1 < @values->Size()) {
					buffer += ", ";
				};
			};
			
			return buffer;
		}
	}
}
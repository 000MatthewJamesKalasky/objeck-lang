use Collection;

bundle TinyDB {
	class Table {
		@name : String;
		@index : Int;
		@keys : IntMap;
		@column_names : String[];
		@head : Row;
		@tail : Row;
		@count : Int;
		
		New(name : String, column_names : String[], index : Int) {
			@name := name;
			@index := index;
			@column_names := column_names;
			@keys := IntMap->New();
		}
		
		method : public : Where(conds : Vector) ~ Table {
			return Nil;
		}
		
		method : public : Insert(row : Row) ~ Int {
			if(row->Size() <> @column_names->Size() | @index < 0 | @index >= @column_names->Size()) {
				return -1;
			};
			
			pk := row->Get(@index)->As(IntHolder);
			@keys->Insert(pk->Get(), row);
			
			if(@head = Nil) {
				@head := row;
				@tail := row;
			}
			else {
				@tail->Next(row);
				row->Prev(@tail);
				@tail := row;
			};
			
			@count += 1;
			return @count;
		}
		
		method : public : Delete(pk : Int) ~ Bool {
			row := @keys->Find(pk)->As(Row);
			if(row <> Nil) {
				if(row = @head) {
					@head := row->Next();
					row->Next(Nil);
					@head->Prev(Nil);
				}
				else if(row = @tail) {
					@tail := row->Prev();
					row->Prev(Nil);
					@tail->Next(Nil);
				}
				else {
					row->Prev()->Next(row->Next());
					row->Next()->Prev(row->Prev());
					row->Next(Nil);
					row->Prev(Nil);					
				};
				
				@keys->Remove(pk);
				return true;
			};
			
			return false;
		}
		
		method : public : Count() ~ Int {
			return @count;
		}
		
		method : public : Show() ~ Nil {
#~		
			temp := @head;
			while(temp <> Nil) {
				temp->Show();
				temp := temp->Next();
			};
~#
			temp := @tail;
			while(temp <> Nil) {
				temp->Show();
				temp := temp->Prev();
			};
		}
	}
	
	class Condition {
		enum Qualifier {
			EQUAL,
			NOT_EQUAL,
			GREATER,
			LESS,
			GREATER_EQUAL,
			LESS_EQUAL,
			LIKE
		}
		
		New() {
		}
	}
	
	class Row {
		@values : Compare[];
		@next : Row;
		@prev : Row;
		
		New(values : Compare[], index : Int) {
			@values := values;
		}
		
		method : public : Get(i : Int) ~ Compare {
			if(i < 0 | i >= @values->Size()) {
				return Nil;
			};
			
			return @values[i];
		}
		
		method : public : Set(value : Compare, i : Int) ~ Bool {
			if(i < 0 | i >= @values->Size()) {
				return false;
			};
			
			@values[i] := value;
			return true;
		}
		
		method : public : Next() ~ Row {
			return @next;
		}
		
		method : public : Next(next : Row) ~ Nil {
			@next := next;
		}
		
		method : public : Prev() ~ Row {
			return @prev;
		}
		
		method : public : Prev(prev : Row) ~ Nil {
			@prev := prev;
		}
		
		method : public : Size() ~ Int {
			return @values->Size();
		}
		
		method : public : Show() ~ Nil {
			buffer := "";
			
			each(i : @values) {
				value := @values[i];
				
				if(value->TypeOf(IntHolder)) {
					buffer += value->As(IntHolder)->Get()->ToString();
				}
				else if(value->TypeOf(FloatHolder)) {
					buffer += value->As(FloatHolder)->Get()->ToString();
				}
				else if(value->TypeOf(String)) {
					buffer += value->As(String);
				};
				
				if(i + 1 < @values->Size()) {
					buffer += ", ";
				};
			};
			
			buffer->PrintLine();
		}
	}
}
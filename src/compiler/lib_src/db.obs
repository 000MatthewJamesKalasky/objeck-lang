use Collection;

bundle DB {
	enum Match {
		LESS,
		GREATER,
		LESS_EQUAL,
		GREATER_EQUAL,
		EQUAL,
		NOT_EQUAL,
		LIKE
	}
	
	class Table {
		@column_names : StringMap;
		@rows : List;
		@index_keys : Hash;
		@index : Int;
		
		New(column_names : StringMap, index : Int) {
			@column_names := column_names;
			@rows := List->New();
			@index_keys := Hash->New();
			@index := index;
		}
		
		New(column_names : String[], index : Int) {
			@column_names := StringMap->New();
			@rows := List->New();
			@index_keys := Hash->New();
			@index := index;
			
			each(i : column_names) {
				@column_names->Insert(column_names[i], IntHolder->New(i));
			};
		}
		
		method : public : native : AddRow(row : Row) ~ Bool {
			if(@column_names->Size() <> row->Size()) {
				## TODO: error
				return false;
			};
			
			if(@index_keys->Has(row->Get(@index))) {
				## TODO: error
				return false;
			};
			
			row->SetColumnNames(@column_names);
			@index_keys->Insert(row->Get(@index), row);
			@rows->AddBack(row);
			
			return true;
		}
		
		method : public : Size() ~ Int {
			return @rows->Size();
		}
		
		method : public : Select(value : Compare, type : Match, column : String) ~ Table {
			index := @column_names->Find(column)->As(IntHolder);
			if(index <> Nil) {
				return Select(value, type, index->Get());
			};
			
			return Table->New(@column_names, @index);
		}
		
		method : public : native : Select(value : Compare, type : Match, index : Int) ~ Table {
			matches := Table->New(@column_names, @index);
			
			if(index < 0 | index >= @column_names->Size()) {
				return Nil;
			};		
			
			if(@index = index) {
				row := @index_keys->Find(value)->As(Row);
				if(row <> Nil) {
					matches->AddRow(row);
				};
			}
			else {
				@rows->Rewind();
				while(@rows->More()) {
					row := @rows->Get()->As(Row);
					if(row->Match(value, type, index)) {
						matches->AddRow(row);
					};
					@rows->Next();
				};
			};
			
			return matches;
		}
		
		method : public : Delete(index : Int) ~ Bool {
			return false;
		}
		
		method : public : Delete(column : String) ~ Bool {
			return false;
		}
		
		method : public : More() ~ Bool {
			return @rows->More();
		}
		
		method : public : Next() ~ Nil {
			@rows->Next();
		}
		
		method : public : Get() ~ Row {
			return @rows->Get()->As(Row);
		}
		
		method : public : Rewind() ~ Nil {
			@rows->Rewind();
		}
	}

	class Row from BasicCompare {
		@values : Compare[];
		@column_names : StringMap;

		New(values : Compare[]) {
			Parent();
			@values := values;
		}
		
		method : public : SetColumnNames(column_names : StringMap) ~ Nil {
			@column_names := column_names;
		}
		
		method : public : Size() ~ Int {
			return @values->Size();
		}
		
		method : public : native : Match(right : Compare, type : Match, index : Int) ~ Bool {
			left := @values[index];
			select(type) {
				label Match->LESS: {
					return left->Compare(right) < 0;
				}
				
				label Match->GREATER: {
					return left->Compare(right) > 0;
				}
				
				label Match->LESS_EQUAL: {
					return left->Compare(right) < 0 | left->Compare(right) = 0;
				}
				
				label Match->GREATER_EQUAL: {
					return left->Compare(right) > 0 | left->Compare(right) = 0;
				}
				
				label Match->EQUAL: {
					return left->Compare(right) = 0;
				}
				
				label Match->NOT_EQUAL: {
					return left->Compare(right) <> 0;
				}
				
				## TODO
				label Match->LIKE: {
				}
			};
			
			return false;
		}
		
		method : public : Get(column : String) ~ Compare {
			index := @column_names->Find(column)->As(IntHolder);
			if(index <> Nil) {
				return Get(index->Get());
			};
			
			return Nil;
		}
		
		method : public : Get(index : Int) ~ Compare {
			if(index < 0 | index >= @values->Size()) {
				return Nil;
			};
			
			return @values[index];
		}
		
		method : public : Set(value : Compare, index : Int) ~ Bool {
			if(index < 0 | index >= @values->Size()) {
				return false;
			};
			
			@values[index] := value;
			return true;
		}
		
		method : public : Set(value : Compare, column : String) ~ Bool {
			index := @column_names->Find(column)->As(IntHolder);
			if(index <> Nil) {
				return Set(column, index->Get());
			};
			
			return false;
		}
	}
}
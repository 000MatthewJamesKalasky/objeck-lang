use Collection;
use System.API;

#~
Provides support for SDL
~#
bundle SDL {
	class Proxy {
		@lib_proxy : static : DllProxy;
		
		function : GetDllProxy() ~ DllProxy {
			if(@lib_proxy = Nil) {
				@lib_proxy := DllProxy->New("libobjk_sdl");
			};

			return @lib_proxy;
		}
	}
	
#~	
	consts Flags {
		SDL_INIT_VIDEO := 0x00000020,
		SDL_WINDOW_POS_UNDEFINED := 0x1FFF0000,
		SDL_WINDOW_SHOWN := 0x00000004,
		SDL_QUIT := 0x00000100,
		SDL_KEY_DOWN := 0x00000300
	}
~#	
	
	#~
	Display class
	~#
	class Display {
		function : GetNumVideoDrivers() ~ Int {
			array_args := Base->New[1];
			array_args[0] := IntHolder->New();

			Proxy->GetDllProxy()->CallFunction("sdl_display_get_num_video_drivers", array_args);

			value := array_args[0]->As(IntHolder);
			return value->Get();
		}
		
		function : GetVideoDriver(index : Int) ~ String {
			array_args := Base->New[2];
			array_args[0] := Nil;
			array_args[1] := IntHolder->New(index);

			Proxy->GetDllProxy()->CallFunction("sdl_display_get_video_driver", array_args);

			return array_args[0]->As(String);
		}
		
		function : VideoInit(driver_name : String) ~ Int {
			array_args := Base->New[2];
			array_args[0] := IntHolder->New();
			array_args[1] := driver_name;

			Proxy->GetDllProxy()->CallFunction("sdl_display_video_init", array_args);

			value := array_args[0]->As(IntHolder);
			return value->Get();
		}
		
		function : VideoQuit() ~ Nil {
			array_args := Base->New[0];
			Proxy->GetDllProxy()->CallFunction("sdl_display_video_quit", array_args);
		}
		
		function : GetCurrentVideoDriver() ~ String {
			array_args := Base->New[1];
			array_args[0] := IntHolder->New();

			Proxy->GetDllProxy()->CallFunction("sdl_display_get_current_video_driver", array_args);

			return array_args[0];
		}
		
		function : GetNumVideoDisplays() ~ Int {
			array_args := Base->New[1];
			array_args[0] := IntHolder->New();

			Proxy->GetDllProxy()->CallFunction("sdl_display_get_num_video_displays", array_args);

			value := array_args[0]->As(IntHolder);
			return value->Get();
		}
		
		function : GetDisplayName(displayIndex : Int) ~ String {
			array_args := Base->New[2];
			array_args[0] := IntHolder->New();
			array_args[1] := IntHolder->New(displayIndex);

			Proxy->GetDllProxy()->CallFunction("sdl_display_get_display_name", array_args);

			return array_args[0];
		}
		
		function : GetDisplayBounds(displayIndex : Int, rect : Rect) ~ Int {
			array_args := Base->New[3];
			array_args[0] := IntHolder->New();
			array_args[1] := IntHolder->New(displayIndex);
			array_args[2] := rect;

			Proxy->GetDllProxy()->CallFunction("sdl_display_get_display_bounds", array_args);

			value := array_args[0]->As(IntHolder);
			return value->Get();
		}
		
		function : GetNumDisplayModes(displayIndex : Int) ~ Int {
			array_args := Base->New[2];
			array_args[0] := IntHolder->New();
			array_args[1] := IntHolder->New(displayIndex);

			Proxy->GetDllProxy()->CallFunction("sdl_display_get_num_display_modes", array_args);

			value := array_args[0]->As(IntHolder);
			return value->Get();
		}
		
		function : GetDisplayMode(displayIndex : Int, modeIndex : Int, mode : DisplayMode) ~ Int {
			array_args := Base->New[4];
			array_args[0] := IntHolder->New();
			array_args[1] := IntHolder->New(displayIndex);
			array_args[2] := IntHolder->New(modeIndex);
			array_args[3] := mode;

			Proxy->GetDllProxy()->CallFunction("sdl_display_get_display_mode", array_args);

			value := array_args[0]->As(IntHolder);
			return value->Get();
		}
		
		function : GetCurrentDisplayMode(displayIndex : Int, mode : DisplayMode) ~ Int {
			array_args := Base->New[3];
			array_args[0] := IntHolder->New();
			array_args[1] := IntHolder->New(displayIndex);
			array_args[2] := mode;

			Proxy->GetDllProxy()->CallFunction("sdl_display_get_current_display_mode", array_args);

			value := array_args[0]->As(IntHolder);
			return value->Get();
		}
	}
	
	#~
	Windows class
	~#
	class Window {
		
	}
	
	#~
	Core class
	~#
	class Core {
		function : Init(flags : Int) ~ Int {
			array_args := Base->New[2];
			array_args[0] := IntHolder->New();
			array_args[1] := IntHolder->New(flags);
			
			Proxy->GetDllProxy()->CallFunction("sdl_surface_init", array_args);
			value := array_args[0]->As(IntHolder);
			return value->Get();
		}
		
		function : InitSubSystem(flags : Int) ~ Int {
			array_args := Base->New[2];
			array_args[0] := IntHolder->New();
			array_args[1] := IntHolder->New(flags);
			
			Proxy->GetDllProxy()->CallFunction("sdl_core_init_sub_system", array_args);
			value := array_args[0]->As(IntHolder);
			return value->Get();
		}
		
		function : QuitSubSystem(flags : Int) ~ Nil {
			array_args := Base->New[1];
			array_args[0] := IntHolder->New(flags);
			
			Proxy->GetDllProxy()->CallFunction("sdl_core_quit_sub_system", array_args);
		}
		
		function : WasInit(flags : Int) ~ Int {
			array_args := Base->New[2];
			array_args[0] := IntHolder->New();
			array_args[1] := IntHolder->New(flags);
			
			Proxy->GetDllProxy()->CallFunction("sdl_core_was_init", array_args);
			value := array_args[0]->As(IntHolder);
			return value->Get();
		}
		
		function : Quit() ~ Nil {
			array_args := Base->New[0];
			Proxy->GetDllProxy()->CallFunction("sdl_core_quit", array_args);
		}
	}
	
	#~
	Hints
	~#
	class Hints {
		method : public : SetHintWithPriority(name : String, value : String, priority : HintPriority) ~ Bool {
			array_args := Base->New[4];
			array_args[0] := IntHolder->New();
			array_args[1] := name;
			array_args[2] := value;
			array_args[3] := IntHolder->New(priority->As(Int));
			Proxy->GetDllProxy()->CallFunction("sdl_hints_set_hint_with_priority", array_args);
			
			rvalue := array_args[0]->As(IntHolder);
			return rvalue->Get() = 0 ? false : true;
		}
		
		function : SetHint(name : String, value : String) ~ Bool {
			array_args := Base->New[3];
			array_args[0] := IntHolder->New();
			array_args[1] := name;
			array_args[2] := value;

			Proxy->GetDllProxy()->CallFunction("sdl_hints_set_hint", array_args);

			rvalue := array_args[0]->As(IntHolder);
			return rvalue->Get() = 0 ? false : true;
		}
		
		function : GetHint(name : String) ~ String {
			array_args := Base->New[2];
			array_args[0] := Nil;
			array_args[1] := name;
			
			Proxy->GetDllProxy()->CallFunction("sdl_hints_get_hint", array_args);
			return array_args[0]->As(String);
		}
		
		function : Clear() ~ Nil {
			array_args := Base->New[0];
			@lib_proxy := Proxy->GetDllProxy();
			@lib_proxy->CallFunction("sdl_hints_clear", array_args);

		}
	}
	
	consts HintPriority {
		SDL_HINT_DEFAULT := 0,
		SDL_HINT_NORMAL := 1,
		SDL_HINT_OVERRIDE := 2
	}
	
	##  
	## TODO: SDL_pixels.h; 
	## use SDL_AllocPalette
	##
	class Palette {
		@palette : Int;
		
		New : private (palette : Int) {
			@palette := palette;
		}
	}
	
	##
	## TODO: SDL_video.h
	## use new, delete
	##
	class DisplayMode {
		@display_mode : Int;
		
		New : private (display_mode : Int) {
			@display_mode := display_mode;
		}
	}
	
	class Point {
		@point : Int;
		
		New() {
			array_args := Base->New[1];
			array_args[0] := IntHolder->New();
			Proxy->GetDllProxy()->CallFunction("sdl_point_new", array_args);
			value := array_args[0]->As(IntHolder);
			@point := value->Get();
		}
		
		New : private (point : Int) {
			@point := point;
		}
		
		method : public : Free() ~ Nil {
			if(@point <> 0) {
				array_args := Base->New[1];
				array_args[0] := IntHolder->New(@point);

				Proxy->GetDllProxy()->CallFunction("sdl_point_free", array_args);
				@point := 0;
			};
		}
		
		method : public : GetX() ~ Int {
			array_args := Base->New[2];
			array_args[0] := IntHolder->New();
			array_args[1] := IntHolder->New(@point);
			Proxy->GetDllProxy()->CallFunction("sdl_point_x", array_args);
			value := array_args[0]->As(IntHolder);
			
			return value->Get();
		}
		
		method : public : GetY() ~ Int {
			array_args := Base->New[2];
			array_args[0] := IntHolder->New();
			array_args[1] := IntHolder->New(@point);
			Proxy->GetDllProxy()->CallFunction("sdl_point_y", array_args);
			value := array_args[0]->As(IntHolder);
			
			return value->Get();
		}
	}

	class Rect {
		@rect : Int;
		
		New() {
			array_args := Base->New[1];
			array_args[0] := IntHolder->New();
			Proxy->GetDllProxy()->CallFunction("sdl_rect_new", array_args);
			value := array_args[0]->As(IntHolder);
			@rect := value->Get();
		}
		
		New : private (rect : Int) {
			@rect := rect;
		}
		
		method : public : Free() ~ Nil {
			if(@rect <> 0) {
				array_args := Base->New[1];
				array_args[0] := IntHolder->New(@rect);

				Proxy->GetDllProxy()->CallFunction("sdl_rect_free", array_args);
				@rect := 0;
			};
		}
		
		method : public : GetX() ~ Int {
			array_args := Base->New[2];
			array_args[0] := IntHolder->New();
			array_args[1] := IntHolder->New(@rect);
			Proxy->GetDllProxy()->CallFunction("sdl_rect_x", array_args);
			value := array_args[0]->As(IntHolder);
			
			return value->Get();
		}
		
		method : public : GetY() ~ Int {
			array_args := Base->New[2];
			array_args[0] := IntHolder->New();
			array_args[1] := IntHolder->New(@rect);
			Proxy->GetDllProxy()->CallFunction("sdl_rect_y", array_args);
			value := array_args[0]->As(IntHolder);
			
			return value->Get();
		}
		
		method : public : GetH() ~ Int {
			array_args := Base->New[2];
			array_args[0] := IntHolder->New();
			array_args[1] := IntHolder->New(@rect);
			Proxy->GetDllProxy()->CallFunction("sdl_rect_h", array_args);
			value := array_args[0]->As(IntHolder);
			
			return value->Get();
		}
		
		method : public : GetW() ~ Int {
			array_args := Base->New[2];
			array_args[0] := IntHolder->New();
			array_args[1] := IntHolder->New(@rect);
			Proxy->GetDllProxy()->CallFunction("sdl_rect_w", array_args);
			value := array_args[0]->As(IntHolder);
			
			return value->Get();
		}
		
		method : public : HasIntersection(B : Rect) ~ Bool {
			if(@rect <> 0) {
				array_args := Base->New[3];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@rect);
				array_args[2] := B;

				Proxy->GetDllProxy()->CallFunction("sdl_rect_has_intersection", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get() = 0 ? false : true;
			};
			
			return false;
		}
		
		method : public : Intersect(B : Rect) ~ Rect {
			if(@rect <> 0) {
				array_args := Base->New[4];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@rect);
				array_args[2] := B;

				Proxy->GetDllProxy()->CallFunction("sdl_rect_intersect", array_args);
				
				value := array_args[0]->As(IntHolder);
				return Rect->New(value->Get());
			};
			
			return Nil;
		}
		
		method : public : Union(B : Rect) ~ Rect {
			if(@rect <> 0) {
				array_args := Base->New[4];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@rect);
				array_args[2] := B;

				Proxy->GetDllProxy()->CallFunction("sdl_rect_union", array_args);
				
				value := array_args[0]->As(IntHolder);
				return Rect->New(value->Get());
			};
			
			return Nil;
		}
		
		function : EnclosePoints(points : Point, count : Int, clip : Rect) ~ Rect {
			array_args := Base->New[4];
			array_args[0] := IntHolder->New();
			array_args[1] := points;
			array_args[2] := IntHolder->New(count);
			array_args[3] := clip;

			Proxy->GetDllProxy()->CallFunction("sdl_rect_enclose_points", array_args);

			value := array_args[0]->As(IntHolder);
			return Rect->New(value->Get());
		}
		
		method : public : IntersectAndLine(X1 : IntHolder, Y1 :IntHolder, X2 : IntHolder, Y2 : IntHolder) ~ Bool {
			if(@rect <> 0) {		
				array_args := Base->New[6];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@rect);
				array_args[2] := X1;
				array_args[3] := Y1;
				array_args[4] := X2;
				array_args[5] := Y2;

				Proxy->GetDllProxy()->CallFunction("sdl_rect_intersect_and_line", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get() = 0 ? false : true;
			};
			
			return false;
		}
	}
	
	##
	## TODO: sdl\include\SDL_pixels.h
	## new the struct
	## 
	class PixelFormat {
		@pixel_format : Int;
		New() {}
	}
	
	#~
	Core class
	~#
	class Surface {
		@surface : Int;
		
		New : private (surface : Int) {
			@surface := surface;
		}
		
		New(flags : Int, width : Int, height : Int, depth : Int, Rmask : Int, Gmask : Int, Bmask : Int, Amask : Int) {
			array_args := Base->New[9];
			array_args[0] := IntHolder->New();
			array_args[1] := IntHolder->New(flags);
			array_args[2] := IntHolder->New(width);
			array_args[3] := IntHolder->New(height);
			array_args[4] := IntHolder->New(depth);
			array_args[5] := IntHolder->New(Rmask);
			array_args[6] := IntHolder->New(Gmask);
			array_args[7] := IntHolder->New(Bmask);
			array_args[8] := IntHolder->New(Amask);

			Proxy->GetDllProxy()->CallFunction("sdl_surface_creatergb", array_args);
			value := array_args[0]->As(IntHolder);
			@surface := value->Get();
		}
		
		method : public : Free() ~ Nil {
			if(@surface <> 0) {
				array_args := Base->New[1];
				array_args[0] := IntHolder->New(@surface);

				Proxy->GetDllProxy()->CallFunction("sdl_surface_free", array_args);
				@surface := 0;
			};
		}
		
		method : public : SetPalette(palette : Palette) ~ Int {
			if(@surface <> 0) {
				array_args := Base->New[3];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@surface);
				array_args[2] := palette;

				Proxy->GetDllProxy()->CallFunction("sdl_surface_set_palette", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};
			
			return 0;
		}
		
		method : public : Lock() ~ Int {
			if(@surface <> 0) {
				array_args := Base->New[2];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@surface);

				Proxy->GetDllProxy()->CallFunction("sdl_surface_lock", array_args);
				value := array_args[0]->As(IntHolder);
				return value->Get();
			};
			
			return 0;
		}
		
		method : public : Unlock() ~ Nil {
			if(@surface <> 0) {
				array_args := Base->New[1];
				array_args[0] := IntHolder->New(@surface);
				Proxy->GetDllProxy()->CallFunction("sdl_surface_unlock", array_args);
			};
		}
		
		function : LoadBMP(file : String) ~ Surface {
			array_args := Base->New[2];
			array_args[0] := IntHolder->New();
			array_args[1] := file;

			Proxy->GetDllProxy()->CallFunction("sdl_surface_loadbmp", array_args);
			value := array_args[0]->As(IntHolder);
			return Surface->New(value->Get());
		}
		
		function : SaveBMP(surface : Surface, file : String) ~ Int {
			array_args := Base->New[3];
			array_args[0] := IntHolder->New();
			array_args[1] := surface;
			array_args[2] := file;

			@lib_proxy := Proxy->GetDllProxy();
			@lib_proxy->CallFunction("sdl_surface_savebmp", array_args);

			value := array_args[0]->As(IntHolder);
			return value->Get();
		}
		
		method : public : SetRLE(flag : Int) ~ Int {
			if(@surface <> 0) {
				array_args := Base->New[3];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@surface);
				array_args[2] := IntHolder->New(flag);

				Proxy->GetDllProxy()->CallFunction("sdl_surface_setrle", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};
			
			return 0;
		}
		
		method : public : SetColorKey(flag : Int, key : Int) ~ Int {
			if(@surface <> 0) {
				array_args := Base->New[4];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@surface);
				array_args[2] := IntHolder->New(flag);
				array_args[3] := IntHolder->New(key);

				Proxy->GetDllProxy()->CallFunction("sdl_surface_set_color_key", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};
			
			return 0;
		}
		
		method : public : GetColorKey(key : Int) ~ Int {
			if(@surface <> 0) {
				array_args := Base->New[3];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@surface);
				array_args[2] := IntHolder->New(key);

				Proxy->GetDllProxy()->CallFunction("sdl_surface_get_color_key", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};
			
			return 0;
		}
		
		method : public : SetColorMod(r : Int, g : Int, b : Int) ~ Int {
			if(@surface <> 0) {
				array_args := Base->New[5];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@surface);
				array_args[2] := IntHolder->New(r);
				array_args[3] := IntHolder->New(g);
				array_args[4] := IntHolder->New(b);

				Proxy->GetDllProxy()->CallFunction("sdl_surface_set_color_mod", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};
			
			return 0;
		}
		
		method : public : GetColorMod(r : IntHolder, g : IntHolder, b : IntHolder) ~ Int {
			if(@surface <> 0) {		
				array_args := Base->New[5];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@surface);
				array_args[2] := r;
				array_args[3] := g;
				array_args[4] := b;

				@lib_proxy := Proxy->GetDllProxy();
				@lib_proxy->CallFunction("sdl_surface_get_color_mod", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};
			
			return 0;
		}
		
		method : public : SetAlphaMod(alpha : Int) ~ Int {
			if(@surface <> 0) {
				array_args := Base->New[3];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@surface);
				array_args[2] := IntHolder->New(alpha);

				Proxy->GetDllProxy()->CallFunction("sdl_surface_set_alpha_mod", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};
			
			return 0;
		}
		
		method : public : GetAlphaMod(alpha : Int) ~ Int {
			if(@surface <> 0) {
				array_args := Base->New[3];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@surface);
				array_args[2] := IntHolder->New(alpha);

				Proxy->GetDllProxy()->CallFunction("sdl_surface_get_alpha_mod", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};
			
			return 0;
		}
		
		method : public : SetBlendMode(blendMode : BlendMode) ~ Int {
			if(@surface <> 0) {
				array_args := Base->New[3];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@surface);
				array_args[2] := IntHolder->New(blendMode->As(Int));

				Proxy->GetDllProxy()->CallFunction("sdl_surface_set_blend_mode", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};
			
			return 0;
		}
		
		method : public : GetBlendMode(blendMode : BlendMode) ~ Int {
			if(@surface <> 0) {
				array_args := Base->New[3];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@surface);
				array_args[2] := IntHolder->New(blendMode->As(Int));

				Proxy->GetDllProxy()->CallFunction("sdl_surface_get_blend_mode", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};
			
			return 0;
		}
		
		method : public : GetClipRect(rect : Rect) ~ Nil {
			if(@surface <> 0) {
				array_args := Base->New[2];
				array_args[0] := IntHolder->New(@surface);
				array_args[1] := rect;

				Proxy->GetDllProxy()->CallFunction("sdl_surface_get_clip_rect", array_args);
			};
		}
		
		method : public : SetClipRect(rect : Rect) ~ Bool {
			if(@surface <> 0) {
				array_args := Base->New[3];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@surface);
				array_args[2] := rect;

				Proxy->GetDllProxy()->CallFunction("sdl_surface_set_clip_rect", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get() = 0 ? false : true;
			};
			
			return false;
		}
		
		function : Convert(src : Surface, fmt : PixelFormat, flags : Int) ~ Surface {
			array_args := Base->New[4];
			array_args[0] := IntHolder->New();
			array_args[1] := src;
			array_args[2] := fmt;
			array_args[3] := IntHolder->New(flags);

			Proxy->GetDllProxy()->CallFunction("sdl_surface_convert", array_args);

			value := array_args[0]->As(IntHolder);
			return Surface->New(value->Get());
		}
		
		method : public : FillRect(rect : Rect, color : Int) ~ Int {
			if(@surface <> 0) {
				array_args := Base->New[4];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@surface);
				array_args[2] := rect;
				array_args[3] := IntHolder->New(color);

				Proxy->GetDllProxy()->CallFunction("sdl_surface_fill_rect", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};
			
			return 0;
		}
		
		function : UpperBlit(src : Surface, srcrect : Rect, dst : Surface, dstrect : Rect) ~ Int {
			array_args := Base->New[5];
			array_args[0] := IntHolder->New();
			array_args[1] := src;
			array_args[2] := srcrect;
			array_args[3] := dst;
			array_args[4] := dstrect;

			Proxy->GetDllProxy()->CallFunction("sdl_surface_upper_blit", array_args);

			value := array_args[0]->As(IntHolder);
			return value->Get();
		}
		
		function : LowerBlit(src : Surface, srcrect : Rect, dst : Surface, dstrect : Rect) ~ Int {
			array_args := Base->New[5];
			array_args[0] := IntHolder->New();
			array_args[1] := src;
			array_args[2] := srcrect;
			array_args[3] := dst;
			array_args[4] := dstrect;

			Proxy->GetDllProxy()->CallFunction("sdl_surface_lower_blit", array_args);

			value := array_args[0]->As(IntHolder);
			return value->Get();
		}
		
		function : SoftStretch(src : Surface, srcrect : Rect, dst : Surface, dstrect : Rect) ~ Int {
			array_args := Base->New[5];
			array_args[0] := IntHolder->New();
			array_args[1] := src;
			array_args[2] := srcrect;
			array_args[3] := dst;
			array_args[4] := dstrect;

			@lib_proxy := Proxy->GetDllProxy();
			@lib_proxy->CallFunction("sdl_surface_soft_stretch", array_args);

			value := array_args[0]->As(IntHolder);
			return value->Get();
		}
		
		function : UpperBlitScaled(src : Surface, srcrect : Rect, dst : Surface, dstrect : Rect) ~ Int {
			array_args := Base->New[5];
			array_args[0] := IntHolder->New();
			array_args[1] := src;
			array_args[2] := srcrect;
			array_args[3] := dst;
			array_args[4] := dstrect;

			Proxy->GetDllProxy()->CallFunction("sdl_surface_upper_blit_scaled", array_args);

			value := array_args[0]->As(IntHolder);
			return value->Get();
		}
		
		function : LowerBlitScaled(src : Surface, srcrect : Rect, dst : Surface, dstrect : Rect) ~ Int {
			array_args := Base->New[5];
			array_args[0] := IntHolder->New();
			array_args[1] := src;
			array_args[2] := srcrect;
			array_args[3] := dst;
			array_args[4] := dstrect;

			Proxy->GetDllProxy()->CallFunction("sdl_surface_lower_blit_scaled", array_args);

			value := array_args[0]->As(IntHolder);
			return value->Get();
		}
	}
	
	consts BlendMode {
		SDL_BLENDMODE_NONE := 0x00000000,
		SDL_BLENDMODE_BLEND := 0x00000001,
		SDL_BLENDMODE_ADD := 0x00000002,
		SDL_BLENDMODE_MOD := 0x00000004 
	}
}
use Collection;
use System.API;

#~
Provides support for SDL
~#
bundle SDL {
	class Core {
		@lib_proxy : static : DllProxy;
		
		function : GetDllProxy() ~ DllProxy {
			if(@lib_proxy = Nil) {
				@lib_proxy := DllProxy->New("libobjk_odbc");
			};

			return @lib_proxy;
		}
	}
	
	class SDL {
		function : Init(flag : Int) ~ Int {
			array_args := Base->New[2];
			array_args[0] := IntHolder->New();
			array_args[1] := IntHolder->New(flag);
			@lib_proxy := Proxy->GetDllProxy();
			@lib_proxy->CallFunction("sdl_init", array_args);
			
			value := array_args[0]->As(IntHolder);
			return value->Get();
		}
	}
	
	class Window {
		@window : Int;
		
		New(title : String, x : Int, y : Int, w : Int, h : Int, flags : Int) {
			array_args := Base->New[7];
			array_args[0] := IntHolder->New();
			array_args[1] := title;
			array_args[3] := IntHolder->New(x);
			array_args[4] := IntHolder->New(y);
			array_args[5] := IntHolder->New(h);
			array_args[6] := IntHolder->New(w);
			array_args[7] := IntHolder->New(flags);
			@lib_proxy := Proxy->GetDllProxy();
			@lib_proxy->CallFunction("sdl_create_window", array_args);
			
			value := array_args[0]->As(IntHolder);
			@window := value->Get();
		}
	}
	
	class Surface {
		@surface : Int;
		
		New(window : Window) {
			array_args := Base->New[2];
			array_args[0] := IntHolder->New();
			array_args[1] := window;
			
			@lib_proxy := Proxy->GetDllProxy();
			@lib_proxy->CallFunction("sdl_get_window_surface", array_args);
			
			value := array_args[0]->As(IntHolder);
			@surface := value->Get();
		}
	}
}


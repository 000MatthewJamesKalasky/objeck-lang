use Collection;
use System.API;

#~
Provides support for SDL
~#
bundle SDL {
	class Proxy {
		@lib_proxy : static : DllProxy;
		
		function : GetDllProxy() ~ DllProxy {
			if(@lib_proxy = Nil) {
				@lib_proxy := DllProxy->New("libobjk_sdl");
			};

			return @lib_proxy;
		}
	}
	
	class Flags {
		function : SdlInitVideo() ~ Int {
			return 0x00000020;
		}
		
		function : SdlWindowposUndefined() ~ Int {
			return 0x1FFF0000;
		}
		
		function : SdlWindowShown() ~ Int {
			return 0x00000004;
		}
		
		function : SdlQuit() ~ Int {
			return 0x00000100;
		}
		
		function : SdlKeyDown() ~ Int {
			return 0x00000300;
		}
	}
	
	class Core {
		function : Init(flag : Int) ~ Int {
			array_args := Base->New[2];
			array_args[0] := IntHolder->New();
			array_args[1] := IntHolder->New(flag);
			@lib_proxy := Proxy->GetDllProxy();
			@lib_proxy->CallFunction("sdl_init", array_args);
			
			value := array_args[0]->As(IntHolder);
			return value->Get();
		}
		
		function : GetError() ~ String {
			array_args := Base->New[1];
			array_args[0] := IntHolder->New();
			@lib_proxy := Proxy->GetDllProxy();
			@lib_proxy->CallFunction("sdl_get_error", array_args);
			
			return array_args[0]->As(String);
		}
		
		function : LoadBmp(name : String) ~ Surface {
			array_args := Base->New[2];
			array_args[0] := IntHolder->New();
			array_args[1] := name;
			@lib_proxy := Proxy->GetDllProxy();
			@lib_proxy->CallFunction("sdl_load_bmp", array_args);
			
			value := array_args[0]->As(IntHolder);
			return Surface->New(value->Get());
		}
		
		function : PollEvent(event : Event) ~ Int {
			array_args := Base->New[2];
			array_args[0] := IntHolder->New();
			array_args[1] := event;
			@lib_proxy := Proxy->GetDllProxy();
			@lib_proxy->CallFunction("sdl_poll_event", array_args);
			
			value := array_args[0]->As(IntHolder);
			return value->Get();
		}
		
		function : Quit() ~ Nil {
			@lib_proxy := Proxy->GetDllProxy();
			@lib_proxy->CallFunction("sdl_quit", Nil->As(Base[]));
		}
	}
	
	class Rect {
		@rect : Int;
		
		New() {
		}
		
		method : public : Ok() ~ Bool {
			return @rect <> 0;
		}
	}
	
	class Event {
		@event : Int;
		
		New() {
			array_args := Base->New[1];
			array_args[0] := IntHolder->New();
			@lib_proxy := Proxy->GetDllProxy();
			@lib_proxy->CallFunction("sdl_event_new", array_args);			
			
			value := array_args[0]->As(IntHolder);
			@event := value->Get();
		}
		
		method : public : Type() ~ Int {
			array_args := Base->New[2];
			array_args[0] := IntHolder->New();
			array_args[1] := IntHolder->New(@event);
			@lib_proxy := Proxy->GetDllProxy();
			@lib_proxy->CallFunction("sdl_event_type", array_args);			
			
			value := array_args[0]->As(IntHolder);
			return value->Get();
		}
		
		method : public : GetKeyboardEvent() ~ KeyboardEvent {
			return KeyboardEvent->New(@event);
		}
		
		method : public : Ok() ~ Bool {
			return @event <> 0;
		}
	}
	
	class KeyboardEvent {
		# keyboard
		@type : Int;
		@timestamp : Int;
		@window_id : Int;
		@state : Int;
		@repeat : Int;
		@padding2 : Int;
		@padding3 : Int;
		
		# keycode
		@keysym_scancode : Int;
		@keysym_sym : Int;
		@keysym_mod : Int;
		@keysym_unused : Int;
		
		New(event : Int) {
			array_args := Base->New[12];
			array_args[0] := IntHolder->New(event);
			array_args[1] := IntHolder->New();
			array_args[2] := IntHolder->New();
			array_args[3] := IntHolder->New();
			array_args[4] := IntHolder->New();
			array_args[5] := IntHolder->New();
			array_args[6] := IntHolder->New();
			array_args[7] := IntHolder->New();
			
 			array_args[8] := IntHolder->New();
			array_args[9] := IntHolder->New();
			array_args[10] := IntHolder->New();
			array_args[11] := IntHolder->New();
			
			@lib_proxy := Proxy->GetDllProxy();
			@lib_proxy->CallFunction("sdl_keyboard_event_new", array_args);			
			
			value := array_args[1]->As(IntHolder);
			@type := value->Get();
			
			value := array_args[2]->As(IntHolder);
			@timestamp := value->Get();
			
			value := array_args[3]->As(IntHolder);
			@window_id := value->Get();
			
			value := array_args[4]->As(IntHolder);
			@state := value->Get();
			
			value := array_args[5]->As(IntHolder);
			@repeat := value->Get();
			
			value := array_args[6]->As(IntHolder);
			@padding2 := value->Get();
			
			value := array_args[7]->As(IntHolder);
			@padding3 := value->Get();
			
			value := array_args[8]->As(IntHolder);
			@keysym_scancode := value->Get();
			
			value := array_args[9]->As(IntHolder);
			@keysym_sym := value->Get();
			
			value := array_args[10]->As(IntHolder);
			@keysym_mod := value->Get();
			
			value := array_args[11]->As(IntHolder);
			@keysym_unused := value->Get();
		}
		
		method : public : GetKeySymbol() ~ Int {
			return @keysym_sym;
		}
	}
	
	class Window {
		@window : Int;
		
		New(title : String, x : Int, y : Int, w : Int, h : Int, flags : Int) {
			array_args := Base->New[7];
			array_args[0] := IntHolder->New();
			array_args[1] := title;
			array_args[2] := IntHolder->New(x);
			array_args[3] := IntHolder->New(y);
			array_args[4] := IntHolder->New(w);
			array_args[5] := IntHolder->New(h);
			array_args[6] := IntHolder->New(flags);
			@lib_proxy := Proxy->GetDllProxy();
			@lib_proxy->CallFunction("sdl_create_window", array_args);
			
			value := array_args[0]->As(IntHolder);
			@window := value->Get();
		}
		
		method : public : Ok() ~ Bool {
			return @window <> 0;
		}
		
		method : public : GetSurface() ~ Surface {
			array_args := Base->New[2];
			array_args[0] := IntHolder->New();
			array_args[1] := IntHolder->New(@window);
			@lib_proxy := Proxy->GetDllProxy();
			@lib_proxy->CallFunction("sdl_get_window_surface", array_args);
			
			value := array_args[0]->As(IntHolder);
			return Surface->New(value->Get());
		}
		
		method : public : UpdateSurface() ~ Int {
			array_args := Base->New[2];
			array_args[0] := IntHolder->New();
			array_args[1] := @self;
			@lib_proxy := Proxy->GetDllProxy();
			@lib_proxy->CallFunction("update_window_surface", array_args);
			
			value := array_args[0]->As(IntHolder);
			return value->Get();
		}
		
		method : public : Destroy() ~ Nil {
			array_args := Base->New[1];
			array_args[0] := IntHolder->New(@window);
			@lib_proxy := Proxy->GetDllProxy();
			@lib_proxy->CallFunction("sdl_destroy_window", array_args);
		}
	}
	
	class Surface {
		@surface : Int;
		
		New(surface : Int) {
			@surface := surface;
		}
		
		New(window : Window) {
			array_args := Base->New[2];
			array_args[0] := IntHolder->New();
			array_args[1] := window;
			
			@lib_proxy := Proxy->GetDllProxy();
			@lib_proxy->CallFunction("sdl_get_window_surface", array_args);
			
			value := array_args[0]->As(IntHolder);
			@surface := value->Get();
		}
		
		method : public : Ok() ~ Bool {
			return @surface <> 0;
		}
		
		method : public : Blit(srcrect : Rect, dst : Surface, dstrect : Rect) ~ Int {
			array_args := Base->New[5];
			array_args[0] := IntHolder->New();
			array_args[1] := @self;
			array_args[2] := srcrect;
			array_args[3] := dst;
			array_args[4] := dstrect;
			@lib_proxy := Proxy->GetDllProxy();
			@lib_proxy->CallFunction("blit_surface", array_args);
			
			value := array_args[0]->As(IntHolder);
			return value->Get();
		}
		
		method : public : Free() ~ Nil {
			array_args := Base->New[1];
			array_args[0] := IntHolder->New(@surface);
			@lib_proxy := Proxy->GetDllProxy();
			@lib_proxy->CallFunction("sdl_free_surface", array_args);
		}
	}
}


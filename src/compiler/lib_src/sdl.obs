use Collection;
use System.API;

#~
Provides support for SDL
~#
bundle SDL {
	class Proxy {
		@lib_proxy : static : DllProxy;
		
		function : GetDllProxy() ~ DllProxy {
			if(@lib_proxy = Nil) {
				@lib_proxy := DllProxy->New("libobjk_sdl");
			};

			return @lib_proxy;
		}
	}
	
#~	
	consts Flags {
		SDL_INIT_VIDEO := 0x00000020,
		SDL_WINDOW_POS_UNDEFINED := 0x1FFF0000,
		SDL_WINDOW_SHOWN := 0x00000004,
		SDL_QUIT := 0x00000100,
		SDL_KEY_DOWN := 0x00000300
	}
~#	
	
	class Core {
		function : Init(flags : Int) ~ Int {
			array_args := Base->New[2];
			array_args[0] := IntHolder->New();
			array_args[1] := IntHolder->New(flags);
			
			Proxy->GetDllProxy()->CallFunction("sdl_surface_init", array_args);
			value := array_args[0]->As(IntHolder);
			return value->Get();
		}
		
		function : InitSubSystem(flags : Int) ~ Int {
			array_args := Base->New[2];
			array_args[0] := IntHolder->New();
			array_args[1] := IntHolder->New(flags);
			
			Proxy->GetDllProxy()->CallFunction("sdl_core_init_sub_system", array_args);
			value := array_args[0]->As(IntHolder);
			return value->Get();
		}
		
		function : QuitSubSystem(flags : Int) ~ Nil {
			array_args := Base->New[1];
			array_args[0] := IntHolder->New(flags);
			
			Proxy->GetDllProxy()->CallFunction("sdl_core_quit_sub_system", array_args);
		}
		
		method : public : WasInit(flags : Int) ~ Int {
			array_args := Base->New[2];
			array_args[0] := IntHolder->New();
			array_args[1] := IntHolder->New(flags);
			
			Proxy->GetDllProxy()->CallFunction("sdl_core_was_init", array_args);
			value := array_args[0]->As(IntHolder);
			return value->Get();
		}
		
		method : public : Quit() ~ Nil {
			array_args := Base->New[0];
			Proxy->GetDllProxy()->CallFunction("sdl_core_quit", array_args);
		}
	}
	
	#~
	Hints
	~#
	class Hints {
		method : public : SetHintWithPriority(name : String, value : String, priority : HintPriority) ~ Bool {
			array_args := Base->New[4];
			array_args[0] := IntHolder->New();
			array_args[1] := name;
			array_args[2] := value;
			array_args[3] := IntHolder->New(priority->As(Int));
			Proxy->GetDllProxy()->CallFunction("sdl_hints_set_hint_with_priority", array_args);
			
			rvalue := array_args[0]->As(IntHolder);
			return rvalue->Get() = 0 ? false : true;
		}
		
		method : public : SetHint(name : String, value : String) ~ Bool {
			array_args := Base->New[3];
			array_args[0] := IntHolder->New();
			array_args[1] := name;
			array_args[2] := value;

			Proxy->GetDllProxy()->CallFunction("sdl_hints_set_hint", array_args);

			rvalue := array_args[0]->As(IntHolder);
			return rvalue->Get() = 0 ? false : true;
		}
		
		method : public : GetHint(name : String) ~ String {
			array_args := Base->New[2];
			array_args[0] := Nil;
			array_args[1] := name;
			
			Proxy->GetDllProxy()->CallFunction("sdl_hints_get_hint", array_args);
			return array_args[0]->As(String);
		}
	}
	
	consts HintPriority {
		SDL_HINT_DEFAULT := 0,
		SDL_HINT_NORMAL := 1,
		SDL_HINT_OVERRIDE := 2
	}
}
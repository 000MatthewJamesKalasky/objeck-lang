use Collection;

bundle CSV {
	class CsvRow {
		@columns : String[];
		@index : Int;
		
		New(columns : String[], index : Int) {
			@columns := columns;
			@index := index;
		}
		
		method : public : Get(index : Int) ~ String {
			if(index < @columns->Size()) {
				return @columns[index];
			};
			
			return Nil;
		}
		
		method : public : Size() ~ Int {
			return @columns->Size();
		}
		
		method : public : Apply(f : (String) ~ String) ~ Bool {
			return false;
		}
	}
	
	class CsvTable {
		@row_columns : Vector;
		@is_parsed : Bool;
		
		New(data : String, delim : String) {
			@is_parsed := true;
			rows := data->Split(delim);
			if(rows->Size() > 1) {
				@row_columns := ParseColumns(rows);
				if(@row_columns = Nil) {
					@is_parsed := false;
				};
			}
			else {
				@is_parsed := false;
			};
		}
		
		method : public : native : ParseColumns(rows : String[]) ~ Vector {
			row_columns := Vector->New();
			
			each(i : rows) {
				columns := ParseRow(rows[i]->ReplaceAll("\"\"", "\\u0384"));
				if(columns = Nil) {
					return Nil;
				}
				else {
					row_columns->AddBack(CsvRow->New(columns, i));
				};
			};
			
			return row_columns;
		}
		
		method : public : native : ParseRow(row : String) ~ String[] {
row->PrintLine();		
			return Nil;
		}
		
		method : public : GetRow(index : Int) ~ CsvRow {
			if(<>@is_parsed) {
				return Nil;
			};
			
			return Nil;
		}
		
		method : public : GetColumn(index : Int) ~ CsvRow {
			if(<>@is_parsed) {
				return Nil;
			};
			
			return Nil;
		}
		
		method : public : GetColumn(name : String) ~ CsvRow {
			if(<>@is_parsed) {
				return Nil;
			};
			
			return Nil;
		}
	}
}
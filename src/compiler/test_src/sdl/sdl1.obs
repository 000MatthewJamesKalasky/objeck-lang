use SDL;

class Test {
	# Key press surfaces constants
	enum KeyPressSurfaces {
		KEY_PRESS_SURFACE_DEFAULT,
		KEY_PRESS_SURFACE_UP,
		KEY_PRESS_SURFACE_DOWN,
		KEY_PRESS_SURFACE_LEFT,
		KEY_PRESS_SURFACE_RIGHT,
		KEY_PRESS_SURFACE_TOTAL
	}

	@window : static : Window;
	@screen_surface : static : Surface;
	@x_out : static : Surface;
	gKeyPressSurfaces : static : Surface[];
	
	function : Main(args : String[]) ~ Nil {
		gKeyPressSurfaces := Surface->New[KeyPressSurfaces->KEY_PRESS_SURFACE_TOTAL]; 
	
		# Start up SDL and create window
		if( <>Init() ) {
			"Failed to initialize!"->ErrorLine();
		}
		else {
			# Load media
			if( <>LoadMedia() ) {
				"Failed to load media!"->PrintLine();
			}
			else {			
				# Main loop flag
				quit := false;
				
				# Event handler
				e := Event->New();
				
				# Set default current surface
				gCurrentSurface := gKeyPressSurfaces[ KeyPressSurfaces->KEY_PRESS_SURFACE_DEFAULT ];

				# While application is running
				while( <>quit )
				{
					# Handle events on queue
					while( Core->PollEvent( e ) <> 0 ) {
						# User requests quit
						if( e->Type() = Flags->SdlQuit() ) {
							quit := true;
						}
						# User presses a key
						else if( e->Type() = Flags->SdlKeyDown() ) {
#~						
							# Select surfaces based on key press
							switch( e.key.keysym.sym )
							{
								case SDLK_UP:
								gCurrentSurface = gKeyPressSurfaces[ KEY_PRESS_SURFACE_UP ];
								break;

								case SDLK_DOWN:
								gCurrentSurface = gKeyPressSurfaces[ KEY_PRESS_SURFACE_DOWN ];
								break;

								case SDLK_LEFT:
								gCurrentSurface = gKeyPressSurfaces[ KEY_PRESS_SURFACE_LEFT ];
								break;

								case SDLK_RIGHT:
								gCurrentSurface = gKeyPressSurfaces[ KEY_PRESS_SURFACE_RIGHT ];
								break;

								default:
								gCurrentSurface = gKeyPressSurfaces[ KEY_PRESS_SURFACE_DEFAULT ];
								break;
							}
~#							
						};
					};

					# Apply the image
					@x_out->Blit( Nil, @screen_surface, Nil );
				
					# Update the surface
					@window->UpdateSurface();
				};
			};
		};
		
		Close();
	}
	
	function : Init() ~ Bool {
		# Initialization flag
		success := true;
		
		# Initialize SDL
		if(Core->Init(Flags->SdlInitVideo()) < 0) {
			"SDL could not initialize!"->ErrorLine();
			success := false;
		}
		else {
			# Create window
			@window := Window->New( "SDL Tutorial", Flags->SdlWindowposUndefined(), 
				Flags->SdlWindowposUndefined(), 640, 480, Flags->SdlWindowShown());
			if(<>@window->Ok())	{
				"Window could not be created!"->ErrorLine();
				success := false;
			} 
			else {
				# Get window surface
				@screen_surface := Surface->New(@window);
			};
		};
		
		return success;
	}
	
	function : LoadMedia() ~ Bool {
		success := true;
		
		# Load default surface
		gKeyPressSurfaces[ KeyPressSurfaces->KEY_PRESS_SURFACE_DEFAULT ] := loadSurface( "images/press.bmp" );
		if( gKeyPressSurfaces[ KeyPressSurfaces->KEY_PRESS_SURFACE_DEFAULT ] = Nil ) {
			"Failed to load default image!"->ErrorLine();
			success := false;
		};
		
		# Load up surface
		gKeyPressSurfaces[ KeyPressSurfaces->KEY_PRESS_SURFACE_UP ] := loadSurface( "images/up.bmp" );
		if( gKeyPressSurfaces[ KeyPressSurfaces->KEY_PRESS_SURFACE_UP ] = Nil ) {
			"Failed to load up image!"->ErrorLine();
			success := false;
		};
		
		# Load down surface
		gKeyPressSurfaces[ KeyPressSurfaces->KEY_PRESS_SURFACE_DOWN ] := loadSurface( "images/down.bmp" );
		if( gKeyPressSurfaces[ KeyPressSurfaces->KEY_PRESS_SURFACE_DOWN ] = Nil ) {
			"Failed to load down image!"->ErrorLine();
			success := false;
		};
		
		# Load left surface
		gKeyPressSurfaces[ KeyPressSurfaces->KEY_PRESS_SURFACE_LEFT ] := loadSurface( "images/left.bmp" );
		if( gKeyPressSurfaces[ KeyPressSurfaces->KEY_PRESS_SURFACE_LEFT ] = Nil ) {
			"Failed to load left image!"->ErrorLine();
			success := false;
		};
		
		# Load right surface
		gKeyPressSurfaces[ KeyPressSurfaces->KEY_PRESS_SURFACE_RIGHT ] := loadSurface( "images/right.bmp" );
		if( gKeyPressSurfaces[ KeyPressSurfaces->KEY_PRESS_SURFACE_RIGHT ] = Nil ) {
			"Failed to load right image!"->ErrorLine();
			success := false;
		};
		
		return success;
	}
	
	function : loadSurface(path : String) ~ Surface {
		# Load image at specified path
		loadedSurface := Core->LoadBmp( path );
		if( loadedSurface = Nil ) {
			error := Core->GetError();
			"Unable to load image %s! SDL Error: {$error}"->PrintLine();
		};
		
		return loadedSurface;
	}
	
	function : Close() ~ Nil {
		# Deallocate surfaces
		for( i := 0; i < KeyPressSurfaces->KEY_PRESS_SURFACE_TOTAL->As(Int); i++; ) {
			gKeyPressSurfaces[ i ]->Free();
			gKeyPressSurfaces[ i ] := Nil;
		};

		# Destroy window
		@window->Destroy();
		@window := Nil;

		# Quit SDL subsystems
		Core->Quit();
	}
}

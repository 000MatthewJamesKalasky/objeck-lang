use Collection;

bundle CodeGen {
	#~
	Source emitter
	~#
	class Emitter {
		function : Main(args : String[]) ~ Nil {
			if(args->Size() = 3) {
				this_name := ParseThisName(args[0]);
				template := EmitterTemplate->New();
				tokens := Scanner->New(args[2])->Scan();
				functions := Parser->New(tokens, this_name)->Parse();
				
				this_name->PrintLine();
				functions->Size()->PrintLine();
				each(i : functions) {
					parsed_function := functions->Get(i)->As(ParsedFunction);
					EmitObjeckCode(parsed_function);
				};
			};
		}
		
		function : ParseThisName(name : String) ~ String {
			if(name->StartsWith("SDL_")) {
				name := name->SubString(4, name->Size() - 4);
			};
			
			return name;
		}
		
		
		function : GetTypeString(type : ParsedType) ~ String{
			buffer := "";
			
			select(type->GetType()) {
				label ParsedType->Type->INT: {
					buffer->Append("Int");
				}
				
				label ParsedType->Type->BOOL: {
					buffer->Append("Bool");
				}
				
				label ParsedType->Type->CLASS: {
					buffer->Append(type->GetName());
				}
				
				label ParsedType->Type->VOID_STAR: {
					buffer->Append("Int");
				}
				
				label ParsedType->Type->CHAR_STAR: {
					buffer->Append("String");
				}
				
				label ParsedType->Type->VOID: {
					buffer->Append("Nil");
				}
			};
			
			return buffer;
		}
		
		function : GetParametersString(parameters : ParsedParameters) ~ String {
			buffer := "(";
			
			i := 0;
			if(parameters->Size() > 0) {
				first_parameter := parameters->Get(0);
				if(first_parameter->GetType()->GetType() = ParsedType->Type->CLASS & ParseThisName(GetTypeString(first_parameter->GetType()))->Equals("Window")) {
					i := 1;
				};
			};
			
			for(i := i; i < parameters->Size(); i += 1;) {
				parameter := parameters->Get(i);
				buffer += parameter->GetName();
				buffer += " : ";
				buffer += ParseThisName(GetTypeString(parameter->GetType()));
				
				if(i + 1 < parameters->Size()) {
					buffer += ", ";
				};
			};
			buffer += ")";
			
			return buffer;
		}
		
		function : EmitObjeckCode(parsed_function : ParsedFunction) ~ Nil {
			buffer := "method : public : ";
			buffer += parsed_function->GetObjeckName();
			buffer += GetParametersString(parsed_function->GetParameters());
			buffer += " ~ ";
			buffer += GetTypeString(parsed_function->GetReturnType());
			buffer += " {\n\t";
			
			parameters := parsed_function->GetParameters();
			
			offset := 0;
			if(parsed_function->GetReturnType()->GetType() = ParsedType->Type->VOID) {
				buffer += "array_args := Base->New[";
				buffer += parameters->Size();
				buffer += "];\n";
			}
			else {
				offset := 1;
				buffer += "array_args := Base->New[";
				buffer += parameters->Size() + 1;
				buffer += "];\n\t";
				buffer += "array_args[0] := IntHolder->New()\n";
			};
			
			each(i : parameters) {
				parameter := parameters->Get(i);
				type := parameter->GetType();
				
				if(i = 0) {
					buffer += "\tarray_args[";
					buffer += offset;
					buffer += "] := IntHolder->New(@";
					buffer += parameter->GetName();
					buffer += ");\n";
				}
				else {
					select(type->GetType()) {
						label ParsedType->Type->INT: {
							buffer += "\tarray_args[";
							buffer += offset;
							buffer += "] := IntHolder->New(";
							buffer += parameter->GetName();
							buffer += ");\n";
						}
						
						label ParsedType->Type->BOOL: {
							buffer += "\tarray_args[";
							buffer += offset;
							buffer += "] := IntHolder->New(";
							buffer += parameter->GetName();
							buffer += " ? 0 : 1);\n";
						}
						
						label ParsedType->Type->CLASS:
						label ParsedType->Type->CHAR_STAR: {
							buffer += "\tarray_args[";
							buffer += offset;
							buffer += "] := ";
							buffer += parameter->GetName();
							buffer += ";\n";
						}
						
						label ParsedType->Type->VOID_STAR: {
						}
					};
				};
				offset += 1;
			};
			
			
			buffer += "\n\t@lib_proxy := Proxy->GetDllProxy();\n";
			buffer += "\t@lib_proxy->CallFunction(\"";
			buffer += parsed_function->GetCName();
			buffer += "\", array_args);\n\n";
			
			buffer += "\tvalue := array_args[0]->As(IntHolder);\n";
			buffer += "\treturn value->Get();\n";
		
			buffer += "}\n";
			
			buffer->PrintLine();
		}
	}
	
	class EmitterTemplate {
		@name : String;
		
		New(name : String) {
			@name := name;
		}
	}
}
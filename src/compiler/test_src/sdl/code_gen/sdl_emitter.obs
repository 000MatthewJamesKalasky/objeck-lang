use Collection;

bundle CodeGen {
	#~
	Source emitter
	~#
	class Emitter {
		function : Main(args : String[]) ~ Nil {
			if(args->Size() = 3) {
				this_name := ParseThisName(args[0]);
				template := EmitterTemplate->New();
				tokens := Scanner->New(args[2])->Scan();
				functions := Parser->New(tokens, this_name)->Parse();
				
				this_name->PrintLine();
				functions->Size()->PrintLine();
				each(i : functions) {
					parsed_function := functions->Get(i)->As(ParsedFunction);
					EmitObjeckCode(parsed_function);
				};
			};
		}
		
		function : ParseThisName(name : String) ~ String {
			if(name->StartsWith("SDL_")) {
				name := name->SubString(4, name->Size() - 4);
			};
			
			return name;
		}
		
		
		function : GetTypeString(type : ParsedType) ~ String{
			buffer := "";
			
			select(type->GetType()) {
				label ParsedType->Type->INT: {
					buffer->Append("Int");
				}
				
				label ParsedType->Type->BOOL: {
					buffer->Append("Bool");
				}
				
				label ParsedType->Type->CLASS: {
					buffer->Append(type->GetName());
				}
				
				label ParsedType->Type->VOID_STAR: {
					buffer->Append("Int");
				}
				
				label ParsedType->Type->VOID: {
					buffer->Append("Nil");
				}
			};
			
			return buffer;
		}
		
		function : GetParametersString(parameters : ParsedParameters) ~ String {
			buffer := "(";
			
			buffer += ")";
			
			return buffer;
		}
		
		function : EmitObjeckCode(parsed_function : ParsedFunction) ~ Nil {
			buffer := "method : public : ";
			buffer += parsed_function->GetObjeckName();
			buffer += GetParametersString(parsed_function->GetParameters());
			buffer += " ~ ";
			buffer += GetTypeString(parsed_function->GetReturnType());
			buffer += " {\n\t";
			
			parameters := parsed_function->GetParameters();
			buffer += "array_args := Base->New[";
			buffer += parameters->Size() + 1;
			buffer += "];\n";
			
			buffer += "}\n";
			
			buffer->PrintLine();
		}
	}
	
	class EmitterTemplate {
		@name : String;
		
		New(name : String) {
			@name := name;
		}
	}
}
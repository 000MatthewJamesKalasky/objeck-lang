method : public : CreateRGB(flags : Int, width : Int, height : Int, depth : Int, Rmask : Int, Gmask : Int, Bmask : Int, Amask : Int) ~ Surface {
	array_args := Base->New[9];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(flags);
	array_args[2] := IntHolder->New(width);
	array_args[3] := IntHolder->New(height);
	array_args[4] := IntHolder->New(depth);
	array_args[5] := IntHolder->New(Rmask);
	array_args[6] := IntHolder->New(Gmask);
	array_args[7] := IntHolder->New(Bmask);
	array_args[8] := IntHolder->New(Amask);

	@lib_proxy := Proxy->GetDllProxy();
	@lib_proxy->CallFunction("sdl_surface_creatergb", array_args);

	return array_args[0];
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_surface_creatergb(VMContext& context) {
		const int flags = APITools_GetIntValue(context, 1);
		const int width = APITools_GetIntValue(context, 2);
		const int height = APITools_GetIntValue(context, 3);
		const int depth = APITools_GetIntValue(context, 4);
		const int Rmask = APITools_GetIntValue(context, 5);
		const int Gmask = APITools_GetIntValue(context, 6);
		const int Bmask = APITools_GetIntValue(context, 7);
		const int Amask = APITools_GetIntValue(context, 8);
		const long* return_value = SDL_CreateRGBSurface(flags, width, height, depth, Rmask, Gmask, Bmask, Amask);
		APITools_SetObjectValue(context, 0, (CAST*)return_value);
	}

---
method : public : Free() ~ Nil {
	array_args := Base->New[1];
	array_args[0] := IntHolder->New(@surface);

	@lib_proxy := Proxy->GetDllProxy();
	@lib_proxy->CallFunction("sdl_surface_free", array_args);

}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_surface_free(VMContext& context) {
		SDL_Surface* surface = (SDL_Surface*)APITools_GetIntValue(context, 0);
		SDL_FreeSurface(surface);
	}

---
method : public : SetPalette(palette : Palette) ~ Int {
	array_args := Base->New[3];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@surface);
	array_args[2] := palette;

	@lib_proxy := Proxy->GetDllProxy();
	@lib_proxy->CallFunction("sdl_surface_set_palette", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_surface_set_palette(VMContext& context) {
		SDL_Surface* surface = (SDL_Surface*)APITools_GetIntValue(context, 1);
		const long* palette = (long*)APITools_GetObjectValue(context, 2);
		const int return_value = SDL_SetSurfacePalette(surface, palette);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : Lock() ~ Int {
	array_args := Base->New[2];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@surface);

	@lib_proxy := Proxy->GetDllProxy();
	@lib_proxy->CallFunction("sdl_surface_lock", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_surface_lock(VMContext& context) {
		SDL_Surface* surface = (SDL_Surface*)APITools_GetIntValue(context, 1);
		const int return_value = SDL_LockSurface(surface);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : Unlock() ~ Nil {
	array_args := Base->New[1];
	array_args[0] := IntHolder->New(@surface);

	@lib_proxy := Proxy->GetDllProxy();
	@lib_proxy->CallFunction("sdl_surface_unlock", array_args);

}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_surface_unlock(VMContext& context) {
		SDL_Surface* surface = (SDL_Surface*)APITools_GetIntValue(context, 0);
		SDL_UnlockSurface(surface);
	}

---
method : public : LoadBMPRW(src : RWops, freesrc : Int) ~ Surface {
	array_args := Base->New[3];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(src);
	array_args[2] := IntHolder->New(freesrc);

	@lib_proxy := Proxy->GetDllProxy();
	@lib_proxy->CallFunction("sdl_surface_loadbmprw", array_args);

	return array_args[0];
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_surface_loadbmprw(VMContext& context) {
		const long* src = (long*)APITools_GetObjectValue(context, 1);
		const int freesrc = APITools_GetIntValue(context, 2);
		const long* return_value = SDL_LoadBMP_RW(src, freesrc);
		APITools_SetObjectValue(context, 0, (CAST*)return_value);
	}

===
method : public : SaveBmpRw(dst : RWops, freedst : Int) ~ Int {
	array_args := Base->New[4];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@surface);
	array_args[2] := dst;
	array_args[3] := IntHolder->New(freedst);

	@lib_proxy := Proxy->GetDllProxy();
	@lib_proxy->CallFunction("sdl_surface_save_bmp_rw", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_surface_save_bmp_rw(VMContext& context) {
		SDL_Surface* surface = (SDL_Surface*)APITools_GetIntValue(context, 1);
		const long* dst = (long*)APITools_GetObjectValue(context, 2);
		const int freedst = APITools_GetIntValue(context, 3);
		const int return_value = SDL_SaveBMP_RW(surface, dst, freedst);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : SetRLE(flag : Int) ~ Int {
	array_args := Base->New[3];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@surface);
	array_args[2] := IntHolder->New(flag);

	@lib_proxy := Proxy->GetDllProxy();
	@lib_proxy->CallFunction("sdl_surface_set_rle", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_surface_set_rle(VMContext& context) {
		SDL_Surface* surface = (SDL_Surface*)APITools_GetIntValue(context, 1);
		const int flag = APITools_GetIntValue(context, 2);
		const int return_value = SDL_SetSurfaceRLE(surface, flag);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : SetColorKey(flag : Int, key : Int) ~ Int {
	array_args := Base->New[4];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@surface);
	array_args[2] := IntHolder->New(flag);
	array_args[3] := IntHolder->New(key);

	@lib_proxy := Proxy->GetDllProxy();
	@lib_proxy->CallFunction("sdl_surface_set_color_key", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_surface_set_color_key(VMContext& context) {
		SDL_Surface* surface = (SDL_Surface*)APITools_GetIntValue(context, 1);
		const int flag = APITools_GetIntValue(context, 2);
		const int key = APITools_GetIntValue(context, 3);
		const int return_value = SDL_SetColorKey(surface, flag, key);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : GetColorKey(key : Int) ~ Int {
	array_args := Base->New[3];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@surface);
	array_args[2] := IntHolder->New(key);

	@lib_proxy := Proxy->GetDllProxy();
	@lib_proxy->CallFunction("sdl_surface_get_color_key", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_surface_get_color_key(VMContext& context) {
		SDL_Surface* surface = (SDL_Surface*)APITools_GetIntValue(context, 1);
		const int key = APITools_GetIntValue(context, 2);
		const int return_value = SDL_GetColorKey(surface, key);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : SetColorMod(r : Int, g : Int, b : Int) ~ Int {
	array_args := Base->New[5];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@surface);
	array_args[2] := IntHolder->New(r);
	array_args[3] := IntHolder->New(g);
	array_args[4] := IntHolder->New(b);

	@lib_proxy := Proxy->GetDllProxy();
	@lib_proxy->CallFunction("sdl_surface_set_color_mod", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_surface_set_color_mod(VMContext& context) {
		SDL_Surface* surface = (SDL_Surface*)APITools_GetIntValue(context, 1);
		const int r = APITools_GetIntValue(context, 2);
		const int g = APITools_GetIntValue(context, 3);
		const int b = APITools_GetIntValue(context, 4);
		const int return_value = SDL_SetSurfaceColorMod(surface, r, g, b);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : GetColorMod(r : Int, g : Int, b : Int) ~ Int {
	array_args := Base->New[5];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@surface);
	array_args[2] := IntHolder->New(r);
	array_args[3] := IntHolder->New(g);
	array_args[4] := IntHolder->New(b);

	@lib_proxy := Proxy->GetDllProxy();
	@lib_proxy->CallFunction("sdl_surface_get_color_mod", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_surface_get_color_mod(VMContext& context) {
		SDL_Surface* surface = (SDL_Surface*)APITools_GetIntValue(context, 1);
		const int r = APITools_GetIntValue(context, 2);
		const int g = APITools_GetIntValue(context, 3);
		const int b = APITools_GetIntValue(context, 4);
		const int return_value = SDL_GetSurfaceColorMod(surface, r, g, b);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : SetAlphaMod(alpha : Int) ~ Int {
	array_args := Base->New[3];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@surface);
	array_args[2] := IntHolder->New(alpha);

	@lib_proxy := Proxy->GetDllProxy();
	@lib_proxy->CallFunction("sdl_surface_set_alpha_mod", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_surface_set_alpha_mod(VMContext& context) {
		SDL_Surface* surface = (SDL_Surface*)APITools_GetIntValue(context, 1);
		const int alpha = APITools_GetIntValue(context, 2);
		const int return_value = SDL_SetSurfaceAlphaMod(surface, alpha);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : GetAlphaMod(alpha : Int) ~ Int {
	array_args := Base->New[3];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@surface);
	array_args[2] := IntHolder->New(alpha);

	@lib_proxy := Proxy->GetDllProxy();
	@lib_proxy->CallFunction("sdl_surface_get_alpha_mod", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_surface_get_alpha_mod(VMContext& context) {
		SDL_Surface* surface = (SDL_Surface*)APITools_GetIntValue(context, 1);
		const int alpha = APITools_GetIntValue(context, 2);
		const int return_value = SDL_GetSurfaceAlphaMod(surface, alpha);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : SetBlendMode(blendMode : BlendMode) ~ Int {
	array_args := Base->New[3];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@surface);
	array_args[2] := blendMode;

	@lib_proxy := Proxy->GetDllProxy();
	@lib_proxy->CallFunction("sdl_surface_set_blend_mode", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_surface_set_blend_mode(VMContext& context) {
		SDL_Surface* surface = (SDL_Surface*)APITools_GetIntValue(context, 1);
		const long* blendMode = (long*)APITools_GetObjectValue(context, 2);
		const int return_value = SDL_SetSurfaceBlendMode(surface, blendMode);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : GetBlendMode(blendMode : BlendMode) ~ Int {
	array_args := Base->New[3];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@surface);
	array_args[2] := blendMode;

	@lib_proxy := Proxy->GetDllProxy();
	@lib_proxy->CallFunction("sdl_surface_get_blend_mode", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_surface_get_blend_mode(VMContext& context) {
		SDL_Surface* surface = (SDL_Surface*)APITools_GetIntValue(context, 1);
		const long* blendMode = (long*)APITools_GetObjectValue(context, 2);
		const int return_value = SDL_GetSurfaceBlendMode(surface, blendMode);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : SetClipRect(rect : Rect) ~ Bool {
	array_args := Base->New[3];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@surface);
	array_args[2] := rect;

	@lib_proxy := Proxy->GetDllProxy();
	@lib_proxy->CallFunction("sdl_surface_set_clip_rect", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get() = 0 ? false : true;
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_surface_set_clip_rect(VMContext& context) {
		SDL_Surface* surface = (SDL_Surface*)APITools_GetIntValue(context, 1);
		const long* rect = (long*)APITools_GetObjectValue(context, 2);
		const int return_value = SDL_SetClipRect(surface, rect);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : GetClipRect(rect : Rect) ~ Nil {
	array_args := Base->New[2];
	array_args[0] := IntHolder->New(@surface);
	array_args[1] := rect;

	@lib_proxy := Proxy->GetDllProxy();
	@lib_proxy->CallFunction("sdl_surface_get_clip_rect", array_args);

}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_surface_get_clip_rect(VMContext& context) {
		SDL_Surface* surface = (SDL_Surface*)APITools_GetIntValue(context, 0);
		const long* rect = (long*)APITools_GetObjectValue(context, 1);
		SDL_GetClipRect(surface, rect);
	}

---
method : public : Convert(fmt : PixelFormat, flags : Int) ~ Surface {
	array_args := Base->New[4];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@src);
	array_args[2] := fmt;
	array_args[3] := IntHolder->New(flags);

	@lib_proxy := Proxy->GetDllProxy();
	@lib_proxy->CallFunction("sdl_surface_convert", array_args);

	return array_args[0];
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_surface_convert(VMContext& context) {
		SDL_Surface* src = (SDL_Surface*)APITools_GetIntValue(context, 1);
		const long* fmt = (long*)APITools_GetObjectValue(context, 2);
		const int flags = APITools_GetIntValue(context, 3);
		const long* return_value = SDL_ConvertSurface(src, fmt, flags);
		APITools_SetObjectValue(context, 0, (CAST*)return_value);
	}

---
method : public : ConvertPixels(width : Int, height : Int, src_format : Int, src : Int, src_pitch : Int, dst_format : Int, dst : Int, dst_pitch : Int) ~ Int {
	array_args := Base->New[9];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(width);
	array_args[2] := IntHolder->New(height);
	array_args[3] := IntHolder->New(src_format);
	array_args[5] := IntHolder->New(src_pitch);
	array_args[6] := IntHolder->New(dst_format);
	array_args[8] := IntHolder->New(dst_pitch);

	@lib_proxy := Proxy->GetDllProxy();
	@lib_proxy->CallFunction("sdl_surface_convert_pixels", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_surface_convert_pixels(VMContext& context) {
		const int width = APITools_GetIntValue(context, 1);
		const int height = APITools_GetIntValue(context, 2);
		const int src_format = APITools_GetIntValue(context, 3);
		const int src_pitch = APITools_GetIntValue(context, 5);
		const int dst_format = APITools_GetIntValue(context, 6);
		const int dst_pitch = APITools_GetIntValue(context, 8);
		const int return_value = SDL_ConvertPixels(width, height, src_format, src, src_pitch, dst_format, dst, dst_pitch);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : FillRect(rect : Rect, color : Int) ~ Int {
	array_args := Base->New[4];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@dst);
	array_args[2] := rect;
	array_args[3] := IntHolder->New(color);

	@lib_proxy := Proxy->GetDllProxy();
	@lib_proxy->CallFunction("sdl_surface_fill_rect", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_surface_fill_rect(VMContext& context) {
		SDL_Surface* dst = (SDL_Surface*)APITools_GetIntValue(context, 1);
		const long* rect = (long*)APITools_GetObjectValue(context, 2);
		const int color = APITools_GetIntValue(context, 3);
		const int return_value = SDL_FillRect(dst, rect, color);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : UpperBlit(srcrect : Rect, dst : Surface, dstrect : Rect) ~ Int {
	array_args := Base->New[5];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@src);
	array_args[2] := srcrect;
	array_args[3] := dst;
	array_args[4] := dstrect;

	@lib_proxy := Proxy->GetDllProxy();
	@lib_proxy->CallFunction("sdl_surface_upper_blit", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_surface_upper_blit(VMContext& context) {
		SDL_Surface* src = (SDL_Surface*)APITools_GetIntValue(context, 1);
		const long* srcrect = (long*)APITools_GetObjectValue(context, 2);
		const long* dst = (long*)APITools_GetObjectValue(context, 3);
		const long* dstrect = (long*)APITools_GetObjectValue(context, 4);
		const int return_value = SDL_UpperBlit(src, srcrect, dst, dstrect);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : LowerBlit(srcrect : Rect, dst : Surface, dstrect : Rect) ~ Int {
	array_args := Base->New[5];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@src);
	array_args[2] := srcrect;
	array_args[3] := dst;
	array_args[4] := dstrect;

	@lib_proxy := Proxy->GetDllProxy();
	@lib_proxy->CallFunction("sdl_surface_lower_blit", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_surface_lower_blit(VMContext& context) {
		SDL_Surface* src = (SDL_Surface*)APITools_GetIntValue(context, 1);
		const long* srcrect = (long*)APITools_GetObjectValue(context, 2);
		const long* dst = (long*)APITools_GetObjectValue(context, 3);
		const long* dstrect = (long*)APITools_GetObjectValue(context, 4);
		const int return_value = SDL_LowerBlit(src, srcrect, dst, dstrect);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : SoftStretch(srcrect : Rect, dst : Surface, dstrect : Rect) ~ Int {
	array_args := Base->New[5];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@src);
	array_args[2] := srcrect;
	array_args[3] := dst;
	array_args[4] := dstrect;

	@lib_proxy := Proxy->GetDllProxy();
	@lib_proxy->CallFunction("sdl_surface_soft_stretch", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_surface_soft_stretch(VMContext& context) {
		SDL_Surface* src = (SDL_Surface*)APITools_GetIntValue(context, 1);
		const long* srcrect = (long*)APITools_GetObjectValue(context, 2);
		const long* dst = (long*)APITools_GetObjectValue(context, 3);
		const long* dstrect = (long*)APITools_GetObjectValue(context, 4);
		const int return_value = SDL_SoftStretch(src, srcrect, dst, dstrect);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : UpperBlitScaled(srcrect : Rect, dst : Surface, dstrect : Rect) ~ Int {
	array_args := Base->New[5];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@src);
	array_args[2] := srcrect;
	array_args[3] := dst;
	array_args[4] := dstrect;

	@lib_proxy := Proxy->GetDllProxy();
	@lib_proxy->CallFunction("sdl_surface_upper_blit_scaled", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_surface_upper_blit_scaled(VMContext& context) {
		SDL_Surface* src = (SDL_Surface*)APITools_GetIntValue(context, 1);
		const long* srcrect = (long*)APITools_GetObjectValue(context, 2);
		const long* dst = (long*)APITools_GetObjectValue(context, 3);
		const long* dstrect = (long*)APITools_GetObjectValue(context, 4);
		const int return_value = SDL_UpperBlitScaled(src, srcrect, dst, dstrect);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : LowerBlitScaled(srcrect : Rect, dst : Surface, dstrect : Rect) ~ Int {
	array_args := Base->New[5];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@src);
	array_args[2] := srcrect;
	array_args[3] := dst;
	array_args[4] := dstrect;

	@lib_proxy := Proxy->GetDllProxy();
	@lib_proxy->CallFunction("sdl_surface_lower_blit_scaled", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_surface_lower_blit_scaled(VMContext& context) {
		SDL_Surface* src = (SDL_Surface*)APITools_GetIntValue(context, 1);
		const long* srcrect = (long*)APITools_GetObjectValue(context, 2);
		const long* dst = (long*)APITools_GetObjectValue(context, 3);
		const long* dstrect = (long*)APITools_GetObjectValue(context, 4);
		const int return_value = SDL_LowerBlitScaled(src, srcrect, dst, dstrect);
		APITools_SetIntValue(context, 0, return_value);
	}

---

DISPLAY
----
function : GetNumVideoDrivers() ~ Int {
	array_args := Base->New[1];
	array_args[0] := IntHolder->New();

	Proxy->GetDllProxy()->CallFunction("sdl_display_get_num_video_drivers", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_window_get_num_video_drivers(VMContext& context) {
		const int return_value = SDL_GetNumVideoDrivers();
		APITools_SetIntValue(context, 0, return_value);
	}

---
function : GetVideoDriver(index : Int) ~ String {
	array_args := Base->New[2];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(index);

	Proxy->GetDllProxy()->CallFunction("sdl_display_get_video_driver", array_args);

	return array_args[0];
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_window_get_video_driver(VMContext& context) {
		const int index = APITools_GetIntValue(context, 1);
		const wstring return_value = SDL_GetVideoDriver(index);
		APITools_SetStringValue(context, 0, return_value);
	}

---
function : VideoInit(driver_name : String) ~ Int {
	array_args := Base->New[2];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(driver_name);

	Proxy->GetDllProxy()->CallFunction("sdl_display_video_init", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_window_video_init(VMContext& context) {
		const wstring driver_name = APITools_GetStringValue(context, 1);
		const int return_value = SDL_VideoInit(driver_name);
		APITools_SetIntValue(context, 0, return_value);
	}

---
function : VideoQuit() ~ Nil {
	array_args := Base->New[0];

	Proxy->GetDllProxy()->CallFunction("sdl_display_video_quit", array_args);

}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_window_video_quit(VMContext& context) {
		SDL_VideoQuit();
	}

---
function : GetCurrentVideoDriver() ~ String {
	array_args := Base->New[1];
	array_args[0] := IntHolder->New();

	Proxy->GetDllProxy()->CallFunction("sdl_display_get_current_video_driver", array_args);

	return array_args[0];
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_window_get_current_video_driver(VMContext& context) {
		const wstring return_value = SDL_GetCurrentVideoDriver();
		APITools_SetStringValue(context, 0, return_value);
	}

---
function : GetNumVideoDisplays() ~ Int {
	array_args := Base->New[1];
	array_args[0] := IntHolder->New();

	Proxy->GetDllProxy()->CallFunction("sdl_display_get_num_video_displays", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_window_get_num_video_displays(VMContext& context) {
		const int return_value = SDL_GetNumVideoDisplays();
		APITools_SetIntValue(context, 0, return_value);
	}

---
function : GetDisplayName(displayIndex : Int) ~ String {
	array_args := Base->New[2];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(displayIndex);

	Proxy->GetDllProxy()->CallFunction("sdl_display_get_display_name", array_args);

	return array_args[0];
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_window_get_display_name(VMContext& context) {
		const int displayIndex = APITools_GetIntValue(context, 1);
		const wstring return_value = SDL_GetDisplayName(displayIndex);
		APITools_SetStringValue(context, 0, return_value);
	}

---
function : GetDisplayBounds(displayIndex : Int, rect : Rect) ~ Int {
	array_args := Base->New[3];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(displayIndex);
	array_args[2] := rect;

	Proxy->GetDllProxy()->CallFunction("sdl_display_get_display_bounds", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_window_get_display_bounds(VMContext& context) {
		const int displayIndex = APITools_GetIntValue(context, 1);
		const long* rect = (long*)APITools_GetObjectValue(context, 2);
		const int return_value = SDL_GetDisplayBounds(displayIndex, rect);
		APITools_SetIntValue(context, 0, return_value);
	}

---
function : GetNumDisplayModes(displayIndex : Int) ~ Int {
	array_args := Base->New[2];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(displayIndex);

	Proxy->GetDllProxy()->CallFunction("sdl_display_get_num_display_modes", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_window_get_num_display_modes(VMContext& context) {
		const int displayIndex = APITools_GetIntValue(context, 1);
		const int return_value = SDL_GetNumDisplayModes(displayIndex);
		APITools_SetIntValue(context, 0, return_value);
	}

---
function : GetDisplayMode(displayIndex : Int, modeIndex : Int, mode : DisplayMode) ~ Int {
	array_args := Base->New[4];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(displayIndex);
	array_args[2] := IntHolder->New(modeIndex);
	array_args[3] := mode;

	Proxy->GetDllProxy()->CallFunction("sdl_display_get_display_mode", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_window_get_display_mode(VMContext& context) {
		const int displayIndex = APITools_GetIntValue(context, 1);
		const int modeIndex = APITools_GetIntValue(context, 2);
		const long* mode = (long*)APITools_GetObjectValue(context, 3);
		const int return_value = SDL_GetDisplayMode(displayIndex, modeIndex, mode);
		APITools_SetIntValue(context, 0, return_value);
	}

---
function : GetDesktopDisplayMode(displayIndex : Int, mode : DisplayMode) ~ Int {
	array_args := Base->New[3];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(displayIndex);
	array_args[2] := mode;

	Proxy->GetDllProxy()->CallFunction("sdl_display_get_desktop_display_mode", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_window_get_desktop_display_mode(VMContext& context) {
		const int displayIndex = APITools_GetIntValue(context, 1);
		const long* mode = (long*)APITools_GetObjectValue(context, 2);
		const int return_value = SDL_GetDesktopDisplayMode(displayIndex, mode);
		APITools_SetIntValue(context, 0, return_value);
	}

---
function : GetCurrentDisplayMode(displayIndex : Int, mode : DisplayMode) ~ Int {
	array_args := Base->New[3];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(displayIndex);
	array_args[2] := mode;

	Proxy->GetDllProxy()->CallFunction("sdl_display_get_current_display_mode", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_window_get_current_display_mode(VMContext& context) {
		const int displayIndex = APITools_GetIntValue(context, 1);
		const long* mode = (long*)APITools_GetObjectValue(context, 2);
		const int return_value = SDL_GetCurrentDisplayMode(displayIndex, mode);
		APITools_SetIntValue(context, 0, return_value);
	}

---
function : GetClosestDisplayMode(displayIndex : Int, mode : DisplayMode, closest : DisplayMode) ~ DisplayMode {
	array_args := Base->New[4];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(displayIndex);
	array_args[2] := mode;
	array_args[3] := closest;

	Proxy->GetDllProxy()->CallFunction("sdl_display_get_closest_display_mode", array_args);

	return array_args[0];
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_window_get_closest_display_mode(VMContext& context) {
		const int displayIndex = APITools_GetIntValue(context, 1);
		const long* mode = (long*)APITools_GetObjectValue(context, 2);
		const long* closest = (long*)APITools_GetObjectValue(context, 3);
		const long* return_value = SDL_GetClosestDisplayMode(displayIndex, mode, closest);
		APITools_SetObjectValue(context, 0, (CAST*)return_value);
	}

---






























---
method : public : Create(title : String, x : Int, y : Int, w : Int, h : Int, flags : Int) ~ Window {
	array_args := Base->New[7];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(title);
	array_args[2] := IntHolder->New(x);
	array_args[3] := IntHolder->New(y);
	array_args[4] := IntHolder->New(w);
	array_args[5] := IntHolder->New(h);
	array_args[6] := IntHolder->New(flags);

	Proxy->GetDllProxy()->CallFunction("sdl_window_create", array_args);

	return array_args[0];
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_window_create(VMContext& context) {
		const wstring title = APITools_GetStringValue(context, 1);
		const int x = APITools_GetIntValue(context, 2);
		const int y = APITools_GetIntValue(context, 3);
		const int w = APITools_GetIntValue(context, 4);
		const int h = APITools_GetIntValue(context, 5);
		const int flags = APITools_GetIntValue(context, 6);
		const long* return_value = SDL_CreateWindow(title, x, y, w, h, flags);
		APITools_SetObjectValue(context, 0, (CAST*)return_value);
	}

---
method : public : GetDisplayIndex() ~ Int {
	array_args := Base->New[2];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@window);

	Proxy->GetDllProxy()->CallFunction("sdl_window_get_display_index", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_window_get_display_index(VMContext& context) {
		SDL_Window* window = (SDL_Window*)APITools_GetIntValue(context, 1);
		const int return_value = SDL_GetWindowDisplayIndex(window);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : SetDisplayMode(mode : DisplayMode) ~ Int {
	array_args := Base->New[3];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@window);
	array_args[2] := mode;

	Proxy->GetDllProxy()->CallFunction("sdl_window_set_display_mode", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_window_set_display_mode(VMContext& context) {
		SDL_Window* window = (SDL_Window*)APITools_GetIntValue(context, 1);
		const long* mode = (long*)APITools_GetObjectValue(context, 2);
		const int return_value = SDL_SetWindowDisplayMode(window, mode);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : GetDisplayMode(mode : DisplayMode) ~ Int {
	array_args := Base->New[3];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@window);
	array_args[2] := mode;

	Proxy->GetDllProxy()->CallFunction("sdl_window_get_display_mode", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_window_get_display_mode(VMContext& context) {
		SDL_Window* window = (SDL_Window*)APITools_GetIntValue(context, 1);
		const long* mode = (long*)APITools_GetObjectValue(context, 2);
		const int return_value = SDL_GetWindowDisplayMode(window, mode);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : GetPixelFormat() ~ Int {
	array_args := Base->New[2];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@window);

	Proxy->GetDllProxy()->CallFunction("sdl_window_get_pixel_format", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_window_get_pixel_format(VMContext& context) {
		SDL_Window* window = (SDL_Window*)APITools_GetIntValue(context, 1);
		const int return_value = SDL_GetWindowPixelFormat(window);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : GetID() ~ Int {
	array_args := Base->New[2];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@window);

	Proxy->GetDllProxy()->CallFunction("sdl_window_getid", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_window_getid(VMContext& context) {
		SDL_Window* window = (SDL_Window*)APITools_GetIntValue(context, 1);
		const int return_value = SDL_GetWindowID(window);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : GetFromID(id : Int) ~ Window {
	array_args := Base->New[2];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(id);

	Proxy->GetDllProxy()->CallFunction("sdl_window_get_fromid", array_args);

	return array_args[0];
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_window_get_fromid(VMContext& context) {
		const int id = APITools_GetIntValue(context, 1);
		const long* return_value = SDL_GetWindowFromID(id);
		APITools_SetObjectValue(context, 0, (CAST*)return_value);
	}

---
method : public : GetFlags() ~ Int {
	array_args := Base->New[2];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@window);

	Proxy->GetDllProxy()->CallFunction("sdl_window_get_flags", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_window_get_flags(VMContext& context) {
		SDL_Window* window = (SDL_Window*)APITools_GetIntValue(context, 1);
		const int return_value = SDL_GetWindowFlags(window);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : SetTitle(title : String) ~ Nil {
	array_args := Base->New[2];
	array_args[0] := IntHolder->New(@window);
	array_args[1] := title;

	Proxy->GetDllProxy()->CallFunction("sdl_window_set_title", array_args);

}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_window_set_title(VMContext& context) {
		SDL_Window* window = (SDL_Window*)APITools_GetIntValue(context, 0);
		const wstring title = APITools_GetStringValue(context, 1);
		SDL_SetWindowTitle(window, title);
	}

---
method : public : GetTitle() ~ String {
	array_args := Base->New[2];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@window);

	Proxy->GetDllProxy()->CallFunction("sdl_window_get_title", array_args);

	return array_args[0];
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_window_get_title(VMContext& context) {
		SDL_Window* window = (SDL_Window*)APITools_GetIntValue(context, 1);
		const wstring return_value = SDL_GetWindowTitle(window);
		APITools_SetStringValue(context, 0, return_value);
	}

---
method : public : SetIcon(icon : Surface) ~ Nil {
	array_args := Base->New[2];
	array_args[0] := IntHolder->New(@window);
	array_args[1] := icon;

	Proxy->GetDllProxy()->CallFunction("sdl_window_set_icon", array_args);

}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_window_set_icon(VMContext& context) {
		SDL_Window* window = (SDL_Window*)APITools_GetIntValue(context, 0);
		const long* icon = (long*)APITools_GetObjectValue(context, 1);
		SDL_SetWindowIcon(window, icon);
	}

---
method : public : SetPosition(x : Int, y : Int) ~ Nil {
	array_args := Base->New[3];
	array_args[0] := IntHolder->New(@window);
	array_args[1] := IntHolder->New(x);
	array_args[2] := IntHolder->New(y);

	Proxy->GetDllProxy()->CallFunction("sdl_window_set_position", array_args);

}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_window_set_position(VMContext& context) {
		SDL_Window* window = (SDL_Window*)APITools_GetIntValue(context, 0);
		const int x = APITools_GetIntValue(context, 1);
		const int y = APITools_GetIntValue(context, 2);
		SDL_SetWindowPosition(window, x, y);
	}

---
method : public : GetPosition(x : Int, y : Int) ~ Nil {
	array_args := Base->New[3];
	array_args[0] := IntHolder->New(@window);
	array_args[1] := IntHolder->New(x);
	array_args[2] := IntHolder->New(y);

	Proxy->GetDllProxy()->CallFunction("sdl_window_get_position", array_args);

}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_window_get_position(VMContext& context) {
		SDL_Window* window = (SDL_Window*)APITools_GetIntValue(context, 0);
		const int x = APITools_GetIntValue(context, 1);
		const int y = APITools_GetIntValue(context, 2);
		SDL_GetWindowPosition(window, x, y);
	}

---
method : public : SetSize(w : Int, h : Int) ~ Nil {
	array_args := Base->New[3];
	array_args[0] := IntHolder->New(@window);
	array_args[1] := IntHolder->New(w);
	array_args[2] := IntHolder->New(h);

	Proxy->GetDllProxy()->CallFunction("sdl_window_set_size", array_args);

}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_window_set_size(VMContext& context) {
		SDL_Window* window = (SDL_Window*)APITools_GetIntValue(context, 0);
		const int w = APITools_GetIntValue(context, 1);
		const int h = APITools_GetIntValue(context, 2);
		SDL_SetWindowSize(window, w, h);
	}

---
method : public : GetSize(w : Int, h : Int) ~ Nil {
	array_args := Base->New[3];
	array_args[0] := IntHolder->New(@window);
	array_args[1] := IntHolder->New(w);
	array_args[2] := IntHolder->New(h);

	Proxy->GetDllProxy()->CallFunction("sdl_window_get_size", array_args);

}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_window_get_size(VMContext& context) {
		SDL_Window* window = (SDL_Window*)APITools_GetIntValue(context, 0);
		const int w = APITools_GetIntValue(context, 1);
		const int h = APITools_GetIntValue(context, 2);
		SDL_GetWindowSize(window, w, h);
	}

---
method : public : SetMinimumSize(min_w : Int, min_h : Int) ~ Nil {
	array_args := Base->New[3];
	array_args[0] := IntHolder->New(@window);
	array_args[1] := IntHolder->New(min_w);
	array_args[2] := IntHolder->New(min_h);

	Proxy->GetDllProxy()->CallFunction("sdl_window_set_minimum_size", array_args);

}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_window_set_minimum_size(VMContext& context) {
		SDL_Window* window = (SDL_Window*)APITools_GetIntValue(context, 0);
		const int min_w = APITools_GetIntValue(context, 1);
		const int min_h = APITools_GetIntValue(context, 2);
		SDL_SetWindowMinimumSize(window, min_w, min_h);
	}

---
method : public : GetMinimumSize(w : Int, h : Int) ~ Nil {
	array_args := Base->New[3];
	array_args[0] := IntHolder->New(@window);
	array_args[1] := IntHolder->New(w);
	array_args[2] := IntHolder->New(h);

	Proxy->GetDllProxy()->CallFunction("sdl_window_get_minimum_size", array_args);

}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_window_get_minimum_size(VMContext& context) {
		SDL_Window* window = (SDL_Window*)APITools_GetIntValue(context, 0);
		const int w = APITools_GetIntValue(context, 1);
		const int h = APITools_GetIntValue(context, 2);
		SDL_GetWindowMinimumSize(window, w, h);
	}

---
method : public : SetMaximumSize(max_w : Int, max_h : Int) ~ Nil {
	array_args := Base->New[3];
	array_args[0] := IntHolder->New(@window);
	array_args[1] := IntHolder->New(max_w);
	array_args[2] := IntHolder->New(max_h);

	Proxy->GetDllProxy()->CallFunction("sdl_window_set_maximum_size", array_args);

}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_window_set_maximum_size(VMContext& context) {
		SDL_Window* window = (SDL_Window*)APITools_GetIntValue(context, 0);
		const int max_w = APITools_GetIntValue(context, 1);
		const int max_h = APITools_GetIntValue(context, 2);
		SDL_SetWindowMaximumSize(window, max_w, max_h);
	}

---
method : public : GetMaximumSize(w : Int, h : Int) ~ Nil {
	array_args := Base->New[3];
	array_args[0] := IntHolder->New(@window);
	array_args[1] := IntHolder->New(w);
	array_args[2] := IntHolder->New(h);

	Proxy->GetDllProxy()->CallFunction("sdl_window_get_maximum_size", array_args);

}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_window_get_maximum_size(VMContext& context) {
		SDL_Window* window = (SDL_Window*)APITools_GetIntValue(context, 0);
		const int w = APITools_GetIntValue(context, 1);
		const int h = APITools_GetIntValue(context, 2);
		SDL_GetWindowMaximumSize(window, w, h);
	}

---
method : public : SetBordered(bordered : Bool) ~ Nil {
	array_args := Base->New[2];
	array_args[0] := IntHolder->New(@window);
	array_args[1] := IntHolder->New(bordered ? 0 : 1);

	Proxy->GetDllProxy()->CallFunction("sdl_window_set_bordered", array_args);

}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_window_set_bordered(VMContext& context) {
		SDL_Window* window = (SDL_Window*)APITools_GetIntValue(context, 0);
		const int bordered = APITools_GetIntValue(context, 1);
		SDL_SetWindowBordered(window, bordered);
	}

---
method : public : Show() ~ Nil {
	array_args := Base->New[1];
	array_args[0] := IntHolder->New(@window);

	Proxy->GetDllProxy()->CallFunction("sdl_window_show", array_args);

}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_window_show(VMContext& context) {
		SDL_Window* window = (SDL_Window*)APITools_GetIntValue(context, 0);
		SDL_ShowWindow(window);
	}

---
method : public : Hide() ~ Nil {
	array_args := Base->New[1];
	array_args[0] := IntHolder->New(@window);

	Proxy->GetDllProxy()->CallFunction("sdl_window_hide", array_args);

}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_window_hide(VMContext& context) {
		SDL_Window* window = (SDL_Window*)APITools_GetIntValue(context, 0);
		SDL_HideWindow(window);
	}

---
method : public : Raise() ~ Nil {
	array_args := Base->New[1];
	array_args[0] := IntHolder->New(@window);

	Proxy->GetDllProxy()->CallFunction("sdl_window_raise", array_args);

}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_window_raise(VMContext& context) {
		SDL_Window* window = (SDL_Window*)APITools_GetIntValue(context, 0);
		SDL_RaiseWindow(window);
	}

---
method : public : Maximize() ~ Nil {
	array_args := Base->New[1];
	array_args[0] := IntHolder->New(@window);

	Proxy->GetDllProxy()->CallFunction("sdl_window_maximize", array_args);

}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_window_maximize(VMContext& context) {
		SDL_Window* window = (SDL_Window*)APITools_GetIntValue(context, 0);
		SDL_MaximizeWindow(window);
	}

---
method : public : Minimize() ~ Nil {
	array_args := Base->New[1];
	array_args[0] := IntHolder->New(@window);

	Proxy->GetDllProxy()->CallFunction("sdl_window_minimize", array_args);

}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_window_minimize(VMContext& context) {
		SDL_Window* window = (SDL_Window*)APITools_GetIntValue(context, 0);
		SDL_MinimizeWindow(window);
	}

---
method : public : Restore() ~ Nil {
	array_args := Base->New[1];
	array_args[0] := IntHolder->New(@window);

	Proxy->GetDllProxy()->CallFunction("sdl_window_restore", array_args);

}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_window_restore(VMContext& context) {
		SDL_Window* window = (SDL_Window*)APITools_GetIntValue(context, 0);
		SDL_RestoreWindow(window);
	}

---
method : public : SetFullscreen(flags : Int) ~ Int {
	array_args := Base->New[3];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@window);
	array_args[2] := IntHolder->New(flags);

	Proxy->GetDllProxy()->CallFunction("sdl_window_set_fullscreen", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_window_set_fullscreen(VMContext& context) {
		SDL_Window* window = (SDL_Window*)APITools_GetIntValue(context, 1);
		const int flags = APITools_GetIntValue(context, 2);
		const int return_value = SDL_SetWindowFullscreen(window, flags);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : GetSurface() ~ Surface {
	array_args := Base->New[2];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@window);

	Proxy->GetDllProxy()->CallFunction("sdl_window_get_surface", array_args);

	return array_args[0];
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_window_get_surface(VMContext& context) {
		SDL_Window* window = (SDL_Window*)APITools_GetIntValue(context, 1);
		const long* return_value = SDL_GetWindowSurface(window);
		APITools_SetObjectValue(context, 0, (CAST*)return_value);
	}

---
method : public : UpdateSurface() ~ Int {
	array_args := Base->New[2];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@window);

	Proxy->GetDllProxy()->CallFunction("sdl_window_update_surface", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_window_update_surface(VMContext& context) {
		SDL_Window* window = (SDL_Window*)APITools_GetIntValue(context, 1);
		const int return_value = SDL_UpdateWindowSurface(window);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : UpdateSurfaceRects(rects : Rect, numrects : Int) ~ Int {
	array_args := Base->New[4];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@window);
	array_args[2] := rects;
	array_args[3] := IntHolder->New(numrects);

	Proxy->GetDllProxy()->CallFunction("sdl_window_update_surface_rects", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_window_update_surface_rects(VMContext& context) {
		SDL_Window* window = (SDL_Window*)APITools_GetIntValue(context, 1);
		const long* rects = (long*)APITools_GetObjectValue(context, 2);
		const int numrects = APITools_GetIntValue(context, 3);
		const int return_value = SDL_UpdateWindowSurfaceRects(window, rects, numrects);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : SetGrab(grabbed : Bool) ~ Nil {
	array_args := Base->New[2];
	array_args[0] := IntHolder->New(@window);
	array_args[1] := IntHolder->New(grabbed ? 0 : 1);

	Proxy->GetDllProxy()->CallFunction("sdl_window_set_grab", array_args);

}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_window_set_grab(VMContext& context) {
		SDL_Window* window = (SDL_Window*)APITools_GetIntValue(context, 0);
		const int grabbed = APITools_GetIntValue(context, 1);
		SDL_SetWindowGrab(window, grabbed);
	}

---
method : public : GetGrab() ~ Bool {
	array_args := Base->New[2];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@window);

	Proxy->GetDllProxy()->CallFunction("sdl_window_get_grab", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get() = 0 ? false : true;
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_window_get_grab(VMContext& context) {
		SDL_Window* window = (SDL_Window*)APITools_GetIntValue(context, 1);
		const int return_value = SDL_GetWindowGrab(window);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : SetBrightness(brightness : float) ~ Int {
	array_args := Base->New[3];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@window);
	array_args[2] := brightness;

	Proxy->GetDllProxy()->CallFunction("sdl_window_set_brightness", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_window_set_brightness(VMContext& context) {
		SDL_Window* window = (SDL_Window*)APITools_GetIntValue(context, 1);
		const long* brightness = (long*)APITools_GetObjectValue(context, 2);
		const int return_value = SDL_SetWindowBrightness(window, brightness);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : GetBrightness() ~ float {
	array_args := Base->New[2];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@window);

	Proxy->GetDllProxy()->CallFunction("sdl_window_get_brightness", array_args);

	return array_args[0];
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_window_get_brightness(VMContext& context) {
		SDL_Window* window = (SDL_Window*)APITools_GetIntValue(context, 1);
		const long* return_value = SDL_GetWindowBrightness(window);
		APITools_SetObjectValue(context, 0, (CAST*)return_value);
	}

---
method : public : SetGammaRamp(red : Int, green : Int, blue : Int) ~ Int {
	array_args := Base->New[5];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@window);
	array_args[2] := IntHolder->New(red);
	array_args[3] := IntHolder->New(green);
	array_args[4] := IntHolder->New(blue);

	Proxy->GetDllProxy()->CallFunction("sdl_window_set_gamma_ramp", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_window_set_gamma_ramp(VMContext& context) {
		SDL_Window* window = (SDL_Window*)APITools_GetIntValue(context, 1);
		const int red = APITools_GetIntValue(context, 2);
		const int green = APITools_GetIntValue(context, 3);
		const int blue = APITools_GetIntValue(context, 4);
		const int return_value = SDL_SetWindowGammaRamp(window, red, green, blue);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : GetGammaRamp(red : Int, green : Int, blue : Int) ~ Int {
	array_args := Base->New[5];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@window);
	array_args[2] := IntHolder->New(red);
	array_args[3] := IntHolder->New(green);
	array_args[4] := IntHolder->New(blue);

	Proxy->GetDllProxy()->CallFunction("sdl_window_get_gamma_ramp", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_window_get_gamma_ramp(VMContext& context) {
		SDL_Window* window = (SDL_Window*)APITools_GetIntValue(context, 1);
		const int red = APITools_GetIntValue(context, 2);
		const int green = APITools_GetIntValue(context, 3);
		const int blue = APITools_GetIntValue(context, 4);
		const int return_value = SDL_GetWindowGammaRamp(window, red, green, blue);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : Destroy() ~ Nil {
	array_args := Base->New[1];
	array_args[0] := IntHolder->New(@window);

	Proxy->GetDllProxy()->CallFunction("sdl_window_destroy", array_args);

}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_window_destroy(VMContext& context) {
		SDL_Window* window = (SDL_Window*)APITools_GetIntValue(context, 0);
		SDL_DestroyWindow(window);
	}

---
method : public : IsScreenSaverEnabled() ~ Bool {
	array_args := Base->New[1];
	array_args[0] := IntHolder->New();

	Proxy->GetDllProxy()->CallFunction("sdl_window_is_screen_saver_enabled", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get() = 0 ? false : true;
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_window_is_screen_saver_enabled(VMContext& context) {
		const int return_value = SDL_IsScreenSaverEnabled();
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : EnableScreenSaver() ~ Nil {
	array_args := Base->New[0];

	Proxy->GetDllProxy()->CallFunction("sdl_window_enable_screen_saver", array_args);

}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_window_enable_screen_saver(VMContext& context) {
		SDL_EnableScreenSaver();
	}

---
method : public : DisableScreenSaver() ~ Nil {
	array_args := Base->New[0];

	Proxy->GetDllProxy()->CallFunction("sdl_window_disable_screen_saver", array_args);

}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_window_disable_screen_saver(VMContext& context) {
		SDL_DisableScreenSaver();
	}

---
method : public : GLLoadLibrary(path : String) ~ Int {
	array_args := Base->New[2];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(path);

	Proxy->GetDllProxy()->CallFunction("sdl_window_gl_load_library", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_window_gl_load_library(VMContext& context) {
		const wstring path = APITools_GetStringValue(context, 1);
		const int return_value = SDL_GL_LoadLibrary(path);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : GLGetProcAddress(proc : String) ~ Int {
	array_args := Base->New[2];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(proc);

	Proxy->GetDllProxy()->CallFunction("sdl_window_gl_get_proc_address", array_args);

}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_window_gl_get_proc_address(VMContext& context) {
		const wstring proc = APITools_GetStringValue(context, 1);
	}

---
method : public : GLUnloadLibrary() ~ Nil {
	array_args := Base->New[0];

	Proxy->GetDllProxy()->CallFunction("sdl_window_gl_unload_library", array_args);

}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_window_gl_unload_library(VMContext& context) {
		SDL_GL_UnloadLibrary();
	}

---
method : public : GLExtensionSupported(extension : String) ~ Bool {
	array_args := Base->New[2];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(extension);

	Proxy->GetDllProxy()->CallFunction("sdl_core_gl_extension_supported", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get() = 0 ? false : true;
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_core_gl_extension_supported(VMContext& context) {
		const wstring extension = APITools_GetStringValue(context, 1);
		const int return_value = SDL_GL_ExtensionSupported(extension);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : GLResetAttributes() ~ Nil {
	array_args := Base->New[0];

	Proxy->GetDllProxy()->CallFunction("sdl_window_gl_reset_attributes", array_args);

}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_window_gl_reset_attributes(VMContext& context) {
		SDL_GL_ResetAttributes();
	}

---
method : public : GLSetAttribute(attr : GLattr, value : Int) ~ Int {
	array_args := Base->New[3];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(attr);
	array_args[2] := IntHolder->New(value);

	Proxy->GetDllProxy()->CallFunction("sdl_core_gl_set_attribute", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_core_gl_set_attribute(VMContext& context) {
		const long* attr = (long*)APITools_GetObjectValue(context, 1);
		const int value = APITools_GetIntValue(context, 2);
		const int return_value = SDL_GL_SetAttribute(attr, value);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : GLGetAttribute(attr : GLattr, value : Int) ~ Int {
	array_args := Base->New[3];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(attr);
	array_args[2] := IntHolder->New(value);

	Proxy->GetDllProxy()->CallFunction("sdl_core_gl_get_attribute", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_core_gl_get_attribute(VMContext& context) {
		const long* attr = (long*)APITools_GetObjectValue(context, 1);
		const int value = APITools_GetIntValue(context, 2);
		const int return_value = SDL_GL_GetAttribute(attr, value);
		APITools_SetIntValue(context, 0, return_value);
	}

---
====================
method : public : GLCreateContext() ~ GLContext {
	array_args := Base->New[2];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@window);

	Proxy->GetDllProxy()->CallFunction("sdl_core_gl_create_context", array_args);

	return array_args[0];
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_core_gl_create_context(VMContext& context) {
		SDL_Window* window = (SDL_Window*)APITools_GetIntValue(context, 1);
		const long* return_value = SDL_GL_CreateContext(window);
		APITools_SetObjectValue(context, 0, (CAST*)return_value);
	}

---
method : public : GLMakeCurrent(context : GLContext) ~ Int {
	array_args := Base->New[3];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@window);
	array_args[2] := context;

	Proxy->GetDllProxy()->CallFunction("sdl_core_gl_make_current", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_core_gl_make_current(VMContext& context) {
		SDL_Window* window = (SDL_Window*)APITools_GetIntValue(context, 1);
		const long* context = (long*)APITools_GetObjectValue(context, 2);
		const int return_value = SDL_GL_MakeCurrent(window, context);
		APITools_SetIntValue(context, 0, return_value);
	}

---
############### 0
method : public : GLGetCurrent() ~ Window {
	array_args := Base->New[1];
	array_args[0] := IntHolder->New();

	Proxy->GetDllProxy()->CallFunction("sdl_core_gl_get_current", array_args);

	return array_args[0];
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_core_gl_get_current(VMContext& context) {
		const long* return_value = SDL_GL_GetCurrentWindow();
		APITools_SetObjectValue(context, 0, (CAST*)return_value);
	}

---
method : public : GLGetCurrentContext() ~ GLContext {
	array_args := Base->New[1];
	array_args[0] := IntHolder->New();

	Proxy->GetDllProxy()->CallFunction("sdl_core_gl_get_current_context", array_args);

	return array_args[0];
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_core_gl_get_current_context(VMContext& context) {
		const long* return_value = SDL_GL_GetCurrentContext();
		APITools_SetObjectValue(context, 0, (CAST*)return_value);
	}

---
###############
method : public : GLGetDrawableSize(w : Int, h : Int) ~ Nil {
	array_args := Base->New[3];
	array_args[0] := IntHolder->New(@window);
	array_args[1] := IntHolder->New(w);
	array_args[2] := IntHolder->New(h);

	Proxy->GetDllProxy()->CallFunction("sdl_core_gl_get_drawable_size", array_args);

}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_core_gl_get_drawable_size(VMContext& context) {
		SDL_Window* window = (SDL_Window*)APITools_GetIntValue(context, 0);
		const int w = APITools_GetIntValue(context, 1);
		const int h = APITools_GetIntValue(context, 2);
		SDL_GL_GetDrawableSize(window, w, h);
	}

---
###############
method : public : GLSetSwapInterval(interval : Int) ~ Int {
	array_args := Base->New[2];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(interval);

	Proxy->GetDllProxy()->CallFunction("sdl_core_gl_set_swap_interval", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_core_gl_set_swap_interval(VMContext& context) {
		const int interval = APITools_GetIntValue(context, 1);
		const int return_value = SDL_GL_SetSwapInterval(interval);
		APITools_SetIntValue(context, 0, return_value);
	}

---
###############
method : public : GLGetSwapInterval() ~ Int {
	array_args := Base->New[1];
	array_args[0] := IntHolder->New();

	Proxy->GetDllProxy()->CallFunction("sdl_core_gl_get_swap_interval", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_core_gl_get_swap_interval(VMContext& context) {
		const int return_value = SDL_GL_GetSwapInterval();
		APITools_SetIntValue(context, 0, return_value);
	}

---
###############
method : public : GLSwap() ~ Nil {
	array_args := Base->New[1];
	array_args[0] := IntHolder->New(@window);

	Proxy->GetDllProxy()->CallFunction("sdl_core_gl_swap", array_args);

}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_core_gl_swap(VMContext& context) {
		SDL_Window* window = (SDL_Window*)APITools_GetIntValue(context, 0);
		SDL_GL_SwapWindow(window);
	}

---
method : public : GLDeleteContext(context : GLContext) ~ Nil {
	array_args := Base->New[1];
	array_args[0] := IntHolder->New(context);

	Proxy->GetDllProxy()->CallFunction("sdl_core_gl_delete_context", array_args);

}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_core_gl_delete_context(VMContext& context) {
		const long* context = (long*)APITools_GetObjectValue(context, 0);
		SDL_GL_DeleteContext(context);
	}

---

%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
name: Objeck
file_extensions:
  - obs
scope: source.objeck-obs

variables:
  identifier: \b[[:alpha:]_][[:alnum:]_]*\b # upper and lowercase


contexts:
  main:
    # Multi-line comments begin with a '#~' and end with '~#'
    - match: '#~'
      scope: comment.block.objeck-obs
      push: multi_line_comment

    # Line comments begin with a '#' and continue to the end of the line
    - match: '#'
      scope: comment.block.objeck-obs
      push: line_comment

    # Strings begin and end with quotes, and use backslashes as an escape
    # character
    - match: '"'
      scope: string.quoted.double.objeck-obs
      push: double_quoted_string

    # Keywords 
    - match: '\b(if|else|do|while|static|select|other|enum|for|each|label|return|critical)\b'
      scope: keyword.control.objeck-obs

    - match: '\b(use|leaving|virtual|bundle|Parent|from|implements)\b'
      scope: keyword.other

    - match: '\b(interface)\b'
      scope: entity.name.interface.objeck-obs

    - match: '\b(Byte|Int|Float|Char|Bool|String)\b'
      scope: storage.type.objeck-obs

    - match: \[|\]|,
      scope: punctuation.separator.objeck-obs

    - match: '\b(Nil|true|false)\b'
      scope: constant.language.objeck-obs

    # Numbers
    - match: '\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\.?[0-9]*)|(\.[0-9]+))((e|E)(\+|-)?[0-9]+)?)\b'
      scope: constant.numeric.objeck-obs
  
    - match: '\b(New)\b\s*.*{'
      scope: meta.constructor.objeck-obs
      captures:
        1: entity.name.function.constructor.objeck-obs

    - match: '->'
      scope: punctuation.accessor.objeck-obs

    - match: \+\=|-\=|\*\=|/\=|\:=
      scope: keyword.operator.assignment.objeck-obs

    - match: \+|\-|/|%|\*
      scope: keyword.operator.arithmetic.objeck-obs

    - match: \||&|'<>'|<|>
      scope: keyword.operator.logical.objeck-obs

    - match: '\b(and|or|xor)\b'
      scope: keyword.operator.bitwise.objeck-obs
    
    - match: '(class)\s+'
      1: storage.type.function.objeck-obs
      scope: meta.class.objeck-obs
      push: cls_def

    - match: '(method|function)\s+:\s+(public|private)\s*:\s+(native)\s*:\s+'
      scope: meta.function.objeck-obs
      captures:
        1: storage.type.function.objeck-obs
        2: storage.modifier.objeck-obs
        3: storage.modifier.objeck-obs
      push: func_def

    - match: '(method|function)\s+:\s+(native|public|private)\s*:\s+'
      scope: meta.function.objeck-obs
      captures:
        1: storage.type.function.objeck-obs
        2: storage.modifier.objeck-obs
      push: func_def

    - match: '(method|function)\s+:\s+'
      scope: meta.function.objeck-obs
      captures:
        1: storage.type.function.objeck-obs
      push: func_def

  line_comment:
    - meta_scope: comment.line.objeck-obs
    - match: $
      pop: true

  multi_line_comment:
    - meta_scope: comment.block.objeck-obs
    - match: '~#'
      pop: true

  double_quoted_string:
    - meta_scope: string.quoted.double.objeck-obs
    - match: '\\.'
      scope: string.quoted.double.objeck-obs
    - match: '"'
      scope: string.quoted.double.objeck-obs
      pop: true

  cls_def:
    - match: '{{identifier}}'
      scope: entity.name.class.objeck-obs
      pop: true

  func_def:
    - match: '{{identifier}}'
      scope: entity.name.function.objeck-obs
      pop: true
use Collection;

class Thingy {
	@id : Int;

	New(id : Int) {
		@id := id;
	}

	method : public : Print() ~ Nil {
		@id->PrintLine();
	}
}

class Person from Thingy {
	@name : String;
	@values : StringMap;

	New(id : Int, name : String) {
		Parent(id);
		@name := name;
		@values := StringMap->New();
		@values->Insert("Jason", IntRef->New(101));
		@values->Insert("Mark", IntRef->New(9));
	}

	method : public : Print() ~ Nil {
		@id->PrintLine();
		@name->PrintLine();
		@values->Find("Jason")->As(IntRef)->Get()->PrintLine();	
		@values->Find("Mark")->As(IntRef)->Get()->PrintLine();	
	}
}

class Serial {
	function : Main(args : String[]) ~ Nil {
		t := Thingy->New(7);
		t->Print();
		p := Person->New(13, "Bush");
		p->Print();

		s := System.IO.Serializer->New();
		s->Write(t);
		s->Write(p);

		writer := IO.File.FileWriter->New("objects.dat");			
		writer->WriteBuffer(s->Serialize());
		writer->Close();

		buffer := IO.File.FileReader->ReadBinaryFile("objects.dat");			
		d := System.IO.Deserializer->New(buffer);

		t2 := d->ReadObject()->As(Thingy);
		t2->Print();
		p2 := d->ReadObject()->As(Person);
		p2->Print();
	}
}

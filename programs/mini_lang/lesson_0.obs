use Collection.Generic;

class Program {
	function : Main(args : String[]) ~ Nil {
		if(args->Size() = 1) {
			tokens := Scanner->Scan(args[0]);
			each(i : tokens) {
				tokens->Get(i)->ToString()->PrintLine();
			};
		};
	}
}

class Scanner {
	function : Scan(input : String) ~ Vector<Token> {
		tokens := Vector->New()<Token>;

		index := start := end := 0;
		while(index < input->Size()) {
			if(input->Get(index)->IsChar()) {
				start := index++;
				while(index < input->Size() & (input->Get(index)->IsChar() | input->Get(index) = '_')) {
					index += 1;
				};
				string := input->SubString(start, index - start);
				tokens->AddBack(Token->New(Token->Type->IDENT, string));
			}
			else if(input->Get(index)->IsDigit()) {
				start := index++;
				while(index < input->Size() & (input->Get(index)->IsDigit() | input->Get(index) = '.')) {
					index += 1;
				};
				string := input->SubString(start, index - start);
				tokens->AddBack(Token->New(Token->Type->NUM, string));
			}
			else {
				select(input->Get(index)) {
					label '+' {
						tokens->AddBack(Token->New(Token->Type->ADD));
					}

					label '-' {
						tokens->AddBack(Token->New(Token->Type->SUB));
					}

					label '*' {
						tokens->AddBack(Token->New(Token->Type->MUL));
					}

					label '/' {
						tokens->AddBack(Token->New(Token->Type->DIV));
					}

					label '(' {
						tokens->AddBack(Token->New(Token->Type->OPN));
					}

					label ')' {
						tokens->AddBack(Token->New(Token->Type->CPN));
					}

					label '%' {
						tokens->AddBack(Token->New(Token->Type->MOD));
					}

					label '=' {
						if(index < input->Size() & input->Get(index + 1) = '=') {
							index += 1;
							tokens->AddBack(Token->New(Token->Type->EQL));
						}
						else {
							tokens->AddBack(Token->New(Token->Type->ASGN));
						};
					}

					other {
						tokens->AddBack(Token->New(Token->Type->OTHER));
					}
				};

				index += 1;
			};
		};

		tokens->AddBack(Token->New(Token->Type->EOS));

		return tokens;
	}
}

class Token {
	@type : Token->Type;
	@string : String;

	enum Type {
		IDENT,
		NUM,
		EQL,
		ASGN,
		ADD,
		SUB,
		MUL,
		DIV,
		MOD,
		OPN,
		CPN,
		OTHER,
		EOS
	}

	New(type : Token->Type, left : Token, right : Token) {
		@type := type;
		@left := left;
		@right := right;
	}

	New(type : Token->Type) {
		@type := type;
	}

	New(type : Token->Type, string : String) {
		@type := type;
		@string := string;
	}

	method : public : GetType() ~ Token->Type {
		return @type;
	}

	method : public : GetString() ~ String {
		return @string;
	}

	method : public : SetValue(value : Int) ~ Nil {
		@value := value;
	}

	method : public : ToString() ~ String {
		select(@type) {
			label Type->OPN {
				return "OPN";
			}

			label Type->CPN {
				return "CPN";
			}

			label Type->IDENT {
				return "IDENT, string='{$@string}'";
			}
		
			label Type->NUM {
				return "NUM, value={$@string}";
			}

			label Type->EQL {
				return "EQL";
			}

			label Type->ASGN {
				return "ASGN";
			}

			label Type->ADD {
				return "ADD";
			}

			label Type->SUB {
				return "SUB";
			}

			label Type->DIV {
				return "DIV";
			}

			label Type->MOD {
				return "MOD";
			}

			label Type->MUL {
				return "MUL";
			}
		};

		return "<unknown>";
	}
}
#~
compile: obc -src http_xml_regex_8.obs -misc_net.obl,lib xml.obl,regex.obl,collect.obl -dest http_xml_regex_8.obe
run: obr http_xml_regex_8.obe
note: may a few seconds to run as it's querying wiki pages
~#

use Web.HTTP;
use Query.RegEx;
use Data.XML;
use Collection.Generic;

class RosettaRank {
	function : Main(args : String[]) ~ Nil {
		langs := GetLanguages();
		langs_counts := GetLanguageRank(langs);
		
		keys := langs_counts->GetKeys()<IntHolder>;
		count := 1;
		for(i := keys->Size() - 1; i >= 0; i -=1;) {
			key := keys->Get(i)->Get();
			value := langs_counts->Find(key);
			"{$count}. {$key} - {$value}"->PrintLine();
			count += 1;
		};
	}
	
	function : GetLanguages() ~ Set<String> {
		langs_xml := "";
		client := HttpClient->New();
		in := client->Get("http://rosettacode.org/mw/api.php?action=query&list=categorymembers&cmtitle=Category:Programming_Languages&cmlimit=5000&format=xml");
		if(in = Nil) {
			return Nil;
		};
		each(i : in) {
			langs_xml += in->Get(i)->As(String);
		};
		
		langs := Set->New()<String>;
		parser := XmlParser->New(langs_xml);
		if(parser->Parse()) {
			# get first item
			results := parser->FindElements("/api/query/categorymembers/cm");
			each(i : results) {
				element := results->Get(i)->As(XmlElement);
				name := element->GetAttribute("title")->GetValue();
				offset := name->Find(':');
				if(offset > -1) {
					lang := name->SubString(offset + 1, name->Size() - offset - 1);
					langs->Insert(lang->ReplaceAll("&#x20;", " "));
				};	
			};
		};
		
		return langs;
	}
	
	function : GetLanguageRank(langs : Set<String>) ~ Map<IntHolder, String> {
		langs_counts := Map->New()<IntHolder, String>;
		client := HttpClient->New();
		html := client->Get("http://rosettacode.org/mw/index.php?title=Special:Categories&limit=5000");
		each(i : html) {
			lines := html->Get(i)->As(String);
			html_elements := lines->Split("\n");
			each(j : html_elements) {
				element := html_elements[j];					
				name : String; count : String;
				regex := RegEx->New("<li><a href=\"(\\w|\\s|/|\\?|\\&|;|:|#)+\"\\stitle=\"Category:(\\w|\\s|#)+\">");
				found := regex->FindFirst(element);
				if(found <> Nil) {
					group1 := found->Size();
					regex := RegEx->New("(\\w|\\s)+");
					found := regex->Match(element, group1);
					if(found <> Nil & found->Size() > 0) {
						name := found;
						# skip over some junk characters 
						group2 := group1 + found->Size() + 10;
						regex := RegEx->New("\\s\\(");
						found := regex->Match(element, group2);
						if(found <> Nil) {
							group3 := group2 + found->Size();
							regex := RegEx->New("\\d+");
							found := regex->Match(element, group3);
							if(found <> Nil & found->Size() > 0) {
								count := found;
							};
						};
					};
				};
				
				if(name <> Nil & count <> Nil) {
					if(langs->Has(name)) {
						langs_counts->Insert(count->ToInt(), name);
					};
					name := Nil; count := Nil;
				};	
			};
		};
		
		return langs_counts;
	}
}

use API.OpenAI, Data.JSON, Collection;

class ReadmeBuilder {
	@config_json : JsonElement;
	@title : String;
	@version : String;
	@version_year : Int;

	New(config_file : String) {
		input := System.IO.Filesystem.FileReader->ReadFile(config_file);
		if(input = Nil) {
			">>> Unable to read configuation file <<<"->ErrorLine();
			Runtime->Exit(1);
		};

		@config_json := JsonParser->TextToElement(input);
		if(@config_json = Nil) {
			">>> Unable to parse configuation file <<<"->ErrorLine();
			Runtime->Exit(1);
		};
	}

	function : Main(args : String[]) ~ Nil {
		if(args->Size() <> 1) {
			">>> readme_builder [config_file_path] <<<"->ErrorLine();
			Runtime->Exit(1);
		};

		builder := ReadmeBuilder->New(args[0]);
		
		if(<>builder->Build()) {
			">>> Unable to build readme, check the configuration file <<<"->ErrorLine();
			Runtime->Exit(1);
		};

#		builder->FormatHtml()->PrintLine();
		builder->FormatMarkdown()->PrintLine();
	}

	method : Build() ~ Bool {
		title_json := @config_json->Get("title");
		if(title_json = Nil) {
			return false;
		};
		@title := title_json->GetString();

		

		version_json := @config_json->FindElements("version/string");
		if(version_json = Nil) {
			return false;
		};
		@version := version_json->GetString();
		
		version_year_json := @config_json->FindElements("version/year");
		if(version_year_json = Nil) {
			return false;
		};
		@version_year := version_year_json->GetInt();

		return true;
	}

	method : FormatHtml() ~ String {
		html := "<html> <p>" + @title + "</p>\n";

		features_json := @config_json->Get("features");
		each(i : features_json) {
			feature_json := features_json->Get(i);
			feature_version := feature_json->Get("version")->GetString();

			# set title
			if(i = 0) {
				html += "\n<p><u>" + feature_version + "</u></p>\n";
			}
			else {
				html += "\n<p>" + feature_version + "</p>\n";
			};
			
			# set features
			html += "<ul>\n"
			in_sublist := false;
			feature_items_json :=  feature_json->Get("items");
			each(j : feature_items_json) {
				feature_item_json := feature_items_json->Get(j);
				next_feature_item_json := feature_items_json->Get(j + 1);

				# get current and next feature entry
				feature_item := JsonElement->Decode(feature_item_json->GetString());				
				next_feature_item : String;
				if(next_feature_item_json <> Nil) {
					next_feature_item := JsonElement->Decode(next_feature_item_json->GetString());
				};

				# add items and sub-items
				if(in_sublist) {
					html += "\t\t";
				};

				html += "\t<li>";
				if(next_feature_item <> Nil & next_feature_item->StartsWith('\t')) {
					html += feature_item->Trim();

					if(in_sublist) {
						html += "</li>\n";
					}
					else {
						html += "\n\t\t<ul>\n";
						in_sublist := true;
					};
				}
				else {
					html += feature_item->Trim();

					if(in_sublist) {
						html += "\n\t\t</ul>\n\t</li>\n";
					}
					else {
						html += "</li>\n";
					};
					in_sublist := false;
				};
			};

			# add ending tags
			if(in_sublist) {
				html += "\n\t\t</ul>\n\t</li>\n";
			}
			else {
				html += "</li>\n";
			};
			in_sublist := false;

			html += "</ul>\n"
		};
		html += "</html>\n"

		return html->Trim();
	}

	method : FormatMarkdown() ~ String {
		markdown := @title + "\n\n";

		features_json := @config_json->Get("features");
		each(i : features_json) {
			feature_json := features_json->Get(i);
			feature_version := feature_json->Get("version")->GetString();

			# set title
			if(i = 0) {
				markdown += "**" + feature_version + "**\n\n";
			}
			else {
				markdown += feature_version + "\n\n";
			};
			
			# set features
			in_sublist := false;
			feature_items_json :=  feature_json->Get("items");
			each(j : feature_items_json) {
				feature_item_json := feature_items_json->Get(j);
				next_feature_item_json := feature_items_json->Get(j + 1);

				# get current and next feature entry
				feature_item := JsonElement->Decode(feature_item_json->GetString());				
				next_feature_item : String;
				if(next_feature_item_json <> Nil) {
					next_feature_item := JsonElement->Decode(next_feature_item_json->GetString());
				};

				# add items and sub-items
				if(in_sublist) {
					markdown += "  ";
				};

				markdown += "- ";
				if(next_feature_item <> Nil & next_feature_item->StartsWith('\t')) {
					markdown += feature_item->Trim();

					markdown += "\n";
					if(<>in_sublist) {
						in_sublist := true;
					};
				}
				else {
					markdown += feature_item->Trim() + '\n';
					in_sublist := false;
				};
			};

			# add ending tags
			markdown += "\n";
			if(<>in_sublist) {
				in_sublist := true;
			};

			in_sublist := false;
		};

		return markdown->Trim();
	}

	method : GetApiKey(filename : String) ~ String {
		@token := System.IO.Filesystem.FileReader->ReadFile(filename);
		if(@token <> Nil) {
			@token := @token->Trim();
			if(<>@token->StartsWith("sk-")) {
				">>> Unable to read @token from file: '{$filename}' <<"->ErrorLine();
				Runtime->Exit(1);
			};

			return @token;
		};

		return Nil;
	}
}
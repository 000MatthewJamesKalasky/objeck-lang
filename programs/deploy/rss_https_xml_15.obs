#~
# compile: obc -src rss_https_xml_15.obs -lib xml.obl,collect.obl -dest rss_https_xml_15.obe
# run: obr rss_https_xml_15.obe "https://www.techmeme.com/feed.xml"
~#

use Web.HTTP;
use System.IO.File;
use Data.XML;
use Collection;

class RSS {
	function : Main(args : String[]) ~ Nil {
		if(args->Size() = 1) {
			xml := FetchXml(args[0]);
			if(xml <> Nil) {	
				parser := XmlParser->New(xml);
				if(parser->Parse()) {
					html := "<html><body>";
					GetMetaData(html, parser);
					GetPosts(html, parser);
					html += "</body></html>";

					out := FileWriter->New("out.html");
					out->WriteString(html);
					out->Close();

					"Success!"->PrintLine();
				};
			};
		};
	}
	
	function : GetMetaData(html : String, parser : XmlParser) ~ Nil {
		title := GetMatch("/rss/channel/title", parser);
		description := GetMatch("/rss/channel/description", parser);
		link := GetMatch("/rss/channel/link", parser);

		html += "<h3><a href='";
		html += link;
		html += "'>";
		html += title;
		html += "</a></h3><p>";
		html += description;
		html += "</p>";
	}

	function : GetPosts(html : String, parser : XmlParser) ~ Nil {
		items := parser->FindElements("/rss/channel/item");
		each(i : items) {
			item := items->Get(i)->As(XmlElement);
			title := GetContent(item->GetFirstChild("title"));
			link := GetContent(item->GetFirstChild("link"));
			description := GetContent(item->GetFirstChild("description"));
			pubDate := GetContent(item->GetFirstChild("pubDate"));

			if(description <> Nil & (description->Find("href") > -1 | description->Find("HREF") > -1)) {
				html += "<b>";
				html += pubDate;
				html += "</b></br><p>";
				html += description;
				html += "</p>";
			}
			else if(description <> Nil) {
				html += "<b>";
				html += pubDate;
				html += "</b></br><h3><a href='";
				html += link;
				html += "'>";
				html += title;
				html += "</a></h3></br>";

				html += "<p>";
				html += description;
				html += "</p>";
			}
			else {
				html += "<b>";
				html += pubDate;
				html += "</b></br><h3><a href='";
				html += link;
				html += "'>";
				html += title;
				html += "</a></h3></br>";
			};
		};
	}

	function : GetMatch(path : String, parser : XmlParser) ~ String {
		matches := parser->FindElements(path);
		if(matches->Size() > 0) {			
			return GetContent(matches->Get(0)->As(XmlElement));
		};
		
		return Nil;
	}

	function : GetContent(elem : XmlElement) ~ String {
		if(elem = Nil) {
			return Nil;
		};

		cdata := elem->GetFirstChild("[cdata]");
		if(cdata <> Nil) {
			return cdata->GetContent();
		}
		else {
			return XmlElement->DecodeString(elem->GetContent());
		};	
	}

	function : FetchXml(path : String) ~ String {
		xml := "";

		if(path->StartsWith("http:")) {
			client := HttpClient->New();
			lines := client->Get(path);
			each(i : lines) {
				xml += lines->Get(i)->As(String);
			};
		}
		else if(path->StartsWith("https:")) {
			client := HttpsClient->New();
			lines := client->Get(path);
			each(i : lines) {
				xml += lines->Get(i)->As(String);
			};
		}
		else {
			xml := FileReader->ReadFile(path);
		};
# xml->PrintLine();

		return xml;
	}
}

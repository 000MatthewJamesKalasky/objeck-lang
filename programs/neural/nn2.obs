use System.Matrix;

class NeuralNetwork {
	@input_nodes : Float;
	@hidden_nodes : Float;
	@output_nodes : Float;
	@learning_rate : Float;
	@weight_inputs_hidden : Float[,];
	@weight_outputs_hidden : Float[,];

	function : Main(args : String[]) ~ Nil {
		input_nodes := 2;
		hidden_nodes := 2;
		output_nodes := 1;
		learning_rate := 0.5;

		i0 :=[
			[0.0]
			[0.0]];

		t0 :=[
			[0.0]];

		i1 :=[
			[1.0]
			[1.0]];

		t1 :=[
			[1.0]];

		i2 :=[
			[1.0]
			[0.0]];

		t2 :=[
			[0.0]];

		i3 :=[
			[0.0]
			[1.0]];

		t3 :=[
			[0.0]];

		network := NeuralNetwork->New(input_nodes, hidden_nodes, output_nodes, learning_rate);

		for(i := 0; i < 2500; i += 1;) {
			inputs : Float[,];	targets : Float[,];
			select(i % 4) {
				label 0: {
					inputs := i0;
					targets := t0;
				}

				label 1: {
					inputs := i1;
					targets := t1;
				}

				label 2: {
					inputs := i2;
					targets := t2;
				}

				label 3: {
					inputs := i3;
					targets := t3;
				}
			};
			
			network->Train(inputs, targets, learning_rate);
		};

		in := [
			[1.75]
			[0.25]];
		out := network->Query(in);

		out->ToString()->Print();
#		Matrix2D->Divide(out, 0.5)->ToString()->Print();
	}
	
	New(input_nodes : Float, hidden_nodes : Float, output_nodes : Float, learning_rate : Float) {
		@input_nodes  := input_nodes;
		@hidden_nodes  := hidden_nodes;
		@output_nodes  := output_nodes;
		@learning_rate := learning_rate;

		@weight_inputs_hidden := Matrix2D->RandomNormal(0.0, Float->Power(@input_nodes, -0.5), 
			@hidden_nodes, @input_nodes);
		@weight_outputs_hidden := Matrix2D->RandomNormal(0.0, Float->Power(@input_nodes, -0.5), 
			@output_nodes, @input_nodes);
	}

	method : Query(inputs : Float[,]) ~ Float[,] {
		# calculate signals into hidden layer
		hidden_outputs := Matrix2D->DotSigmoid(@weight_inputs_hidden, inputs);
		# calculate the signals emerging from final output layer
		return Matrix2D->DotSigmoid(@weight_outputs_hidden, hidden_outputs);
	}

	method : Train(inputs : Float[,], targets : Float[,], learning_rate : Float) ~ Nil {
		# calculate signals into hidden layer
        hidden_outputs := Matrix2D->DotSigmoid(@weight_inputs_hidden, inputs);
        # calculate signals into final output layer
        final_outputs  := Matrix2D->DotSigmoid(@weight_outputs_hidden, hidden_outputs);
        # output layer error is the (target - actual)
        output_errors := Matrix2D->Subtract(targets, final_outputs);
        # hidden layer error is the output_errors, split by weights, recombined at hidden nodes
		hidden_errors := Matrix2D->Dot(Matrix2D->Transpose(@weight_outputs_hidden), output_errors);
		# update the weights for the links between the input and hidden layers
		@weight_inputs_hidden := Matrix2D->Add(@weight_inputs_hidden, Adjust(learning_rate, hidden_errors, hidden_outputs, inputs));
		# update the weights for the links between the hidden and output layers
		@weight_outputs_hidden := Matrix2D->Add(@weight_outputs_hidden, Adjust(learning_rate, output_errors, final_outputs, hidden_outputs));		
	}

	method : Adjust(rate : Float, errors : Float[,], outputs : Float[,], inputs : Float[,]) ~ Float[,] {
		return Matrix2D->Multiple(rate, Matrix2D->Dot(Matrix2D->Multiple(errors, Matrix2D->Multiple(outputs, Matrix2D->Subtract(1.0, outputs))), Matrix2D->Transpose(inputs)));
	}
}
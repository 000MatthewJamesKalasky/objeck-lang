use System.IO.File;
use System.Matrix;
use Collection;

class NeuralNetwork {
	@input_nodes : Float;
	@hidden_nodes : Float;
	@output_nodes : Float;
	@learning_rate : Float;
	@weight_inputs_hidden : Float[,];
	@weight_outputs_hidden : Float[,];

	function : Main(args : String[]) ~ Nil {
		input_nodes := 784;
		hidden_nodes := 200;
		output_nodes := 10;
		learning_rate := 0.2;

		value := IntHolder->New();
		if(args->Size() = 2) {
			inputs := LoadInput(args[0]);
			size := inputs->Size();
			"Training with {$size} sample(s)"->PrintLine();
			
			network := NeuralNetwork->New(input_nodes, hidden_nodes, output_nodes, learning_rate);
			for(i := 0; i < 1; i += 1;) {
				state := 0;
				each(i : inputs) {
					if(i % 25 = 0) {
						if(state = 0) {
							"\b|"->Print();
						}
						else if(state = 1) {
							"\b/"->Print();
						}
						else if(state = 2) {
							"\bâ€”"->Print();
						}
						else if(state = 3) {
							"\b\\"->Print();
						};

						state += 1;
						if(state > 3) {
							state := 0;
						};
					};
					train_input := ParseInput(inputs->Get(i)->As(String), value);
					number := value->Get(); 
					train_target := GetTrainingTarget(number);
					network->Train(train_input, train_target, learning_rate);
				};
				'\n'->Print();
			};

			network->Store();

			inputs := LoadInput(args[1]);
			size := inputs->Size();
			"---"->PrintLine();
			"{$size} test input(s)"->PrintLine();
			
			each(i : inputs) {
				test_input := ParseInput(inputs->Get(i)->As(String), value);
				test_output := network->Query(test_input);
				TestQuery(test_output, value->Get());
			};
	 	}
	 	else if(args->Size() = 1) {
	 		network := NeuralNetwork->New(input_nodes, hidden_nodes, output_nodes, learning_rate);
	 		network->Load();

	 		inputs := LoadInput(args[0]);
			size := inputs->Size();
			"---"->PrintLine();
			"{$size} test input(s)"->PrintLine();
			
			each(i : inputs) {
				test_input := ParseInput(inputs->Get(i)->As(String), value);
				test_output := network->Query(test_input);
				TestQuery(test_output, value->Get());
			};
	 	};
	}
	
	New(input_nodes : Float, hidden_nodes : Float, output_nodes : Float, learning_rate : Float) {
		@input_nodes  := input_nodes;
		@hidden_nodes  := hidden_nodes;
		@output_nodes  := output_nodes;
		@learning_rate := learning_rate;

		@weight_inputs_hidden := Matrix2D->RandomNormal(0.01, Float->Power(@input_nodes, -0.5), 
			@hidden_nodes, @input_nodes);
		@weight_outputs_hidden := Matrix2D->RandomNormal(0.01, Float->Power(@input_nodes, -0.5), 
			@output_nodes, @hidden_nodes);
	}

	method : Query(inputs : Float[,]) ~ Float[,] {
		# calculate signals into hidden layer
		hidden_outputs := Matrix2D->DotSigmoid(@weight_inputs_hidden, inputs);
		# calculate the signals emerging from final output layer
		return Matrix2D->DotSigmoid(@weight_outputs_hidden, hidden_outputs);
	}

	method : Train(inputs : Float[,], targets : Float[,], rate : Float) ~ Nil {
		# calculate signals into hidden layer
		hidden_outputs := Matrix2D->DotSigmoid(@weight_inputs_hidden, inputs);        
		# calculate signals into final output layer
		final_outputs  := Matrix2D->DotSigmoid(@weight_outputs_hidden, hidden_outputs);        
		# output layer error is the (target - actual)
		output_errors := Matrix2D->Subtract(targets, final_outputs);
		# hidden layer error is the output_errors, split by weights, recombined at hidden nodes
		hidden_errors := Matrix2D->Dot(Matrix2D->Transpose(@weight_outputs_hidden), output_errors);
		# update the weights for the links between the input and hidden layers
		@weight_inputs_hidden := Matrix2D->Add(@weight_inputs_hidden, Adjust(rate, hidden_errors, hidden_outputs, inputs));
		# update the weights for the links between the hidden and output layers
		@weight_outputs_hidden := Matrix2D->Add(@weight_outputs_hidden, Adjust(rate, output_errors, final_outputs, hidden_outputs));		
	}

	method : Adjust(rate : Float, errors : Float[,], outputs : Float[,], inputs : Float[,]) ~ Float[,] {
		return Matrix2D->Multiple(rate, Matrix2D->Dot(Matrix2D->Multiple(errors, Matrix2D->Multiple(outputs, Matrix2D->Subtract(0.99, outputs))), Matrix2D->Transpose(inputs)));
	}

	method : Store() ~ Nil {
		writer := FileWriter->New("train.dat");
		leaving {
			writer->Close();
		};

		dims := @weight_inputs_hidden->Size();
		rows := dims[0];
		cols := dims[1];
		"Storing input weights: {$rows},{$cols}"->PrintLine();

		writer->WriteString("{$rows},{$cols}\n");
		for(i := 0; i < rows; i += 1;) {
			for(j := 0; j < cols; j += 1;) {
				value := @weight_inputs_hidden[i,j]->ToString();
				writer->WriteString("{$value}");
				if(j + 1 < cols) {
					writer->WriteString(",");
				};
			};
			writer->WriteString("\n");
		};
# @weight_inputs_hidden->ToString()->PrintLine();

		# ---

		dims := @weight_outputs_hidden->Size();
		rows := dims[0];
		cols := dims[1];
		"Storing output weights: {$rows},{$cols}"->PrintLine();

		writer->WriteString("{$rows},{$cols}\n");
		for(i := 0; i < rows; i += 1;) {
			for(j := 0; j < cols; j += 1;) {
				value := @weight_outputs_hidden[i,j]->ToString();
				writer->WriteString("{$value}");
				if(j + 1 < cols) {
					writer->WriteString(",");
				};
			};
			writer->WriteString("\n");
		};
# @weight_outputs_hidden->ToString()->PrintLine();		
	}

	# ---

	method : Load() ~ Nil {
		lines := LoadInput("train.dat");

		line := lines->Get(0)->As(String);
		dims := line->Split(",");

		rows := dims[0]->ToInt();
		cols := dims[1]->ToInt();
		"Loading input weights: {$rows}, {$cols}"->PrintLine();

		i : Int;
		@weight_inputs_hidden := Float->New[rows, cols];
		for(i := 1; i <= rows; i += 1;) {
			line := lines->Get(i)->As(String);
			col := line->Split(",");
			if(col->Size() <> cols) {
				"Invalid Row!"->ErrorLine();
				Runtime->Exit(1);
			};

			for(j := 0; j < cols; j += 1;) {
				@weight_inputs_hidden[i - 1, j] := col[j]->ToFloat();
			};
		};
# @weight_inputs_hidden->ToString()->PrintLine();

		# ---

		line := lines->Get(i)->As(String);
		dims := line->Split(",");

		old_row := rows;
		rows := dims[0]->ToInt();
		cols := dims[1]->ToInt();
		"Loading output weights: {$rows}, {$cols}"->PrintLine();

		@weight_outputs_hidden := Float->New[rows, cols];
		for(i := i + 1; i <= rows + old_row + 1; i += 1;) {
			line := lines->Get(i)->As(String);
			col := line->Split(",");
			if(col->Size() <> cols) {
				error := col->Size();
				"Invalid row size: {$error}!"->ErrorLine();
				Runtime->Exit(1);
			};

			for(j := 0; j < cols; j += 1;) {
				@weight_outputs_hidden[i - 2 - old_row, j] := col[j]->ToFloat();
			};
		};
# @weight_outputs_hidden->ToString()->PrintLine();
	}

	# ---

	function : TestQuery(b : Float[,], expected : Int) ~ Nil {
		"---"->PrintLine();
		expected->PrintLine();
		"---"->PrintLine();

		result := LargestIndex(b);

		b_dims := b->Size();
		for(i := 0; i < b_dims[0]; i += 1;) {
			probability := b[i,0];
			if(i = expected) {
				"{$i}:\t*[{$probability}]"->PrintLine();
			}
			else if(i = result) {
				"{$i}:\t-[{$probability}]"->PrintLine();
			}
			else {
				"{$i}:\t [{$probability}]"->PrintLine();
			};
		};
	}

	function : DebugMeta(a : Float[,], b : Float[,]) ~ Nil {
		a_dims := a->Size();
		a_rows := a_dims[0];
		a_cols := a_dims[1];

		"A: [{$a_rows},{$a_cols}]"->PrintLine();

		b_dims := b->Size();
		b_rows := b_dims[0];
		b_cols := b_dims[1];

		"B: [{$b_rows},{$b_cols}]"->PrintLine();
		"---"->PrintLine();
	}

	function : native : GetTrainingTarget(number : Int) ~ Float[,] {
		if(number < 0 | number > 9) {
			return Nil;
		};

		targets := Float->New[10, 1];
		for(j := 0; j < 10; j += 1;) {
			targets[j, 0] := 0.01;
		};
		targets[number, 0] := 0.99;

		return targets;
	}

	function : native : LargestIndex(b : Float[,]) ~ Int {
		test := 0.0;
		index := 0;

		b_dims := b->Size();
		for(i := 0; i < b_dims[0]; i += 1;) {
			value := b[i,0];
			if(value > test) {
				test := value;
				index := i;
			};
		};

		return index;
	}

	function : ParseInput(line : String, value : IntHolder) ~ Float[,] {
		matrix := Float->New[784, 1];

		row := -1; col := 0;
		values := line->Split(",");

		index := values[0];
		value->Set(index->ToInt());

		for(i := 1; i < values->Size(); i += 1;) {
			matrix[i - 1, 0] := values[i]->ToFloat() / 255.0 * 0.99 + 0.01;
		};

		return matrix;
	}

	function : LoadInput(file : String) ~ Vector {
		inputs := Vector->New();

		reader := FileReader->New(file);
		leaving {
			reader->Close();
		};

		buffer_size := 4096 * 4;
		buffer := Char->New[buffer_size + 1];

		line := "";
		while(<>reader->IsEOF()) {
			read := reader->ReadBuffer(0, buffer_size, buffer);
			for(i := 0; i < read; i += 1;) {
				if(buffer[i] = '\n') {
					inputs->AddBack(line);
					line := "";
				}
				else if(buffer[i] <> '\r') {
					line += buffer[i];
				};
			};
		};

		return inputs;
	}
}
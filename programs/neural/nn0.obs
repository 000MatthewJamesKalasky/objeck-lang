class BasicAi {
	function : Main(args : String[]) ~ Nil {
		a := [
			[1.0, 2.0]
			[3.0, 4.0]];
			
		b := [
			[5.0, 6.0, 7.0]
			[8.0, 9.0, 10.0]];

		c := [
			[1.0, 2.0]
			[3.0, 4.0]];
			
		d := [
			[5.0, 6.0]
			[7.0, 8.0]
			[9.0, 10.0]
			[9.0, 10.0]
			[9.0, 10.0]];

#		x := Concatenate(c, d);
#		x->ToString()->PrintLine();

		x := Split(b, 2, false);
		x->ToString()->PrintLine();
	}

	function : Split(b : Float[,], count : Int, is_row : Bool := true) ~ Float[,] {
		b_dims := b->Size();
		b_rows := b_dims[0];
		b_cols := b_dims[1];

"B: [{$b_rows},{$b_cols}, {$is_row}]"->PrintLine();

		c : Float[,];
		if(is_row) {
			if(count <= 0 | count > b_rows) {
				return Nil;
			};

			c := Float->New[count, b_cols];
			for(row := 0; row < count; row += 1;) {
				for(col := 0; col < b_cols; col += 1;) {
					c[row, col] := b[row, col];
				};
			};
		}
		else {
			if(count <= 0 | count > b_cols) {
				return Nil;
			};

			c := Float->New[b_rows, count];
			for(row := 0; row < b_rows; row += 1;) {
				for(col := 0; col < count; col += 1;) {
					c[row, col] := b[row, col];
				};
			};
		};

		return c;
	}

	function : Concatenate(a : Float[,], b : Float[,], is_row : Bool := true) ~ Float[,] {
		a_dims := a->Size();
		a_rows := a_dims[0];
		a_cols := a_dims[1];

		b_dims := b->Size();
		b_rows := b_dims[0];
		b_cols := b_dims[1];

# "A: [{$a_rows},{$a_cols}], B: [{$b_rows},{$b_cols}]"->PrintLine();

		c : Float[,];
		if(is_row) {
			if(a_cols <> b_cols) {
				return Nil;
			};

			c_rows := a_rows + b_rows;
			c := Float->New[c_rows, a_cols];

			for(row := 0; row < a_rows; row += 1;) {
				for(col := 0; col < a_cols; col += 1;) {
					c[row, col] := a[row, col];
				};
			};

			for(row := 0; row < b_rows; row += 1;) {
				for(col := 0; col < b_cols; col += 1;) {
					c[row + a_rows, col] := b[row, col];
				};
			};
		}
		else {
			if(a_rows <> b_rows) {
				return Nil;
			};

			c_cols := a_cols + b_cols;
			c := Float->New[a_rows, c_cols];

			for(row := 0; row < a_rows; row += 1;) {
				for(col := 0; col < a_cols; col += 1;) {
					c[row, col] := a[row, col];
				};
			};

			for(row := 0; row < b_rows; row += 1;) {
				for(col := 0; col < b_cols; col += 1;) {
					c[row, col + a_cols] := b[row, col];
				};
			};
		};

		return c;
	}
}
use System.IO.Net;
use Data.JSON;
use Collection.Generic;

class Server {
	function : Main(args : String[]) ~ Nil {
		server := TCPSocketServer->New(6013);
		leaving {
			server->Close();
		};

		if(server->Listen(5)) {
			while(true) {
				client := server->Accept();
				
				line := client->ReadLine();
				while(line->Size() > 0) {
					lens := line->Split(":");
					len := lens[1]->Trim()->ToInt()+2;

					buffer := Byte->New[len];	
					client->ReadBuffer(0, len, buffer);
					buffer->ToUnicode()->PrintLine();

					line := client->ReadLine();
				};
			};
		};
	}

#~
	json :=JSONParser->New(line);
	if(json->Parse()) {
		root := json->GetRoot();

		id_elem := root->Get("id");
		call_elem := root->Get("method");
		param_elems := root->Get("params");

		if(id_elem <> Nil & call_elem <> Nil & param_elems <> Nil) {
			id := id_elem->ToString()->ToInt();
			client->WriteString(DoSubtract(id, param_elems)->ToString());
		};
	};
~#

	method : public : DoSubtract(id : Int, param_elems : JSONElement) ~ JSONElement {
		left := param_elems->Get(0)->GetValue()->ToInt();
		right := param_elems->Get(1)->GetValue()->ToInt();

		return MakeResult(id, left - right);
	}

	method : MakeResult(id : Int, result : Int) ~ JSONElement {
		values := Map->New()<String, JSONElement>;

		values->Insert("jsonrpc", JSONElement->New("2.0"));
		values->Insert("result", JSONElement->New(result));
		values->Insert("id", JSONElement->New(id));

		return JSONElement->New(values);
	}
}
use System.IO.Net;
use Data.JSON;
use Collection.Generic;

class Client {
	id : static : Int;

	function : Main(args : String[]) ~ Nil {
		server := TCPSocketServer->New(6013);
		leaving {
			server->Close();
		};

		if(server->Listen(5)) {
			while(true) {
				client := server->Accept();
				service := Service->New(id->ToString());
				service->Execute(client);
				id += 1;
			};
		};
	}
}

class Service from System.Concurrency.Thread {
	New(name : String) {
	  Parent(name);
	}
	
	method : public : Run(param : Base) ~ Nil {
		client := param->As(TCPSocket);
		line := client->ReadLine();
		while(line->Size() > 0 & line->Equals("quit") = false) {
			line->PrintLine();

			json :=JSONParser->New(line);
			if(json->Parse()) {
				root := json->GetRoot();

				id_elem := root->Get("id");
				call_elem := root->Get("method");
				param_elems := root->Get("params");

				if(id_elem <> Nil & call_elem <> Nil & param_elems <> Nil) {
					id := id_elem->ToString()->ToInt();
					client->WriteString(DoSubtract(id, param_elems)->ToString());
				};
			};

			line := client->ReadLine();
		};
	}

	method : public : DoSubtract(id : Int, param_elems : JSONElement) ~ JSONElement {
		left := param_elems->Get(0)->GetValue()->ToInt();
		right := param_elems->Get(1)->GetValue()->ToInt();

		return MakeResult(id, left - right);
	}

	method : MakeResult(id : Int, result : Int) ~ JSONElement {
		values := Map->New()<String, JSONElement>;
		
		values->Insert("jsonrpc", JSONElement->New("2.0"));
		values->Insert("result", JSONElement->New(result));
		values->Insert("id", JSONElement->New(id));

		return JSONElement->New(values);
	}
}
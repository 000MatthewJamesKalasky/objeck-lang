class Computer {
	@storage : Int;
	@memory : Int;
	@processor : String;

	New(storage : Int, memory : Int, processor : String) {
		@storage := storage;
		@memory := memory;
		@processor := processor;
	}

	method : public : GetStorage() ~ Int {
		return @storage;
	}

	method : public : GetMemory() ~ Int {
		return @memory;
	}

	method : public : GetProcessor() ~ String {
		return @processor;
	}

	method : public : ToString() ~ String {
		return "{$@storage}, {$@memory}, {$@processor}";
	}
}

class AbstractBuilder {
	New() {}

	method : virtual : public : SetProcessor(processor : String) ~ Nil;
}

class ComputerBuilder from AbstractBuilder {
	@processor : String;

	New() {
		Parent();
	}

	method : public : SetProcessor(processor : String) ~ Nil {
		@processor := processor;
	}

	method : public : Build() ~ Computer {
		if(Program->CoinToss()) {
 			return Computer->New(512, 8, @processor);
 		}
 		else {
			return Computer->New(1024, 16, @processor);
		};
	}
}

class HP from Computer {
	New(processor : String) {
		Parent(2048, 16, processor);
	}
}

class Program {
	function : Main(args : String[]) ~ Nil {
		builder := ComputerBuilder->New();
		builder->SetProcessor("10th Generation Intel");
		builder->Build()->ToString()->PrintLine();
	}

	function : CoinToss() ~ Bool {
		return Int->Random(1) % 2 = 0;
	}
}
use System.IO.Filesystem;
use Collection.Generic;

bundle CodeGen {
	#~
	Token scanner
	~#
	class Scanner {
		@filename : String;
		@tokens : Vector<Token>;

		New(filename : String) {
			@filename := filename;
			@tokens := Vector->New()<Token>;
		}
		
		method : public : Scan() ~ Vector<Token> {
			reserved := Map->New()<String, Token>;
			# c keywords
			
			
			# c types
			reserved->Insert("const", Token->New(Token->Type->CONST_ID, "const"));
			reserved->Insert("int", Token->New(Token->Type->INT_ID, "int"));
			reserved->Insert("char", Token->New(Token->Type->CHAR_ID, "char"));
			reserved->Insert("void", Token->New(Token->Type->VOID_ID, "void"));
			reserved->Insert("gint", Token->New(Token->Type->GINT, "guint"));
			reserved->Insert("guint", Token->New(Token->Type->GUINT, "guint"));
			reserved->Insert("gboolean", Token->New(Token->Type->GBOOLEAN, "GBOOLEAN"));
			reserved->Insert("gchar", Token->New(Token->Type->GCHAR, "GCHAR"));
			
			"filename='{$@filename}'"->PrintLine();

			reader := FileReader->New(@filename);
			line_num := 0;
			while(reader->IsEOF() <> true) {
				line := reader->ReadLine();
				line_num := line_num + 1;

				i := 0;
				while(i < line->Size()) {
					# skip whitespace
					c := line->Get(i);
					while((c = ' ' | c = '\t' | c = '\r'| c = '\n') & i < line->Size()) {
						i += 1;
						c := line->Get(i);
					};

					# parse
					if(i < line->Size()) {
						# keyword
						if(line->Get(i)->IsChar()) {
							ident := "";
							c := line->Get(i);
							while(c->IsChar() | c->IsDigit() | c = '_') {
								ident->Append(line->Get(i));
								i += 1;
								c := line->Get(i);
							};
							
							result := reserved->Find(ident);
							if(result <> Nil) {
								@tokens->AddBack(result);
							}
							else {
								@tokens->AddBack(Token->New(Token->Type->IDENT, ident));
							};
						}
						# number
						else if(line->Get(i)->IsDigit()) {
							number := "";
							c := line->Get(i);
							while(c->IsDigit()) {
								number->Append(line->Get(i));
								i += 1;
								c := line->Get(i);
							};
							@tokens->AddBack(Token->New(Token->Type->NUM, number));
						}
						# other
						else {
							select(line->Get(i)) {
								label '(': {
									@tokens->AddBack(Token->New(Token->Type->OPRN, "("));
								}
								
								label ')': {
									@tokens->AddBack(Token->New(Token->Type->CPRN, ")"));
								}

								label '[': {
									@tokens->AddBack(Token->New(Token->Type->OBR, "["));
								}

								label ']': {
									@tokens->AddBack(Token->New(Token->Type->CBR, "]"));
								}

								label ',': {
									@tokens->AddBack(Token->New(Token->Type->COMMA, ","));
								}
								
								label ';': {
									@tokens->AddBack(Token->New(Token->Type->SCOLON, ";"));
								}

								label '*': {
									@tokens->AddBack(Token->New(Token->Type->STAR, "*"));
								}
								
								label '&': {
									@tokens->AddBack(Token->New(Token->Type->AND, "*"));
								}
								
								other: {
									@tokens->AddBack(Token->New(Token->Type->UNKWN, "?"));
								}
							};
							# update
							i += 1;
						};
					};
				};
			};
			reader->Close();
			
			@tokens->AddBack(Token->New(Token->Type->EOS));
			return @tokens;
		}
	}
	
	#~
	Scanned token
	~#
	class Token {
		enum Type := -100 {
			INT_ID,
			CHAR_ID,
			GINT,
			GUINT,
			GCHAR,
			GBOOLEAN,
			VOID_ID,
			CONST_ID,
			OPRN,
			CPRN,
			OBR,
			CBR,
			COMMA,
			SCOLON,
			STAR,
			AND,
			NUM,
			IDENT,
			UNKWN,
			EOS
		}
		
		@type : Token->Type;
		@value : String;

		New(type : Token->Type) {
			@type := type;
		}
		
		New(type : Token->Type, value : String) {
			@type := type;
			@value := value;
		}

		method : public : GetType() ~ Token->Type {
			return @type;
		}
		
		method : public : GetValue() ~ String {
			return @value;
		}

		method : public : ToString() ~ String {
			select(@type) {
				label Token->Type->INT_ID {

				}

				label Token->Type->CHAR_ID {

				}

				label Token->Type->GUINT {

				}

				label Token->Type->GBOOLEAN {

				}

				label Token->Type->GCHAR {

				}

				label Token->Type->VOID_ID {

				}

				label Token->Type->CONST_ID {

				}

				label Token->Type->OPRN {

				}

				label Token->Type->CPRN {

				}

				label Token->Type->OBR {

				}

				label Token->Type->CBR {

				}

				label Token->Type->COMMA {

				}

				label Token->Type->SCOLON {

				}

				label Token->Type->STAR {

				}

				label Token->Type->AND {

				}

				label Token->Type->NUM {

				}

				label Token->Type->IDENT {

				}

				label Token->Type->UNKWN {

				}

				label Token->Type->EOS {

				}
			};

			return "<unknown>";
		}
	}
}

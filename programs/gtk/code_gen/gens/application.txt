---
method : public : Gtk_application_new(application_id : String, flags : GApplicationFlags) ~ GtkApplication {
        array_args := Base->New[3];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(application_id);
        array_args[2] := flags;

        Proxy->GetDllProxy()->CallFunction("gtk_application_new", array_args);

        return array_args[0];
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void gtk_application_new(VMContext& context) {
                const wstring application_id = APITools_GetStringValue(context, 1);
                const size* flags = (size_t*)APITools_GetObjectValue(context, 2);
                const size* return_value = gtk_application_new(application_id, flags);
                APITools_SetObjectValue(context, 0, (CAST*)return_value);
        }

---
method : public : Gtk_application_remove_window(application : GtkApplication, window : GtkWindow) ~ Nil {
        array_args := Base->New[2];
        array_args[0] := IntHolder->New(application);
        array_args[1] := window;

        Proxy->GetDllProxy()->CallFunction("gtk_application_remove_window", array_args);

}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void gtk_application_remove_window(VMContext& context) {
                const size* application = (size_t*)APITools_GetObjectValue(context, 0);
                const size* window = (size_t*)APITools_GetObjectValue(context, 1);
                gtk_application_remove_window(application, window);
        }

---
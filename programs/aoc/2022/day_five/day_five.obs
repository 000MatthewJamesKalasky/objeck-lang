use Collection.Generic;

class AoC {
	function : Main(args : String[]) ~ Nil {
		if(args->Size() = 1) {
			stacks_max := 9;

			stacks := CompareList->New[stacks_max]<CharHolder>;
			each(i : stacks_max) {
				stacks[i] := CompareList->New()<CharHolder>;
			};
			
			inputs := ReadInput(args[0])<String>;

			# process stacks
			done := false;
			line := 0;
			for(; <>done & line < inputs->Size(); line += 1;) {
				input := inputs->Get(line);
				if(input->IsEmpty()) {
					done := true;
				}
				else {
					each(pos : input) {
						char := input->Get(pos);
						if(char->IsChar()) {
							select(pos) {
								label 1: {
									stacks[0]->AddFront(char);
								}

								label 5: {
									stacks[1]->AddFront(char);
								}

								label 9: {
									stacks[2]->AddFront(char);
								}

								label 13: {
									stacks[3]->AddFront(char);
								}

								label 17: {
									stacks[4]->AddFront(char);
								}

								label 21: {
									stacks[5]->AddFront(char);
								}

								label 25: {
									stacks[6]->AddFront(char);
								}

								label 29: {
									stacks[7]->AddFront(char);
								}

								label 33: {
									stacks[8]->AddFront(char);
								}
							};
						};
					};
				};
			};
			PrintStacks(stacks);

			# process instructions


		};
	}

	function : PrintStacks(stacks : CompareList[]<CharHolder>) ~ Nil {
		each(i : stacks) {
			stack := stacks[i];

			stack->Rewind();
			"{$i}: "->Print();
			while(stack->More()) {
				char := stack->Get();
				char->Print();
				# next
				stack->Next();

				if(stack->More()) {
					", "->Print();
				};
			};
			'\n'->Print();
		};
	}

	function : ReadInput(file : String) ~ Vector<String> {
		inputs := Vector->New()<String>;

		reader := System.IO.Filesystem.FileReader->New(file);
		leaving {
			reader->Close();
		};

		line := reader->ReadLine();
		while(line <> Nil) {
			inputs->AddBack(line);
			line := reader->ReadLine();
		};

		return inputs;
	}
}
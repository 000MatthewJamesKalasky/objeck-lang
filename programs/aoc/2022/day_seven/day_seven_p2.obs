use Collection.Generic;

class AoC {
	@file : String;
	@dir_totals : CompareVector<IntHolder>;
	@debug :  Bool;

	New(file : String) {
		@file := file;
		@dir_totals := CompareVector->New()<IntHolder>;
		@debug := false;
	}

	function : Main(args : String[]) ~ Nil {
		if(args->Size() = 1) {
			AoC->New(args[0])->Run();
		};
	}

	method : Run() ~ Nil {
		inputs := ReadInput(@file)<String>;

		commands := Vector->New()<Command>;
		each(i : inputs) {
			commands->AddBack(ParseCommand(inputs->Get(i)));
		};

		ExecuteCommands(commands);
		TotalDirectories(commands->Get(0), -1);
		PrintTree(commands->Get(0), -1);
		
		"---"->PrintLine();
		storage_goal := 30000000;
		space_free := 70000000 - commands->Get(0)->GetDirTotal();
		space_free->PrintLine();

		goal := storage_goal - space_free;
		goal->PrintLine();

		"---"->PrintLine();
		@dir_totals->Sort();
		done := false;
		for(i := 0; <>done & i < @dir_totals->Size(); i += 1;) {
			dir_total := @dir_totals->Get(i)->Get();
			if(dir_total >= goal) {
				dir_total->PrintLine();
				done := true;
			};
		};
	}

	method : PrintTree(command : Command, level : IntHolder) ~ Nil {
		if(command->GetType() = Command->Type->CD) {
			if(command->GetOperand()->Equals("..")) {
				level->Sub(1);
			}
			else {
				level->Add(1);
			};
		};

		for(i := 0; i < level->Get(); i += 1;) {
			'\t'->Print();
		};

		if(command->GetType() = Command->Type->CD) {
			dir_name := command->GetOperand();
			dir_total := command->GetDirTotal();
			if(dir_name->Equals("..")) {
				"\t\t({$dir_name})"->PrintLine();
			}
			else {
				"[directory: '{$dir_name}'] (size={$dir_total})"->PrintLine();
			};
		}
		else if(command->GetType() = Command->Type->FILE) {
			file_size := command->GetOperand()->ToInt();
			file_name := command->GetOperand2();
			"\tfile: '{$file_name}' (size={$file_size})"->PrintLine();
		};

		children := command->GetChildren();
		each(i : children) {
			PrintTree(children->Get(i), level);
		};
	}

	method : TotalDirectories(command : Command, level : IntHolder) ~ Nil {
		if(command->GetType() = Command->Type->CD) {
			if(command->GetOperand()->Equals("..")) {
				level->Sub(1);
			}
			else {
				level->Add(1);
			};
		};

		if(@debug) {
			for(i := 0; i < level->Get(); i += 1;) {
				'\t'->Print();
			};
		};

		if(@debug) {
			if(command->GetType() = Command->Type->CD) {
				dir_name := command->GetOperand();
				if(dir_name->Equals("..")) {
					"\t\t[{$dir_name}]"->PrintLine();
				}
				else {
					"directory: '[{$dir_name}]'"->PrintLine();
				};
			};
		};

		children := command->GetChildren();
		each(i : children) {
			child := children->Get(i);
			TotalDirectories(child, level);
			
			if(command->GetType() = Command->Type->CD) {
				dir_name := command->GetOperand();
				if(<>dir_name->Equals("..")) {
					if(child->GetType() = Command->Type->FILE) {
						command->AddDirTotal(child->GetOperand()->ToInt());
					}
					else if(child->GetType() = Command->Type->CD) {
						if(child->GetDirTotal() <> 0) {
							sub_total := child->GetDirTotal();
							command->AddDirTotal(sub_total);
							@dir_totals->AddBack(sub_total);
						};
					};
				};
			};
		};

		if(@debug) {
			if(command->GetType() = Command->Type->FILE) {
				file_size := command->GetOperand()->ToInt();
				file_name := command->GetOperand2();
				"\tfile: '{$file_name}' (size={$file_size})"->PrintLine();
			};
		};
	}

	method : ExecuteCommands(commands : Vector<Command>) ~ Nil {
		cur_dir : Command;
		dir_stack := Collection.Generic.Stack->New()<Command>;
		each(i : commands) {
			command := commands->Get(i);

			select(command->GetType()) {
				label Command->Type->CD {
					if(<>dir_stack->IsEmpty()) {
						dir_stack->Top()->AddChild(command);
					};

					dir_name := command->GetOperand();
					if(dir_name->Equals("..")) {
						dir_stack->Pop();
					}
					else {
						dir_stack->Push(command);
					};
				}

				label Command->Type->LS {
					dir_name := dir_stack->Top()->GetOperand();

					if(@debug) {
						for(j := 1; j < dir_stack->Size(); j += 1;) {
							'\t'->Print();
						};
						"At: '{$dir_name}'"->PrintLine();
					};
				}

				label Command->Type->DIR {
					dir_name := command->GetOperand();

					if(@debug) {
						for(j := 0; j < dir_stack->Size(); j += 1;) {
							'\t'->Print();
						};
						"Directory: {$dir_name}"->PrintLine();
					};
				}

				label Command->Type->FILE {
					file_size := command->GetOperand()->ToInt();
					file_name := command->GetOperand2();
					dir_stack->Top()->AddChild(command);
					
					if(@debug) {
						for(j := 0; j < dir_stack->Size(); j += 1;) {
							'\t'->Print();
						};
						"File: {$file_name} ({$file_size})"->PrintLine();
					};					
				}
			};
		};
	}

	method : ParseCommand(line : String) ~ Command {
		tokens := line->Split(" ");

		command : Command;
		if(tokens[0]->Trim()->Equals("$")) {
			if(tokens[1]->Trim()->Equals("cd")) {
				command := Command->New(Command->Type->CD, tokens[2]);
			}
			else if(tokens[1]->Trim()->Equals("ls")) {
				command := Command->New(Command->Type->LS);
			};
		}
		else if(tokens[0]->Trim()->Equals("dir")) {
			command := Command->New(Command->Type->DIR, tokens[1]);
		}
		else {
			command := Command->New(Command->Type->FILE, tokens[0], tokens[1]);
		};

		return command;
	}

	method : ReadInput(file : String) ~ Vector<String> {
		inputs := Vector->New()<String>;

		reader := System.IO.Filesystem.FileReader->New(file);
		leaving {
			reader->Close();
		};

		line := reader->ReadLine();
		while(line <> Nil) {
			if(<>line->IsEmpty()) {
				inputs->AddBack(line);
			};
			line := reader->ReadLine();
		};

		return inputs;
	}
}

class Command {
	@type : Command->Type;
	@operand : String;
	@operand2 : String;
	@dir_total : Int;
	@children : Vector<Command>;

	enum Type {
		CD,
		LS,
		DIR,
		FILE
	}

	New(type : Command->Type) {
		@type := type;
		@children := Vector->New()<Command>;
	}

	New(type : Command->Type, operand : String) {
		@type := type;
		@operand := operand;
		@children := Vector->New()<Command>;
	}

	New(type : Command->Type, operand : String, operand2 : String) {
		@type := type;
		@operand := operand;
		@operand2 := operand2;
		@children := Vector->New()<Command>;
	}

	method : public : GetType() ~ Command->Type {
		return @type;
	}

	method : public : GetOperand() ~ String {
		return @operand;
	}

	method : public : GetOperand2() ~ String {
		return @operand2;
	}

	method : public : AddChild(child : Command) ~ Nil {
		@children->AddBack(child);
	}

	method : public : GetChildren() ~ Vector<Command> {
		return @children;
	}

	method : public : AddDirTotal(dir_size : Int) ~ Nil {
		@dir_total += dir_size;
	}

	method : public : GetDirTotal() ~ Int {
		return @dir_total;
	}

	method : public : ToString() ~ String {
		select(@type) {
			label Command->Type->CD {
				return "Change Directory: '{$@operand}'";
			}

			label Command->Type->LS {
				return "List Directory";
			}

			label Command->Type->DIR {
				return "Directory: '{$@operand}'";
			}

			label Command->Type->FILE {
				return "File: '{$@operand2}' (size={$@operand})";
			}
		};

		return "<Unknown>";
	}
}
use Collection.Generic;

class AoC {
	function : Main(args : String[]) ~ Nil {
		if(args->Size() = 1) {
			inputs := ReadInput(args[0])<String>;

			commands := Vector->New()<Command>;
			each(i : inputs) {
				commands->AddBack(ParseCommand(inputs->Get(i)));
			};

			each(i : commands) {
				commands->Get(i)->ToString()->PrintLine();
				"---"->PrintLine();
			};
		};
	}

	function : ParseCommand(line : String) ~ Command {
		tokens := line->Split(" ");

		command : Command;
		if(tokens[0]->Trim()->Equals("$")) {
			if(tokens[1]->Trim()->Equals("cd")) {
				command := Command->New(Command->Type->CD, tokens[2]);
			}
			else if(tokens[1]->Trim()->Equals("ls")) {
				command := Command->New(Command->Type->LS);
			};
		}
		else if(tokens[0]->Trim()->Equals("dir")) {
			command := Command->New(Command->Type->DIR, tokens[1]);
		}
		else {
			command := Command->New(Command->Type->FILE, tokens[0], tokens[1]);
		};

		return command;
	}

	function : ReadInput(file : String) ~ Vector<String> {
		inputs := Vector->New()<String>;

		reader := System.IO.Filesystem.FileReader->New(file);
		leaving {
			reader->Close();
		};

		line := reader->ReadLine();
		while(line <> Nil) {
			if(<>line->IsEmpty()) {
				inputs->AddBack(line);
			};
			line := reader->ReadLine();
		};

		return inputs;
	}
}

class Command {
	@type : Command->Type;
	@operand : String;
	@operand2 : String;

	enum Type {
		CD,
		LS,
		DIR,
		FILE
	}

	New(type : Command->Type) {
		@type := type;
	}

	New(type : Command->Type, operand : String) {
		@type := type;
		@operand := operand;
	}

	New(type : Command->Type, operand : String, operand2 : String) {
		@type := type;
		@operand := operand;
		@operand2 := operand2;
	}

	method : public : GetType() ~ Command->Type {
		return @type;
	}

	method : public : GetOperand() ~ String {
		return @operand;
	}

	method : public : GetOperand2() ~ String {
		return @operand2;
	}

	method : public : ToString() ~ String {
		select(@type) {
			label Command->Type->CD {
				return "Change Directory: '{$@operand}'";
			}

			label Command->Type->LS {
				return "List Directory";
			}

			label Command->Type->DIR {
				return "Directory: '{$@operand}'";
			}

			label Command->Type->FILE {
				return "File: '{$@operand2}' (size={$@operand})";
			}
		};

		return "<Unknown>";
	}
}
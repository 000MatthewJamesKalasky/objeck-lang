class AoC {
	function : Main(args : String[]) ~ Nil {
		if(args->Size() = 1) {
			inputs := ReadInput(args[0])<String>;
			if(<>inputs->IsEmpty()) {
				row := inputs->Get(0);
				if(row->Size() = inputs->Size()) {
					size := inputs->Size();
					"matrix: {$size}x{$size}"->PrintLine();
					"---"->PrintLine();

					forest := Int->New[size, size];
					each(i : size) {
						row := inputs->Get(i);
						each(j : row) {
							forest[i,j] := row->Get(j) - '0';
						};
					};

					count += ViewableExternalEdges(forest);
					count += ViewableInternalEdges(forest);
					count->PrintLine();
					return;
				};
			};
		};

		">>> Unable to load matrix <<<"->PrintLine();
	}

	function : ViewableInternalEdges(forest : Int[,]) ~ Int {
		dims := forest->Size();
		x := dims[0]; y := dims[1];
		
		count := 0;
		each(i : x) {
			each(j : y) {
				if(i > 0 & j > 0 & i < x - 1 & j < y - 1) {
#					"{$i},{$j}"->PrintLine();

					# up
					temp := i;
					while(temp <> -1) {
#						System.IO.Standard->Print(forest[temp,j])->Print(',');
						temp -= 1;
					};
					# down
					temp := i;
					while(temp <> x) {
#						System.IO.Standard->Print(forest[temp,j])->Print(',');
						temp += 1;
					};
					# left
					temp := i;
					while(temp <> -1) {
#						System.IO.Standard->Print(forest[j, temp])->Print(',');
						temp -= 1;
					};					
					# right
					temp := i;
					while(temp <> x) {
#						System.IO.Standard->Print(forest[j, temp])->Print(',');
						temp += 1;
					};
					"\n"->Print();
				};
			};
			
		};

		return count;
	}

	function : ViewableExternalEdges(forest : Int[,]) ~ Int {
		dims := forest->Size();
		x := dims[0]; y := dims[1];

		count := 0;
		each(i : x) {
			each(j : y) {
				if(i = 0 | j = 0) {
					count += 1;
				}
				else if(i = x - 1 | j = y - 1) {
					count += 1;
				};
			};
		};

		return count;
	}

	function : ReadInput(file : String) ~ Collection.Generic.Vector<String> {
		inputs := Collection.Generic.Vector->New()<String>;

		reader := System.IO.Filesystem.FileReader->New(file);
		leaving {
			reader->Close();
		};

		line := reader->ReadLine();
		while(line <> Nil) {
			if(<>line->IsEmpty()) {
				inputs->AddBack(line);
			};
			line := reader->ReadLine();
		};

		return inputs;
	}
}
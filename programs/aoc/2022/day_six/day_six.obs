class AoC {
	function : Main(args : String[]) ~ Nil {
		if(args->Size() = 1) {
			input := System.IO.Filesystem.FileReader->ReadFile(args[0]);
			input_size := input->Size();
			"{$input_size}: '{$input}'"->PrintLine();

			buffer := LoadBuffer(input, 4);
			if(IsMarker(buffer)) {
				ShowBuffer(buffer, 0);
			}
			else {
				found := false;
				for(i := 1; <>found & i < input->Size(); i += 1;) {
					if(UpdateBufferStep(buffer, input, i)) {
						if(IsMarker(buffer)) {
							ShowBuffer(buffer, i);
							found := true;
						};
					};
				};
			};
		};
	}

	function : ShowBuffer(buffer : Char[], index : Int) ~ Nil {
		str_buffer := String->New(buffer);
		index += str_buffer->Size();
		"{$index}: '{$str_buffer}'"->PrintLine();
	}


	function : UpdateBufferStep(buffer : Char[], input : String, pos : Int) ~ Bool {
		each(i : buffer) {
			char := input->Get(pos++);
			if(char = '\0') {
				return false;
			};
			buffer[i] := char;
		};

		return true;
	}

	function : LoadBuffer(input : String, size : Int) ~ Char[] {
		buffer := Char->New[size];
		
		each(i : size) {
			buffer[i] := input->Get(i);
		};

		return buffer;
	}

	function : IsMarker(buffer : Char[]) ~ Bool {
		each(i : buffer) {
			char := buffer[i];
			j := i + 1;
			for(; j < buffer->Size(); j += 1;) {
				if(buffer[j] = char) {
					return false;
				};
			};
		};

		return true;
	}
}
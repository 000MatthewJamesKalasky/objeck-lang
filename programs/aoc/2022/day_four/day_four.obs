use Collection.Generic;

class AoC {
	function : Main(args : String[]) ~ Nil {
		if(args->Size() = 1) {
			inputs := ReadInput(args[0])<String>;

			each(i : inputs) {
				input := inputs->Get(i);

				elves := input->Split(",");
			
				elf_one := elves[0];
				elf_one_range := elf_one->Split("-");
				elf_one_pair := Pair->New(elf_one_range[0]->ToInt(), elf_one_range[1]->ToInt())<IntHolder, IntHolder>;
				
				elf_two := elves[1];
				elf_two_range := elf_two->Split("-");
				elf_two_pair := Pair->New(elf_two_range[0]->ToInt(), elf_two_range[1]->ToInt())<IntHolder, IntHolder>;

				IsContained(elf_one_pair, elf_two_pair)->PrintLine();

				"==="->PrintLine();
			};
		};
	}

	function : IsContained(elf_one_pair : Pair<IntHolder, IntHolder>, elf_two_pair : Pair<IntHolder, IntHolder>) ~ Bool {
		return false;
	}

	function : ReadInput(file : String) ~ Vector<String> {
		inputs := Vector->New()<String>;

		reader := System.IO.Filesystem.FileReader->New(file);
		leaving {
			reader->Close();
		};

		line := reader->ReadLine();
		while(line <> Nil) {
			if(<>line->IsEmpty()) {
				inputs->AddBack(line);
			};
			line := reader->ReadLine();
		};

		return inputs;
	}
}
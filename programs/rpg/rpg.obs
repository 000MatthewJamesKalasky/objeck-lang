use Collection.Generic;

# ------

class Test {
	function : Main(args : String[]) ~ Nil {
		slime := Slime->New(3);
		slime->ToString()->PrintLine();

		rat := Rat->New(4);
		rat->ToString()->PrintLine();

		"---"->PrintLine();

		round := 1;
		ties := 1;
		while(slime->IsAlive() & rat->IsAlive()) {			
			if(round % 2 = 0) {
				slime_attack := slime->Attack();
				rat_defense := rat->Defend();
				
				attack := slime_attack - rat_defense;
				if(attack <= 0) {
					attack := 1 + ties % 3;
					ties += 1;
				};
				rat->SubtractHitPoints(attack);
				
				status := rat->ToString();
				"[{$round}: slime attack rat for {$attack}] => {$status}"->PrintLine();
			}
			else {
				rat_attack := rat->Attack();
				slime_defense := slime->Defend();
				
				attack := rat_attack - slime_defense;
				if(attack <= 0) {
					attack := 1 + ties % 3;
					ties += 1;
				};
				slime->SubtractHitPoints(attack);
				
				status := slime->ToString();
				"[{$round}: rat attack for {$attack}] => {$status}"->PrintLine();
			};

			round += 1;
		};

		"---"->PrintLine();
		if(<>slime->IsAlive()) {
			"*** slime is dead! ***"->PrintLine();
		}
		else {
			"*** rat is dead! ***"->PrintLine();
		};
	}
}

# ------

class Character {
	@name : String;
	@type : Type;
	@level : Int; # 1-20
	
	@hit_points : Int;
	
	@strength : Int; # 1-50
	@stamina : Int; # 1-50

	@endurance : Int; # 1-50
	@agility : Int; # 1-50

	@weapon : Weapon;
	@armor : Vector<Armor>;

	enum Type {
		FIGTHER,
		MAGE
	}

	New(name : String, type : Type, level : Int) {
		@name := name;
		@type := type;
		@level := level;

		@armor := Vector->New()<Armor>;
	}

	method : public : Set(hit_points : Int, strength : Int, stamina : Int, endurance : Int, agility : Int) ~ Nil {
		@hit_points := hit_points;
		@strength := strength;
		@stamina := stamina;
		@endurance := endurance;
		@agility := agility;
	}

	method : public : SubtractHitPoints(update : Int) ~ Nil {	
		@hit_points -= update;
		if(@hit_points < 0) {
			@hit_points := 0;
		};
	}

	method : public : AddHitPoints(update : Int) ~ Nil {	
		@hit_points += update;
	}

	method : public : Attack() ~ Int {
		damage : Int;
		if(@weapon <> Nil) {
			damage := @weapon->GetDamage() * @strength / 2 + (@stamina * 0.75 * @agility);
		}
		else {
			damage := @strength / 2 + (@stamina * 0.75 * @agility);
		};
"\tdamage={$damage}"->PrintLine();
		
		return damage;
	}

	method : public : Defend() ~ Int {
		armor := 0;
		each(i : @armor) {
			armor += @armor->Get(i)->GetDefense();
		};

		defense := armor * @endurance / 3 + @agility;
"\tdefense={$defense}"->PrintLine();

		return defense;
	}

	method : public : SetWeapon(@weapon : Weapon) ~ Nil {
		@weapon := @weapon;
	}

	method : public : AddArmor(armor : Armor) ~ Nil {
		@armor->AddBack(armor);
	}

	method : public : IsAlive() ~ Bool {
		return @hit_points > 0;
	}

	method : public : Move(location : Location) ~ Bool {
		return false;
	}

	method : public : GetType() ~ String {
		select(@type) {
			label Type->FIGTHER {
				return "Fighter";
			}

			label Type->MAGE {
				return "Mage";
			}

			other {
				return "Unknown";
			}
		};
	}

	method : public : ToString() ~ String {
		buffer := "";

		buffer += "name='{$@name}': ";
		type := GetType();
		buffer += "level={$@level}, ";
		buffer += "type='{$type}', ";
		buffer += "hit_points={$@hit_points}, ";
		buffer += "strength={$@strength}, ";
		buffer += "agility={$@agility}, ";
		buffer += "stamina={$@stamina}, ";
		buffer += "endurance={$@endurance}";

		return buffer;
	}
}

class Weapon {
	@damage : Int;

	New(damage : Int) {
		@damage := damage;
	}

	method : public : GetDamage() ~ Int {
		return @damage;
	}
}

class Armor {
	@defense : Int;
	@type : Type;

	enum Type {
		SHIELD,
		MAIN
	}

	New(defense : Int) {
		@defense := defense;
	}

	method : public : GetDefense() ~ Int {
		return @defense;
	}

	method : public : GetType() ~ Type {
		return @type;
	}
}

class Location {
	@x : Int;
	@y : Int;

	New() {
	}
}

# ------

class Slime from Character {
	New(ability_max : Int) {
		Parent("Slime", Type->FIGTHER, 1);

		hit_points := Int->Random(9, 11);
		strength := Int->Random(1, ability_max);
		stamina := Int->Random(1, ability_max);
		endurance := Int->Random(1, ability_max);
		agility := Int->Random(1, ability_max);
		
		Set(hit_points, strength, stamina, endurance, agility);
		SetWeapon(Weapon->New(1));
		AddArmor(Armor->New(3));
	}
}

class Rat from Character {
	New(ability_max : Int) {
		Parent("Rat", Type->FIGTHER, 1);

		hit_points := Int->Random(7, 9);
		strength := Int->Random(1, ability_max);
		stamina := Int->Random(1, ability_max);
		endurance := Int->Random(1, ability_max);
		agility := Int->Random(1, ability_max);
		
		Set(hit_points, strength, stamina, endurance, agility);
		SetWeapon(Weapon->New(2));
		AddArmor(Armor->New(2));
	}
}

class User from Character {
	New() {
		Parent();
	}
}
use Collection;

class Test {
	function : Main(args : String[]) ~ Nil {
		slime_weapon := Weapon->New(1, 1);
		slime_armor := Armor->New(3);
		slime := NPC->New(3);
		slime->ToString()->PrintLine();
		slime_attack := slime->Attack(slime_weapon);

		rat_weapon := Weapon->New(2, 1);
		rat_armor := Armor->New(2);
		rat := NPC->New(4);
		rat->ToString()->PrintLine();
		rat_defense := rat->Defend(rat_armor);
	}
}

class Character {
	@name : String;
	@type : Type;
	@level : Int; # 1-20
	
	@hit_points : Int;
	
	@strength : Int; # 1-50
	@stamina : Int; # 1-50

	@endurance : Int; # 1-50
	@agility : Int; # 1-50

	enum Type {
		FIGTHER,
		MAGE
	}

	New(name : String, type : Type, level : Int) {
		@name := name;
		@type := type;
		@level := level;
	}

	method : public : Set(hit_points : Int, strength : Int, stamina : Int, endurance : Int, agility : Int) ~ Nil {
		@hit_points := hit_points;
		@strength := strength;
		@stamina := stamina;
		@endurance := endurance;
		@agility := agility;
	}

	method : public : Attack(weapon : Weapon) ~ Int {
		# damage vs. defense: 

		# damage: 
		damage : Int;
		if(weapon <> Nil) {
			damage := weapon->GetDamage() * @strength + @stamina;
		}
		else {
			damage := @strength + @stamina;
		};
"damage={$damage}"->PrintLine();		
		
		return damage;
	}

	method : public : Defend(armor : Armor) ~ Int {
		# defense: 
		defense : Int;
		if(armor <> Nil) {
			defense := armor->GetDefense() * @endurance / 4  + @agility;
		}
		else {
			defense := @endurance / 4 + @agility;
		};
"defense={$defense}"->PrintLine();		
		
		return defense;
	}

	method : public : IsAlive() ~ Bool {
		return false;
	}

	method : public : Move(location : Location) ~ Bool {
		return false;
	}

	method : public : GetType() ~ String {
		select(@type) {
			label Type->FIGTHER {
				return "Fighter";
			}

			label Type->MAGE {
				return "Mage";
			}

			other {
				return "Unknown";
			}
		};
	}

	method : public : ToString() ~ String {
		buffer := "";

		buffer += "name='{$@name}', ";
		type := GetType();
		buffer += "level={$@level}, ";
		buffer += "hit_points={$@hit_points}, ";
		buffer += "strength={$@strength}, ";
		buffer += "stamina={$@stamina}, ";
		buffer += "endurance={$@endurance}";

		return buffer;
	}
}

class NPC from Character {	
	New(ability_max : Int) {
		Parent("Slime", Type->FIGTHER, 1);

		hit_points := Int->Random(7, 9);
		strength := Int->Random(1, ability_max);
		stamina := Int->Random(1, ability_max);
		endurance := Int->Random(1, ability_max);
		agility := Int->Random(1, ability_max);
		
		Set(hit_points, strength, stamina, endurance, agility);
	}
}

class User from Character {
	New() {
		Parent();
	}
}

class Weapon {
	@damage : Int;
	@speed : Int;

	New(damage : Int, speed : Int) {
		@damage := damage;
		@speed := speed;
	}

	method : public : GetDamage() ~ Int {
		return @damage;
	}

	method : public : GetSpeed() ~ Int {
		return @speed;
	}
}

class Armor {
	@defense : Int;
	@type : Type;

	enum Type {
		FIGTHER,
		MAGE
	}

	New(defense : Int) {
		@defense := defense;
	}

	method : public : GetDefense() ~ Int {
		return @defense;
	}

	method : public : GetType() ~ Type {
		return @type;
	}
}

class Location {
	@x : Int;
	@y : Int;

	New() {
	}
}
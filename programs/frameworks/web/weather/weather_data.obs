use System.IO.Filesystem;
use Web.HTTP;
use System.Time;
use Collection;

class ForcastDemo {
	function : Main(args : String[]) ~ Nil {
		forcast_data : Tuples.Pair<String, String>;

		if(args->Size() = 1 & (args[0]->StartsWith("data/") | args[0]->StartsWith("data\\"))) {
			forcast_data := FromFile(args[0]);
		}
		else {
			forcast_data := FromNet();
		}

		if(forcast_data <> Nil) {
			FormatHtml(forcast_data);
		}
		else {
			"-- Invalid URL or filename --"->ErrorLine()
		}
	}

	function : FormatHtml(forcast_data : Tuples.Pair<String, String>) ~ Nil {
		daily_data := ParseDailyForcast(forcast_data->GetFirst())

		loc_str := forcast_data->GetSecond();
		elev_str := daily_data->GetSecond();
		html := "<html><header></header<body>";

		html += "<b>";
		html += loc_str;
		html += ": "
		String->SetFloatPrecision(5);
		html += elev_str->ToString();
		html += " ft.</b><p>";

		html += "<table><tr><th>Date</th><th>When</th><th>Temperature</th><th>Rain/Snow</th><th>Description</th></tr>";
		daily_forcasts := daily_data->GetFirst();
		each(forcast in daily_forcasts) {
			html += "<tr>"
			
			html += "<td>"
			html += forcast->GetDate();
			html += "</td>"

			html += "<td>"
			html += forcast->GetName();
			html += "</td>"

			html += "<td>"
			html += forcast->GetTemperature();
			html += "</td>"

			html += "<td>"
			html += forcast->GetRainSnow();
			html += "%</td>"

			html += "<td width='400'>"
			html += forcast->GetDescription();
			html += "</td>"

			html += "</tr>";
		}
		html += "</table></p></body></html>";

		filename := "data/out.html";
		FileWriter->WriteFile(filename, html)
		"Write file: {$filename}..."->PrintLine();
	}

	function : FromNet() ~ Tuples.Pair<String, String> {
		forcast_doc : String;
		loc_str : String;

		lat_lon := PromptGeocodeAddress();			
		if(lat_lon <> Nil) {
			lat := lat_lon->GetFirst();
			lon := lat_lon->GetSecond();

			location := "https://api.weather.gov/points/{$lat},{$lon}"
			grid_bytes := HttpsClient->QuickGet(Url->New(location))
			if(grid_bytes <> Nil) {
				loc_data := ParseLocation(grid_bytes->ToString());
				forcast_bytes := HttpsClient->QuickGet(Url->New(loc_data->GetThird()))
				if(forcast_bytes <> Nil) {
					forcast_doc := forcast_bytes->ToString();
					if(<>Directory->Exists("data")) {
						Directory->Create("data")
					}

					city := loc_data->GetFirst()
					state := loc_data->GetSecond()
					loc_str := "{$city}, {$state}"

					first := city->ReplaceAll(' ', '_')
					second := state->ReplaceAll(' ', '_')
					third := "";
					each(i : 4) {
						third += Int->Random('a', 'z')->As(Char);
					}
					filename := "data/{$first}+{$second}+{$third}.json"->ToLower();
					status := FileWriter->WriteFile(filename, forcast_doc)
					"Write cache file: {$filename}, {$status}"->PrintLine()
				}
			}
		}

		if(forcast_doc <> Nil & loc_str <> Nil) {
			return Tuples.Pair->New(forcast_doc, loc_str)<String, String>
		}

		return Nil
	}

	function : FromFile(path_name : String) ~ Tuples.Pair<String, String> {
		forcast_doc := FileReader->ReadFile(path_name)
		loc_str : String;

		if(forcast_doc <> Nil) {
			start := path_name->FindLast('/');
			if(start < 0) {
				start := path_name->FindLast('\\');
			}

			if(start > 0) {
				start += 1;
				len := path_name->Size() - start - 1;
				if(len > 0) {
					filename := path_name->SubString(start, len);
					file_metadata := filename->Split('+')
					if(file_metadata->Size() > 2) {
						loc_str := "";

						each(i : 2) {
							file_tag := file_metadata[i];
							#
							# city
							#
							if(i = 0) {
								each(j : file_tag) {
									flag_pos := -1

									if(j = 0) {
										file_tag->Set(file_tag->Get(0) - 32, 0)
									}
									else if(file_tag->Get(j) = '_') {
										file_tag->Set(' ', j)
										flag_pos := j + 1;
									}

									if(flag_pos > 0) {
										file_tag->Set(file_tag->Get(flag_pos) - 32, flag_pos)
										flag_pos := -1
									}
								}
								loc_str += file_tag;
								loc_str += ", "
							}
							#
							# state
							#
							else {
								loc_str += file_tag->ToUpper();
							}					
						}
					}
				}
			}
		}

		if(forcast_doc <> Nil & loc_str <> Nil) {
			return Tuples.Pair->New(forcast_doc, loc_str)<String, String>
		}

		return Nil
	}

	function : ParseLocation(location : String) ~ Tuples.Triplet<String, String, String> {
		parser := Data.JSON.JsonParser->New(location);
		if(parser->Parse()) {
			root := parser->GetRoot();

			city := root->FindElements("properties/relativeLocation/properties/city")->GetString();
			state := root->FindElements("properties/relativeLocation/properties/state")->GetString();
			forcast_url := root->FindElements("properties/forecast")->GetString();

			return Tuples.Triplet->New(city, state, forcast_url)<String, String, String>;
		}

		return Nil;
	}

	function : PromptGeocodeAddress() ~ Tuples.Pair<FloatRef, FloatRef> {
		"Addess: "->Print();
		address := System.IO.Standard->ReadLine();

		"City: "->Print();
		city := System.IO.Standard->ReadLine();

		"State: "->Print();
		state := System.IO.Standard->ReadLine();

		return GetLatLon(address, city, state);
	}

	function : GetLatLon(address : String, city : String, state : String) ~ Tuples.Pair<FloatRef, FloatRef> {
		address := Url->Encode(address);
		city := Url->Encode(city);
		state := Url->Encode(state);

		url_str := "https://geocoding.geo.census.gov/geocoder/locations/address?street={$address}&city={$city}&state={$state}&benchmark=2020&format=json";
		geocode_doc := HttpsClient->QuickGet(Url->New(url_str));
		if(geocode_doc <> Nil) {
			parser := Data.JSON.JsonParser->New(geocode_doc->ToString());
			if(parser->Parse()) {
				address_matches_elm := parser->GetRoot()->FindElements("result/addressMatches");
				if(address_matches_elm->Size() > 0) {
					address_match_elm := address_matches_elm->Get(0);

					lat := address_match_elm->FindElements("coordinates/y")->GetString();
					lon := address_match_elm->FindElements("coordinates/x")->GetString();

					return Tuples.Pair->New(lat->ToFloat(), lon->ToFloat())<FloatRef, FloatRef>;
				}
			}
		}

		return Nil;
	}

	function : ParseDailyForcast(response : String) ~ Tuples.Pair<Vector<DailyForcast>, FloatRef> {
		daily_forcasts := Vector->New()<DailyForcast>;
		elevation : String;

		parser := Data.JSON.JsonParser->New(response);
		if(parser->Parse()) {

			root := parser->GetRoot();
			elevation := root->FindElements("properties/elevation/value")->GetString();

			period_elems := root->FindElements("properties/periods");
			if(period_elems <> Nil) {
				each(period_elem in period_elems) {
					name := period_elem->Get("name")->GetString();
					temperature := period_elem->Get("temperature")->GetString();
					temperature_unit := period_elem->Get("temperatureUnit")->GetString();
					description  := period_elem->Get("detailedForecast")->GetString();
					rain_perc_elem := period_elem->FindElements("probabilityOfPrecipitation/value");
					start_time := ParseTime(period_elem->Get("startTime")->GetString());
					end_time := ParseTime(period_elem->Get("endTime")->GetString());

					start_date_str := FormatDate(start_time);
					
					start_time_str := FormatHours(start_time);
					end_time_str := FormatHours(end_time);
					time_str := "{$start_time_str}-{$end_time_str}";

					temperature += 'Â°';
					temperature += temperature_unit;

					rain_snow_perc := rain_perc_elem->IsNull() ? "0" : rain_perc_elem->GetString();

					daily_forcasts->AddBack(DailyForcast->New(start_date_str, time_str, name, temperature, rain_snow_perc, description));
				}
			}
		}
		else {
			"-- Invalid JSON document --"->ErrorLine()
		}

		return Tuples.Pair->New(daily_forcasts, elevation->ToFloat())<Vector<DailyForcast>, FloatRef>;
	}

	function : FormatDate(time : Date) ~ String {
		day_str := "";

		day_str += time->GetMonth();
		day_str += '/';
		day_str += time->GetDay();
		day_str += '/';
		day_str += time->GetYear();

		return day_str;
	}

	function : FormatHours(time : Date) ~ String {
		time_str := "";

		time_24hr := time->GetHours();
		if(time_24hr < 12) {
			time_str += time_24hr;
			time_str += "AM";
		}
		else {
			time_str += time_24hr - 12;
			time_str += "PM";
		}

		return time_str;
	}

	function : ParseTime(date_str : String) ~ Date {
		date_str_offset := date_str->FindLast('-');
		date_substr := date_str->SubString(date_str_offset)
		return DateUtility->Parse(date_substr, "yyyy-MM-ddThh:mm:ss", false);
	}
}

class DailyForcast {
	@date_str : String;
	@time_str : String;
	@name : String;
	@temp_str : String;
	@rain_snow_perc : String;
	@description : String;

	New(date_str : String, time_str : String, name : String, temp_str : String, rain_snow_perc : String, description : String) {
		@date_str := date_str;
		@time_str := time_str;
		@name := name;
		@temp_str := temp_str;
		@rain_snow_perc := rain_snow_perc;
		@description := description;
	}

	method : public : GetName() ~ String {
		return @name;
	}

	method : public : GetTime() ~ String {
		return @time_str;
	}

	method : public : GetDate() ~ String {
		return @date_str;
	}

	method : public : GetTemperature() ~ String {
		return @temp_str;
	}

	method : public : GetRainSnow() ~ String {
		return @rain_snow_perc;
	}

	method : public : GetDescription() ~ String {
		return @description;
	}

	method : public : ToString() ~ String {
		buffer := "";

		buffer += "date='{$@date_str}',";
		buffer += "time='{$@time_str}',";
		buffer += "name='{$@name}',";
		buffer += "temperature='{$@temp_str}',";
		buffer += "rain or snow %='{$@rain_snow_perc}',";
		buffer += "description='{$@description}'";

		return buffer;
	}
}
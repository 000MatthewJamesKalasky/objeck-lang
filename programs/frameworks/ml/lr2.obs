class MultiRegression {
	# TODO: save calculated vectors
	function : Main(args : String[]) ~ Nil {
		data := LoadData();
		dims := data->Size();
		rows := dims[0]->As(Float);
		cols := dims[1];

		if(cols > 1) {
			"=== 0 ==="->PrintLine();
			data->ToString()->PrintLine();

			data_sums := VectorSums(data);
			data_sums->PrintLine();
			"---"->PrintLine();

			"=== 1 ==="->PrintLine();
			data_means := VectorMeans(data);
			data_means->PrintLine();

			"=== 2 ==="->PrintLine();
			x_squares := Float->New[cols - 1];
			for(i := 1; i < cols; i += 1;) {
				term_vector := VectorPower(data, i, 2.);
				term := VectorSum(term_vector);
				coff := term - Float->Pow(data_sums[i], 2.) / rows;			
# term->PrintLine();
# coff->PrintLine();
				x_squares[i - 1] := coff;
			};
			x_squares->ToString()->PrintLine();

			y_index := 0;
			xy_products := Float->New[cols - 1];
			for(i := 1; i < cols; i += 1;) {
				termvector := ProductSum(data, 0, i);
				termsum := VectorSum(termvector);
				coff := termsum - data_sums[y_index] * data_sums[i] / rows;
# termsum->PrintLine();
# coff->PrintLine();
				xy_products[i - 1] := coff;
			};
			xy_products->ToString()->PrintLine();

			# TODO: pick indexes, consider a range
			x_products := ProductSum(data, 1, 2);
			x_product_sum := VectorSum(x_products);

			coff_sum := data_sums[1];
			for(j := 2; j < data_sums->Size(); j += 1;) {
				coff_sum *= data_sums[j];
			};
			x_product := x_product_sum - coff_sum / rows;
# x_product_sum->PrintLine();
x_product->PrintLine();

			term_sum := x_squares[0];
			for(j := 1; j < x_squares->Size(); j += 1;) {
				term_sum *= x_squares[j];
			};
			x_product_pow := x_product * x_product;

			"=== 3 ==="->PrintLine();
			# TODO: looped based solution
			
			coff_dom := term_sum - x_product_pow;
			
			x_num := GetX(1, x_squares, 0, 1, xy_products, 2, x_product);
			x1 := x_num / coff_dom;
			x1->PrintLine();

			x_num := GetX(0, x_squares, 1, 0, xy_products, 2, x_product);
			x2 := x_num / coff_dom;
			x2->PrintLine();

			GetConst(x1, x2, data_means)->PrintLine();
		}
	}

	function : GetConst(x1 : Float, x2 : Float, data_means : Float[]) ~ Float {
		xterm_1 := data_means[0];
		xmul_1 := x1 * data_means[1];
		xmul_2 := x2 * data_means[2];

		return xterm_1 - xmul_1 - xmul_2;
	}

	function : GetX(i : Int, x_squares : Float[], j1 : Int, j2 : Int, xy_products : Float[], k : Int, x_product : Float) ~ Float {
		x_square := x_squares[i];
		xy_product_a := xy_products[j1];
		xy_product_b := xy_products[j2];

		return x_square * xy_product_a - xy_product_b * x_product;
	}

	function : ProductSum(input : Float[,], col_a : Int, col_b : Int) ~ Float[] {
		dims := input->Size();
		rows := dims[0];
		cols := dims[1];

		if(col_a < cols & col_b < cols) {
			out := Float->New[rows];

			each(r : rows) {		
				out[r] := input[r, col_a] * input[r, col_b]
			};

			return out;
		};

		return Nil;
	}

	function : VectorPower(input : Float[,], col : Int, pow : Float) ~ Float[] {
		dims := input->Size();
		rows := dims[0];
		cols := dims[1];

		if(col < cols) {
			out := Float->New[rows];

			each(r : rows) {		
				out[r] := Float->Pow(input[r, col], pow);
			};

			return out;
		};

		return Nil;
	}

	function : VectorMeans(input : Float[,]) ~ Float[] {
		dims := input->Size();
		rows := dims[0];
		cols := dims[1];

		out := Float->New[cols];
		
		each(c : cols) {
			sum := 0.;

			each(r : rows) {
				sum += input[r, c];
			};

			out[c] := sum / rows;
		};

		return out;
	}

	function : VectorSum(input : Float[]) ~ Float {
		rows := input->Size();
		
		sum := 0.;

		each(r : rows) {
			sum += input[r];
		};

		return sum;
	}

	function : VectorSums(input : Float[,]) ~ Float[] {
		dims := input->Size();
		rows := dims[0];
		cols := dims[1];

		out := Float->New[cols];
		
		each(c : cols) {
			sum := 0.;

			each(r : rows) {
				sum += input[r, c];
			};

			out[c] := sum;
		};

		return out;
	}

	function : LoadData() ~ Float[,] {
		return [
			[140., 60., 22.]
			[155., 62., 25.]
			[159., 67., 24.]
			[179., 70., 20.]
			[192., 71., 15.]
			[200., 72., 14.]
			[212., 75., 14.]
			[215., 78., 11.]];
	}
}
use Data.JSON.Scheme, Collection, API.OpenAI, System.IO.Filesystem, Data.JSON;

class Test {
	function : Main(args : String[]) ~ Nil {
		args_size := args->Size();
		if(args_size > 0) {
			token := GetApiKey();
			action := args[0];

			"action={$action}, args={$args_size}\n==="->PrintLine();
			
			#
			# Audio
			#
			if(action->Equals("translate") & args_size = 2) {
				file := args[1];
				content := System.IO.Filesystem.FileReader->ReadBinaryFile(file);
				text := API.OpenAI.Audio.Transcription->Translate("{$file}", content, "whisper-1", token);
				if(text <> Nil) {
					text->PrintLine();
				}
				else {
					"### Error calling: translate ###"->ErrorLine();
				};
			}
			else if(action->Equals("text_to_speech") & args_size = 2) {
				message := args[1];

				response := API.OpenAI.Audio.Speech->Speak("tts-1", message, "fable", "mp3", token)<String, ByteArrayRef>;				
				if(response->GetFirst()->Has("audio")) {
					System.IO.Filesystem.FileWriter->WriteFile("speech.mp3", response->GetSecond()->Get());
				};
			}
			#
			# Chat
			#
			else if(action->Equals("chat_complete") & args_size = 2) {
				message := args[1];

				messages := Vector->New()<Collection.Pair<String, String>>
				messages->AddBack(Collection.Pair->New("system", "You speak pig latin")<String, String>);
				messages->AddBack(Collection.Pair->New("user", message)<String, String>);

				API.OpenAI.Chat.Completion->Complete("gpt-3.5-turbo", messages, token)->ToString()->PrintLine();
			}
			#
			# File
			#
			else if(action->Equals("delete_file") & args_size = 2) {
				id := args[1];
				API.OpenAI.File->Delete(id, token)->PrintLine();
			}
			else if(action->Equals("list_files") & args_size = 1) {
				files := API.OpenAI.File->ListFiles(token);
				each(file in files) {
					file->GetId()->PrintLine();
				};
			}
			else if(action->Equals("show_file") & args_size = 2) {
				id := args[1];
				API.OpenAI.File->Retrieve(id, token)->PrintLine();
			}
			else if(action->Equals("upload_file") & args_size = 2) {
				name := args[1];
				API.OpenAI.File->LoadOrCreate(name, token);
			}
			#
			# Assistant
			#
			else if(action->Equals("list_assists") & args_size = 1) {
				assistants := Assistant->ListAssistants(token);
				if(assistants->IsEmpty()) {
					"No Assistants created"->PrintLine();
				}
				else {
					"Assistants:"->PrintLine();

					each(assistant in assistants) {
						id := assistant->GetId();
						name := assistant->GetName();
						model := assistant->GetModel();
						
						"\tid='{$id}', name='{$name}', model='{$model}'"->PrintLine();
					};
				};
			}
			else if(action->Equals("delete_assist") & args_size = 2) {
				id := args[1];
				success := Assistant->Delete(id, token);
				"Deleted: id='{$id}', success={$success}"->PrintLine();
			}
			else if(action->Equals("load_assist") & args_size = 2) {
				id := args[1];

				assistant := Assistant->Load(id, token);
				if(assistant = Nil) {
					Assistant->GetLastError()->PrintLine();
				}
				else {
					id := assistant->GetId();
					name := assistant->GetName();
					model := assistant->GetModel();
					"Loaded: id='{$id}', name='{$name}', model='{$model}'"->PrintLine();
				}
			}
			else if(action->Equals("load_assist_add_file") & args_size = 3) {
				id := args[1];
				filename := args[2];

				file := API.OpenAI.File->LoadOrCreate(filename, token);
				if(file = Nil) {
					API.OpenAI.File->GetLastError()->PrintLine();
				}
				else {
					assistant := Assistant->Load(id, token);
					assistant->AddFile(file);
					assistant->ToString()->PrintLine();
				};
			}
			else if(action->Equals("create_assist_with_files") & args_size = 3) {
				files := Vector->New()<API.OpenAI.File>;
				files->AddBack(API.OpenAI.File->LoadOrCreate(args[1], token));
				files->AddBack(API.OpenAI.File->LoadOrCreate(args[2], token));
				file_count := files->Size();

				# set tools
				tools := Vector->New()<String>;
				tools->AddBack("retrieval");
				tool_count := tools->Size();

				# create function definition
				params := Set->New()<ParameterType>;
				params->Insert(ParameterType->New("year", ParameterType->Type->INTEGER, "year the team played"));
				func := FunctionType->New("get_coach_by_year", params, ["year"], "The name of the head coach for a given year");
				
				funcs := Vector->New()<FunctionType>;
				funcs->AddBack(func);

				# create assistance
				assistant := Assistant->Create("gpt-3.5-turbo-0125", "DU Basketball", "DU Basketball", 
					"You are historian of University of Denver Men's basketball from the 1960's", 
					tools, files, funcs, token);
				if(assistant = Nil) {
					Assistant->GetLastError()->PrintLine();
				}
				else {
					id := assistant->GetId();

					name := assistant->GetName();
					model := assistant->GetModel();
					"Created: id='{$id}', name='{$name}', model='{$model}', files={$file_count}, tools={$tool_count}"->PrintLine();
				};
			}
			#
			# Thread
			#
			else if(action->Equals("create_thread_add_message") & args_size = 1) {
				thread := API.OpenAI.Thread->Create(token);
				if(thread = Nil) {
					API.OpenAI.Thread->GetLastError()->PrintLine();
				}
				else {
					thread->ToString()->PrintLine();
					Message->Create("user", "Who was the leading point guard in 1967?", thread, token);
				};
			}
			else if(action->Equals("load_thread_add_message") & args_size = 2) {
				id := args[1];

				thread := API.OpenAI.Thread->Load(id, token);
				if(thread = Nil) {
					API.OpenAI.Thread->GetLastError()->PrintLine();
				}
				else {
					thread->ToString()->PrintLine();
					msg := Message->Create("user", "Who was the leading point guard in 1967?", thread, token);
					msg->ToString()->PrintLine();
				};
			}
			else if(action->Equals("load_thread") & args_size = 2) {
				id := args[1];
				thread := API.OpenAI.Thread->Load(id, token);
				if(thread = Nil) {
					API.OpenAI.Thread->GetLastError()->PrintLine();
				}
				else {
					thread->ToString()->PrintLine();
				};
			}
			#
			# Messages
			#
			else if(action->Equals("list_messages") & args_size = 2) {
				thread_id := args[1];

				thread := API.OpenAI.Thread->Load(thread_id, token);
				thread->ToString()->PrintLine();

				messages := Message->ListMessages(thread, token);
				each(message in messages) {
					message->ToString()->PrintLine();
				};
			}
			else if(action->Equals("load_message") & args_size = 3) {
				thread_id := args[1];
				message_id := args[2];

				thread := API.OpenAI.Thread->Load(thread_id, token);
				thread->ToString()->PrintLine();

				message := Message->Load(message_id, thread, token);
				message->ToString()->PrintLine();
			}
			#
			# Runs
			#
			else if(action->Equals("create_chat_thread") & args_size = 2) {
				assistant_id := args[1];
				
				session := API.OpenAI.Chat.Conversation->New(Assistant->Load(assistant_id, token), true, token);
				session->AddFunction("get_coach_by_year", Callback(JsonElement) ~ JsonElement);

				done := false;
				do {
					query := Console->ReadLine();
					if(query->Equals("/quit")) {
						session->Close();		
						done := true;
					}
					else {
						response := session->Send(query, "user");

						index := 0;
						role := response->GetRole();
						contents := response->GetContents();
						each(content in contents) {
							type := content->GetFirst()->As(String);
							value := content->GetSecond()->As(String);

							"{$index}: [{$role}, type='{$type}']: value='{$value}'"->PrintLine();
						};
					};
				}
				while(<>done);

				session->Close();
			}
			else if(action->Equals("create_run") & args_size = 4) {
				assistant_id := args[1];
				thread_id := args[2];

				thread := API.OpenAI.Thread->Load(thread_id, token);
				thread->ToString()->PrintLine();

				assistant := Assistant->Load(assistant_id, token);
				assistant->ToString()->PrintLine();

				run := API.OpenAI.Run->Create(assistant, thread, token);
				run->ToString()->PrintLine();

				is_done := false;
				for(i := 0; <>is_done & i < 10; i += 1;) {
					System.Concurrency.Thread->Sleep(1500);
					run->Refresh(token);
					'.'->Print();
					is_done := run->GetStatus()->Equals("completed");
				};
				'\n'->Print();

				messages := Message->ListMessages(thread, token);
				if(<>messages->IsEmpty()) {
					messages->Get(0)->ToString()->PrintLine();
				};
				
				# Thread->Delete(thread->GetId(), token)->PrintLine();
			}
			#
			# Oh, no...
			#
			else {
				"Usage: Undefined action or invalid parameter..."->ErrorLine();					
			};
		};
	}

	function : Callback(params_json : JsonElement) ~ JsonElement {
#~		
params_json->ToString()->PrintLine();		
		response := Web.HTTP.HttpClient->QuickPost(Web.HTTP.Url->New("http://localhost:5000"), params_json->ToString()->ToByteArray(), "application/json");
		if(response <> Nil) {
			response_json := JsonParser->TextToElement(response->GetContent()->ToString());
			return response_json->Get("coach");
		};

		return Nil;
~#

		return JsonElement->New("Mr. Duck");		
	}

	function : GetApiKey() ~ String {
		token := FileReader->ReadFile("api_key.txt");
		if(token <> Nil) {
			return token->Trim();
		};

		return Nil;
	}
}
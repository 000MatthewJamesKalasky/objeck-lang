use Collection, API.OpenAI, System.IO.Filesystem, Data.JSON, Data.CSV;

class Test {
	function : Main(args : String[]) ~ Nil {
		token := GetApiKey();
		if(token <> Nil) {	
			if(args->Size() = 1 & args[0]->Equals("create")) {
				assistants := Assistant->ListAssistants(token);
				if(assistants->IsEmpty()) {
					"No Assistants created"->PrintLine();
				}
				else {
					"Assistants:"->PrintLine();

					each(assistant in assistants) {
						id := assistant->GetId();
						status := Assistant->Delete(id, token);
						"\tDeleted: id='{$id}', status={$status}"->PrintLine();
					};
				};

				FileWriter->WriteFile("assist_key.txt", CreateAssistant(["files/du_players_1967.json",	"files/du_players_1968.json"], token));
			}
			else {
				assist_key := FileReader->ReadFile("assist_key.txt");
				if(assist_key <> Nil) {
					ChatWithAssistant(assist_key, token);
				};
			};
		}
		else {
			">>> Unable to read API ID <<<"->ErrorLine();
		};
	}

	function : CreateAssistant(filenames : String[], token : String) ~ String {
		files := Vector->New()<API.OpenAI.File>;
		each(filename in filenames) {
			files->AddBack(API.OpenAI.File->LoadOrCreate(filename, token));
		};
		file_count := files->Size();

		# set tools
		tools := Vector->New()<String>;
		tools->AddBack("retrieval");
		tool_count := tools->Size();

		# create function callback stubs
		funcs := Vector->New()<FunctionType>;

		params := Set->New()<ParameterType>;
		params->Insert(ParameterType->New("year", ParameterType->Type->INTEGER, "year the team played"));
		func := FunctionType->New("get_coach_by_year", params, ["year"], "The name of the head coach for a given year");
		funcs->AddBack(func);

		params := Set->New()<ParameterType>;
		params->Insert(ParameterType->New("year", ParameterType->Type->INTEGER, "year the team played"));
		params->Insert(ParameterType->New("home-or-away", ParameterType->Type->STRING, "indicates rather the game is at home or away"));
		func := FunctionType->New("get_schedule_by_year", params, ["year", "home-or-away"], "The number of home or away games for a given year");
		funcs->AddBack(func);

		# create assistance
		assistant := Assistant->Create("gpt-3.5-turbo-0125", "DU Basketball", "DU Basketball", 
			"You are historian of University of Denver Men's basketball from the 1960's", 
			tools, files, funcs, token);
		# check for error
		if(assistant = Nil) {
			error_msg := Assistant->GetLastError();
			">>> {$error_msg} <<<"->ErrorLine();
		}
		else {
			# show assistance properties
			id := assistant->GetId();
			name := assistant->GetName();
			model := assistant->GetModel();
			"Created: id='{$id}', name='{$name}', model='{$model}', files={$file_count}, tools={$tool_count}"->PrintLine();

			return id;
		};

		return Nil;
	}

	function : ChatWithAssistant(assistant_id : String, token : String) ~ Nil {
		# bind function callbacks		
		session := API.OpenAI.Chat.Conversation->New(Assistant->Load(assistant_id, token), true, token);
		session->AddFunction("get_coach_by_year", CoachCallback(JsonElement) ~ JsonElement);
		session->AddFunction("get_schedule_by_year", ScheduleCallback(JsonElement) ~ JsonElement);

		# start chat
		done := false;
		do {
			"> "->Print();
			query := Console->ReadLine();
			if(query->Equals("/quit")) {
				session->Close();		
				done := true;
			}
			else {
				# send query
				response := session->Send(query, "user");

				# read response
				index := 0;
				role := response->GetRole();
				contents := response->GetContents();
				each(content in contents) {
					type := content->GetFirst()->As(String);
					value := content->GetSecond()->As(String);

					"{$index}: [{$role}, type='{$type}']: value='{$value}'"->PrintLine();
				};
			};
		}
		while(<>done);

		session->Close();
	}

	function : ScheduleCallback(params_json : JsonElement) ~ JsonElement {
		year := params_json->Get("year")->GetInt();
		home_or_away := params_json->Get("home-or-away")->GetString();
				
		# query csv files
		table := CsvTable->New(System.IO.Filesystem.FileReader->ReadFile("files/du_schedule_{$year}.csv"));
		if(table->IsParsed()) {
			"Document parsed..."->PrintLine();
			if(home_or_away->Equals("away")) {
				return JsonElement->New(table->Search("At", "@")->Size() - 1);
			}
			else {
				return JsonElement->New(table->Search("At", "")->Size() - 1);
			};
		};

		return Nil;
	}

	function : CoachCallback(params_json : JsonElement) ~ JsonElement {
#~		
		# python callback example
		params_json->ToString()->PrintLine();		
		response := Web.HTTP.HttpClient->QuickPost(Web.HTTP.Url->New("http://localhost:5000"), params_json->ToString()->ToByteArray(), "application/json");
		if(response <> Nil) {
			response_json := JsonParser->TextToElement(response->GetContent()->ToString());
			return response_json->Get("coach");
		};

		return Nil;
~#

		">>> Coach Callback <<<"->PrintLine();
		return JsonElement->New("Mr. Duck");		
	}

	function : GetApiKey() ~ String {
		token := FileReader->ReadFile("api_key.txt");
		if(token <> Nil) {
			return token->Trim();
		};

		return Nil;
	}
}
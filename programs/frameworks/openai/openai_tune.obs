use Collection, API.OpenAI, API.OpenAI.FineTuning, System.IO.Filesystem, Data.JSON, Data.CSV;

class Test {
	function : Main(args : String[]) ~ Nil {
		token := GetApiKey();
		if(token <> Nil & args->Size() > 0) {
			command := args[0];

			if(command->Equals("upload") & args->Size() = 2) {
				filename := args[1];
				data := FileReader->ReadFile(filename)->ToByteArray();
				API.OpenAI.File->Create(filename, "fine-tune", data, token)->PrintLine();
			}
			else if(command->Equals("list-files")) {
				files := API.OpenAI.File->ListFiles(token);
				if(files <> Nil) {
					each(file in files) {
						name := file->GetFilename();
						id := file->GetId();
						"file='{$name}', id='{$id}'"->PrintLine();
					};
				}
				else {
					API.OpenAI.File->GetLastError()->PrintLine();
				};
			}
			else if(command->Equals("get-file") & args->Size() = 2) {
				file_id := args[1];

				content := API.OpenAI.File->Retrieve(file_id, token);
				if(content <> Nil) {
					content->PrintLine();
				}
				else {
					API.OpenAI.File->GetLastError()->PrintLine();
				};
			}
			else if(command->Equals("list-checkpoints") & args->Size() = 2) {
				job_id := args[1];
				checkpoints := API.OpenAI.FineTuning.Tuning->ListCheckpoints(job_id, 2, token);
				if(checkpoints <> Nil) {
					each(checkpoint in checkpoints) {
						checkpoint->ToString()->PrintLine();
					};
				}
				else {
					API.OpenAI.File->GetLastError()->PrintLine();
				};
			}
			else if(command->Equals("load-checkpoint") & args->Size() = 2) {
				job_id := args[1];
				checkpoint := API.OpenAI.FineTuning.Tuning->Load(job_id, token);
				if(checkpoint <> Nil) {
					checkpoint->ToString()->PrintLine();
				}
				else {
					API.OpenAI.File->GetLastError()->PrintLine();
				};
			}
			else if(command->Equals("cancel-job")) {
				job_id := args[1]
				job := API.OpenAI.FineTuning.Tuning->Load(job_id, token);
				if(job <> Nil) {
					job := job->Cancel(job->GetId(), token);
					job->GetStatus()->PrintLine();
				}
				else {
					API.OpenAI.File->GetLastError()->PrintLine();
				};
			}
			else if(command->Equals("list-jobs")) {
				jobs := API.OpenAI.FineTuning.Tuning->ListJobs(2, token);
				if(jobs <> Nil) {
					each(job in jobs) {
						id := job->GetId();
						status := job->GetStatus();
						"job={$id}, status='{$status}"->PrintLine();
					};
				}
				else {
					API.OpenAI.File->GetLastError()->PrintLine();
				};
			}
			else if(command->Equals("list-events") & args->Size() = 2) {
				job_id := args[1];
				events := API.OpenAI.FineTuning.Tuning->ListEvents(job_id, token);
				if(events <> Nil) {
					each(event in events) {
						event->ToString()->PrintLine();
					};
				}
				else {
					API.OpenAI.File->GetLastError()->PrintLine();
				};
			}
			else if(command->Equals("create-job") & args->Size() = 2) {
				filename := args[1];
				file := API.OpenAI.File->LoadOrCreate(filename, "fine-tune", token);

				name := file->GetFilename();
				id := file->GetId();
				"file='{$name}', id='{$id}'"->PrintLine();

				tuning_job := Tuning->Create("gpt-3.5-turbo", id, token);
				tuning_job->ToString()->PrintLine();
			}
			else {
				">>> Invalid command or parameters for '{$command}' <<<"->ErrorLine();
			}
		};
	}

	function : GetApiKey() ~ String {
		token := FileReader->ReadFile("openai_api_key.dat");
		if(token <> Nil) {
			return token->Trim();
		};

		return Nil;
	}
}
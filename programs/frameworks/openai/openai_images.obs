use Collection, API.OpenAI, System.IO.Filesystem, Data.JSON, Data.CSV;

class Test {
	function : Main(args : String[]) ~ Nil {
		token := GetApiKey();
		if(token <> Nil & args->Size() > 0) {
			command := args[0];

			if(command->Equals("create") & args->Size() = 2) {
				prompt := args[1];
				
				image := Image->Create(prompt, token);
				if(image <> Nil) {
					urls := image->GetUrls();
					each(url in urls) {
						url->GetUrl()->PrintLine();
					};
				};
			}
			else if(command->Equals("variation") & args->Size() = 2) {
				image_content := FileReader->ReadBinaryFile(args[1]);
				if(image_content <> Nil) {
					image_name := args[1];

					image := Image->Variation(image_name, image_content, token);
					if(image <> Nil) {
						urls := image->GetUrls();
						each(url in urls) {
							url->GetUrl()->PrintLine();
						};
					};
				};
			}
			else if(command->Equals("edit") & args->Size() = 3) {
				image_content := FileReader->ReadBinaryFile(args[1]);
				if(image_content <> Nil) {
					image_name := args[1];
					prompt := args[2];

					image := Image->Edit(image_name, image_content, prompt, token);
					if(image <> Nil) {
						urls := image->GetUrls();
						each(url in urls) {
							url->GetUrl()->PrintLine();
						};
					};
				};
			}
			else {
				args_size := args->Size();
				">>> Invalid command or parameters for '{$command}' with {$args_size} argument(s) <<<"->ErrorLine();
			};
		}
	}

	function : GetApiKey() ~ String {
		token := FileReader->ReadFile("openai_api_key.dat");
		if(token <> Nil) {
			return token->Trim();
		};

		return Nil;
	}
}
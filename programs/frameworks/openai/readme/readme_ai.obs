use API.OpenAI, API.OpenAI.Chat, Data.JSON, Collection;

class ReadmeBuilder {
	@config_json : JsonElement;

	@convo : Conversation;	
	@model : String;
	@token : String;
	
	@input_html : String;
	@merged_markdown : String;
	
	New(filename : String) {
		config_data := System.IO.Filesystem.FileReader->ReadFile(filename);
		if(config_data = Nil) {
			">>> Unable to read configuration file <<"->PrintLine();
			Runtime->Exit(1);
		};

		@config_json := JsonParser->TextToElement(config_data);

		openai_token_file_json := @config_json->Get("openai_token_config");
		if(openai_token_file_json = Nil) {
			">>> Unable to read openai token file: '{$openai_token_file_json}' <<"->PrintLine();
			Runtime->Exit(1);
		};

		@token := GetApiKey(openai_token_file_json->GetString());
		if(@token = Nil) {
			">>> Unable to parse openai token file <<"->PrintLine();
			Runtime->Exit(1);
		};

		openai_model_json := @config_json->Get("openai_model");
		if(openai_model_json = Nil) {
			">>> Unable to read model file <<"->PrintLine();
			Runtime->Exit(1);
		};
		@model := openai_model_json->GetString();
	}

	function : Main(args : String[]) ~ Nil {
		if(args->Size() <> 1) {
			">>> readme: obr readme_ai readme_config.json <<<"->ErrorLine();
			Runtime->Exit(1);
		};

		builder := ReadmeBuilder->New(args[0]);
		if(builder->Build()) {
			builder->MakeHtml()->PrintLine();
			"---"->PrintLine();
			builder->MakeMarkdown()->PrintLine();
		};
	}

	method : Build() ~ Bool {
		if(@token = Nil | @model = Nil) {
			return false;
		};

		assist := Assistant->Create(@model, "README builder", "README builder that produces HTML and markdown", 
			"You can format information into HTML or markdown", @token)
		if(assist = Nil) {
			return false;
		};
		@convo := Conversation->New(assist, @token);

		content_in_file := @config_json->Get("content_in_file");
		if(content_in_file = Nil) {
			">>> Unable file input content file <<"->ErrorLine();
			return false;
		};
		
		content_in := System.IO.Filesystem.FileReader->ReadFile(content_in_file->GetString());
		if(content_in = Nil) {
			">>> Unable read input content file <<"->ErrorLine();
			return false;
		};

		query := "Please format the content after '###' marker into a HTML list without outer tags.
			The lines before '===' marker and '---' are paragraphs.
			Lines that start with '*' are list items.
			Lines that start with tab characters are inner lists.
			Make the first paragraph sound like a new product feature statement.
			Output only HTML.
			###
			{$content_in}";

		# make html
		@input_html := Send(query);
		if(@input_html = Nil) {
			">>> Unable process html <<"->ErrorLine();
			return false;
		};

		# make markdown
		query := "Use the prior instructions however output only markdown instead of HTML.";

		@merged_markdown := Send(query);
		if(@merged_markdown = Nil) {
			">>> Unable process markdown <<"->ErrorLine();
			return false;
		};

		End();

		return true;
	}

	method : MakeHtml() ~ String {
		template_in_file := @config_json->Get("template_in_file");
		if(template_in_file = Nil) {
			">>> Unable file template content file <<"->ErrorLine();
			return Nil;
		};
		
		html_template := System.IO.Filesystem.FileReader->ReadFile(template_in_file->GetString());
		if(html_template = Nil) {
			">>> Unable read template content file <<"->ErrorLine();
			return Nil;
		};

		merged_html := html_template->Replace("### CONTENT ####", @input_html);			
		System.IO.Filesystem.FileWriter->WriteFile("readme.html", merged_html);

		merged_html_size := merged_html->Size();
		"Write 'readme.html', size={$merged_html_size}..."->PrintLine();

		return merged_html;
	}

	method : MakeMarkdown() ~ String {
		System.IO.Filesystem.FileWriter->WriteFile("readme.md", @merged_markdown);
		@merged_markdown_size := @merged_markdown->Size();
		"Write 'readme.md', size={$@merged_markdown_size}..."->PrintLine();

		return @merged_markdown;
	}

	method : Complete(message : String) ~ String {
		query := Collection.Pair->New("user", Data.JSON.JsonElement->Encode(message))<String, String>;
		
		completion := Completion->Complete(@model, query, @token);
		if(completion = Nil) {
			Completion->GetLastError()->ErrorLine();
			return Nil;
		};

		first_choice := completion->GetFirstChoice();
		if(first_choice = Nil) {
			return Nil;
		};

		message_choice := first_choice->GetMessage()<String, String>;
		return message_choice->GetSecond();
	}

	method : Send(message : String) ~ String {
		contents := @convo->Send(Data.JSON.JsonElement->Encode(message), "user")->GetContents();
		if(contents->Size() > 0) {
			content := contents->Get(0)<String, String>;
			return Data.JSON.JsonElement->Decode(content->GetSecond()<String>);
		};

		return Nil;
	}

	method : End() ~ Bool {
		if(@convo <> Nil) {
			return @convo->Close();
		};

		return false;
	}

	method : GetApiKey(filename : String) ~ String {
		@token := System.IO.Filesystem.FileReader->ReadFile(filename);
		if(@token <> Nil) {
			@token := @token->Trim();
			if(<>@token->StartsWith("sk-")) {
				">>> Unable to read openai token file: '{$filename}' <<"->ErrorLine();
				return Nil;
			};

			return @token;
		};

		return Nil;
	}
}
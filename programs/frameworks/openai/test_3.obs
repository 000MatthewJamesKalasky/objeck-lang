use Web.HTTP, Collection, System.IO.Filesystem, Data.JSON, Web.HTTP.Server;

bundle API.OpenAI {
	class Test {
		function : Main(args : String[]) ~ Nil {
			if(args->Size() = 2) {
				key := args[1];

				part_a_headers := Map->New()<String, String>;
				part_a_headers->Insert("Content-Disposition", "form-data; name=\"purpose\"");
				part_a := MultipartContent->New(part_a_headers, "assistants"->ToByteArray());

				part_b_headers := Map->New()<String, String>;
				part_b_headers->Insert("Content-Disposition", "form-data; name=\"file\"; filename=\"foo.json\"");
				part_b_headers->Insert("Content-Type", "application/octet-stream");
				part_b := MultipartContent->New(part_b_headers, "{ \"value\": 17 }"->ToByteArray());

				encoder := MultipartEncoder->New();
				encoder->Add(part_a);
				encoder->Add(part_b);
				boundry := encoder->GetBoundary();
				data := encoder->ToByteArray();
				FileWriter->WriteFile("debug/broken.txt", data);

				# --------
#~
				boundry := "--------------------------OH8iaaTMuIlMnbNRt76GZo";
				cr_lf := "\r\n";
				
				temp_str := "--{$boundry}{$cr_lf}";
				temp_str += "Content-Disposition: form-data; name=\"purpose\"{$cr_lf}";
				temp_str += "{$cr_lf}";
				temp_str += "assistants{$cr_lf}";
				temp_str += "--{$boundry}{$cr_lf}";
				temp_str += "Content-Disposition: form-data; name=\"file\"; filename=\"foo.json\"{$cr_lf}";
				temp_str += "Content-Type: application/octet-stream{$cr_lf}";
				temp_str += "{$cr_lf}";
				temp_str += "{ \"value\": 17 }{$cr_lf}";
				temp_str += "--{$boundry}--";
				data := temp_str->ToByteArray();
				FileWriter->WriteFile("debug/works.txt", data);
~#
				headers := Map->New()<String, String>;
				headers->Insert("Authorization", "Bearer sk-{$key}");
				headers->Insert("Content-Type", "multipart/form-data; boundary={$boundry}");

				response_doc := HttpsClient->QuickPost(
					Url->New("https://api.openai.com/v1/files"), 
					data, "multipart/form-data", headers);
				response_doc->ToString()->PrintLine();
			};
		}

		function : GetStringValue(name : String, element : JsonElement) ~ String {
			value := "";

			value_json := element->Get(name);
			if(value_json <> Nil & <>value_json->IsNull()) {
				value := value_json->GetString();
			};

			return value;
		}
	}

	class File {
		New() {}
	}

	class Assistant {
		@request_json : JsonElement;
		@model : String;
		@name : String;
		@description : String;
		@instructions : String;

		@tools : Vector<String>;
		@files : Vector<File>;

		New(model : String) {
			@model := model;

			@tools := Vector->New()<String>;
		}

		New(model : String, name : String, description : String) {
			@model := model;
			@name := name;
			@description := description;

			@tools := Vector->New()<String>;
		}

		method : public : IsLoaded() ~ Bool {
			return @request_json <> Nil;
		}

		method : public : SetName(name : String) ~ Nil {
			@name := name;
		}

		method : public : SetDescription(description : String) ~ Nil {
			@description := description;
		}

		method : public : SetInstructions(instructions : String) ~ Nil {
			@instructions := instructions;
		}

		method : public : AddFile(file : File) ~ Nil {
			@files->AddBack(file);
		}

		method : public : AddTool(tool : String) ~ Nil {
			@tools->AddBack(tool);
		}

		# TODO: add metadata

		method : public : Build() ~ Bool {
			if(@model = Nil) {
				return false;
			};

			builder := JsonBuilder->New();
			create_json := builder->PushObject();
			create_json->Insert("model", @model);

			if(@name <> Nil) {
				create_json->Insert("name", @name);
			};

			if(@description <> Nil) {
				create_json->Insert("description", @description);
			};

			if(@instructions <> Nil) {
				create_json->Insert("instructions", @instructions);
			};


			# tools
			tools_json := JsonElement->New(JsonElement->JsonType->ARRAY);
			each(tool in @tools) {
				tool_json := JsonElement->New(JsonElement->JsonType->OBJECT);
				tool_json->Insert("type", tool);
				tools_json->Add(tool_json);
			};
			create_json->Insert("tools", tools_json);

			@request_json := builder->PopAll();
			return true;
		}

		method : public : ToJson() ~ String {
			if(@request_json = Nil) {
				Build();
			};

			if(@request_json = Nil) {
				return "{}";
			};

			return @request_json->ToString();
		}
	}
}
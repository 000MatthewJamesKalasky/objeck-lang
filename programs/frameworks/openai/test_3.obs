use Web.HTTP, Collection, System.IO.Filesystem, Data.JSON, Web.HTTP.Server;

bundle API.OpenAI {
	class Test {
		function : Main(args : String[]) ~ Nil {
			if(args->Size() = 1) {
#				key := args[0];

				file_in := System.IO.Filesystem.FileReader->ReadBinaryFile(args[0]);
				
				headers := Map->New()<String, String>;
				headers->Insert("Content-Type", "application/json");
				multi_part := MultipartContent->New(headers, file_in);

				encoder := MultipartEncoder->New();
				encoder->Add(multi_part);
				data := encoder->ToByteArray();
				
				decoder := MultipartDecoder->New(data);
				parts := decoder->Parse()<MultipartContent>;

				part := parts->Get(0);
				part->GetContent()->Size()->PrintLine();

				System.IO.Filesystem.FileWriter->WriteFile("foo.jpg", part->GetContent());


#~
				assistant := API.OpenAI.Assistant->New("gpt-3.5-turbo-0125", "Tutor", "Personal math tutor");
				assistant->SetInstructions("I can only add.")
				assistant->AddTool("retrieval");
				
				headers := Map->New()<String, String>;
				headers->Insert("Authorization", "Bearer sk-{$key}");
				headers->Insert("OpenAI-Beta", "assistants=v1");

				data := assistant->ToJson();

				response_doc := HttpsClient->QuickPost(
					Url->New("https://api.openai.com/v1/assistants"), 
					data, "application/json", headers);

				if(response_doc <> Nil) {
					response_json := JsonParser->TextToElement(response_doc->ToString());

					created_at := GetStringValue("created_at", response_json);
					instructions := GetStringValue("instructions", response_json);
					id := GetStringValue("id", response_json);
					description := GetStringValue("description", response_json);
					model := GetStringValue("model", response_json);
					name := GetStringValue("name", response_json);
					object := GetStringValue("object", response_json);

					"[{$created_at}], [{$instructions}], [{$id}], [{$description}], [{$model}], [{$name}], [{$object}]"->PrintLine();
								
				};
~#				
			};
		}

		function : GenerateBoundary() ~ String {
			buffer := "--";

			do {
				c := Int->Random(0x21, 0x7e)->ToChar();
				select(c) {
					label '(' 
					label ')' 
					label '<' 
					label '>' 
					label '@' 
					label ',' 
					label ';' 
					label ':' 
					label '\\' 
					label '/' 
					label '[' 
					label ']' 
					label '?' 
					label '=' {}

					other {
						buffer->Append(c);
					}
				};
			}
			while(buffer->Size() < 46)

			return buffer;
		}

		function : GetStringValue(name : String, element : JsonElement) ~ String {
			value := "";

			value_json := element->Get(name);
			if(value_json <> Nil & <>value_json->IsNull()) {
				value := value_json->GetString();
			};

			return value;
		}
	}

	class File {
		New() {}
	}

	class Assistant {
		@request_json : JsonElement;
		@model : String;
		@name : String;
		@description : String;
		@instructions : String;

		@tools : Vector<String>;
		@files : Vector<File>;

		New(model : String) {
			@model := model;

			@tools := Vector->New()<String>;
		}

		New(model : String, name : String, description : String) {
			@model := model;
			@name := name;
			@description := description;

			@tools := Vector->New()<String>;
		}

		method : public : IsLoaded() ~ Bool {
			return @request_json <> Nil;
		}

		method : public : SetName(name : String) ~ Nil {
			@name := name;
		}

		method : public : SetDescription(description : String) ~ Nil {
			@description := description;
		}

		method : public : SetInstructions(instructions : String) ~ Nil {
			@instructions := instructions;
		}

		method : public : AddFile(file : File) ~ Nil {
			@files->AddBack(file);
		}

		method : public : AddTool(tool : String) ~ Nil {
			@tools->AddBack(tool);
		}

		# TODO: add metadata

		method : public : Build() ~ Bool {
			if(@model = Nil) {
				return false;
			};

			builder := JsonBuilder->New();
			create_json := builder->PushObject();
			create_json->Insert("model", @model);

			if(@name <> Nil) {
				create_json->Insert("name", @name);
			};

			if(@description <> Nil) {
				create_json->Insert("description", @description);
			};

			if(@instructions <> Nil) {
				create_json->Insert("instructions", @instructions);
			};


			# tools
			tools_json := JsonElement->New(JsonElement->JsonType->ARRAY);
			each(tool in @tools) {
				tool_json := JsonElement->New(JsonElement->JsonType->OBJECT);
				tool_json->Insert("type", tool);
				tools_json->Add(tool_json);
			};
			create_json->Insert("tools", tools_json);

			@request_json := builder->PopAll();
			return true;
		}

		method : public : ToJson() ~ String {
			if(@request_json = Nil) {
				Build();
			};

			if(@request_json = Nil) {
				return "{}";
			};

			return @request_json->ToString();
		}
	}
}
use API.OpenAI, Data.JSON.Scheme, Collection;

class OpenAIQueary {
	function : Main(args : String[]) ~ Nil {
		if(args->Size() < 1) {
			">>> action verb required <<<"->PrintLine();
			Runtime->Exit(1);
		};
		action := args[0];
		token := GetApiKey("openai_api_key.dat");

		if(action->Equals("store-create")) {
			store := VectorStore->Create("test_0", token);
			if(store <> Nil) {
				store->ToString()->PrintLine();
			};
		}
		else if(action->Equals("store-create-files")) {
			file_ids := ["file-Xbk81J8NdHkcVPeQLc33lrKC", "file-6r7iumdLUZXhZXmiPxacuG9r"];
			files := Vector->New()<API.OpenAI.File>;
			each(i : file_ids) {
				file_id := file_ids[i];
				file := API.OpenAI.File->Load(file_id, token);
				if(file <> Nil) {
					file->ToString()->PrintLine();
					files->AddBack(file);
				};
			};

			store := VectorStore->Create("test_1", files, token);
			if(store <> Nil) {
				store->ToString()->PrintLine();
			};
		}
		else if(action->Equals("store-file-create-files")) {
			store := API.OpenAI.VectorStore->Load("vs_1NTV314SWvADFM2jGI7h4lhH", token);
			file := API.OpenAI.File->Load("file-Xbk81J8NdHkcVPeQLc33lrKC", token);
			VectorStoreFile->Create(file, store, token)->ToString()->PrintLine();
		}
		else if(action->Equals("store-file-load") & args->Size() = 3) {
			store_file_id := args[1];
			store_id := args[2];

			store := API.OpenAI.VectorStore->Load(store_id, token);
			API.OpenAI.VectorStoreFile->Load(store_file_id, store, token)->ToString()->PrintLine();
		}
		else if(action->Equals("store-file-delete") & args->Size() = 3) {
			store_file_id := args[1];
			store_id := args[2];
			
			store := API.OpenAI.VectorStore->Load(store_id, token);
			API.OpenAI.VectorStoreFile->Delete(store_file_id, store, token)->ToString()->PrintLine();
		}
		else if(action->Equals("store-list")) {
			stores := VectorStore->ListStores(token);
			count := stores->Size();
			"vector-store-count = {$count}"->PrintLine();

			each(store in stores) {
				store->ToString()->PrintLine();
			};
		}
		else if(action->Equals("store-file-list") & args->Size() = 2) {
			store_id := args[1];
			store := VectorStore->Load(store_id, token);
			if(store <> Nil) {
				store_files := VectorStoreFile->ListStoreFiles(store, token);
				each(store_file in store_files) {
					store_file->ToString()->PrintLine();
				};
			};
		}
		else if(action->Equals("store-delete") & args->Size() = 2) {
			id := args[1];
			VectorStore->Delete(id, token)->PrintLine();
		}
		else if(action->Equals("store-load") & args->Size() = 2) {
			id := args[1];
			store := VectorStore->Load(id, token);
			time := System.Time.Date->New(store->GetLastActiveAt(), false);
			time->ToString()->PrintLine();
		}
		else if(action->Equals("store-delete-all")) {
			VectorStore->DeleteAll(token)->PrintLine();
		}
		else if(action->Equals("assist")) {
			Assistant->DeleteAll(token)->PrintLine();

			file_ids := ["file-Xbk81J8NdHkcVPeQLc33lrKC", "file-6r7iumdLUZXhZXmiPxacuG9r"];
			files := Vector->New()<API.OpenAI.File>;
			each(i : file_ids) {
				file_id := file_ids[i];
				file := API.OpenAI.File->Load(file_id, token);
				if(file <> Nil) {
					file->ToString()->PrintLine();
					files->AddBack(file);
				};
			};
			
			
			tools := Vector->New()<String>;
			tools->AddBack("file_search");

			# create function callback stubs
			funcs := Vector->New()<FunctionType>;

			params := Set->New()<ParameterType>;
			params->Insert(ParameterType->New("year", ParameterType->Type->INTEGER, "year the team played"));
			func := FunctionType->New("get_coach_by_year", params, ["year"], "The name of the head coach for a given year");
			funcs->AddBack(func);

			params := Set->New()<ParameterType>;
			params->Insert(ParameterType->New("year", ParameterType->Type->INTEGER, "year the team played"));
			params->Insert(ParameterType->New("home-or-away", ParameterType->Type->STRING, "indicates rather the game is at home or away"));
			func := FunctionType->New("get_schedule_by_year", params, ["year", "home-or-away"], "The number of home or away games for a given year");
			funcs->AddBack(func);

			assistant := Assistant->Create("gpt-4o", "du_1960s_basketball", "du_1960s_basketball", "Late 1960s DU Men's Basketball Expert", 
					tools, files, funcs, token);
			assistant->ToString()->PrintLine();
		};
	}

	function : GetApiKey(filename : String) ~ String {
		token := System.IO.Filesystem.FileReader->ReadFile(filename);
		if(token <> Nil) {
			token := token->Trim();
			if(<>token->StartsWith("sk-")) {
				">>> Unable to read token from file: '{$filename}' <<"->PrintLine();
				Runtime->Exit(1);
			};

			return token;
		};

		return Nil;
	}
}

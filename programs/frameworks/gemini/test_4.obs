use Web.HTTP, Web.HTTP.Server, Collection, System.IO.Filesystem, Data.JSON;

class Test {
	function : Main(args : String[]) ~ Nil {
		if(args->Size() = 2) {
			install_json := LoadConfiguration(args[0]);

			access_token := RequestHandler->GetAccessToken();
			refresh_token := RequestHandler->GetRefreshToken();
			
			if(access_token = Nil) {
				scope := Url->Encode("https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/generative-language.retriever");
				redirect_uri := Url->Encode("http://localhost:1313");
				state := GenerateState();

				client_id := install_json->Get("client_id")->GetString();
				scope->PrintLine();

				login_url_str := "https://accounts.google.com/o/oauth2/auth?client_id={$client_id}&response_type=code&redirect_uri={$redirect_uri}&state={$state}&scope={$scope}";
				"Please login: {$login_url_str}"->PrintLine();

				RequestHandler->Init(install_json, state);
				WebServer->Serve(RequestHandler->New()->GetClass(), args[1]->ToInt(), false);

				access_token := RequestHandler->GetAccessToken();
				refresh_token := RequestHandler->GetRefreshToken();

"access_token='{$access_token}'"->PrintLine();
"refresh_token='{$refresh_token}'"->PrintLine();				
			}
			else if(refresh_token <> Nil) {
				# TODO refersh
				access_token := RequestHandler->GetAccessToken();
				refresh_token := RequestHandler->GetRefreshToken();
			}
			else {
				">>> Error <<<"->ErrorLine();
			}

		};
	}

	function : GenerateState() ~ String {
		values :=  [ 
			'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',  
			'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',  
			'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',  
			'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f',  
			'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',  
			'o', 'p', 'q', 'r', 's', 't', 'u', 'v',  
			'w', 'x', 'y', 'z', '0', '1', '2', '3',  
			'4', '5', '6', '7', '8', '9'
		];

		buffer := "";

		each(i : 8) {
			index := Int->Random(0, values->Size() - 1);
			buffer->Append(values[index]);
		};

		return buffer;
	}

	function : LoadConfiguration(filename : String) ~ JsonElement {
		config_content := FileReader->ReadFile(filename);
		if(config_content <> Nil) {
			client_json := JsonParser->TextToElement(config_content);

			return client_json->Get("installed");
		};

		return Nil;
	}
}

class RequestHandler from HttpRequestHandler {
	@client_id: static : String;
	@project_id: static : String;
	@auth_uri: static : String;
	@token_uri: static : String;
	@auth_provider_x509_cert_url: static : String;
	@client_secret: static : String;
	@redirect_uri : static : String;
	@state : static : String;
	@access_token : static : String;
	@refresh_token : static : String;

	function : Init(install_json : JsonElement, state : String) ~ Nil {
		@client_id := install_json->Get("client_id")->GetString();
		@project_id := install_json->Get("project_id")->GetString();
		@auth_uri := install_json->Get("auth_uri")->GetString();
		@token_uri := install_json->Get("token_uri")->GetString();
		@auth_provider_x509_cert_url := install_json->Get("auth_provider_x509_cert_url")->GetString();
		@client_secret := install_json->Get("client_secret")->GetString();
		@state := state;

		redirect_uris_json := install_json->Get("redirect_uris");
		if(redirect_uris_json->Size() = 1) {
			@redirect_uri := Url->Encode(redirect_uris_json->Get(0)->GetString());
		};
	}

	New() {
		Parent();
	}

	function : GetAccessToken() ~ String {
		return @access_token;
	}

	function : GetRefreshToken() ~ String {
		return @refresh_token;
	}

	method : ProcessGet(request : Web.HTTP.Server.Request, response : Web.HTTP.Server.Response) ~ Bool {
		if(<>request->HasParam("error") & request->GetParam("state")->Equals(@state)) {
			code_id := request->GetParam("code");
			data := "code={$code_id}&client_id={$@client_id}&client_secret={$@client_secret}&redirect_uri={$@redirect_uri}&grant_type=authorization_code"->ToByteArray();

			headers := Map->New()<String, String>;
			headers->Insert("Content-Type", "application/x-www-form-urlencoded");
			post_response := HttpsClient->QuickPost(Url->New("https://accounts.google.com/o/oauth2/token"), data, "application/x-www-form-urlencoded", headers);

			if(post_response <> Nil) {
				# post_response->GetContent()->ToString()->PrintLine();			
				response_json := JsonParser->TextToElement(post_response->GetContent()->ToString());
					
				if(response_json->Has("access_token")) {
					@access_token := response_json->Get("access_token")->GetString();
					@refresh_token := response_json->Get("refresh_token")->GetString();
					response->SetCodeContent(200, "<html><center><h1>Hello World!</center></h1></html>");
					WebServer->Stop();
				};
			}
			else {
				@access_token := Nil;
			};
		}
		else {
			@access_token := Nil;
		}

		return false;
	}

	method : ProcessPost(request : Web.HTTP.Server.Request, response : Web.HTTP.Server.Response) ~ Bool {
		return false;
	}
} 
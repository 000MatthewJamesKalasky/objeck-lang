use Web.HTTP, Collection, Data.JSON, API.Google.Gemini.Corpus;

class Test {
	function : Main(args : String[]) ~ Nil {
		if(args->Size() = 1 & args[0]->Equals("list")) {
			corpuses := Corpus->List()<Corpus>;
			each(corpus in corpuses) {
				corpus_id := corpus->GetId();
				"corpus='{$corpus_id}'"->PrintLine();			
				
				documents := Document->List(corpus->As(Corpus))<Document>;
				each(document in documents) {
					doc_id := document->GetId();
					"\tdocument='{$doc_id}'"->PrintLine();

					chunks := Chunk->List(document);
					each(chunk in chunks) {
						chunk_id := chunk->GetId();
						chunk_state := chunk->GetState();
						"\t\tchunk='{$chunk_id}', state={$chunk_state}"->PrintLine();					
					};
				};
			};
		}
		else if(args->Size() = 1 & args[0]->Equals("rebuild")) {
			# clean up
			corpuses := Corpus->List();
			each(corpus in corpuses) {
				documents := Document->List(corpus);
				each(document in documents) {
					chunks := Chunk->List(document);
					each(chunk in chunks) {
						chunk->Delete()->PrintLine();
					};
					document->Delete()->PrintLine();
				};
				corpus->Delete()->PrintLine();
			};

			# corups
			corpus := Corpus->Create("Corpus 1");

			metadata := Map->New()<String, String>;
			metadata->Insert("about", "fruit, vegetable, vehicle, human, and animal");
			document := Document->Create("Document 1", metadata, corpus);

			metadata := Map->New()<String, String>;
			metadata->Insert("category", "fruit");
			Chunk->Create("Nature's candy! Seeds' sweet ride to spread, bursting with colors, sugars, and vitamins. Fuel for us, future for plants. Deliciously vital!", metadata, document)->ToString()->PrintLine();

			metadata := Map->New()<String, String>;
			metadata->Insert("category", "vegetable");
			Chunk->Create("Not just leaves! Veggies sprout from roots, stems, flowers, and even bulbs. Packed with vitamins, minerals, and fiber galore, they fuel our bodies and keep us wanting more.", metadata, document)->ToString()->PrintLine();

			metadata := Map->New()<String, String>;
			metadata->Insert("category", "vehicle");
			Chunk->Create("Metal chariots or whirring steeds, gliding on land, skimming seas, piercing clouds. Carrying souls near and far, vehicles weave paths for dreams and scars.", metadata, document)->ToString()->PrintLine();

			metadata := Map->New()<String, String>;
			metadata->Insert("category", "human");
			Chunk->Create("Walking contradictions, minds aflame, built for laughter, prone to shame. Woven from stardust, shaped by clay, seeking answers, paving the way.", metadata, document)->ToString()->PrintLine();

			metadata := Map->New()<String, String>;
			metadata->Insert("category", "animal");
			Chunk->Create("Sentient dance beneath the sun, from buzzing flies to whales that run. Flesh and feather, scale and claw, weaving instincts in nature's law. ", metadata, document)->ToString()->PrintLine();

			metadata := Map->New()<String, String>;
			metadata->Insert("category", "other");
			Chunk->Create("Except for fruit, vegetable, vehicle, human, and animal", metadata, document)->ToString()->PrintLine();
		}
		else if(args->Size() = 3 & args[0]->Equals("query")) {
			id := args[1];
			query := args[2];

			document := Document->Get(id);
			document->ToString()->PrintLine();

			results := document->Query(query);
			each(result in results) {
				relevance := result->GetFirst()->As(FloatRef);
#				data := result->GetSecond();
				metadata := result->GetThird()->As(Map<String, String>);

				relevance->PrintLine();
				metadata->ToString()->PrintLine();
				"---"->PrintLine();
			}
		};
	}
}

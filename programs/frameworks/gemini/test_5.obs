use Web.HTTP, Collection, Data.JSON;

class Test {
	function : Main(args : String[]) ~ Nil {
		if(args->Size() = 1) {	
			corpus := Corpus->Get("corpora/bar-1za0vhw22l9v");
#			corpus->ToString()->PrintLine();

			document := Document->Get("corpora/bar-1za0vhw22l9v/documents/bar-v6o5rx09je85");
#			document->ToString()->PrintLine();

			chunk := Chunk->Get("corpora/bar-1za0vhw22l9v/documents/bar-v6o5rx09je85/chunks/obk9l8mbtk10")
			chunk->ToString()->PrintLine();

			Chunk->List(document)->ToString()->PrintLine();

#			Corpus->Delete("corpora/test1-6ahtb7bda1yj")->ToString()->PrintLine();
#~			
			corpuses := Corpus->List();
			each(corpus in corpuses) {
				corpus->ToString()->PrintLine();
			};
~#			
		};
	}
}

class Corpus from OAuthEndPoint implements Stringify {
	@name : String;
	@display_name : String;
	@create_time_str : String;
	@update_time_str : String;

	method : public : GetId() ~ String {
		return @name;
	}

	method : public : GetName() ~ String {
		return @display_name;
	}

	New : private(request_json : JsonElement) {
		Parent();

		@name := request_json->Get("name")->GetString();
		@display_name := request_json->Get("displayName")->GetString();
		@create_time_str := request_json->Get("createTime")->GetString();
		@update_time_str := request_json->Get("updateTime")->GetString();
	}

	function : Create(name : String) ~ Corpus {
		request_json := JsonElement->New(JsonElement->JsonType->OBJECT);
		request_json->Insert("displayName", name);
		data := request_json->ToString()->ToByteArray();
		# data->ToString()->PrintLine();

		token := GetToken();
		headers := Collection.Map->New()<String, String>;
		headers->Insert("Authorization", "Bearer {$token}");
		response := HttpsClient->QuickPost(Url->New("https://generativelanguage.googleapis.com/v1beta/corpora"), data, 
			"application/json", headers);

		if(response <> Nil) {
			#response->GetContent()->ToString()->PrintLine();
			
			response_json := JsonParser->TextToElement(response->GetContent()->ToString());
			if(response_json = Nil) {
				"### Error: Unable to parse response ###"->ErrorLine();
				return Nil;
			};
			
			if(response_json->Has("error")) {
				error_str := response_json->FindElements("error/message")->GetString();
				SetLastError(error_str);
				return Nil;
			};

			return Corpus->New(response_json);
		};

		return Nil;	
	}

	function : Get(name : String) ~ Corpus {
		token := GetToken();
		headers := Collection.Map->New()<String, String>;
		headers->Insert("Authorization", "Bearer {$token}");
		response := HttpsClient->QuickGet(Url->New("https://generativelanguage.googleapis.com/v1beta/{$name}"), 
			"application/json", headers);

		if(response <> Nil) {
			#response->GetContent()->ToString()->PrintLine();
			
			response_json := JsonParser->TextToElement(response->GetContent()->ToString());
			if(response_json = Nil) {
				"### Error: Unable to parse response ###"->ErrorLine();
				return Nil;
			};
			
			if(response_json->Has("error")) {
				error_str := response_json->FindElements("error/message")->GetString();
				SetLastError(error_str);
				return Nil;
			};

			return Corpus->New(response_json);
		};

		return Nil;	
	}

	function : List() ~ Collection.Vector<Corpus> {
		token := GetToken();
		headers := Collection.Map->New()<String, String>;
		headers->Insert("Authorization", "Bearer {$token}");
		response := HttpsClient->QuickGet(Url->New("https://generativelanguage.googleapis.com/v1beta/corpora"), 
			"application/json", headers);

		if(response <> Nil) {
			# response->GetContent()->ToString()->PrintLine();
			
			response_json := JsonParser->TextToElement(response->GetContent()->ToString());
			if(response_json = Nil) {
				"### Error: Unable to parse response ###"->ErrorLine();
				return Nil;
			};
			
			if(response_json->Has("error")) {
				error_str := response_json->FindElements("error/message")->GetString();
				SetLastError(error_str);
				return Nil;
			};

			corpuses := Collection.Vector->New()<Corpus>;
			
			corporas_json := response_json->Get("corpora");
			if(corporas_json <> Nil) {
				each(corpora_json in corporas_json) {
					corpuses->AddBack(Corpus->New(corpora_json));
				};
			};

			return corpuses;
		};

		return Nil;	
	}

	function : Delete(name : String) ~ Bool {
		token := GetToken();
		headers := Collection.Map->New()<String, String>;
		headers->Insert("Authorization", "Bearer {$token}");
		response := HttpsClient->QuickDelete(Url->New("https://generativelanguage.googleapis.com/v1beta/{$name}"), 
			"application/json", headers);
		
		if(response <> Nil) {
			# response->GetContent()->ToString()->PrintLine();
			
			response_json := JsonParser->TextToElement(response->GetContent()->ToString());
			if(response_json = Nil) {
				"### Error: Unable to parse response ###"->ErrorLine();
				return false;
			};
			
			if(response_json->Has("error")) {
				error_str := response_json->FindElements("error/message")->GetString();
				SetLastError(error_str);
				return false;
			};

			return true;
		};

		return false;	
	}

	#~
	String representation of the object
	@return string representation
	~#
	method : public : ToString() ~ String {
		buffer := "[name='";
		buffer += @name;

		buffer += "', display_name='"
		buffer += @display_name;

		buffer += "', create_time_str='"
		buffer += @create_time_str;

		buffer += "', update_time_str='"
		buffer += @update_time_str;

		buffer += "']";
		return buffer;
	}
}

class Document from OAuthEndPoint implements Stringify {
	@name : String;
	@display_name : String;
	@create_time_str : String;
	@update_time_str : String;

	New : private(request_json : JsonElement) {
		Parent();

		@name := request_json->Get("name")->GetString();
		@display_name := request_json->Get("displayName")->GetString();
		@create_time_str := request_json->Get("createTime")->GetString();
		@update_time_str := request_json->Get("updateTime")->GetString();
	}

	method : public : GetId() ~ String {
		return @name;
	}

	function : Create(name : String, metadata : Collection.Map<String, String>, corpus : Corpus) ~ Document {
		metadata_array_json := JsonElement->New(JsonElement->JsonType->ARRAY);
		if(metadata <> Nil) {
			metadata_keys_values := metadata->GetKeyValues()<Pair<String, String>>;
			each(metadata_key_value in metadata_keys_values) {
				metadata_json := JsonElement->New(JsonElement->JsonType->OBJECT);
				metadata_json->Insert("key", metadata_key_value->GetFirst());
				metadata_json->Insert("stringValue", metadata_key_value->GetSecond());

				metadata_array_json->Add(metadata_json);
			}
		};

		request_json := JsonElement->New(JsonElement->JsonType->OBJECT);
		request_json->Insert("displayName", name);
		request_json->Insert("customMetadata", metadata_array_json);
		data := request_json->ToString()->ToByteArray();
		# data->ToString()->PrintLine();

		corpora_id := corpus->GetId();
		token := GetToken();
		headers := Collection.Map->New()<String, String>;
		headers->Insert("Authorization", "Bearer {$token}");
		response := HttpsClient->QuickPost(Url->New("https://generativelanguage.googleapis.com/v1beta/{$corpora_id}/documents"), data, 
			"application/json", headers);

		if(response <> Nil) {
			# response->GetContent()->ToString()->PrintLine();
			
			response_json := JsonParser->TextToElement(response->GetContent()->ToString());
			if(response_json = Nil) {
				"### Error: Unable to parse response ###"->ErrorLine();
				return Nil;
			};
			
			if(response_json->Has("error")) {
				error_str := response_json->FindElements("error/message")->GetString();
				SetLastError(error_str);
				return Nil;
			};

			return Document->New(response_json);
		};

		return Nil;	
	}

	function : Get(name : String) ~ Document {
		token := GetToken();
		headers := Collection.Map->New()<String, String>;
		headers->Insert("Authorization", "Bearer {$token}");
		response := HttpsClient->QuickGet(Url->New("https://generativelanguage.googleapis.com/v1beta/{$name}"), 
			"application/json", headers);

		if(response <> Nil) {
			#response->GetContent()->ToString()->PrintLine();
			
			response_json := JsonParser->TextToElement(response->GetContent()->ToString());
			if(response_json = Nil) {
				"### Error: Unable to parse response ###"->ErrorLine();
				return Nil;
			};
			
			if(response_json->Has("error")) {
				error_str := response_json->FindElements("error/message")->GetString();
				SetLastError(error_str);
				return Nil;
			};

			return Document->New(response_json);
		};

		return Nil;	
	}

	function : List(corpus : Corpus) ~ Collection.Vector<Document> {
		token := GetToken();
		headers := Collection.Map->New()<String, String>;
		headers->Insert("Authorization", "Bearer {$token}");

		corpora_id := corpus->GetId();
		response := HttpsClient->QuickGet(Url->New("https://generativelanguage.googleapis.com/v1beta/{$corpora_id}/documents"), 
			"application/json", headers);

		if(response <> Nil) {
			
			# response->GetContent()->ToString()->PrintLine();
			
			response_json := JsonParser->TextToElement(response->GetContent()->ToString());
			if(response_json = Nil) {
				"### Error: Unable to parse response ###"->ErrorLine();
				return Nil;
			};
			
			if(response_json->Has("error")) {
				error_str := response_json->FindElements("error/message")->GetString();
				SetLastError(error_str);
				return Nil;
			};

			corpuses := Collection.Vector->New()<Document>;
			
			corporas_json := response_json->Get("documents");
			if(corporas_json <> Nil) {
				each(corpora_json in corporas_json) {
					corpuses->AddBack(Document->New(corpora_json));
				};
			};

			return corpuses;
		};

		return Nil;	
	}

	function : Delete(name : String) ~ Bool {
		token := GetToken();
		headers := Collection.Map->New()<String, String>;
		headers->Insert("Authorization", "Bearer {$token}");
		response := HttpsClient->QuickDelete(Url->New("https://generativelanguage.googleapis.com/v1beta/{$name}"), 
			"application/json", headers);
		
		if(response <> Nil) {
			# response->GetContent()->ToString()->PrintLine();
			
			response_json := JsonParser->TextToElement(response->GetContent()->ToString());
			if(response_json = Nil) {
				"### Error: Unable to parse response ###"->ErrorLine();
				return false;
			};
			
			if(response_json->Has("error")) {
				error_str := response_json->FindElements("error/message")->GetString();
				SetLastError(error_str);
				return false;
			};

			return true;
		};

		return false;	
	}

	#~
	String representation of the object
	@return string representation
	~#
	method : public : ToString() ~ String {
		buffer := "[name='";
		buffer += @name;

		buffer += "', display_name='"
		buffer += @display_name;

		buffer += "', create_time_str='"
		buffer += @create_time_str;

		buffer += "', update_time_str='"
		buffer += @update_time_str;

		buffer += "']";
		return buffer;
	}
}

class Chunk from OAuthEndPoint implements Stringify {
	@name : String;
	@data : String;
	@state : String;
	@create_time_str : String;
	@update_time_str : String;
	@metadata : Map<String, String>;

	New : private(request_json : JsonElement) {
		Parent();

		@name := request_json->Get("name")->GetString();
		@data := request_json->FindElements("data/stringValue")->GetString();
		@state := request_json->Get("state")->GetString();
		@create_time_str := request_json->Get("createTime")->GetString();
		@update_time_str := request_json->Get("updateTime")->GetString();

		@metadata := Map->New()<String, String>;
		metadata_array_json := request_json->Get("customMetadata");
		if(metadata_array_json <> Nil) {
			each(metadata_json in metadata_array_json) {
				name := metadata_json->Get("key")->GetString();
				value := metadata_json->Get("stringValue")->GetString();
				@metadata->Insert(name, value);
			};
		};
	}

	method : public : GetId() ~ String {
		return @name;
	}

	method : public : GetData() ~ String {
		return @data;
	}

	method : public : GetMetadata() ~  Map<String, String> {
		return @metadata;
	}

	function : Create(name : String, value : String, metadata : Map<String, String>, document : Document) ~ Chunk {
		metadata_array_json := JsonElement->New(JsonElement->JsonType->ARRAY);
		if(metadata <> Nil) {
			metadata_keys_values := metadata->GetKeyValues()<Pair<String, String>>;
			each(metadata_key_value in metadata_keys_values) {
				metadata_json := JsonElement->New(JsonElement->JsonType->OBJECT);
				metadata_json->Insert("key", metadata_key_value->GetFirst());
				metadata_json->Insert("stringValue", metadata_key_value->GetSecond());

				metadata_array_json->Add(metadata_json);
			};
		};

		request_data_json := JsonElement->New(JsonElement->JsonType->OBJECT);
		request_data_json->Insert("stringValue", value);
		
		request_json := JsonElement->New(JsonElement->JsonType->OBJECT);
		request_json->Insert("data", request_data_json);
		
		request_json->Insert("customMetadata", metadata_array_json);
		data := request_json->ToString()->ToByteArray();
		# data->ToString()->PrintLine();

		doc_id := document->GetId();
		token := GetToken();
		headers := Collection.Map->New()<String, String>;
		headers->Insert("Authorization", "Bearer {$token}");
		response := HttpsClient->QuickPost(Url->New("https://generativelanguage.googleapis.com/v1beta/{$doc_id}/chunks"), data, 
			"application/json", headers);

		if(response <> Nil) {
			# response->GetContent()->ToString()->PrintLine();
			
			response_json := JsonParser->TextToElement(response->GetContent()->ToString());
			if(response_json = Nil) {
				"### Error: Unable to parse response ###"->ErrorLine();
				return Nil;
			};
			
			if(response_json->Has("error")) {
				error_str := response_json->FindElements("error/message")->GetString();
				SetLastError(error_str);
				return Nil;
			};

			return Chunk->New(response_json);
		};

		return Nil;
	}

	function : Get(name : String) ~ Chunk {
		token := GetToken();
		headers := Collection.Map->New()<String, String>;
		headers->Insert("Authorization", "Bearer {$token}");
		response := HttpsClient->QuickGet(Url->New("https://generativelanguage.googleapis.com/v1beta/{$name}"), 
			"application/json", headers);

		if(response <> Nil) {
			#response->GetContent()->ToString()->PrintLine();
			
			response_json := JsonParser->TextToElement(response->GetContent()->ToString());
			if(response_json = Nil) {
				"### Error: Unable to parse response ###"->ErrorLine();
				return Nil;
			};
			
			if(response_json->Has("error")) {
				error_str := response_json->FindElements("error/message")->GetString();
				SetLastError(error_str);
				return Nil;
			};

			return Chunk->New(response_json);
		};

		return Nil;	
	}

	function : Delete(name : String) ~ Bool {
		token := GetToken();
		headers := Collection.Map->New()<String, String>;
		headers->Insert("Authorization", "Bearer {$token}");
		response := HttpsClient->QuickDelete(Url->New("https://generativelanguage.googleapis.com/v1beta/{$name}"), 
			"application/json", headers);
		
		if(response <> Nil) {
			# response->GetContent()->ToString()->PrintLine();
			
			response_json := JsonParser->TextToElement(response->GetContent()->ToString());
			if(response_json = Nil) {
				"### Error: Unable to parse response ###"->ErrorLine();
				return false;
			};
			
			if(response_json->Has("error")) {
				error_str := response_json->FindElements("error/message")->GetString();
				SetLastError(error_str);
				return false;
			};

			return true;
		};

		return false;	
	}

	function : List(document : Document) ~ Collection.Vector<Chunk> {
		token := GetToken();
		headers := Collection.Map->New()<String, String>;
		headers->Insert("Authorization", "Bearer {$token}");

		doc_id := document->GetId();
		response := HttpsClient->QuickGet(Url->New("https://generativelanguage.googleapis.com/v1beta/{$doc_id}/chunks"), "application/json", headers);
		if(response <> Nil) {
			# response->GetContent()->ToString()->PrintLine();
			
			response_json := JsonParser->TextToElement(response->GetContent()->ToString());
			if(response_json = Nil) {
				"### Error: Unable to parse response ###"->ErrorLine();
				return Nil;
			};
			
			if(response_json->Has("error")) {
				error_str := response_json->FindElements("error/message")->GetString();
				SetLastError(error_str);
				return Nil;
			};

			corpuses := Collection.Vector->New()<Chunk>;
			
			corporas_json := response_json->Get("chunks");
			if(corporas_json <> Nil) {
				each(corpora_json in corporas_json) {
					corpuses->AddBack(Chunk->New(corpora_json));
				};
			};

			return corpuses;
		};

		return Nil;	
	}

	#~
	String representation of the object
	@return string representation
	~#
	method : public : ToString() ~ String {
		buffer := "[name='";
		buffer += @name;

		buffer += "', state='"
		buffer += @state;

		buffer += "', data='"
		buffer += @data;

		buffer += "', create_time_str='"
		buffer += @create_time_str;

		buffer += "', update_time_str='"
		buffer += @update_time_str;

		buffer += "']";
		return buffer;
	}
}

class : private : OAuthEndPoint {
	@last_message : static : String;

	New() {}

	function : WriteNewToken() ~ Nil {
		scopes := ["https://www.googleapis.com/auth/cloud-platform", 
			"https://www.googleapis.com/auth/generative-language.retriever"];
		token := System.IO.Net.OAuth.OAuthClient->New("client_secret.json", scopes)->GetToken();

		token_str := token->GetAccessToken();
		date := System.Time.Date->New();
		date->AddSeconds(token->GetExpiresIn());
		date_str := date->GetUnixTime()->ToString();

		System.IO.Filesystem.FileWriter->WriteFile("client_secret.dat", "{$date_str}\r\n{$token_str}");
	}

	function : ReadToken() ~ String {
		client_secrets := System.IO.Filesystem.FileReader->ReadFile("client_secret.dat");
		if(client_secrets <> Nil) {
			client_secret_parts := client_secrets->Split("\r\n");
			if(client_secret_parts->Size() = 2){
				date_str := client_secret_parts[0];
				create_time := System.Time.Date->New(date_str->ToInt());
				create_time->AddMinutes(-2);

				if(create_time->Compare(System.Time.Date->New(true)) > 0) {
					token_str := client_secret_parts[1];
					return token_str;
				};
			};
		};

		return Nil;
	}

	function : GetToken() ~ String {		
		token := ReadToken();
		if(token = Nil) {
			WriteNewToken();
			token := ReadToken();
		};

		return token;
	}

	function : SetLastError(last_message : String) ~ Nil {
		@last_message := last_message;
	}

	#~
	Get the last error
	@return last error
	~#
	function : GetLastError() ~ String {
		return @last_message;
	}
}

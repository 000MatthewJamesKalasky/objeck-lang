use API.Google.Gemini, API.Google.Gemini.Tuned, System.IO.Filesystem, Data.JSON, Data.JSON.Scheme, Collection;

class Test {
	function : Main(args : String[]) ~ Nil {
		args_size := args->Size();
		if(args_size > 0) {
			token := EndPoint->GetApiKey();
			action := args[0];

			"action={$action}, args={$args_size}\n==="->PrintLine();
			
			#
			# Models
			#
			if(action->Equals("list") & args_size = 1) {
				models := Model->List(token);
				each(model in models) {
					model->ToString()->PrintLine();
				};
			}
			else if(action->Equals("get") & args_size = 2) {
				model_name := args[1];
				model := Model->Get(model_name, token);
				if(model <> Nil) {
					model->ToString()->PrintLine();
				};
			}
			else if(action->Equals("query") & args_size = 2) {
				query := args[1];
				content := Content->New("user")->AddPart(TextPart->New(query));

				funcs := Map->New()<String, Pair<FunctionType, Func2Ref<JsonElement, JsonElement>>>;
				params_1 := Set->New()<ParameterType>;
				params_1->Insert(ParameterType->New("year", ParameterType->Type->INTEGER, "year the team played"));
				func_1 := FunctionType->New("get_head_coach_by_year", params_1, ["year"], "The name of the head coach for a given year");
				func_ref_1 := Func2Ref->New(Callback(JsonElement) ~ JsonElement)<JsonElement, JsonElement>;
				pair_1 := Pair->New(func_1, func_ref_1)<FunctionType, Func2Ref<JsonElement, JsonElement>>;
				funcs->Insert(func_1->GetName(), pair_1);

				candidates := Model->GenerateContent("models/gemini-1.5-pro", content, funcs, token);
				if(candidates->Size() > 0) {
					candidates->First()->GetAllText()->Trim()->PrintLine();
				};
			}
			else if(action->Equals("tune") & args_size = 1) {
				training_data := Dataset->New();
				training_data->AddExample(TuningExample->New("1", "2"));
				training_data->AddExample(TuningExample->New("3", "4"));
				training_data->AddExample(TuningExample->New("-3", "-2"));
				training_data->AddExample(TuningExample->New("twenty two", "twenty three"));
				hyper_params := HyperParameters->New(2, 0.001, 5);
				tuning_task := TuningTask->New(training_data, hyper_params);

				display_name := "number generator model";
				base_model := "models/gemini-1.0-pro-001";
				# description := String;
				# tune_model_source := String;
				# temperature := Float;
				# top_p := Float;
				# top_k := Int;
				
				tuned_model := TuningModel->Create(display_name , base_model, tuning_task);
				if(tuned_model <> Nil) {
					tuned_model->ToString()->PrintLine();
				};
			}
			else if(action->Equals("list_tuned") & args_size = 1) {
				tuned_models := TuningModel->List();
				if(tuned_models <> Nil) {
					each(i : tuned_models) {
						tuned_model := tuned_models->Get(i);
						tuned_model->ToString()->PrintLine();
"==="->PrintLine();						
					};
				};
			}
			else if(action->Equals("chat") & args_size = 1) {
				session := Chat->New("models/gemini-1.5-pro", EndPoint->GetApiKey());

				content := session->SendPart(TextPart->New("What is the largest lake in Colorado?"), "user");
				content->GetFirstPart()->ToString()->PrintLine();

				content := session->SendPart(TextPart->New("How big is it?"), "user");
				content->GetFirstPart()->ToString()->PrintLine();

				content := session->SendPart(TextPart->New("Thank you!"), "user");
				content->GetFirstPart()->ToString()->PrintLine();

				session->ToString()->PrintLine();
			}
			#
			# Oh, no...
			#
			else {
				"Usage: Undefined action or invalid parameter..."->ErrorLine();
			};
		}
		else {
			"Usage: params: sk-token, action, params..."->ErrorLine();
		};
	}

	function : Callback(params_json : JsonElement) ~ JsonElement {
		"#### Callback, called... ###"->PrintLine();		
		return JsonElement->New("Nee Fadz");
	}
}
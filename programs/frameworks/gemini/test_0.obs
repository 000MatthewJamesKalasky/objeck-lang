use Web.HTTP, Collection, Data.JSON, System.IO.Filesystem;

class Test {
	function : Main(args : String[]) ~ Nil {
		if(args->Size() = 1) {
			api_token := GetApiKey();
			file_content := FileReader->ReadBinaryFile(args[0]);

			if(api_token <> Nil & file_content <> Nil) {
				request := BuildRequest(Encryption.Encrypt->Base64(file_content));
				url := Url->New("https://generativelanguage.googleapis.com/v1beta/models/gemini-pro-vision:generateContent?key={$api_token}");
				if(url->GetQueryParameters()->Has("key")) {			
					response := SendRequest(request, url);
					if(response <> Nil) {
						content := ParseResponse(response);
						each(line in content) {
							line->PrintLine();
						};
					};
				};
			}
			else {
				">>> Unable to read API key or invalid image file <<<"->ErrorLine();
			}
		};
	}

	function : BuildRequest(data : String) ~ JsonElement {
		inline_data_json := JsonElement->New(JsonElement->JsonType->OBJECT);
		inline_data_json->Insert("mime_type", "image/png");
		inline_data_json->Insert("data", data);

		inline_obj_json := JsonElement->New(JsonElement->JsonType->OBJECT);
		inline_obj_json->Insert("inline_data", inline_data_json);

		# ---

		content_array_json := JsonElement->New(JsonElement->JsonType->OBJECT);
		content_array_json->Insert("text", "What is this picture?");

		# ---

		part_array_json := JsonElement->New(JsonElement->JsonType->ARRAY);
		part_array_json->Add(inline_obj_json);
		part_array_json->Add(content_array_json);

		# ---

		parts_json := JsonElement->New(JsonElement->JsonType->OBJECT);
		parts_json->Insert("parts", part_array_json);

		contents_array_json := JsonElement->New(JsonElement->JsonType->ARRAY);
		contents_array_json->Add(parts_json);

		content_array_json := JsonElement->New(JsonElement->JsonType->OBJECT);
		content_array_json->Insert("contents", contents_array_json);

		content_array_json->ToString()->PrintLine();

		return content_array_json;
	}

	function : ParseResponse(response : JsonElement) ~ Vector<String> {
		responses := Vector->New()<String>;

		candidates_json := response->Get("candidates");
		if(candidates_json <> Nil & candidates_json->Size() > 0) {
			content_json := candidates_json->Get(0)->Get("content");
			parts_json := content_json->Get("parts");
			if(parts_json <> Nil & parts_json->Size() > 0) {
				text_json := parts_json->Get(0)->Get("text");
				role_json := content_json->Get("role");

				responses->AddBack(role_json->GetString()->Trim());
				responses->AddBack(JsonElement->Decode(text_json->GetString()->Trim()));
			};
		};

		return responses;
	}

	function : SendRequest(request : JsonElement, url : Url) ~ JsonElement {
		response := HttpsClient->QuickPost(url, request->ToString()->ToByteArray(), "application/json");
		if(response <> Nil) {
			response_json := JsonParser->TextToElement(response->GetContent()->ToString());
			# response->GetContent()->ToString()->PrintLine();			
			if(response_json = Nil) {
				"### Error: Unable to parse response ###"->ErrorLine();
				return Nil;
			};
			
			if(response_json->Has("error")) {
				"### Error: Error response ###"->ErrorLine();
				response_json->ToString()->ErrorLine();				
				return Nil;
			};

			return response_json;
		};

		return Nil;
	}

	function : GetApiKey() ~ String {
		token := FileReader->ReadFile("api_key.txt");
		if(token <> Nil) {
			return token->Trim();
		};

		return Nil;
	}
}
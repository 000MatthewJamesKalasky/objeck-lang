class LinearRegression {
	@data : Float[,];
	@r : Float;
	@slope : Float;
	@y_iter : Float;
#	@x_iter : Float;

	function : Main(args : String[]) ~ Nil {
		data := LoadData();
		lr := LinearRegression->New(data);
		if(lr->Calculate()) {
			r := lr->GetR();
			slope := lr->GetSlope();
			y_iter := lr->GetYIntercept();
			
			"r={$r}, slope={$slope}, y_iter={$y_iter}"->PrintLine();
			
			data_dims := data->Size();
			rows := data_dims[0];
			each(row : rows) {
				x := data[row, 0];
				y := lr->GetY(x);
				"{$x}, {$y}"->PrintLine();
			};
		};
	}

	New(data : Float[,]) {
		@data := data;
	}

	method : public : native : GetY(x : Float) ~ Float {
		return @y_iter + @slope * x;
	}

	method : public : native : GetR() ~ Float {
		return @r;
	}

	method : public : native : GetSlope() ~ Float {
		return @slope;
	}

	method : public : native : GetYIntercept() ~ Float {
		return @y_iter;
	}

	method : public : native : CalculateYIntercept(x_diff_sum : Float, y_diff_sum : Float, slope : Float) ~ Float {
		if(@y_iter = 0.0) {
			@y_iter := y_diff_sum - slope * x_diff_sum;
		};

		return @y_iter;
	}

	method : native : CalculateSlope(x_diff_sqrd_sum : Float, y_diff_sqrd_sum : Float, r : Float, data : Float[,]) ~ Float {
		if(@slope = 0.0) {
			data_dims := data->Size();
			
			rows := (data_dims[0] - 1)->As(Float);
			sx := Float->Sqrt(x_diff_sqrd_sum / rows);
			sy := Float->Sqrt(y_diff_sqrd_sum / rows);

			@slope := r * sy / sx;
		};

		return @slope;
	}

	method : public : native : CalculateR(xy_products_sum : Float, x_diff_sqrd_sum : Float, y_diff_sqrd_sum : Float) ~ Float {
		if(@r = 0.0) {
			@r := xy_products_sum / Float->Sqrt(x_diff_sqrd_sum * y_diff_sqrd_sum);
		};

		return @r;
	}

	method : native : CalculateVectorProducts(x_sums : Float[], y_sums : Float[]) ~ Float[] {
		x_size := x_sums->Size();
		y_size := y_sums->Size();

		if(x_size = y_size) {
			results := Float->New[x_size];

			each(row : x_size) {
				results[row] := x_sums[row] * y_sums[row];
			}

			return results;
		};

		return Nil;
	}

	method : public : Calculate() ~ Bool {
		x_results := CalculateVectors(0, @data);
		if(x_results = Nil) {
			return false;
		};

		y_results := CalculateVectors(1, @data);
		if(x_results = Nil) {
			return false;
		};

		xy_products := CalculateVectorProducts(x_results->GetDiffVector(), y_results->GetDiffVector())
		if(xy_products = Nil) {
			return false;
		};

		@r := CalculateR(SumVector(xy_products), x_results->GetDiffSquaredSum(), y_results->GetDiffSquaredSum());
		@slope := CalculateSlope(x_results->GetDiffSquaredSum(), y_results->GetDiffSquaredSum(), @r, @data);
		@y_iter := CalculateYIntercept(x_results->GetVectorAverage(), y_results->GetVectorAverage(), @slope);

		return true;
	}

	method : native : CalculateVectors(col : Int, data : Float[,]) ~ VectorResult {
		avg := Average(col, data);

		data_dims := data->Size();
		rows := data_dims[0];
		cols := data_dims[1];

		if(col < cols) {
			min_sums := Float->New[rows];
			diff_sums_sqrd := Float->New[rows];

			each(row : rows) {
				min_sums[row] := data[row, col] - avg;
				diff_sums_sqrd[row] := Float->Pow(min_sums[row], 2.);
			};

			return VectorResult->New(avg, min_sums, diff_sums_sqrd);
		};

		return Nil;
	}

	method : native : SumVector(data : Float[]) ~ Float {
		sum := 0.0;
		
		each(i : data) {
			sum += data[i];
		};
		
		return sum;
	}

	method : native : Average(col : Int, data : Float[,]) ~ Float {
		data_dims := data->Size();
		rows := data_dims[0];
		cols := data_dims[1];

		if(col < cols) {
			sum := 0.0;
			
			each(row : rows) {
				sum += data[row, col];
			};
			
			return sum / rows->As(Float);
		}

		return 0.0;
	}

	function : LoadData() ~ Float[,] {
		return [
			[17.0, 94.0]
			[13.0, 73.0]
			[12.0, 59.0]
			[15.0, 80.0]
			[16.0, 93.0]
			[14.0, 85.0]
			[16.0, 66.0]
			[16.0, 79.0]
			[18.0, 77.0]
			[19.0, 91.0]];
	}
}

class VectorResult {
	@data_avg : Float;
	@diff_sums : Float[];
	@diff_sums_sqrd : Float[];
	@diff_sums_total : Float;

	New(avg : Float, diff_sums : Float[], diff_sums_sqrd : Float[]) {
		@data_avg := avg;
		@diff_sums := diff_sums;
		@diff_sums_sqrd := diff_sums_sqrd;
	}

	method : public : GetVectorAverage() ~ Float {
		return @data_avg;
	}

	method : public : GetDiffVector() ~ Float[] {
		return @diff_sums;
	}

	method : public : GetDiffSquaredVector() ~ Float[] {
		return @diff_sums_sqrd;
	}

	method : public : GetDiffSquaredSum() ~ Float {
		if(@diff_sums_total = 0.0) {
			each(i : @diff_sums_sqrd) {
				@diff_sums_total += @diff_sums_sqrd[i];
			};
		};

		return @diff_sums_total;
	}

	method : public : ToString() ~ String {
		buffer := "";
		diff_sums_str := @diff_sums->ToString();
		diff_sums_sqrd_str := @diff_sums_sqrd->ToString();
		diff_sums_total := GetDiffSquaredSum();

		return "data_avg={$@data_avg}; diff_sums_total={$diff_sums_total}\n  diff_sums={$diff_sums_str}\n  diff_sums_sqrd={$diff_sums_sqrd_str}";
	}
}
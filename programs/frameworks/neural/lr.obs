class SVM {
	function : Main(args : String[]) ~ Nil {
		data := LoadData();
		data_dims := data->Size();
		rows := data_dims[0];
		cols := data_dims[1];

		"{$rows}x{$cols}"->PrintLine();

		SumSquare(0, data)->PrintLine();
		SumSquare(1, data)->PrintLine();
#		Average(1, data)->PrintLine();
	}

	function : native : SumSquare(col : Int, data : Float[,]) ~ Float[] {
		data_dims := data->Size();
		rows := data_dims[0];
		cols := data_dims[1];

		col_sum := Average(col, data);

		if(col < cols) {
			results := Float->New[rows];

			each(row : rows) {
				results[row] := Float->Pow(data[row, col] - col_sum, 2.);
			};

			return results;
		};

		return Nil;
	}

	function : native : Average(col : Int, data : Float[,]) ~ Float {
		data_dims := data->Size();
		rows := data_dims[0];
		cols := data_dims[1];

		if(col < cols) {
			sum := 0.0;
			each(row : rows) {
				sum += data[row, col];
			};
			return sum / rows->As(Float);

		}

		return 0.0;
	}

	function : LoadData() ~ Float[,] {
		return [
			[17.0, 94.0]
			[13.0, 73.0]
			[12.0, 59.0]
			[15.0, 80.0]
			[16.0, 93.0]
			[14.0, 85.0]
			[16.0, 66.0]
			[16.0, 79.0]
			[18.0, 77.0]
			[19.0, 91.0]];
	}
}
class MultiRegression {
	# TODO: save calculated vectors
	function : Main(args : String[]) ~ Nil {
		data := LoadData();
		dims := data->Size();
		rows := dims[0]->As(Float);
		cols := dims[1];

		if(cols > 1) {
			"=== 0 ==="->PrintLine();
			data->ToString()->PrintLine();

			data_sums := VectorSums(data);
			data_sums->PrintLine();
			"---"->PrintLine();

			"=== 1 ==="->PrintLine();
			data_means := VectorMeans(data);
			data_means->PrintLine();

			"=== 2 ==="->PrintLine();
			for(i := 1; i < cols; i += 1;) {
				term_vector := VectorPower(data, i, 2.);
				term_sum := VectorSum(term_vector);
				coff := term_sum - Float->Pow(data_sums[i], 2.) / rows;			
# term_sum->PrintLine();
coff->PrintLine();
			};

			y_index := 0;
			for(i := 1; i < cols; i += 1;) {
				term_sumvector := ProductSum(data, 0, i);
				term_sumsum := VectorSum(term_sumvector);
				coff := term_sumsum - data_sums[y_index] * data_sums[i] / rows;
# term_sumsum->PrintLine();
coff->PrintLine();
			};

			# TODO: pick indexes, consider a range
			term_vector := term_sumvector := ProductSum(data, 1, 2);
			term_sum := VectorSum(term_vector);

			sub_sum := data_sums[1];
			for(j := 2; j < data_sums->Size(); j += 1;) {
				sub_sum *= data_sums[j];
			};

			coff := term_sum - sub_sum / rows;
# term_sum->PrintLine();
coff->PrintLine();
		}
	}

	function : ProductSum(in : Float[,], col_a : Int, col_b : Int) ~ Float[] {
		dims := in->Size();
		rows := dims[0];
		cols := dims[1];

		if(col_a < cols & col_b < cols) {
			out := Float->New[rows];

			each(r : rows) {		
				out[r] := in[r, col_a] * in[r, col_b]
			};

			return out;
		};

		return Nil;
	}

	function : VectorPower(in : Float[,], col : Int, pow : Float) ~ Float[] {
		dims := in->Size();
		rows := dims[0];
		cols := dims[1];

		if(col < cols) {
			out := Float->New[rows];

			each(r : rows) {		
				out[r] := Float->Pow(in[r, col], pow);
			};

			return out;
		};

		return Nil;
	}

	function : VectorMeans(in : Float[,]) ~ Float[] {
		dims := in->Size();
		rows := dims[0];
		cols := dims[1];

		out := Float->New[cols];
		
		each(c : cols) {
			sum := 0.;

			each(r : rows) {
				sum += in[r, c];
			};

			out[c] := sum / rows;
		};

		return out;
	}

	function : VectorSum(in : Float[]) ~ Float {
		rows := in->Size();
		
		sum := 0.;

		each(r : rows) {
			sum += in[r];
		};

		return sum;
	}

	function : VectorSums(in : Float[,]) ~ Float[] {
		dims := in->Size();
		rows := dims[0];
		cols := dims[1];

		out := Float->New[cols];
		
		each(c : cols) {
			sum := 0.;

			each(r : rows) {
				sum += in[r, c];
			};

			out[c] := sum;
		};

		return out;
	}

	function : LoadData() ~ Float[,] {
		return [
			[140., 60., 22.]
			[155., 62., 25.]
			[159., 67., 24.]
			[179., 70., 20.]
			[192., 71., 15.]
			[200., 72., 14.]
			[212., 75., 14.]
			[215., 78., 11.]];
	}
}
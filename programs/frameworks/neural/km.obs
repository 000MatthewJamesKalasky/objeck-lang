class KMeans {
	function : Main(args : String[]) ~ Nil {
		data := LoadData();
		k := 2;

		dims := data->Size();
		rows := dims[0]; 
		cols := dims[1];
		"--- rows={$rows}, cols={$cols} ---"->PrintLine();

		centers := Float->New[2, k];
		each(a : k) {
			each(b : cols) {
				col_avg := 0.0;
				each(c : rows) {
					col_avg += data[c, b];
				};
				col_avg /= rows;

				center := 0.0;
				if(a % 2 = 0) {
					center := col_avg - col_avg / k;
				}
				else {
					center := col_avg + col_avg / k;	
				};
				centers[a, b] := center;
			};
		};

		centers->ToString()->PrintLine();
		dims := centers->Size();
		center_rows := dims[0]; 
		
		each(a : center_rows) {
			x1 := centers[0, a];
			x2 := centers[1, a];
			"\n### x1={$x1}, x2={$x2} ###"->PrintLine();

			each(b : rows) {
				y1 := data[b, 0];
				y2 := data[b, 1];
				"--- y1={$y1}, y2={$y2} ---"->PrintLine();
			};
		}

		data->ToString()->PrintLine();
	}

	function : native : Distance(x1 : Float, x2 : Float, y1  : Float, y2 : Float) ~ Float {
		return Float->Sqrt(Float->Pow(x2 - x1, 2.0) + Float->Pow(y2 - y1, 2.0));
	}

	function : LoadData() ~ Float[,] {
		return [
			[3.3, 4.0]
			[3.9, 2.2]
			[3.0, 3.0]
			[4.5, 4.0]
			[1.5, 3.5]
			[1.0, 2.0]
			[0.6, 4.2]
			[0.4, 3.0]
			[1.2, 4.8]
			[0.6, 5.0]
			[3.0, 5.0]
			[4.5, 1.0]];
	}
}
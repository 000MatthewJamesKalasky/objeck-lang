use Collection;

class Repl {
	function : Main(args : String[]) ~ Nil {
		# 50/50 dateset for playing, what is the predictor?
		p := Node->New(10.0, 10.0); 

		# test: performance contrib
		p->AddChild(14.0, 8.0);
		p->AddChild(6.0, 2.0);
		gi := p->GiniImpurity();
		"perf={$gi}"->PrintLine();

		# test: class contrib
		p := Node->New(10.0, 10.0);
		p->AddChild(10.0, 8.0);
		p->AddChild(10.0, 2.0);
		gi := p->GiniImpurity();
		"class={$gi}"->PrintLine();
	}
}

class Node {
	@x : Float;
	@y : Float;
	@parent : Node;
	@children : Vector<Node>;

	New(x : Float, y : Float) {
		@x := x;
		@y := y;

		@children := Vector->New()<Node>;
	}

	New(x : Float, y : Float, p : Node) {
		@x := x;
		@y := y;
		@parent := p;

		@children := Vector->New()<Node>;
	}

	method : public : GetX() ~ Float {
		return @x;
	}

	method : public : GetY() ~ Float {
		return @y;
	}

	method : public : GiniImpurity() ~ Float {	
		pxy := @x + @y;

		gi := 0.0;
		each(child := @children) {
			gi += (child->GetX() / pxy) * child->Gini();
		};

		return gi;
	}

	method : Gini() ~ Float {
		l := @y/@x; r := 1-l;
		return 1 - (l*l + r*r);
	}

	method : public : AddChild(x : Float, y : Float) ~ Node {
		n := Node->New(x, y, @self);
		@children->AddBack(n);
		return n;
	}

	method : public : GetChildren() ~ Vector<Node> {
		return @children;
	}

	method : public : IsLeaf() ~ Bool {
		return @children->IsEmpty();
	}
}
use Collection;

class DecisionTree {
	function : Main(args : String[]) ~ Nil {
		# test: performance contrib to playing
		p := Node->New(20.0, 10.0); # 50/50 dateset for playing, what is the predictor?
		p->AddChild(14.0, 8.0); # left
		p->AddChild(6.0, 2.0); # right
		gi := p->GiniImpurity();
		"|perf={$gi}"->PrintLine();
		
		# test: class contrib to playing
		p := Node->New(20.0, 10.0); # 50/50 dateset for playing, what is the predictor?
		p->AddChild(10.0, 8.0); # left
		p->AddChild(10.0, 2.0); # right
		gi := p->GiniImpurity();
		"|class={$gi}"->PrintLine();

		# todo: subsplit on performance
		p := Node->New(10.0, 8.0); # 50/50 dateset for playing, what is the predictor?
		p->AddChild(8.0, 6.0); # left
		p->AddChild(2.0, 2.0); # right
		gi := p->GiniImpurity();
		"|class|perf={$gi}"->PrintLine();

#~
		# todo: subsplit on class
		p := Node->New(10.0, 8.0); # 50/50 dateset for playing, what is the predictor?
		p->AddChild(8.0, 8.0); # left
		p->AddChild(0.0, 0.0); # right
		gi := p->GiniImpurity();
		"|class|perf={$gi}"->PrintLine();
~#		
	}
}

class Node {
	@target : Float;
	@actual : Float;
	@gini_impr : Float;
	@parent : Node;
	@children : Vector<Node>;

	New(target : Float, actual : Float) {
		@target := target;
		@actual := actual;
		@children := Vector->New()<Node>;
	}

	New : private (target : Float, actual : Float, parent : Node) {
		@target := target;
		@actual := actual;
		@parent := parent;
		@children := Vector->New()<Node>;
	}

	method : public : GetTarget() ~ Float {
		return @target;
	}

	method : public : GetActual() ~ Float {
		return @actual;
	}

	method : public : GetTargetPercentage() ~ Float {
		return @actual/@target;
	}

	method : public : GiniImpurity() ~ Float {	
		if(@gini_impr = 0.0) {
			pxy := @target;

			each(child := @children) {
				@gini_impr += (child->GetTarget() / pxy) * child->Gini();
			};

			return @gini_impr;
		};

		return @gini_impr;
	}

	method : Gini() ~ Float {
		l := @actual/@target; r := 1-l;
		return 1 - (l*l + r*r);
	}

	method : public : AddChild(x : Float, y : Float) ~ Node {
		n := Node->New(x, y, @self);
		@children->AddBack(n);
		return n;
	}

	method : public : GetChildren() ~ Vector<Node> {
		return @children;
	}

	method : public : IsLeaf() ~ Bool {
		return @children->IsEmpty();
	}
}
use Collection;

class Repl {
	function : Main(args : String[]) ~ Nil {
		p := Node->New(10.0, 10.0);
		
		l := Node->New(14.0, 8.0);
		r := Node->New(6.0, 2.0);
		gi := GiniImpurity(l, r, p);
		"perf={$gi}"->PrintLine();

		l := Node->New(10.0, 8.0);
		r := Node->New(10.0, 2.0);
		gi := GiniImpurity(l, r, p);
		"class={$gi}"->PrintLine();
	}

	function : GiniImpurity(l : Node, r : Node, p : Node) ~ Float {	
		pxy := p->GetX() + p->GetY();
		return  (l->GetX() / pxy) * l->Gini() + (r->GetX() / pxy) * r->Gini();
	}
}

class Node {
	@x : Float;
	@y : Float;
	@children : Vector<Node>;

	New(x : Float, y : Float) {
		@x := x;
		@y := y;

		@children := Vector->New()<Node>;
	}

	method : public : GetX() ~ Float {
		return @x;
	}

	method : public : GetY() ~ Float {
		return @y;
	}

	method : public : Gini() ~ Float {
		l := @y/@x; r := 1-l;
		return 1 - (l*l + r*r);
	}

	method : public : AddChild(x : Float, y : Float) ~ Nil {
		@children->AddBack(Node->New(x, y));
	}

	method : public : GetChildren() ~ Vector<Node> {
		return @children;
	}

	method : public : IsLeaf() ~ Bool {
		return @children->IsEmpty();
	}
}
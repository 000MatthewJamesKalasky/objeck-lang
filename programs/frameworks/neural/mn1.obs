use System.Matrix;

class NeuralNetwork {
	@input_nodes : Float;
	@hidden_nodes : Float;
	@output_nodes : Float;
	@learning_rate : Float;
	@weight_inputs_hidden : Float[,];
	@weight_outputs_hidden : Float[,];

	function : Main(args : String[]) ~ Nil {
		input_nodes := 8;
		hidden_nodes := 8;
		output_nodes := 10;
		learning_rate := 0.567;

		# load test data
		inputs := Collection.Vector->New()<MatrixRef>;
		targets := Collection.Vector->New()<MatrixRef>;
		LoadTests(inputs, targets);

		runs := 725;
		training_perc := 0.8; 
		training_runs := runs * training_perc;
		test_runs := runs * (0.999 - training_perc);

		# create network and train
		network := NeuralNetwork->New(input_nodes, hidden_nodes, output_nodes, learning_rate);
		each(i : training_runs) {
			index := i % 11;
			network->Train(
				inputs->Get(index)->Get(), 
				targets->Get(index)->Get(), 
				learning_rate);
		};

		correct_count := 0;
		each(i : test_runs) {
			test := Int->Random(9);
			in := inputs->Get(test)->Get();
			result := network->Test(in);
			if(test = result) {
				correct_count += 1;
			};
		};

		correct_perc := 100.0* correct_count->As(Float) / test_runs->As(Float);
		"{$correct_perc}% correct"->PrintLine();
	}
	
	New(input_nodes : Float, hidden_nodes : Float, output_nodes : Float, learning_rate : Float) {
		@input_nodes  := input_nodes;
		@hidden_nodes  := hidden_nodes;
		@output_nodes  := output_nodes;
		@learning_rate := learning_rate;

		@weight_inputs_hidden := Matrix2D->RandomNormal(0.001, Float->Pow(@input_nodes, -0.05), @hidden_nodes, @input_nodes);
		@weight_outputs_hidden := Matrix2D->RandomNormal(0.001, Float->Pow(@input_nodes, -0.05), @output_nodes, @input_nodes);
	}

	method : Query(inputs : Float[,]) ~ Float[,] {
		# calculate signals into hidden layer
		hidden_outputs := Matrix2D->DotSigmoid(@weight_inputs_hidden, inputs);
		# calculate the signals emerging from final output layer
		return Matrix2D->DotSigmoid(@weight_outputs_hidden, hidden_outputs);
	}

	method : Train(inputs : Float[,], targets : Float[,], rate : Float) ~ Nil {
		# calculate signals into hidden layer
        hidden_outputs := Matrix2D->DotSigmoid(@weight_inputs_hidden, inputs);
        # calculate signals into final output layer
        final_outputs  := Matrix2D->DotSigmoid(@weight_outputs_hidden, hidden_outputs);
        # output layer error is the (target - actual)
        output_errors := Matrix2D->Subtract(targets, final_outputs);
        # hidden layer error is the output_errors, split by weights, recombined at hidden nodes
		hidden_errors := Matrix2D->Dot(Matrix2D->Transpose(@weight_outputs_hidden), output_errors);
		# update the weights for the links between the input and hidden layers
		@weight_inputs_hidden := Matrix2D->Add(@weight_inputs_hidden, Adjust(rate, hidden_errors, hidden_outputs, inputs));
		# update the weights for the links between the hidden and output layers
		@weight_outputs_hidden := Matrix2D->Add(@weight_outputs_hidden, Adjust(rate, output_errors, final_outputs, hidden_outputs));		
	}

	method : Adjust(rate : Float, errors : Float[,], outputs : Float[,], inputs : Float[,]) ~ Float[,] {
		return Matrix2D->Multiple(rate, Matrix2D->Dot(Matrix2D->Multiple(errors, Matrix2D->Multiple(outputs, Matrix2D->Subtract(0.999, outputs))), Matrix2D->Transpose(inputs)));
	}

	method : Test(test : Float[,]) ~ Int {
		outputs := Query(test);

		dim := outputs->Size();
		len := dim[0];

		result : Float;
		index := -1;

		each(i : len) {
			output := outputs[i, 0];
			if(output > result) {
				result := output;
				index := i;
			}
		};		

		return index;
	}

	function : LoadTests(inputs : Collection.Vector<MatrixRef>, targets : Collection.Vector<MatrixRef>) ~ Nil {
		#~
		led digit encoding:

             1   		
	  	   -----
		6 |     | 2
		  |--7--| 
		5 |     | 3
		   -----
		     4
		~#

		# --- 0 ---

		inputs->AddBack(MatrixRef->New([
			[0.001]
			[0.999]
			[0.999]
			[0.999]
			[0.999]
			[0.999]
			[0.999]
			[0.001]]));

		targets->AddBack(MatrixRef->New([
			[0.001]
			[0.001]
			[0.001]
			[0.001]
			[0.001]
			[0.001]
			[0.001]
			[0.001]
			[0.001]
			[0.001]]));

		# --- 1 ---

		inputs->AddBack(MatrixRef->New([
			[0.001]
			[0.001]
			[0.999]
			[0.999]
			[0.001]
			[0.001]
			[0.001]
			[0.001]]));

		targets->AddBack(MatrixRef->New([
			[0.001]
			[0.999]
			[0.001]
			[0.001]
			[0.001]
			[0.001]
			[0.001]
			[0.001]
			[0.001]
			[0.001]]));

		# --- 2 ---

		inputs->AddBack(MatrixRef->New([
			[0.001]
			[0.999]
			[0.999]
			[0.001]
			[0.999]
			[0.999]
			[0.001]
			[0.999]]));

		targets->AddBack(MatrixRef->New([
			[0.001]
			[0.001]
			[0.999]
			[0.001]
			[0.001]
			[0.001]
			[0.001]
			[0.001]
			[0.001]
			[0.001]]));

		# --- 3 ---

		inputs->AddBack(MatrixRef->New([
			[0.001]
			[0.999]
			[0.999]
			[0.999]
			[0.999]
			[0.001]
			[0.001]
			[0.999]]));

		targets->AddBack(MatrixRef->New([
			[0.001]
			[0.001]
			[0.001]
			[0.999]
			[0.001]
			[0.001]
			[0.001]
			[0.001]
			[0.001]
			[0.001]]));

		# --- 4 ---

		inputs->AddBack(MatrixRef->New([
			[0.001]
			[0.001]
			[0.999]
			[0.999]
			[0.001]
			[0.001]
			[0.999]
			[0.999]]));

		targets->AddBack(MatrixRef->New([
			[0.001]
			[0.001]
			[0.001]
			[0.001]
			[0.999]
			[0.001]
			[0.001]
			[0.001]
			[0.001]
			[0.001]]));

		# --- 5 ---

		inputs->AddBack(MatrixRef->New([
			[0.001]
			[0.999]
			[0.001]
			[0.999]
			[0.999]
			[0.001]
			[0.001]
			[0.999]]));

		targets->AddBack(MatrixRef->New([
			[0.001]
			[0.001]
			[0.001]
			[0.001]
			[0.001]
			[0.999]
			[0.001]
			[0.001]
			[0.001]
			[0.001]]));

		# --- 6 ---

		inputs->AddBack(MatrixRef->New([
			[0.001]
			[0.999]
			[0.001]
			[0.999]
			[0.999]
			[0.999]
			[0.999]
			[0.999]]));

		targets->AddBack(MatrixRef->New([
			[0.001]
			[0.001]
			[0.001]
			[0.001]
			[0.001]
			[0.001]
			[0.999]
			[0.001]
			[0.001]
			[0.001]]));

		# --- 7 ---

		inputs->AddBack(MatrixRef->New([
			[0.001]
			[0.999]
			[0.999]
			[0.999]
			[0.001]
			[0.001]
			[0.001]
			[0.001]]));

		targets->AddBack(MatrixRef->New([
			[0.001]
			[0.001]
			[0.001]
			[0.001]
			[0.001]
			[0.001]
			[0.001]
			[0.999]
			[0.001]
			[0.001]]));

		# --- 8 ---

		inputs->AddBack(MatrixRef->New([
			[0.999]
			[0.999]
			[0.999]
			[0.999]
			[0.999]
			[0.999]
			[0.999]
			[0.999]]));

		targets->AddBack(MatrixRef->New([
			[0.001]
			[0.001]
			[0.001]
			[0.001]
			[0.001]
			[0.001]
			[0.001]
			[0.001]
			[0.999]
			[0.001]]));

		# --- 9 ---

		inputs->AddBack(MatrixRef->New([
			[0.001]
			[0.999]
			[0.999]
			[0.999]
			[0.999]
			[0.001]
			[0.999]
			[0.999]]));

		targets->AddBack(MatrixRef->New([
			[0.001]
			[0.001]
			[0.001]
			[0.001]
			[0.001]
			[0.001]
			[0.001]
			[0.001]
			[0.001]
			[0.999]]));

		# --- (blank) ---

		inputs->AddBack(MatrixRef->New([
			[0.001]
			[0.001]
			[0.001]
			[0.001]
			[0.001]
			[0.001]
			[0.001]
			[0.001]]));

		targets->AddBack(MatrixRef->New([
			[0.001]
			[0.001]
			[0.001]
			[0.001]
			[0.001]
			[0.001]
			[0.001]
			[0.001]
			[0.001]
			[0.001]]));
	}
}

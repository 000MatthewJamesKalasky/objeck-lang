use Collection;
use System.Matrix;

class TestNetwork {
	@input_nodes : Float;
	@hidden_nodes : Float;
	@output_nodes : Float;
	@learning_rate : Float;
	@weight_inputs_hidden : Float[,];
	@weight_outputs_hidden : Float[,];
	@threshold : Float;
	@attempts : Int;

	function : Main(args : String[]) ~ Nil {
		# train data weight and height, true female
		inputs := Vector->New()<MatrixRef>; 
		targets := Vector->New()<MatrixRef>;

		inputs->AddBack(MatrixRef->New([[115.0], [66.0]]));
		targets->AddBack(MatrixRef->New([[1.0]]));


		a := [[115.0], [66.0]];
		a->ToString()->PrintLine();

		b := [[1.0]];
		b->ToString()->PrintLine();
		
#~
		inputs->AddBack(MatrixRef->New([[175.0], [78.0]]));
		targets->AddBack(MatrixRef->New([[0.0]]));

		inputs->AddBack(MatrixRef->New([[205.0], [72.0]]));
		targets->AddBack(MatrixRef->New([[0.0]]));

		inputs->AddBack(MatrixRef->New([[120.0], [67.0]]));
		targets->AddBack(MatrixRef->New([[1.0]]));

		inputs->AddBack(MatrixRef->New([[100.0], [58.0]]));
		targets->AddBack(MatrixRef->New([[1.0]]));

		inputs->AddBack(MatrixRef->New([[95.0], [75.0]]));
		targets->AddBack(MatrixRef->New([[1.0]]));

		inputs->AddBack(MatrixRef->New([[225.0], [73.0]]));
		targets->AddBack(MatrixRef->New([[0.0]]));

		# test
		network := Train(2, inputs, 9, 1, targets, 0.0127, 40000);
		network->SetActivation(0.85, 5);

		network->Query(MatrixRef->New([[167.0], [73.0]]))->PrintLine();
		network->Query(MatrixRef->New([[105.0], [67.0]]))->PrintLine();
		network->Query(MatrixRef->New([[120.0], [72.0]]))->PrintLine();
		network->Query(MatrixRef->New([[143.0], [68.0]]))->PrintLine();
		network->Query(MatrixRef->New([[115.0], [58.0]]))->PrintLine();
		network->Query(MatrixRef->New([[205.0], [82.0]]))->PrintLine();
		network->Query(MatrixRef->New([[95.0], [55.0]]))->PrintLine();
~#		
	}

	function : Train(input_nodes : Int, inputs : Vector<MatrixRef>, hidden_factor : Int, output_nodes : Int, targets : Vector<MatrixRef>, learning_rate : Float, iterations : Int) ~ TestNetwork {
		network := TestNetwork->New(input_nodes, hidden_factor * input_nodes, output_nodes, learning_rate);
		network->Train(inputs, targets, learning_rate, iterations);
		return network;		
	}

	New : private (input_nodes : Float, hidden_nodes : Float, output_nodes : Float, learning_rate : Float) {
		@input_nodes := input_nodes;
		@hidden_nodes := hidden_nodes;
		@output_nodes := output_nodes;
		@learning_rate := learning_rate;
		@threshold := 0.80;
		@attempts := 10;

		@weight_inputs_hidden := Matrix2D->RandomNormal(0.0, Float->Pow(@input_nodes, -1.0), @hidden_nodes, @input_nodes);
		@weight_outputs_hidden := Matrix2D->RandomNormal(0.0, Float->Pow(@input_nodes, -1.0), @output_nodes, @hidden_nodes);
	}

	method : public : SetActivation(threshold : Float, attempts : Int) ~ Nil {
		@threshold := threshold;
		@attempts := attempts;
	}

	method : public : Query(inputs : MatrixRef) ~ Bool {
		# try 10x and fail
		values :=  inputs->Get();
		each(i : @attempts) {
			outputs := Query(values);

			if(outputs[0,0] > @threshold) {
				return true;
			}
			else if(outputs[0,0] < 1.0 - @threshold) {
				return false;
			}
		};

		return false;
	}

	method : Query(inputs : Float[,]) ~ Float[,] {
		# calculate signals into hidden layer
		hidden_outputs := Matrix2D->DotSigmoid(@weight_inputs_hidden, inputs);
		# calculate the signals emerging from final output layer
		return Matrix2D->DotSigmoid(@weight_outputs_hidden, hidden_outputs);
	}

	method : Train(inputs : Vector<MatrixRef>, targets : Vector<MatrixRef>, rate : Float, iterations : Int) ~ Nil {
		if(inputs->Size() = targets->Size()) {
			each(i : iterations) {
				each(j : inputs) {
					input := inputs->Get(j)->Get();
					target := targets->Get(j)->Get();

					# calculate signals into hidden layer
					hidden_outputs := Matrix2D->DotSigmoid(@weight_inputs_hidden, input);
					# calculate signals into final output layer
					final_outputs  := Matrix2D->DotSigmoid(@weight_outputs_hidden, hidden_outputs);
					# output layer error is the (target - actual)
					output_errors := Matrix2D->Subtract(target, final_outputs);
					# hidden layer error is the output_errors, split by weights, recombined at hidden nodes
					hidden_errors := Matrix2D->Dot(Matrix2D->Transpose(@weight_outputs_hidden), output_errors);
					# update the weights for the links between the input and hidden layers
					@weight_inputs_hidden := Matrix2D->Add(@weight_inputs_hidden, Adjust(rate, hidden_errors, hidden_outputs, input));
					# update the weights for the links between the hidden and output layers
					@weight_outputs_hidden := Matrix2D->Add(@weight_outputs_hidden, Adjust(rate, output_errors, final_outputs, hidden_outputs));
				};
			};
		};
	}

	method : Adjust(rate : Float, errors : Float[,], outputs : Float[,], inputs : Float[,]) ~ Float[,] {
		return Matrix2D->Multiple(rate, Matrix2D->Dot(Matrix2D->Multiple(errors, Matrix2D->Multiple(outputs, Matrix2D->Subtract(1.0, outputs))), Matrix2D->Transpose(inputs)));
	}
}
use System.ML;

class Test {
	function : Main(args : String[]) ~ Nil {
		matrix := BoolMatrixRef->New([
			[false, true, false]
			[true, false, true]
			[false, true, false]
			[true, false, true]
			[true, false, true]
			[true, false, true]
			[false, true, false]
			[true, false, true]
			[false, true, false]
			[true, false, true]
			[true, false, true]
			[true, false, true]
			[true, false, true]
			[true, false, true]
			[true, false, true]

			[true, false, true]
			[true, false, true]
			[true, false, true]
			[true, false, true]
			[true, false, true]
			[true, false, true]

			[false, true, false]
			[true, false, true]
			[false, true, false]
			[true, false, true]
			[true, false, true]
			[true, false, true]
			[false, true, false]
			[true, false, true]
			[false, true, false]
			[true, false, true]
			[true, false, true]
			[true, false, true]
			[true, false, true]
			[true, false, true]
			[true, false, true]



			[true, false, true]
			[true, false, true]
			[true, false, true]
			[true, false, true]
			[true, false, true]
			[true, false, true]




			[false, true, false]


			[true, true, false]
			[true, true, false]
			[true, true, false]
			[true, true, false]
			[true, true, false]
		]);

		"\n--- Dataset ---"->PrintLine();		
		split_matrix := matrix->Split(0.25)
		training_matrix := split_matrix[0]->Get()
		training_matrix->ToString()->PrintLine()

		"---"->PrintLine()

		data_matrix := split_matrix[1]->Get()
		data_matrix->ToString()->PrintLine()

		"\n--- Trained ---"->PrintLine();
		output := DecisionTree->New(training_matrix)->Train()
		output->ToString()->PrintLine()
		
		"\n--- Confidence ---"->PrintLine();
		cols := data_matrix->Columns()->As(Float)
		training_matrix_matches := DecisionTree->Matches(cols - 1, output)->As(Float)
		training_matrix_matches->PrintLine();		
		data_matrix_row := data_matrix->Rows()->As(Float)
		(1 - (training_matrix_matches / data_matrix_row))->PrintLine()
	}
}
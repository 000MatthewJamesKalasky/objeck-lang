use System.ML;

class Test {
	function : Main(args : String[]) ~ Nil {
		raw_input := [
			[true, false, true]
			[true, false, true]
			[true, true, true]
			[true, true, true]
			[true, true, true]
			[true, true, true]
			[true, true, true]
			[true, true, true]
			[false, true, true]
			[false, true, true]
			[true, true, false]
			[true, true, false]
			[false, true, false]
			[false, true, false]
			[false, true, false]
			[false, true, false]
			[false, false, false]
			[false, false, false]
			[false, false, false]
			[false, false, false]
		];

		input := BoolMatrixRef->New(raw_input)->Split(0.33);
		
		"--- Dataset ---"->PrintLine();
		training := input[0]->Get();
#~		
		training->ToString()->PrintLine()

		"\n--- Training ---"->PrintLine();
		training->ToString()->PrintLine()
		
		output := DecisionTree->New(training)->Train()
		"\n--- Split ---"->PrintLine();
		output->ToString()->PrintLine()

		cols := training->Columns()->As(Float)
		training_matches := DecisionTree->Matches(cols - 1,output)->As(Float)
		"\n--- Confidence ---"->PrintLine();
		(output <> training)->PrintLine()
		(training->Rows()->As(Float) / training_matches)->PrintLine()
~#		
	}
}
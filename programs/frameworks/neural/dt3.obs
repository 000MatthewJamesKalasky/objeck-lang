use System.ML;

class Test {
	function : Main(args : String[]) ~ Nil {
		matrix := BoolMatrixRef->New([
			[true, false, true]
			[true, false, true]
			[true, true, true]
			[true, true, true]
			[true, true, true]
			[true, true, false]
			[true, true, false]
			[true, true, true]
			[true, true, true]
			[false, true, true]
			[false, true, true]
			[true, true, false]
			[true, true, false]
			[false, true, false]
			[false, true, false]
			[false, true, false]
			[false, true, false]
			[false, false, false]
			[false, false, false]
			[false, false, false]
			[false, false, false]
		]);

		"--- Dataset ---"->PrintLine();
		matrix->ToString()->PrintLine()
		
		"\n--- Training ---"->PrintLine();
		split := matrix->Split(0.25)
		training := split[0]->Get()
		training->ToString()->PrintLine()
		"---"->PrintLine()

		"\n--- Datasets ---"->PrintLine();
		training->ToString()->PrintLine()		
		output := DecisionTree->New(training)->Train()
		"---"->PrintLine()


		"\n--- Split ---"->PrintLine();

		foo := split[1]->Get()
foo->ToString()->PrintLine();
	
		cols := foo->Columns()->As(Float)
		training_matches := DecisionTree->Matches(cols - 1, output)->As(Float)

		"\n--- Confidence ---"->PrintLine();
		(foo <> training)->PrintLine()
		(foo->Rows()->As(Float) / training_matches)->PrintLine()
		
	}
}
use System.ML;

class Test {
	function : Main(args : String[]) ~ Nil {
		matrix := BoolMatrixRef->New([
			[true, false, true]
			[true, false, true]
			[true, true, true]
			[true, true, true]
			[true, true, true]
			[true, true, false]
			[true, true, false]
			[true, true, true]
			[true, true, true]
			[false, true, true]
			[false, true, true]
			[true, true, false]
			[true, true, false]
			[false, true, false]
			[false, true, false]
			[false, true, false]
			[false, true, false]
			[false, false, false]
			[false, false, false]
			[false, false, false]
			[false, false, false]
		]);

		"--- Dataset ---"->PrintLine();
		matrix->ToString()->PrintLine()
		
		"\n--- Training ---"->PrintLine();
		split_matrix := matrix->Split(0.25)
		training_matrix := split_matrix[0]->Get()
		"---"->PrintLine()

		"\n--- Split ---"->PrintLine();
		output := DecisionTree->New(training_matrix)->Train()

		data_matrix := split_matrix[1]->Get()

training_matrix->ToString()->PrintLine()
		"---"->PrintLine();

data_matrix->ToString()->PrintLine();
	
		cols := data_matrix->Columns()->As(Float)
		training_matrix_matches := DecisionTree->Matches(cols - 1, data_matrix)->As(Float)

		"\n--- Confidence ---"->PrintLine();
		(data_matrix <> training_matrix)->PrintLine()
		(data_matrix->Rows()->As(Float) / training_matrix_matches)->PrintLine()
		
	}
}
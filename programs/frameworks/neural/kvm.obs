class KVM {
	function : Main(args : String[]) ~ Nil {
		x_value := 4;
		x_inter := -2;
		y_inter := 1;
		
		"--- StrightLine (Apart) ---"->PrintLine();
		StrightLine(x_value + 1.25, x_inter, y_inter)->PrintLine(); # move line up
		StrightLine(x_value, x_inter, y_inter)->PrintLine(); # original line
		StrightLine(x_value - 1.25, x_inter, y_inter)->PrintLine(); # move line down
		
		"--- StrightLine (Close) ---"->PrintLine();
		StrightLine(x_value + .05, x_inter, y_inter)->PrintLine(); # move line up
		StrightLine(x_value, x_inter, y_inter)->PrintLine(); # original line
		StrightLine(x_value - .05, x_inter, y_inter)->PrintLine(); # move line down

		"--- PointAboveBelowLine ---"->PrintLine();
		PointAboveBelowLine(5, 4, x_value, x_inter, y_inter)->PrintLine(); # above line
		PointAboveBelowLine(4, 3, x_value, x_inter, y_inter)->PrintLine(); # on line
		PointAboveBelowLine(5, 3, x_value, x_inter, y_inter)->PrintLine(); # below line

		"--- DistancePointLine ---"->PrintLine();
		DistancePointLine(3, 5, x_value, x_inter, y_inter)->PrintLine();

		"--- DistanceLineLine ---"->PrintLine();
		DistanceLineLine(x_value, x_inter, y_inter, 4)->PrintLine(); # original line

	}

	function : native : DistanceLineLine(x_value : Float, x_inter : Float, y0_inter : Float, y1_inter : Float) ~ Float {
		slope := y0_inter / x_inter;
		top := Float->Abs(y0_inter - y1_inter);
		bottom := Float->Sqrt(Float->Pow(slope, 2.) + Float->Pow(y0_inter, 2.));

		return top / bottom;
	}

	function : native : DistancePointLine(x : Float, y : Float, x_value : Float, x_inter : Float, y_inter : Float) ~ Float {
		slope := y_inter / x_inter;
		top := Float->Abs(slope * x + y_inter * y - y_inter);
		bottom := Float->Sqrt(Float->Pow(slope, 2.) + Float->Pow(y_inter, 2.));
		return top / bottom;
	}

	function : native : PointAboveBelowLine(x : Float, y : Float, x_value : Float, x_inter : Float, y_inter : Float) ~ Float {
		slope := y_inter / x_inter;
		return x * slope + y_inter * y - y_inter;
	}

	function : native : StrightLine(x_value : Float, x_inter : Float, y_inter : Float) ~ Float {
		slope := -1. * y_inter / x_inter;
		return slope * x_value + y_inter;
	}
}
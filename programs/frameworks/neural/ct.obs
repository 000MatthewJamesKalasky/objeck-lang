# https://builtin.com/data-science/random-forest-algorithm

class Classification {
	@data : Int[,];

	function : Main(args : String[]) ~ Nil {
		Classification->New();
	}

	New () {
		@data := LoadData();

		@data->ToString()->PrintLine();
	}

	method : LoadData() ~ Int[,] {
		data := Int->New[7, 4];

		# heart disease
		data[0,0] := 1;		data[0,1] := 1;	data[0,2] := 7;		data[0,3] := 0;
		data[1,0] := 1;		data[1,1] := 0;	data[1,2] := 12;	data[1,3] := 0;
		data[2,0] := 0;		data[2,1] := 1;	data[2,2] := 18;	data[2,3] := 1;
		data[3,0] := 0;		data[3,1] := 1;	data[3,2] := 35;	data[3,3] := 1;
		data[4,0] := 1;		data[4,1] := 1;	data[4,2] := 38;	data[4,3] := 1;
		data[5,0] := 1;		data[5,1] := 0;	data[5,2] := 50;	data[5,3] := 0;
		data[6,0] := 0;		data[6,1] := 0;	data[6,2] := 83;	data[6,3] := 0;

		return data;
	}
}

class Node {
	@left : Node;
	@right : Node;

	New(left : Node, right : Node) {
		@left := left;
		@right := right;
	}

	method : public : GetLeft() ~ Node {
		return @left;
	}

	method : public : GetRight() ~ Node {
		return @right;
	}
}
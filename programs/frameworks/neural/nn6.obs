use Collection;
use System.Matrix;

class Test {
	function : Main(args : String[]) ~ Nil {
		if(args->Size() = 1) {
			inputs_targets := MatrixReader->SplitMatrices(args[0], 1, 0.8); # 20% test data
			if(inputs_targets <> Nil) {
				# train
				network := NeuralNetwork->Train(2, inputs_targets[0], 8, 1, inputs_targets[1], 0.0125, 250);

				# test
				tests := targets := inputs_targets[2];
				answers := targets := inputs_targets[3];

				failures := 0;
				each(i : tests) {
					test := tests->Get(i);
					
					answer := answers->Get(i)->ToBool();
					predict := network->Query(MatrixRef->New(test->Get()));
					if(predict <> answer) {
						failures += 1;
					};
				};

				correct := 100.0 * (1.0 - failures->As(Float) / tests->Size()->As(Float));
				System.IO.Standard->Print("tests: ")->Print(tests->Size())->Print(", correct: ")->SetFloatPrecision(5)->Print(correct)->PrintLine("%");
			};
		};
	}
}
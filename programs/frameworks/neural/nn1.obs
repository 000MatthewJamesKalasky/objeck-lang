class NeuralNetwork​ {
	@input : Int;
	@hidden : Int;
	@output : Int;

	function : Main(args : String[]) ~ Nil {
		input := 3;
		hidden := 3;
		output := 3;
		rate := 0.3;

		n := NeuralNetwork​->New(input, hidden, output, rate);
	}

	New(input : Int, hidden : Int, output : Int, rate : Float) {
		@input := input;
		@hidden := hidden;
		@output := output;

		m := RandomMatrix(hidden, input);
		Print(m);
	}

	function : Train() ~ Nil {
	
	}

	function : Query() ~ Nil {
	
	}

	function : RandomMatrix(rows : Int, cols : Int) ~ Float[,] {
		m := Float->New[rows, cols];

		for(i := 0; i < rows; i += 1;) {
			for(j := 0; j < cols; j += 1;) {
				m[i, j] := Float->Random() - 0.5;
			};
		};

		return m;
	}

	function : Print(m : Float[,]) ~ Nil {
		dims := m->Size();
		rows := dims[0];
		cols := dims[1];

		for(r := 0; r < rows; r +=1;) {
			'['->Print();
			for(c := 0; c < cols; c +=1;) {
				m[r,c]->Print();
				if(c + 1 < cols) {
					", "->Print();
				}
				else {
					
				};
			};
			']'->PrintLine();
		};
	}
}
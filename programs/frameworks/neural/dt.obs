use Collection;

bundle System.ML {
	class TreeNode {
		function : Main(args : String[]) ~ Nil {
			p := TreeElem->New(16, 14);

			p->AddChild(12, 1);
			p->AddChild(4, 13);
			g := Gain(p);

			p := TreeElem->New(16, 14);
			p->AddChild(7, 1);
			p->AddChild(4, 6);
			p->AddChild(5, 7);
			g := Gain(p);
			
			"energy={$g}, motivation={$g}"->PrintLine();
		}

		function : native : Gain(parent : TreeElem) ~ Float {
			px := parent->GetX(); 
			py := parent->GetY();
			pxy := px + py;

			e : Float;
			children := parent->GetChildren();
			each(i : children) {
				child := children->Get(i);
				x := child->GetX();
				y := child->GetY();
				e += Entropy(x, y) * (x + y) / pxy;
			};

			return Entropy(px, py) - e;
		}

		function : native : Entropy(x : Float, y : Float) ~ Float {
			xy := x + y;
			return -1.0 * (Float->Log2(x / xy) * (x / xy)) + -1.0 * (Float->Log2(y / xy) * (y / xy));
		}
	}

	class TreeElem {
		@x : Float;
		@y : Float;
		@children : Vector<TreeElem>;

		New(x : Float, y : Float) {
			@x := x;
			@y := y;

			@children := Vector->New()<TreeElem>;
		}

		method : public : GetX() ~ Float {
			return @x;
		}

		method : public : GetY() ~ Float {
			return @y;
		}

		method : public : AddChild(x : Float, y : Float) ~ Nil {
			@children->AddBack(TreeElem->New(x, y));
		}

		method : public : GetChildren() ~ Vector<TreeElem> {
			return @children;
		}
	}
}
use Collection;

class Test {
   function : Main(args : String[]) ~ Nil {
      p := Node->New(16, 14);
      c := Vector->New()<Node>;
      c->AddBack(Node->New(12, 1));
      c->AddBack(Node->New(4, 13));

      Foo(p, c);      
   }

   function : Foo(parent : Node, children : Vector<Node>) ~ Nil {
      px := parent->GetX(); py := parent->GetY();

      lx := 12.0; ly := 1.0;
      rx := 4.0; ry := 13.0;

      pe := Entropy(px, py);
      pxy := px + py;

      # --- start ---
      le := Entropy(lx, ly);
      lxy := (lx + ly) / pxy;

      re := Entropy(rx, ry);
      rxy := (rx + ry) / pxy;
      
      e := lxy * le + rxy * re;
      # --- end ---
      
      ig := pe - e;

      "pe={$pe},pxy={$pxy}; le={$le},lxy={$lxy}; re={$re},rxy={$rxy}; e={$e},ig={$ig}"->PrintLine();
   }

   function : Entropy(x : Float, y : Float) ~ Float {
      xy := x + y;

      l := -1.0 * (Float->Log2(x / xy) * (x / xy));
      r := -1.0 * (Float->Log2(y / xy) * (y / xy));

      return l + r;
   }
}

class Node {
   @x : Float;
   @y : Float;
   @children : Vector<Node>;

   New(x : Float, y : Float) {
      @x := x;
      @y := y;

      @children := Vector->New()<Node>;
   }

   method : public : GetX() ~ Float {
      return @x;
   }

   method : public : GetY() ~ Float {
      return @y;
   }

   method : public : GetChildren() ~ Vector<Node> {
      return @children;
   }
}
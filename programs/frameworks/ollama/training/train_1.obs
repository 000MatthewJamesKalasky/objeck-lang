use Data.CSV, Data.JSON, Collection;

class DatasetMaker {
	@named_tables : Hash<String, CsvTable>;
	@metadata_json : JsonElement;
	@abbreviations : Hash<String, String>;

	function : Main(args : String[]) ~ Nil {
		if(args->Size() = 2) {
			String->SetFloatPrecision(3);

			dataset_maker := DatasetMaker->New(args[0]);
			status := dataset_maker->Make(args[1]->ToInt());
			"\n---\nSuccess: {$status}"->PrintLine();
		};
	}

	New(dir_path : String) {
		@named_tables := Hash->New()<String, CsvTable>;

		"Loading files:"->PrintLine();
		filenames := System.IO.Filesystem.Directory->List(dir_path);
		each(filename in filenames) {
			if(filename->EndsWith(".csv")) {
				"\tfile='{$filename}'"->PrintLine();

				file_path := dir_path->Copy();

				if(<>(file_path->EndsWith('/') | file_path->EndsWith('\\'))) {
					file_path += System.IO.Filesystem.Directory->GetSlash();
				};
				file_path += filename;
				
				table := CsvTable->New(System.IO.Filesystem.FileReader->ReadFile(file_path));
				if(table->IsParsed()) {
					@metadata_json := JsonElement->New(JsonElement->JsonType->OBJECT);
					@metadata_json->Insert("source", "du_late_60s_mens_basketball");

					# stat abbreviations
					@abbreviations := Hash->New()<String, String>;
					@abbreviations->Insert("TRB", "rebounds");
					@abbreviations->Insert("FGA", "points");
					@abbreviations->Insert("FTA", "free throws attempts");
					@abbreviations->Insert("FG%", "average points");
					@abbreviations->Insert("AST", "assists");
					@abbreviations->Insert("STL", "steals");
					@abbreviations->Insert("BLK", "blocks");
					@abbreviations->Insert("TOV", "turn overs");
					@abbreviations->Insert("PF", "fouls");
					@abbreviations->Insert("PTS", "points");
					@abbreviations->Insert("FT", "free throws points");
					@abbreviations->Insert("FT%", "average free throws");

					# month abbreviations
					@abbreviations->Insert("Dec", "December");
					@abbreviations->Insert("Jan", "January");
					@abbreviations->Insert("Feb", "February");
					@abbreviations->Insert("Mar", "March");

					table_name := filename->SubString(filename->Size() - 4);
					@named_tables->Insert(table_name, table);
				};
			};
		};
		"---"->PrintLine();
	}

	method : BuildElement(query : String, response : String) ~ JsonElement {
		query_response_json := JsonElement->New(JsonElement->JsonType->OBJECT);
		query_response_json->Insert("text", JsonElement->Encode(query + '\n' + response));
		query_response_json->Insert("metadata", @metadata_json);

		return query_response_json;
	}

	method : WriteToFile(line : String, file_writer : System.IO.Filesystem.FileWriter) ~ Nil {
		file_writer->WriteString(line);
		file_writer->WriteString("\r\n");
	}

	method : public : Make(inters : Int) ~ Bool {
		file_writer : System.IO.Filesystem.FileWriter;
		leaving {
			file_writer->Close();
		};
		
		file_writer := System.IO.Filesystem.FileWriter->New("data/du_stats.jsonl");
		if(file_writer->IsOpen()) {

			avg_stats := ["TRB", "FG%", "PF", "PTS", "FT", "FT%"];
			toatl_stats := ["FGA", "FTA"];
			
			# average of 8M for 384 iterations
			count_max := 96; count := 0;
			each(i : inters) {
				count += 1;

				each(j : 5) {
					if(count > count_max) {
						System.Utility.Spinner->Next();
						count := 0;
					};

					each(stat in avg_stats) {
						if(<>AverageStat(Int->Random(1966, 1968), stat, file_writer)) {
							return false;
						};
					};

					each(stat in toatl_stats) {
						if(<>TotalStat(Int->Random(1966, 1968), stat, file_writer)) {
							return false;
						};
					};
				};

				each(j : 8) {
					if(<>ScheduleResult(Int->Random(1966, 1968), file_writer)) {
						return false;
					};
				};
			};
			System.Utility.Spinner->Last();
		};

		return true;
	}

	method : public : ScheduleResult(year : Int, file_writer : System.IO.Filesystem.FileWriter) ~ Bool {
		table := @named_tables->Find("schedule-results");
		if(table <> Nil) {
			table_by_year := table->Matches("Year", year->ToString());

			# games played by month
			schedule_mons := ["Dec", "Jan", "Feb", "Mar"];
			random_mon := schedule_mons[Int->Random(0, 3)];

			games_year_month := table_by_year->Contains("Date", random_mon);
			count_year_month := (games_year_month->Size() - 1);

			random_school_name := Bool->Flip() ? "DU" : "University of Denver";
			random_mon_name := @abbreviations->Find(random_mon);

			query := "<human>: In " + year + " how many games did the " + random_school_name + " men's basketball team play in " + random_mon_name + "?";
			response := "<bot>: In " + year + ", the " + random_school_name + " men's basketball team played " + count_year_month + " games in " + random_mon_name + ".";
			WriteToFile(BuildElement(query, response)->ToString(), file_writer);

			# home vs. away games
			games_home := table_by_year->Contains("At-Home", "@");
			count_home := (games_home->Size() - 1);
			count_away := (table_by_year->Size() - games_home->Size());

			query := "<human>: In " + year + " how many home games did the " + random_school_name + " men's basketball team play?";
			response := "<bot>: In " + year + ", the " + random_school_name + " men's basketball team played " + count_home + " home games.";
			WriteToFile(BuildElement(query, response)->ToString(), file_writer);

			query := "<human>: In " + year + " how many away games did the " + random_school_name + " men's basketball team play?";
			response := "<bot>: In " + year + ", the " + random_school_name + " men's basketball team played " + count_away + " away games.";
			WriteToFile(BuildElement(query, response)->ToString(), file_writer);

			# team played with score and who won
			random_index := Int->Random(1, table_by_year->Size() - 1);
			random_opp := table_by_year->Get(random_index);
			random_opp_name := random_opp->Get("Opponent");
			found_index := random_opp_name->Find('(');
			if(found_index > 1) {
				random_opp_name := random_opp_name->SubString(found_index - 1);
			};

			team_score := random_opp->Get("Tm")->ToInt();
			opp_score := random_opp->Get("Opp")->ToInt();
			game_date := random_opp->Get("Date");
			game_date := game_date->SubString(5, game_date->Size() - 5);

			query := "<human>: What was the score of the " + year + " game between Denver and " + random_opp_name  + " on " + game_date + "?";
			response := "<bot>: The score of the game on " + game_date + " between Denver and " + random_opp_name  + " was " +  team_score->ToString() + 
				" to " + opp_score->ToString() + ", Denver " + (team_score > opp_score ? "won.": "lost.");
			WriteToFile(BuildElement(query, response)->ToString(), file_writer);

			return true;
		};

		return false;
	}

	method : public : AverageStat(year : Int, stat_key : String, file_writer : System.IO.Filesystem.FileWriter) ~ Bool {
		table := @named_tables->Find("avg-games");
		if(table <> Nil) {
			random_index := Int->Random(1, table->Size() - 1);

			player := table->Get(random_index)->Get("Player");
			if(Bool->Flip()) {
				split_index := player->Find(' ');
				if(split_index > 0) {
					split_index += 1;
					player := player->SubString(split_index, player->Size() - split_index);
				};
			};
			stat_value := table->Get(random_index)->Get(stat_key);
			stat_word := @abbreviations->Find(stat_key);

			if(stat_key->Equals("FG%") | stat_key->Equals("FT%")) {
				stat_value_str := (stat_value->ToFloat() * 100.0)->ToString();
				query := "<human>: In " + year + " what was " + player + " field goal percentage?";
				response := "<bot>: " + player + " field goal percentage in " + year + " was " + stat_value_str + "%.";
				WriteToFile(BuildElement(query, response)->ToString(), file_writer);
			}
			else {
				query := "<human>: In " + year + " how many " + stat_word + " did " + player + " average?";
				response := "<bot>: " + player + " averaged " + stat_value + " " + stat_word + " in " + year + ".";
				WriteToFile(BuildElement(query, response)->ToString(), file_writer);
			};

			if(stat_key->Equals("FG%") | stat_key->Equals("FT%")) {
				stat_value_str := (stat_value->ToFloat() * 100.0)->Round->ToString();
				query := "<human>: What was " + player + " field goal percentage in " + year + '?';
				response := "<bot>: In " + year + " " + player  + " field goal percentage " + stat_value_str + "%.";
				WriteToFile(BuildElement(query, response)->ToString(), file_writer);
			}
			else {
				query := "<human>: How many " + stat_word + " did " + player + " average in " + year + "?";
				response := "<bot>: In " + year + " " + player + " averaged " + stat_value + " " + stat_word + ".";
				WriteToFile(BuildElement(query, response)->ToString(), file_writer);
			}

			return true;
		};

		return false;
	}

	method : public : TotalTeam(year : Int, stat_key : String, file_writer : System.IO.Filesystem.FileWriter) ~ Bool {
		table := @named_tables->Find("avg-team-opp");
		if(table <> Nil) {
			random_index := Int->Random(1, table->Size() - 1);

			team_desc : String;
			team := table->Get(random_index)->Get("Side");
			if(team->Equals("Team")) {
				team_desc := "University of Denver";
			}
			else {
				team_desc := "opponent";
			};

			stat_value := table->Get(random_index)->Get(stat_key);
			stat_word := @abbreviations->Find(stat_key);

			query := "<human>: In " + year + " how many " + stat_word + " did the " + team_desc + " total?";
			response := "<bot>: The " + team_desc + " totaled " + stat_value + " " + stat_word + " in " + year + ".";
			WriteToFile(BuildElement(query, response)->ToString(), file_writer);

			query := "<human>: How many " + stat_word + " did the " + team_desc + " total in " + year + "?";
			response := "<bot>: In " + year + " the " + team_desc + " totaled " + stat_value + " " + stat_word + ".";
			WriteToFile(BuildElement(query, response)->ToString(), file_writer);

			return true;
		};

		return false;
	}

	method : public : AverageTeam(year : Int, stat_key : String, file_writer : System.IO.Filesystem.FileWriter) ~ Bool {
		table := @named_tables->Find("avg-team-opp");
		if(table <> Nil) {
			random_index := Int->Random(1, table->Size() - 1);

			team_desc : String;
			team := table->Get(random_index)->Get("Side");
			if(team->Equals("Team")) {
				team_desc := "University of Denver";
			}
			else {
				team_desc := "opponent";
			};

			stat_value := table->Get(random_index)->Get(stat_key);
			stat_word := @abbreviations->Find(stat_key);

			query := "<human>: In " + year + " how many " + stat_word + " did the " + team_desc + " average?";
			response := "<bot>: The " + team_desc + " averaged " + stat_value + " " + stat_word + " in " + year + ".";
			WriteToFile(BuildElement(query, response)->ToString(), file_writer);

			query := "<human>: How many " + stat_word + " did the " + team_desc + " average in " + year + "?";
			response := "<bot>: In " + year + " the " + team_desc + " averaged " + stat_value + " " + stat_word + ".";
			WriteToFile(BuildElement(query, response)->ToString(), file_writer);

			return true;
		};

		return false;
	}

	method : public : TotalStat(year : Int, stat_key : String, file_writer : System.IO.Filesystem.FileWriter) ~ Bool {
		table := @named_tables->Find("total-games");
		if(table <> Nil) {
			random_index := Int->Random(1, table->Size() - 1);

			player := table->Get(random_index)->Get("Player");
			if(Bool->Flip()) {
				split_index := player->Find(' ');
				if(split_index > 0) {
					split_index += 1;
					player := player->SubString(split_index, player->Size() - split_index);
				};
			};
			stat_value := table->Get(random_index)->Get(stat_key);
			stat_word := @abbreviations->Find(stat_key);

			query := "<human>: In " + year + " how many " + stat_word + " did " + player + " total?";
			response := "<bot>: " + player + " totaled " + stat_value + " " + stat_word + " in " + year + ".";
			WriteToFile(BuildElement(query, response)->ToString(), file_writer);

			query := "<human>: How many total " + stat_word + " did " + player + " achieve in " + year + "?";
			response := "<bot>: In " + year + " " + player + " totaled " + stat_value + " " + stat_word + ".";
			WriteToFile(BuildElement(query, response)->ToString(), file_writer);

			return true;
		};

		return false;
	}
}
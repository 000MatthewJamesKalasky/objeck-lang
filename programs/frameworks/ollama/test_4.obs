use Data.JSON, Data.JSON.Stream;

class Test {
	function : Main(args : String[]) ~ Nil {
		if(args->Size() = 2) {
			file := args[0];
			options := args[1];

			Brun(file, options);
		};
	}

	function : native : Brun(file : String, options : String) ~ Nil {
		start := end := 0;
		range_index := options->Find('-');
		if(options->Get(0) = '#') {
			start := -1;
		}
		else if(range_index > 0) {
			start := options->SubString(range_index)->ToInt();
			range_index += 1;
			end := options->SubString(range_index, options->Size() - range_index)->ToInt();
		}
		else {
			end := options->ToInt();
			start := end - 1;
		};

#		spinner := 0;

		reader := System.IO.Filesystem.FileReader->New(file);
		if(reader->IsOpen()) {
			count := 0;
			parser := JsonStreamParser->New();
			do {
				line := reader->ReadLine();
				if(line <> Nil) {
					parser->Reset(line);
					if(parser->GetNextElement("text")) {
						if(parser->GetNextElement()) {
							if(count >= start & count < end & start >= 0) {
								text := JsonElement->Decode(parser->GetValue());
								size := text->Size();
								next_count := count + 1;
								"\n[❖ line={$next_count}, size={$size}]\n⸻\n{$text}\n⸻"->PrintLine();
							};
						};
					};

					count += 1;
					if(start < 0 & count % 5000 = 0) {
						System.Utility.Spinner->Next();

#~
						'\b'->Print();
						spinner += 1;
						select(spinner) {
							label 0 {
								"|\r"->Print();
							}

							label 1 {
								"/\r"->Print();
							}

							label 2 {
								"—\r"->Print();
							}

							label 3 {
								"\\\r"->Print();
								spinner := 0;
							}
						};					
~#					
					}
				};
			}
			while(line <> Nil & (count < end | start < 0));

			if(start < 0) {
				System.Utility.Spinner->Last();
			};

			if(start < 0) {
				"\nline_count={$count}"->PrintLine();
			};
		};
	}
}
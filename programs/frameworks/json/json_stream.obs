use Collection;

class StreamParser {
	@is_debug : Bool;

	@stream : Char[];
	@stream_position : Int;
	@stream_level : Int;
		
	enum Type {
		ARRAY,
		STRING,
		NUMBER
	}

	function : Main(args : String[]) ~ Nil {
		if(args->Size() = 2) {
			parser := StreamParser->New(System.IO.Filesystem.FileReader->ReadFile(args[0]));
			parser->GetElement(args[1]->ToInt());
		}
	}

	New(stream : String) {
		@is_debug := true;
		@stream := stream->ToCharArray();
	}

	method : MatchChar(char : Char) ~ Bool {
		return GetChar() = char;
	}

	method : native : GetChar() ~ Char {
		if(@stream_position < @stream->Size()) {
			return @stream[@stream_position];
		};
		return '\0';
	}

	method : NextChar() ~ Nil {
		@stream_position += 1;
	}
	
	method : native : Whitespace() ~ Nil {
		char := GetChar();
		while(char = ' ' | char = '\t' | char = '\r' | char = '\n') {
			NextChar();
			char := GetChar();
		}
	}

	method : Print(message : String) ~ Nil {
		level := @stream_level;
		while(level-- > 0) {
			"..|"->Print();
		};
		message->PrintLine();
	}

	# TODO: return value parsed; as tuple: type, value, level
	method : GetElement(index : Int) ~ Nil {
		each(i : index) {
			ParseElement();
		};
	}

	# TODO: return value parsed; as tuple: type, value, level
	method : native : ParseElement() ~ Nil {
		Whitespace();

		value : String;
		type : StreamParser

		#
		# number
		#
		if(GetChar()->IsDigit()) {
			start := @stream_position;
			while(GetChar()->IsDigit() | GetChar() = '.') {
				NextChar();
			};
			value := String->New(@stream, start, @stream_position - start);
			
			if(@is_debug) {
				Print("Number: level={$@stream_level}: value={$value}");
			};
		}
		#
		# character
		#
		else if(GetChar() = '"') {
			NextChar();

			start := @stream_position;
			while(GetChar() <> '"') {
				NextChar();
			};
			value := String->New(@stream, start, @stream_position - start);
			NextChar();

			if(@is_debug) {
				Print("String: level={$@stream_level}: value='{$value}'");
			};
		}
		#
		# object
		#
		else if(GetChar() = '{') {
"--- 0 ---"->PrintLine();						
			@stream_level += 1;
			NextChar();

			if(@is_debug) {
				Print("Object: level={$@stream_level}");
			};

			Whitespace();
			if(GetChar() <> '}') {
				# parsing attribute name


				if(GetChar() = '"') {
					NextChar();

					start := @stream_position;
					while(GetChar() <> '"') {
						NextChar();
					};
					name := String->New(@stream, start, @stream_position - start);
					NextChar();

					if(@is_debug) {
						Print("Attribute: level={$@stream_level}, name='{$name}'");
					};

					if(GetChar() = ':') {
						NextChar();
						ParseElement();
# GetChar()->PrintLine();						
					}
					else {
						Standard->Error("*** Error: '")->Error(GetChar()->ToInt())->ErrorLine("'");
					};
				}
				else {
					Standard->Error("*** Error: '")->Error(GetChar()->ToInt())->ErrorLine("'");
				};


			};

			if(GetChar() = ',') {
"--- 1---"->PrintLine();			
			}
GetChar()->PrintLine();						

			if(GetChar() = '}') {
				@stream_level -= 1;
			};
			NextChar();	
		}
		#
		# array
		#
		else if(GetChar() = '[' | GetChar() = ',') {
"--- 2 ---"->PrintLine();			
			if(GetChar() = '[') {
				if(@is_debug) {
					Print("Array: level={$@stream_level}");
				};
				@stream_level += 1;
			};
			NextChar();

			if(GetChar() <> ']') {				
				ParseElement();				
			};

			if(GetChar() = ']') {
				@stream_level -= 1;
			};
			NextChar();	
		}
		else if(GetChar() = ']') {
			@stream_level -= 1;
			NextChar();
		}
		#
		# error
		#
		else {
			Standard->Error("*** Error: '")->Error(GetChar())->Error("' (")->Print(GetChar()->ToInt())->PrintLine(")");
		};
	}
}
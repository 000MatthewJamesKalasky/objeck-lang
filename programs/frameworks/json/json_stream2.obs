class StreamParser {
	@stream : Char[];
	@stream_position : Int;
	
	@stream_stack : ParserConext[];
	@stream_stack_pos : Int;
	
	@is_error : Bool;

	@is_debug : Bool;

	enum Type {
		ARRAY,
		OBJECT,
		STRING,
		NUMBER
	}

	function : Main(args : String[]) ~ Nil {
		if(args->Size() = 2) {
			parser := StreamParser->New(System.IO.Filesystem.FileReader->ReadFile(args[0]));
			parser->GetElement(args[1]->ToInt());
		}
	}

	New(stream : String) {
		@stream := stream->ToCharArray();
		@is_debug := true;

		@stream_stack := ParserConext->New[128];
		each(i : 128) {
			 @stream_stack[i] := ParserConext->New();
		};
	}

	method : MatchChar(char : Char) ~ Bool {
		return GetChar() = char;
	}

	method : native : GetChar() ~ Char {
		if(@stream_position < @stream->Size()) {
			return @stream[@stream_position];
		};

		return '\0';
	}

	method : NextChar() ~ Nil {
		@stream_position += 1;
	}
	
	method : native : Whitespace() ~ Nil {
		char := GetChar();
		while(char = ' ' | char = '\t' | char = '\r' | char = '\n' | char = 0xa0 | char = 0x1680 | 
				char >= 0x2000 & char <= 0x200a | char >= 0x000a & char <= 0x000d | char = 0x202f | 
				char = 0x205f | char = 0x3000 | char = 0x0085 | char = 0x2029) {
			NextChar();
			char := GetChar();
		}
	}

	method : Print(message : String) ~ Nil {
		level := @stream_stack_pos;
		while(level-- > 0) {
			"..|"->Print();
		};
		message->PrintLine();
	}

	method : GetElement(index : Int) ~ Nil {
		each(i : index) {
			if(<>@is_error) {
				ParseElement();

				if(@stream_stack_pos > 0) {
					@stream_stack[@stream_stack_pos - 1]->ToString()->PrintLine();
				};
			};
		};
	}

	method : native : ParseElement() ~ Nil {
		Whitespace();

		#
		# additional array and object elements
		#
		if(GetChar() = ',' & 
				(@stream_stack_pos > 0 & @stream_stack[@stream_stack_pos]->GetType() = StreamParser->Type->ARRAY |
				@stream_stack_pos > 0 & @stream_stack[@stream_stack_pos]->GetType() = StreamParser->Type->OBJECT)) {
			NextChar();
			Whitespace();
		}
		
		#
		# number
		#
		if(GetChar()->IsDigit()) {
			start := @stream_position;
			while(GetChar()->IsDigit() | GetChar() = '.') {
				NextChar();
			};
			value := String->New(@stream, start, @stream_position - start);
			
			if(@is_debug) {
				stream_level := @stream_stack_pos;
				Print("Number: level={$stream_level}: value={$value}");
			};
		}
		
		#
		# string or attribute
		#
		else if(GetChar() = '"') {
			NextChar();

			start := @stream_position;
			while(GetChar() <> '"') {
				NextChar();
			};
			value := String->New(@stream, start, @stream_position - start);
			NextChar();	Whitespace();

			if(GetChar() = ':' & @stream_stack_pos > 0 & @stream_stack[@stream_stack_pos - 1]->GetType() = StreamParser->Type->OBJECT) {
				NextChar();	Whitespace();

				if(@is_debug) {
					stream_level := @stream_stack_pos;
					Print("---");
					Print("Attribute: level={$stream_level}: value='{$value}'");
				};

				ParseElement();
				Whitespace();
			}
			else {
				if(@is_debug) {
					stream_level := @stream_stack_pos;
					Print("String: level={$stream_level}: value='{$value}'");
				};
			};
		}

		#
		# array start
		#
		else if(GetChar() = '[') {
			if(@is_debug) {
				stream_level := @stream_stack_pos;
				Print("Array: level={$stream_level}");
			};

			@stream_stack[@stream_stack_pos++]->Set(StreamParser->Type->ARRAY, @stream_stack_pos);
			NextChar();
		}
		#
		# object start
		#
		else if(GetChar() = '{') {
			

			if(@is_debug) {
				stream_level := @stream_stack_pos;
				Print("Object: level={$stream_level}");
			};

			@stream_stack[@stream_stack_pos++]->Set(StreamParser->Type->OBJECT, @stream_stack_pos);
			NextChar();
		}
		#
		# error
		#
		else {
			Standard->Error("*** Error: '")->Error(GetChar())->Error("' (")->Print(GetChar()->ToInt())->PrintLine(")");
			@is_error := true;
			return;
		};

		#
		# array and object endings
		#
		while(GetChar() = ']' | GetChar() = '}') {
			@stream_stack_pos -= 1;
			NextChar();
			Whitespace();
		};
	}
}

class ParserConext {
	@level : Int;
	@type : StreamParser->Type;
	@value : Base;

	New() {

	}

	method : public : Set(type : StreamParser->Type, level : Int) ~ Nil {
		@level := level;
		@type := type;
		@value := Nil;
	}

	method : public : Set(type : StreamParser->Type, value : Base, level : Int) ~ Nil {
		@level := level;
		@type := type;
		@value := value;
	}

	method : public : GetLevel() ~ Int {
		return @level;
	}

	method : public : GetType() ~ StreamParser->Type {
		return @type;
	}

	method : public : GetValue() ~ Base {
		return @value;
	}

	method : public : ToString() ~ String {
		type_str : String;
		if(@type = StreamParser->Type->OBJECT) {
			type_str := "Object";
		}
		else {
			type_str := "Array";

		};

		value_str : String;
		if(@value = Nil) {
			value_str := "<Nil>";
		}
		else if(@value->TypeOf(Stringify)) {
			value_str := @value->As(System.Stringify)->ToString();
		}
		# use instance ID instead
		else {
			value_str := @value->GetInstanceID()->ToHexString();
		};

		return "type={$type_str}, value={$value_str}, level={$@level}";
	}
}
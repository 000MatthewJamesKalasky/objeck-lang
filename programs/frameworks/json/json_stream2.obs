class StreamParser {
	@stream : Char[];
	@stream_position : Int;

	@stream_stack : Int[];
	@stream_stack_pos : Int;

	@is_error : Bool;

	@is_debug : Bool;

	enum Type {
		ARRAY,
		OBJECT,
		STRING,
		NUMBER
	}

	function : Main(args : String[]) ~ Nil {
		if(args->Size() = 2) {
			parser := StreamParser->New(System.IO.Filesystem.FileReader->ReadFile(args[0]));
			parser->GetElement(args[1]->ToInt());
		}
	}

	New(stream : String) {
		@stream := stream->ToCharArray();
		@stream_stack := Int->New[256]; # TODO: type and position, for get_next_sibling
		@is_debug := true;
	}

	method : MatchChar(char : Char) ~ Bool {
		return GetChar() = char;
	}

	method : native : GetChar() ~ Char {
		if(@stream_position < @stream->Size()) {
			return @stream[@stream_position];
		};
		return '\0';
	}

	method : NextChar() ~ Nil {
		@stream_position += 1;
	}
	
	method : native : Whitespace() ~ Nil {
		char := GetChar();
		while(char = ' ' | char = '\t' | char = '\r' | char = '\n') {
			NextChar();
			char := GetChar();
		}
	}

	method : Print(message : String) ~ Nil {
		level := @stream_stack_pos;
		while(level-- > 0) {
			"..|"->Print();
		};
		message->PrintLine();
	}

	method : GetElement(index : Int) ~ Nil {
		each(i : index) {
			if(<>@is_error) {
				ParseElement();
			};
		};
	}

	method : native : ParseElement() ~ Nil {
		Whitespace();

		#
		# additional array and object elements
		#
		if(GetChar() = ',' & 
				(@stream_stack_pos > 0 & @stream_stack[@stream_stack_pos] = StreamParser->Type->ARRAY |
				@stream_stack_pos > 0 & @stream_stack[@stream_stack_pos] = StreamParser->Type->OBJECT)) {
			NextChar();
			Whitespace();
		}
		
		#
		# number
		#
		if(GetChar()->IsDigit()) {
			start := @stream_position;
			while(GetChar()->IsDigit() | GetChar() = '.') {
				NextChar();
			};
			value := String->New(@stream, start, @stream_position - start);
			
			if(@is_debug) {
				stream_level := @stream_stack_pos;
				Print("Number: level={$stream_level}: value={$value}");
			};
		}
		
		#
		# string or attribute
		#
		else if(GetChar() = '"') {
			NextChar();

			start := @stream_position;
			while(GetChar() <> '"') {
				NextChar();
			};
			value := String->New(@stream, start, @stream_position - start);
			NextChar();	Whitespace();

			if(GetChar() = ':' & @stream_stack_pos > 0 & @stream_stack[@stream_stack_pos - 1] = StreamParser->Type->OBJECT) {
				NextChar();	Whitespace();

				if(@is_debug) {
					stream_level := @stream_stack_pos;
					Print("Attribute: level={$stream_level}: value='{$value}'");
				};

				ParseElement();
				Whitespace();
			}
			else {
				if(@is_debug) {
					stream_level := @stream_stack_pos;
					Print("String: level={$stream_level}: value='{$value}'");
				};
			};
		}

		#
		# array start
		#
		else if(GetChar() = '[') {
			if(@is_debug) {
				stream_level := @stream_stack_pos;
				Print("Array: level={$stream_level}");
			};

			@stream_stack[@stream_stack_pos++] := StreamParser->Type->ARRAY;
			NextChar();
		}
		#
		# object start
		#
		else if(GetChar() = '{') {
			if(@is_debug) {
				stream_level := @stream_stack_pos;
				Print("Object: level={$stream_level}");
			};

			@stream_stack[@stream_stack_pos++] := StreamParser->Type->OBJECT;
			NextChar();
		}
		#
		# error
		#
		else {
			Standard->Error("-> *** Error: '")->Error(GetChar())->Error("' (")->Print(GetChar()->ToInt())->PrintLine(")");
			@is_error := true;
			return;
		};

		#
		# array and object endings
		#
		if(GetChar() = ']' | GetChar() = '}') {
			@stream_stack_pos -= 1;
			NextChar();
		};
	}
}
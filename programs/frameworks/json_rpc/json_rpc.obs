use Data.JSON;
use Data.JSON.RPC;
use Collection;
use System.IO.Net;

class Test {
	function : Main(args : String[]) ~ Nil {
		if(args->Size() = 1) {
			if(args[0]->Equals("server")) {
				# create server
				funcs := Hash->New()<String, Func2Ref<JsonElement, JsonElement>>;

				func_ref := Func2Ref->New(ServerFuncs->Bear(JsonElement) ~ JsonElement)<JsonElement, JsonElement>;
				funcs->Insert("bear", func_ref);

				func_ref := Func2Ref->New(ServerFuncs->Rabbit(JsonElement) ~ JsonElement)<JsonElement, JsonElement>;
				funcs->Insert("rabbit", func_ref);

				func_ref := Func2Ref->New(ServerFuncs->Squirrel(JsonElement) ~ JsonElement)<JsonElement, JsonElement>;
				funcs->Insert("squirrel", Nil);

				# start server
				server := Server->New(funcs, 7231);
				server->Process();
			}
			else if(args[0]->Equals("client")) {
				# create client
				client := Client->New("localhost", 7231);

				# call server
				response_json := client->Call("rabbit", JsonParser->TextToElement("[13,17,33]"));
				if(client <> Nil) {
					response_json->ToString()->PrintLine();
				};
			}
			else {
				">>> Usage params [client, server] <<<"->ErrorLine();
			}			
		}
		else {
			">>> Usage params [client, server] <<<"->ErrorLine();
		};
	}
}

class ServerFuncs {
	function : Bear(params: JsonElement) ~ JsonElement {
		"bear"->PrintLine();
		return Nil;
	}

	function : Rabbit(params: JsonElement) ~ JsonElement {
		params->ToString()->PrintLine();
		return JsonParser->TextToElement("[6, 5, 4]");
	}

	function : Squirrel(params: JsonElement) ~ JsonElement {
		"squirrel"->PrintLine();
		return Nil;
	}
}
use System.IO.Filesystem;
use Collection;

#~
Tag PageParser
~#
class PageParser  {
	@index : Int;
	@page : String;
	@page_chars : Char[];
	@cur_char : Char;
	@nxt_char : Char;
	@nxt_nxt_char : Char;
	@code : String;
	@tag_stack : Stack;
	@blocks : Vector;
	@meta_values : StringMap;
	
	New(page : String) {
		if(page <> Nil) {
			@page := page;
			@page_chars := page->ToCharArray();
			@index := -1;
			@code := String->New();
			@tag_stack := Stack->New();
			NextChar();
			@blocks := Vector->New();
			@meta_values := StringMap->New();
		};
	}

	# get next char, look ahead 3 chars
	method : NextChar() ~ Nil {
		@index += 1;
		if(@index < @page_chars->Size()) {
			@cur_char := @page_chars[@index];
			if(@index + 1 < @page_chars->Size()) {
				@nxt_char := @page_chars[@index + 1];
				if(@index + 2 < @page_chars->Size()) {
					@nxt_nxt_char := @page_chars[@index + 2];
				}
				else {	
					@nxt_nxt_char := '\0';
				};
			}
			else {	
				@nxt_char := '\0';
			};
		}
		else {
			@cur_char := '\0';
		};
	}

	# format page
	method : public : Format() ~ Nil {
		output := String->New();
		if(@blocks ->Size() > 0 & @meta_values ->Size() > 0) {
			class_name := @meta_values->Find("class")->As(String);
			if(class_name = Nil) {
				class_name := "FastCgiModule";
			};
			
			req_name := @meta_values->Find("request")->As(String);
			if(req_name = Nil) {
				req_name := "req";
			};
			
			res_name := @meta_values->Find("response")->As(String);
			if(res_name = Nil) {
				res_name := "res";
			};
		
			output += "use FastCgi;\n";
			output += "use Collection;\n";
			output += "use System.IO.Filesystem;\n";
			output += "\nclass {$class_name} implements FastCgi.Handler {";
			output += "\n\tfunction : Forward(req : Request, res : Response) ~ Nil {}\n";
			output += "\n\tfunction : Request({$req_name} : Request, {$res_name} : Response) ~ Nil {";

			each(i : @blocks) {
				block := @blocks->Get(i)->As(Block);
				if(block->GetType() = Block->BlockType->HTML) {
					output += "\n\t\tres->AddBody(\"";
					output += Sanitize(block->GetText());
					output += "\");";
				}
				else if(block->GetType() = Block->BlockType->CODE) {
					output += "\n\t\t";
					output += block->GetText();
				};
			};
			output += "\n\t\tres->Submit();";
			output += "\n\t}";
			output += "\n}";
		};
		output->PrintLine();
	}
	
	# parse page
	method : public : Parse() ~ Nil {
		if(@page_chars = Nil) {
			return;
		};

		tag_start := false;
		html_block := String->New();
		while(@cur_char <> '\0') {
			# end tag
			if(@cur_char = '<' & @nxt_char = '/' & @nxt_nxt_char = '#') {
				EndTag();
				html_block := String->New();
				tag_start := false;
			}
			# start tag
			else if(@cur_char = '<' & @nxt_char = '#') {
				StartTag(html_block);
				tag_start := true;
			}
			# unary end tag
			else if(tag_start & @cur_char = '/' & @nxt_char = '>') {
				UnaryEndTag();
				html_block := String->New();
				tag_start := false;
			}
			# html markup
			else {
				if(tag_start <> true) {
					html_block->Append(@cur_char);
				};
				NextChar();	
			};
		};
		@blocks->AddBack(Block->New(Block->BlockType->HTML, html_block));
		
		if(@tag_stack->Size() = 0) {
			each(i : @blocks) {
				block := @blocks->Get(i)->As(Block);
				if(block->GetType() = Block->BlockType->HTML) {
System.IO.Console->Print("html='")->Print(block->GetText())->PrintLine("'");
				}
				else if(block->GetType() = Block->BlockType->META) {
System.IO.Console->Print("meta='")->Print(block->GetText())->PrintLine("'");

					attribs := block->GetText()->Split(" ");
					each(j : attribs) {
						name_values := attribs[j]->Trim()->Split("=");
						if(name_values->Size() = 2) {
							# todo add to map
							@meta_values->Insert(name_values[0]->Trim(), name_values[1]->Trim());
System.IO.Console->Print("\tname=")->Print(name_values[0]->Trim())->Print(", value=")->PrintLine(name_values[1]->Trim());
						};
					};
				}
				else {
System.IO.Console->Print("code='")->Print(block->GetText())->PrintLine("'");
				};
			};
"OK"->PrintLine();
		}
		else {
			"mismatched tags"->PrintLine();
		};
	}
	
	# TODO strip and escape output
	method : Sanitize(input : String) ~ String {
		output := String->New();
		each(i : input) {
			char := input->Get(i);
			select(char) {
				label '\r':
				label '\n':
				label '\t': {
				}
	
				label '\\': {
					output->Append("\\\\");
				}
	
				label '"': {
					output->Append("\\\"");
				}
			
				other: {
					output->Append(char);
				}
			};
		};
		
		return output;
	}

	# ending unary tag
	method : UnaryEndTag() ~ Nil {
		NextChar();	NextChar();	
		top_tag := @tag_stack->Top()->As(Tag);
		
		if(top_tag = Nil) {
			"Expected starting tag..."->PrintLine();
			Runtime->Exit(1);
		};
		
		if(top_tag->GetName()->Equals("meta") = false) {
			"Invalid unary tag name..."->PrintLine();
			Runtime->Exit(1);
		};

		@tag_stack->Pop();
		code_block := @page->SubString(top_tag->GetPosition(), 
			@index - top_tag->GetPosition() - 2);
		if(code_block->Size() > 0) {
			@blocks->AddBack(Block->New(Block->BlockType->META, code_block));
		};
# Console->Print("\tending unary: code_block='")->Print(code_block)->PrintLine("'");
	}

	# ending tag
	method : EndTag() ~ Nil {
		NextChar();	NextChar();	NextChar();	
		start := @index;
		while(@cur_char <> '>') {
			NextChar();	
		};
		end := @index;

		top_tag := @tag_stack->Top()->As(Tag);
		name := @page->SubString(start, end -start);
		if(top_tag = Nil | top_tag->GetName()->Equals(name) = false) {
			"Expected starting tag..."->PrintLine();
			Runtime->Exit(1);
		};
		@tag_stack->Pop();

		code_block := @page->SubString(top_tag->GetPosition(), 
			start - top_tag->GetPosition() - 3);
		if(code_block->Size() > 0) {
			@blocks->AddBack(Block->New(Block->BlockType->CODE, code_block));
		};
		NextChar();
# Console->Print("\tending: code_block='")->Print(code_block)->PrintLine("'");
	}
	
	# start tag
	method : StartTag(html_block : String) ~ Nil {
		# add html block
		if(html_block->Size() > 0) {
			@blocks->AddBack(Block->New(Block->BlockType->HTML, html_block));
		};
		NextChar();	NextChar();	
		start := @index;
		while(@cur_char <> ' ' & @cur_char <> '>') {
			NextChar();	
		};
		end := @index;
		name := @page->SubString(start, end -start);
		NextChar();
		@tag_stack->Push(Tag->New(@index, name));
# Console->Print("starting tag: '")->Print(name)->PrintLine("'");
	}

	function : Main(args : String[]) ~ Nil {
		if(args->Size() = 1) {
			parser := PageParser->New(FileReader->ReadFile(args[0]));
			parser->Parse();
			parser->Format();
		};
	}	
}

#~
Tag class
~#
class Tag {
	@name : String;
	@pos : Int;
	
	New(pos : Int, name : String) {	
		@pos := pos;
		@name := name;
	}
	
	method : public : GetName() ~ String {
		return @name;
	}
	
	method : public : GetPosition() ~ Int {
		return @pos;
	}
}

#~
Block class
~#
class Block {
	enum BlockType {
		META,
		CODE,
		HTML
	}

	@block_type : BlockType;
	@text : String;

	New(block_type : BlockType, text : String) {
		@block_type := block_type;
		@text := text;
	}

	method : public : GetType() ~ BlockType {
		return @block_type;
	}

	method : public : GetText() ~ String {
		return @text;
	}	
}

use System.IO.Net;
use System.IO.File;
use System.Concurrency;
use Collection.Generic;

class SSLServer {
	function : Main(args : String[]) ~ Nil {
		if(args->Size() = 3) {
			RequestHandler->Init();
			server := TCPSecureSocketServer->New(args[0], args[1], args[2], 1613);
			if(server->Listen()) {
				while(true) {
					RequestHandler->New()->Execute(server->Accept());
				};
			};
			"Goodbye!"->PrintLine();
			server->Close();
		};
	}
}

class RequestHandler from Thread {
	@content_cache : static : Hash<String, ByteArrayHolder>;
	@content_type_cache : static : Hash<String, String>;
	@content_mutex : static : ThreadMutex;

	New() {
		Parent();
	}

	function : Init() ~ Nil {
		@content_type_cache := Hash->New()<String, String>;
		@content_type_cache->Insert(".html", "text/html");
		@content_type_cache->Insert(".htm", "text/html");
		@content_type_cache->Insert(".png", "image/png");
		@content_type_cache->Insert(".jpg", "image/jpeg");

		@content_cache := Hash->New()<String, ByteArrayHolder	>;
		@content_mutex := ThreadMutex->New("@content_cache");
	}

	method : public : Run(param : System.Base) ~ Nil {
		client := param->As(TCPSecureSocket);

		if(client <> Nil & client->IsOpen()) {
			#
			# process headers
			#
			request_name : String;

			header_count := 0;
			line := client->ReadLine();
			while(line->Size() > 0) {
				if(header_count = 0) {
					header_parts := line->Split(" ");
					if(header_parts->Size() = 3) {
						request_name := header_parts[1];
					};
				};

				# TODO: save headers?
				line := client->ReadLine();
				header_count += 1;
			};
			
			#	
			# fetch content
			#
			if(request_name = Nil) {
				request_name := "/index.html";
			};

			content_header := "";
			content := LoadContent(request_name, content_header);
			if(content <> Nil) {
				# defer to handler
				client->WriteString("HTTP/1.1 200 OK\r\nConnection: close\r\n{$content_header}\r\n");
			}
			else {
				content := "<html>Not found</html>"->ToByteArray();
				content_size := content->Size();
				client->WriteString("HTTP/1.1 404 Not Found\r\nConnection: close\r\n{$content_header}\r\n");
			};

			client->WriteBuffer(content);
			client->Close();
		};
	}

	method : LoadContent(request_name : String, header : String) ~ Byte[] {
		content : Byte[];

		request_type_index := request_name->Find('.');
		if(request_type_index > 0) {
			request_type := request_name->SubString(request_type_index, request_name->Size() - request_type_index);
			if(request_type <> Nil) {
				content_type := @content_type_cache->Find(request_type);
				if(content_type <> Nil) {
					critical(@content_mutex) {
						path_name := ".";
						path_name += request_name;

						found := @content_cache->Find(path_name);
						if(found <> Nil) {
							content := found->Get();
						}
						else {
							content := FileReader->ReadBinaryFile(path_name);
							if(content <> Nil) {
								@content_cache->Insert(path_name, ByteArrayHolder->New(content));
							};
						};

						if(content <> Nil) {
							content_size := content->Size();
							header += "Content-type: {$content_type}\r\nContent-Length: {$content_size}\r\naccpet-ranges: bytes\r\n";
						};
					};
				};
			};
		};

		return content;
	}
}
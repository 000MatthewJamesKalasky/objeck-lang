use System.IO.Net;
use System.IO.File;

class SSLServer {
	function : Main(args : String[]) ~ Nil {
		if(args->Size() = 3) {
			server := TCPSecureSocketServer->New(args[0], args[1], args[2], 1613);
			if(server->Listen()) {
				while(true) {
					RequestHandler->New()->Execute(server->Accept());
				};
			};
			"Fin!"->PrintLine();
			server->Close();
		};
	}
}

class RequestHandler from System.Concurrency.Thread {
	New() {
		Parent();
	}

	method : public : Run(param : System.Base) ~ Nil {
		client := param->As(TCPSecureSocket);

		if(client <> Nil & client->IsOpen()) {
			# read headers
			image_name : String;
			line := client->ReadLine();
			while(line->Size() > 0) {
				if(line->StartsWith("GET /")) {
					line->PrintLine();
					get_parts := line->Split(" ");
					if(get_parts->Size() = 3) {
						image_name := get_parts[1];
					};
					break;
				};
				line := client->ReadLine();
			};

			if(image_name <> Nil) {
image_name->PrintLine();				
				# fetch image
				image_header := "";
				image := LoadImage(image_name, image_header);
				if(image <> Nil) {
					image_size := image->Size();
					out := "HTTP/1.1 200 OK\r\nContent-type: image/jpeg\r\nContent-Length: {$image_size}\r\naccpet-ranges: bytes\r\n\r\n";
					client->WriteString(out);
					client->WriteBuffer(image);
				};
			};

			client->Close();
		};
	}

	method : LoadImage(image_name : String, img_header : String) ~ Byte[] {
		path_name := ".";
		path_name += image_name;

path_name->PrintLine();		
		return FileReader->ReadBinaryFile(path_name);
	}
}
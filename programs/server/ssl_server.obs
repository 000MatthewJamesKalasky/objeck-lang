use System.IO.Net;
use System.IO.File;
use System.Concurrency;
use Collection.Generic;

class SSLServer {
	function : Main(args : String[]) ~ Nil {
		if(args->Size() = 3) {
			RequestHandler->Init();
			server := TCPSecureSocketServer->New(args[0], args[1], args[2], 1613);
			if(server->Listen()) {
				while(true) {
					RequestHandler->New()->Execute(server->Accept());
				};
			};
			"Fin!"->PrintLine();
			server->Close();
		};
	}
}

class RequestHandler from Thread {
	@content_cache : static : Hash<String, ByteArrayHolder>;
	@content_cache_mutex : static : ThreadMutex;

	New() {
		Parent();
	}

	function : Init() ~ Nil {
		@content_cache := Hash->New()<String, ByteArrayHolder>;
		@content_cache_mutex := ThreadMutex->New("@content_cache");
	}

	method : public : Run(param : System.Base) ~ Nil {
		client := param->As(TCPSecureSocket);

		if(client <> Nil & client->IsOpen()) {
			# read headers
			request_name : String;

			header_count := 0;
			line := client->ReadLine();
			while(line->Size() > 0) {
line->PrintLine();
				if(header_count = 0) {
					header_parts := line->Split(" ");
					if(header_parts->Size() = 3) {
						request_name := header_parts[1];
					};
				};

				line := client->ReadLine();
				header_count += 1;
			};
"---\n"->PrintLine();

			if(request_name <> Nil) {
				# fetch content
				content_header := "";
				content := LoadContent(request_name, content_header);
				if(content <> Nil) {
					# defer to handler
					out := "HTTP/1.1 200 OK\r\n{$content_header}\r\n";
					client->WriteString(out);
					client->WriteBuffer(content);
				};
			}
			else {
				# load index
			};

			client->Close();
		};
	}

	method : LoadContent(request_name : String, img_header : String) ~ Byte[] {
		content : Byte[];

		critical(@content_cache_mutex) {
			path_name := ".";
			path_name += request_name;

			found := @content_cache->Find(path_name);
			if(found <> Nil) {
				content := found->Get();
			}
			else {
				content := FileReader->ReadBinaryFile(path_name);
				@content_cache->Insert(path_name, ByteArrayHolder->New(content));
			};

			content_size := content->Size();
			img_header += "Content-type: image/jpeg\r\nContent-Length: {$content_size}\r\naccpet-ranges: bytes\r\n";

		};

		return content;
	}
}
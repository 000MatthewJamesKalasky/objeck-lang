use Collection.Generic;
use System.IO.File;
use Data.CSV;

class CsvData {
	function : Main(args : String[]) ~ Nil {
		if(args->Size() = 1) {
			table := Query.Structured.Table->FromCsv("sales", args[0]);
			if(table <> Nil) {
				results := table->Query("select distinct Contract from sales 
					where ('Business Type' = 'New Logo' or 'Business Type' = 'New Division/Department') 
					and ('Product Name' like '%Coverity%' or 'Product Name' like '%Duck Pro%')");
				if(results <> Nil) {
					num_contracts := results->Size();
					bronze_count := silver_count := gold_count := platinum_count := 0;
					each(i : results) {
						contract := results->Get(i)->row->Get(1)->As(String);
						contracts := table->Query("from sales where Contract = '{$contract}'");
						found := false;
						for(j := 0; <>found & j < contracts->Size(); j += 1;) {
							product_name := contracts->Get(j)->Get("Product Name")->As(String);
							if(<>found) {
								if(product_name->Has("Platinum")) {
									platinum_count++;
									found := true;
								}
								else if(product_name->Has("Gold")) {
									gold_count++;
									found := true;
								}
								else if(product_name->Has("Silver")) {
									silver_count++;
									found := true;
								}
								else if(product_name->Has("Bronze")) {
									bronze_count++;
									found := true;
								};
							};
						};
					};

					percent : Int := bronze_count = 0 ? 0.0 : 100.0 * bronze_count->As(Float) / num_contracts->As(Float);
					"Bronze={$bronze_count}, {$percent}%"->PrintLine();
					attach_total_percent += percent;

					percent := silver_count = 0 ? 0.0 : 100.0 * silver_count->As(Float) / num_contracts->As(Float);
					"Silver={$silver_count}, {$percent}%"->PrintLine();
					attach_total_percent += percent;
					
					percent := gold_count = 0 ? 0.0 : 100.0 * gold_count->As(Float) / num_contracts->As(Float);
					"Gold={$gold_count}, {$percent}%"->PrintLine();
					attach_total_percent += percent;

					percent := platinum_count = 0 ? 0.0 : 100.0 * platinum_count->As(Float) / num_contracts->As(Float);
					"Platinum={$platinum_count}, {$percent}%"->PrintLine();
					attach_total_percent += percent;

					"---"->PrintLine();
					"sample={$num_contracts}, {$attach_total_percent}%\n"->PrintLine();
				}
				else {
					"Invalid query?"->ErrorLine();
				};
			};
		}
		else {
			"Missing or too many arguments!"->ErrorLine();
		};
	}
}
use Collection.Generic;
use System.IO.File;

class CsvData {
	@table : Query.Structured.Table;
	@attached_out : System.IO.File.FileWriter;
	@non_attached_out : FileWriter;

	enum RegionType {
		ALL,
		VELOCITY,
		ENTERPRISE,
		STRATEGIC
	}

	function : Main(args : String[]) ~ Nil {
		if(args->Size() = 1) {
			CsvData->New()->Process(args[0]);
		}
		else {
			"Invalid arguments!"->ErrorLine();
		};
	}

	New() {
		@attached_out := FileWriter->New("./attached_onboarding.csv");
		@non_attached_out := FileWriter->New("./non_attached_onboarding.csv");
	}

	method : public : Process(file : String) ~ Nil {
		leaving {
			if(@attached_out <> Nil) {
				@attached_out->Close();
			};

			if(@non_attached_out <> Nil) {
				@non_attached_out->Close();
			};
		};

		@table := Query.Structured.Table->FromCsv("sales", file);
		if(@table <> Nil) {
			Calulate("All", Select(RegionType->ALL));
			Calulate("Velocity", Select(RegionType->VELOCITY));
			Calulate("Enterprise", Select(RegionType->ENTERPRISE));
			Calulate("Strategic", Select(RegionType->STRATEGIC));
		};
	}

	method : Select(type : RegionType) ~ Query.Structured.Table {
		select(type) {
			label RegionType->ALL {
				return @table->Query("select distinct Contract from sales 
					where ('Business Type' = 'New Logo' or 'Business Type' = 'New Division/Department') 
					and ('Product Name' like '%Coverity%' or 'Product Name' like '%Duck Pro%')");
			}

			label RegionType->VELOCITY {
				return @table->Query("select distinct Contract from sales 
					where ('Business Type' = 'New Logo' or 'Business Type' = 'New Division/Department') 
					and ('Product Name' like '%Coverity%' or 'Product Name' like '%Duck Pro%') 
					and 'Region' not like '%East%' and 'Region' not like '%West%' and 'Region' <> 'Strategic'");
			}

			label RegionType->ENTERPRISE {
				return @table->Query("select distinct Contract from sales 
					where ('Business Type' = 'New Logo' or 'Business Type' = 'New Division/Department') 
					and ('Product Name' like '%Coverity%' or 'Product Name' like '%Duck Pro%') 
					and ('Region' like '%East%' or 'Region' like '%West%')");

			}
			label RegionType->STRATEGIC {
				return @table->Query("select distinct Contract from sales 
					where ('Business Type' = 'New Logo' or 'Business Type' = 'New Division/Department') 
					and ('Product Name' like '%Coverity%' or 'Product Name' like '%Duck Pro%') 
					and 'Region' = 'Strategic'");
			}
		};

		return Nil;
	}

	method : Calulate(title : String, results : Query.Structured.Table) ~ Nil {
		if(results <> Nil) {
			no_attach_contracts := Vector->New()<String>;
			num_contracts := results->Size();
			bronze_count := silver_count := gold_count := platinum_count := 0;

			each(i : results) {
				contract := results->Get(i)->row->Get(1)->As(String);
				contracts := @table->Query("from sales where Contract = '{$contract}'");
				found := false;
				for(j := 0; <>found & j < contracts->Size(); j += 1;) {
					product_name := contracts->Get(j)->Get("Product Name")->As(String);
					if(<>found) {
						if(product_name->Has("Platinum")) {
							platinum_count++;
							found := true;
						}
						else if(product_name->Has("Gold")) {
							gold_count++;
							found := true;
						}
						else if(product_name->Has("Silver")) {
							silver_count++;
							found := true;
						}
						else if(product_name->Has("Bronze")) {
							bronze_count++;
							found := true;
						};
					};
				};

				if(<>found) {
					no_attach_contracts->AddBack(contract);
				};
			};

			"[{$title}]"->PrintLine();
			percent : Int := bronze_count = 0 ? 0.0 : 100.0 * bronze_count->ToFloat() / num_contracts->ToFloat();
			"Bronze={$bronze_count}, {$percent}%"->PrintLine();
			attach_total_percent += percent;

			percent := silver_count = 0 ? 0.0 : 100.0 * silver_count->ToFloat() / num_contracts->ToFloat();
			"Silver={$silver_count}, {$percent}%"->PrintLine();
			attach_total_percent += percent;
			
			percent := gold_count = 0 ? 0.0 : 100.0 * gold_count->ToFloat() / num_contracts->ToFloat();
			"Gold={$gold_count}, {$percent}%"->PrintLine();
			attach_total_percent += percent;

			percent := platinum_count = 0 ? 0.0 : 100.0 * platinum_count->ToFloat() / num_contracts->ToFloat();
			"Platinum={$platinum_count}, {$percent}%"->PrintLine();
			attach_total_percent += percent;

			"---"->PrintLine();
			"sample={$num_contracts}, {$attach_total_percent}%\n"->PrintLine();

			WriteAttach(title, bronze_count, silver_count, gold_count, platinum_count, num_contracts);
			if(title->Equals("All")) {
				WriteNonAttach(no_attach_contracts);
			};
		}
		else {
			"-- Error in query! --"->ErrorLine();
			Runtime->Exit(1);
		};
	}

	method : WriteAttach(title : String, bronze_count : Int, silver_count : Int, gold_count : Int, platinum_count : Int, num_contracts : Int) ~ Nil {		
		none := num_contracts - bronze_count - gold_count - silver_count - platinum_count;
		@attached_out->WriteString("{$title}\r\n");
		@attached_out->WriteString("Package,Count,\r\n");
		@attached_out->WriteString("Bronze,{$bronze_count}\r\n");
		@attached_out->WriteString("Silver,{$silver_count}\r\n");
		@attached_out->WriteString("Gold,{$gold_count}\r\n");
		@attached_out->WriteString("Platinum,{$platinum_count}\r\n");
		@attached_out->WriteString("None,{$none}\r\n");
	}

	method : WriteNonAttach(non_attached_contracts : Vector<String>) ~ Nil {
		header_string := "";
		column_names := @table->GetColumnNames();
		each(i : column_names) {
			header_string += column_names[i];
			header_string += ',';
		};
		@non_attached_out->WriteString("{$header_string}\r\n");

		each(i : non_attached_contracts) {
			contract_id := non_attached_contracts->Get(i);			
			contracts := @table->Query("from sales where Contract = '{$contract_id}'");
			each(j : contracts) {
				contract := contracts->Get(j)->ToString();
				@non_attached_out->WriteString("{$contract}\r\n");
			};
		};
	}
}
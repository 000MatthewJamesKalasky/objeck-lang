use Collection;
use System.IO.File;

class Emitter {
	@statements : Vector;
	@instructions : Vector;
	@strings : Vector;
	@code_index : Int;
	
	New(statements : Vector, strings : Vector) {
		@statements ← statements;
		@strings ← strings;
		@instructions ← Vector→New();
		@code_index ← 0;
	}
	
	method : public : Emit() ~ Nil {
		out ← FileWriter→New("instrs.e");
		leaving {
			out→Close();
		};
		
		Strings(out);
		Statements(@statements);
		
		each(i : @instructions) {
			instruction ← @instructions→Get(i)→As(Instruction);
			select(instruction→GetType()) {
				label Instruction→Type→PUTS: {
					out→WriteString("{$i}\tputs\r\n");
				}
				
				label Instruction→Type→PUTI: {
					out→WriteString("{$i}\tputi\r\n");
				}
				
				label Instruction→Type→PUTC: {
					out→WriteString("{$i}\tputc\r\n");
				}
				
				label Instruction→Type→ST: {
					index ← instruction→GetValue();
					out→WriteString("{$i}\tst\t{$index}\r\n");
				}
				
				label Instruction→Type→LD: {
					index ← instruction→GetValue();
					out→WriteString("{$i}\tld\t{$index}\r\n");
				}
				
				label Instruction→Type→JZ: {
					index ← instruction→GetValue();
					out→WriteString("{$i}\tjz\t{$index}\r\n");
				}
				
				label Instruction→Type→JP: {
					index ← instruction→GetValue();
					out→WriteString("{$i}\tjp\t{$index}\r\n");
				}
				
				label Instruction→Type→PUSH: {
					value ← instruction→GetValue();
					out→WriteString("{$i}\tpush\t{$value}\r\n");
				}
				
				label Instruction→Type→AND: {
					out→WriteString("{$i}\tand\r\n");
				}
				
				label Instruction→Type→OR: {
					out→WriteString("{$i}\tor\r\n");
				}
				
				label Instruction→Type→LT: {
					out→WriteString("{$i}\tlt\r\n");
				}
				
				label Instruction→Type→GT: {
					out→WriteString("{$i}\tgt\r\n");
				}
				
				label Instruction→Type→LE: {
					out→WriteString("{$i}\tle\r\n");
				}
				
				label Instruction→Type→GE: {
					out→WriteString("{$i}\tge\r\n");
				}
				
				label Instruction→Type→EQ: {
					out→WriteString("{$i}\teq\r\n");
				}
				
				label Instruction→Type→NEQ: {
					out→WriteString("{$i}\tneq\r\n");
				}
				
				label Instruction→Type→NEG: {
					out→WriteString("{$i}\tneg\r\n");
				}
				
				label Instruction→Type→NOT: {
					out→WriteString("{$i}\tnot\r\n");
				}
				
				label Instruction→Type→ADD: {
					out→WriteString("{$i}\tadd\r\n");
				}
				
				label Instruction→Type→SUB: {
					out→WriteString("{$i}\tsub\r\n");
				}
				
				label Instruction→Type→MUL: {
					out→WriteString("{$i}\tmul\r\n");
				}
				
				label Instruction→Type→DIV: {
					out→WriteString("{$i}\tdiv\r\n");
				}
				
				label Instruction→Type→MOD: {
					out→WriteString("{$i}\tmod\r\n");
				}
				
				other: {
					"*** Invalid instruction ***"→ErrorLine();
				}
			};
		};
	}
	
	method : Strings(out : FileWriter) ~ Nil {
		size ← @strings→Size();
		out→WriteString("{$size}\r\n");
		
		each(i : @strings) {
			string ← @strings→Get(i)→As(String);
			out→WriteString("{$string}\r\n");
		};
	}
	
	method : Statements(statements : Vector) ~ Bool {
		temp : Instruction;
		
		each(i : statements) {
			node ← statements→Get(i)→As(ParseNode);
			select(node→GetType()) {
				label ParseNode→Type→ASGN: {
					if(<>Expression(node→GetRight())) {
						return false;
					};
					@instructions→AddBack(Instruction→New(Instruction→Type→ST, node→GetLeft()→GetValue()));
					@code_index += 1;
				}
				
				label ParseNode→Type→IF: {
					if(<>Expression(node→GetLeft())) {
						return false;
					};
					cond_jmp ← Instruction→New(Instruction→Type→JZ);
					@instructions→AddBack(cond_jmp);
					@code_index += 1;
					
					if(<>Statements(node→GetStatements())) {
						return false;
					};
					end ← Instruction→New(Instruction→Type→JP);
					@instructions→AddBack(end);
					@code_index += 1;
					
					right := node→GetRight();
					if(right = Nil) {
						cond_jmp→SetValue(@code_index);
					}
					else {
						while(right <> Nil) {
							cond_jmp→SetValue(@code_index);
							if(right→GetLeft() <> Nil) {
								if(<>Expression(right→GetLeft())) {
									return false;
								};
								cond_jmp ← Instruction→New(Instruction→Type→JZ);
								@instructions→AddBack(cond_jmp);
								@code_index += 1;
							};
							
							if(<>Statements(right→GetStatements())) {
								return false;
							};
							@instructions→AddBack(end);
							@code_index += 1;
							
							right := right→GetRight();
						};
					};
					end→SetValue(@code_index);
				}
				
				label ParseNode→Type→WHILE: {
					start ← @code_index;
					if(<>Expression(node→GetLeft())) {
						return false;
					};
					cond_jmp ← Instruction→New(Instruction→Type→JZ);
					@instructions→AddBack(cond_jmp);
					@code_index += 1;				
					if(<>Statements(node→GetStatements())) {
						return false;
					};
					@instructions→AddBack(Instruction→New(Instruction→Type→JP, start));
					@code_index += 1;
					cond_jmp→SetValue(@code_index);
				}
				
				label ParseNode→Type→PRINT: {
					expressions ← node→GetStatements();
					each(j : expressions) {
						left := expressions→Get(j)→As(ParseNode);
						select(left->GetType()) {
							label ParseNode→Type→PUTS:
							label ParseNode→Type→PUTI:
							label ParseNode→Type→PUTC: {
								Expression(left);
							}
							
							label ParseNode→Type→PUTVI:
							label ParseNode→Type→PUTVC: {
								Expression(left->GetLeft());
								Expression(left);
							}
						};
					};
				}
				
				label ParseNode→Type→PUTS:
				label ParseNode→Type→PUTI:
				label ParseNode→Type→PUTC: {
					Expression(node);
				}
				
				label ParseNode→Type→PUTVI:
				label ParseNode→Type→PUTVC: {
					Expression(node->GetLeft());
					Expression(node);
				}
				
				other: {
					"*** Invalid statement ***"→ErrorLine();
					return false;
				}
			};
		};
		
		return true;
	}
	
	method : Expression(node : ParseNode) ~ Bool {
		select(node→GetType()) {
			label ParseNode→Type→PUTS: {
				@instructions→AddBack(Instruction→New(Instruction→Type→PUSH, node→GetValue()));
				@code_index += 1;
				
				@instructions→AddBack(Instruction→New(Instruction→Type→PUTS));
				@code_index += 1;
			}
			
			label ParseNode→Type→PUTI: {
				@instructions→AddBack(Instruction→New(Instruction→Type→PUSH, node→GetValue()));
				@code_index += 1;
				
				@instructions→AddBack(Instruction→New(Instruction→Type→PUTI));
				@code_index += 1;
			}
			
			label ParseNode→Type→PUTC: {
				@instructions→AddBack(Instruction→New(Instruction→Type→PUSH, node→GetValue()));
				@code_index += 1;
				
				@instructions→AddBack(Instruction→New(Instruction→Type→PUTC));
				@code_index += 1;
			}
			
			label ParseNode→Type→PUTVI: {
				@instructions→AddBack(Instruction→New(Instruction→Type→PUTI));
				@code_index += 1;
			}
			
			label ParseNode→Type→PUTVC: {
				@instructions→AddBack(Instruction→New(Instruction→Type→PUTC));
				@code_index += 1;
			}
			
			label ParseNode→Type→VAR: {
				@instructions→AddBack(Instruction→New(Instruction→Type→LD, node→GetValue()));
				@code_index += 1;
			}
			
			label ParseNode→Type→NUM: {
				@instructions→AddBack(Instruction→New(Instruction→Type→PUSH, node→GetValue()));
				@code_index += 1;
			}
			
			label ParseNode→Type→AND: {
				Expression(node→GetLeft());
				Expression(node→GetRight());
				@instructions→AddBack(Instruction→New(Instruction→Type→AND));
				@code_index += 1;
			}
			
			label ParseNode→Type→OR: {
				Expression(node→GetLeft());
				Expression(node→GetRight());
				@instructions→AddBack(Instruction→New(Instruction→Type→OR));
				@code_index += 1;
			}
						
			label ParseNode→Type→LESS: {
				Expression(node→GetLeft());
				Expression(node→GetRight());
				@instructions→AddBack(Instruction→New(Instruction→Type→LT));
				@code_index += 1;
			}
			
			label ParseNode→Type→GTR: {
				Expression(node→GetLeft());
				Expression(node→GetRight());
				@instructions→AddBack(Instruction→New(Instruction→Type→GT));
				@code_index += 1;
			}
			
			label ParseNode→Type→LESS_EQL: {
				Expression(node→GetLeft());
				Expression(node→GetRight());
				@instructions→AddBack(Instruction→New(Instruction→Type→LE));
				@code_index += 1;
			}
			
			label ParseNode→Type→GTR_EQL: {
				Expression(node→GetLeft());
				Expression(node→GetRight());
				@instructions→AddBack(Instruction→New(Instruction→Type→GE));
				@code_index += 1;
			}
			
			label ParseNode→Type→EQL: {
				Expression(node→GetLeft());
				Expression(node→GetRight());
				@instructions→AddBack(Instruction→New(Instruction→Type→EQ));
				@code_index += 1;
			}
			
			label ParseNode→Type→NEQL: {
				Expression(node→GetLeft());
				Expression(node→GetRight());
				@instructions→AddBack(Instruction→New(Instruction→Type→NEQ));
				@code_index += 1;
			}
			
			label ParseNode→Type→NOT: {
				Expression(node→GetLeft());
				@instructions→AddBack(Instruction→New(Instruction→Type→NOT));
				@code_index += 1;
			}
			
			label ParseNode→Type→NEG: {
				Expression(node→GetLeft());
				@instructions→AddBack(Instruction→New(Instruction→Type→NEG));
				@code_index += 1;
			}
			
			label ParseNode→Type→ADD: {
				Expression(node→GetLeft());
				Expression(node→GetRight());
				@instructions→AddBack(Instruction→New(Instruction→Type→ADD));
				@code_index += 1;
			}
			
			label ParseNode→Type→SUB: {
				Expression(node→GetLeft());
				Expression(node→GetRight());
				@instructions→AddBack(Instruction→New(Instruction→Type→SUB));
				@code_index += 1;
			}
			
			label ParseNode→Type→MUL: {
				Expression(node→GetLeft());
				Expression(node→GetRight());
				@instructions→AddBack(Instruction→New(Instruction→Type→MUL));
				@code_index += 1;
			}
			
			label ParseNode→Type→DIV: {
				Expression(node→GetLeft());
				Expression(node→GetRight());
				@instructions→AddBack(Instruction→New(Instruction→Type→DIV));
				@code_index += 1;
			}
			
			label ParseNode→Type→MOD: {
				Expression(node→GetLeft());
				Expression(node→GetRight());
				@instructions→AddBack(Instruction→New(Instruction→Type→MOD));
				@code_index += 1;
			}
		};
		
		return true;
	}
}
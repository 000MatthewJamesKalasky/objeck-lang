class vList<T:Stringify> {
    @base : vSeg<T>;
    @offset : Int;

    New() {}

    New(base : vSeg<T>, offset : Int) {
        @base := base;
        @offset := offset;
    }

    New(base : vSeg<T>) {
        @base := base;
    }

    method : public : GetBase() ~ vSeg<T> {
        return @base;
    }

    method : public : GetOffset() ~ Int {
        return @offset;
    }

    method : public : Cons(a : T) ~ vList<T> {
        if(@base = Nil) {
            return vList->New(vSeg->New(a)<T>)<T>;
        }
        else if(@offset = 0) {
            l2 := @base->GetEle()->Size() * 2;
            ele := T->New[l2];
            ele[l2 - 1] := a;
            return vList->New(vSeg->New(@base, ele)<T>, l2 - 1)<T>;
        }
        else {
            @offset -= 1;
            ele := @base->GetEle();
            ele[@offset] := a;
            return @self;
        };
    }

    method : public : Cdr() ~ vList<T> {
        if(@base = Nil) {
            return Nil;
        };

        @offset += 1;
        if(@offset < @base->GetEle()->Size()) {
            return @self;
        }
        else {
            return vList->New(@base->GetNext(), 0)<T>;
        };
    }

    method : public : Index(i : Int) ~ T {
        if(i >= 0) {
            i += @offset;
            for(sg := @base; sg <> Nil; sg := sg->GetNext();) {
                ele := sg->GetEle();
                if(i < ele->Size()) {
                    return ele[i];
                };
                
                i -= ele->Size();
            };
        };

        return Nil;
    }

    method : public : Size() ~ Int {
        if(@base = Nil) {
            return 0;
        };

        return @base->GetEle()->Size() * 2 - @offset - 1;
    }

    method : public : ToString() ~ String {
        if(@base = Nil) {
            return "[]";
        };

        r := "[";
        ele := @base->GetEle();
        r += ele[@offset];
        r += ' ';

        sg := @base;
        offset := @offset + 1;
        
        done := false;
        while(<>done) {
            for(i := offset; i < ele->Size(); i += 1;) {
                r += ele[i];
                r += ' ';
            };

            sg := sg->GetNext();
            if(sg <> Nil) {
                ele := sg->GetEle();
                offset := 0;
            }
            else {
                done := true;
            };
        };
        r += ']';

        return r;
    }

    method : public : PrintStructure() ~ Nil {
        offset := @offset;
        "  offset: {$offset}"->PrintLine();
        
        for(sg := @base; sg <> Nil; sg := sg->GetNext();) {
            values := sg->GetEle();
            "  ["->Print();
            each(i : values) {
                value := values[i];
                if(value <> Nil) {
                    "{$value}"->Print();
                }
                else {
                    "{Nil}"->Print();
                };

                if(i + 1 < values->Size()) {
                    ", "->Print();
                };
            };
            "]"->PrintLine();
        };
        ""->PrintLine();
    }
}
 
class vSeg<T:Stringify> {
    @next : vSeg<T>;
    @ele : T[];

    New(next : vSeg<T>, ele : T[]) {
        @next := next;
        @ele := ele;
    }

    New(s : T) {
        @ele := T->New[1];
        @ele[0] := s;
    }

    method : public : GetNext() ~ vSeg<T> {
        return @next;
    }

    method : public : GetEle() ~ T[] {
        return @ele;
    }
}

class Test {
    function : Main(args : String[]) ~ Nil {
        v := vList->New()<String>;
        "Zero value for type. empty vList: {$v}"->PrintLine();
        v->PrintStructure();

        for(a := '6'; a >= '1'; a -=1;) {
            v := v->Cons("{$a}")<String>;
        };
        "Demonstrate cons. 6 elements added: {$v}"->PrintLine();
        v->PrintStructure();

        v := v->Cdr()<String>;
        Runtime->Assert(v <> Nil);
        "Demonstrate cdr. 1 element removed: {$v}"->PrintLine();
        v->PrintStructure();

        size := v->Size();
        "Demonstrating size property, size = {$size}"->PrintLine();

        e := v->Index(3);
        Runtime->Assert(e <> Nil);
        "Demonstrate element access. v[3] = {$e}"->PrintLine();

        v := v->Cdr()<String>->Cdr()<String>;
        Runtime->Assert(v <> Nil);
        "Demonstrate cdr. 2 elements removed: {$v}"->PrintLine();
        v->PrintStructure();
    }
}
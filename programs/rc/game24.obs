use Collection.Generic;
use System.Matrix;

class Game24 {
	@stk : Stack<IntHolder>;
	@digits : MultiMap<IntHolder, IntHolder>;

	function : Main(args : String[]) ~ Nil {
		digits := MultiMap->New()<IntHolder, IntHolder>;
		"Make 24 with the digits: "->Print();
		for(i := 0; i < 4; i += 1;) {
			n : Int := Int->Random(1, 9);
    		" {$n}"->Print();
    		digits->Insert(n, n);
		};
		'\n'->Print();
	}
	
	New() {
		@stk := Stack->New()<IntHolder>;
		@digits := MultiMap->New()<IntHolder, IntHolder>;
	}

	method : Op(f : \Func->Calc) ~ Nil {
		if(@stk->Size() < 2) { "Improperly written expression"->ErrorLine(); Runtime->Exit(1); };
		b := @stk->Pop();
		a := @stk->Pop();
		@stk->Push(f(a, b));
	}

	method : Parse(c : Char) ~ Nil {
	    if(c >= '0' & c <= '9') {
	    	value := c - '0';
			@stk->Push(value);
			@digits->Insert(value, value);
	    }
	    else if(c = '+') {
			Op(\Func->Calc : (a, b) => a + b);
	    }
	    else if(c = '-') {
			Op(\Func->Calc : (a, b) => a - b);
	    }
	    else if(c = '*') {
			Op(\Func->Calc : (a, b) => a * b);
	    }
	    else if(c = '/') {
			Op(\Func->Calc : (a, b) => a / b);
	    };
	}

	method : Parse(s : String) ~ Nil {
		each(i : s) {
			Parse(s->Get(i));
		};
	}
}

alias Func {
	Calc : (IntHolder, IntHolder) ~ IntHolder
}
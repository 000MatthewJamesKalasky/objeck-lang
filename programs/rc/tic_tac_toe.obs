class TicTacToe {
	@board : Char[,];
	@opening : Bool;

	function : Main(args : String[]) ~ Nil {
		game := TicTacToe->New();
		game->Play();
	}

	New() {
		@board := Char->New[3,3];
		for(index := 0; index < 9; index += 1;) {
			j := index / 3;
			i := index % 3;
			@board[i, j] := '1' + index; 
		};
		@opening := true;
	}

	method : Play() ~ Nil {
		Draw();

		quit := false;
		do {
			move := PlayerMove();
			if(LegalMove(move)) {
				if(<>CheckWinner('X')) {
					if(CheckTie()) {
						"\n=> Tie."->PrintLine();
						quit := true;
					};
				}
				else {
					"\n=> Player Wins!"->PrintLine();
					quit := true;
				};
				
				CpuMove();				
				if(<>CheckWinner('O')) {
					if(CheckTie()) {
						"\n=> Tie."->PrintLine();
						quit := true;
					};
				}
				else {
					"\n=> CPU Wins."->PrintLine();
					quit := true;
				};

				Draw();
			}
			else if(move = 'q') {
				quit := true;
			}
			else {
				"\n=> Illegal Move"->PrintLine();
				Draw();
			};
		}
		while(<>quit);

		"\nGoodbye!"->PrintLine();
	}

	method : PlayerMove() ~ Char {
		move := System.IO.Console->ReadString();
		if(move->Size() > 0) {
			return move->Get(0);
		};

		return '\0';
	}

	method : CpuMove() ~ Nil {
		if(<>@opening) {
			if(@board[1, 1] <> 'X' & @board[1, 1] <> 'O') {
				@board[1, 1] := 'O';
			}
			else if(@board[0, 0] <> 'X' & @board[0, 0] <> 'O') {
				@board[0, 0] := 'O';
			}
			else if(@board[0, 2] <> 'X' & @board[0, 2] <> 'O') {
				@board[0, 2] := 'O';
			};
			@opening := false;
		};
	}

	method : LegalMove(move : Char) ~ Bool {
		if(move >= '1' & move <= '9') {
			index := (move - '1')->As(Int);
			j := index / 3; i := index % 3;

			if(@board[i, j] = 'X' | @board[i, j] = 'O') {
				return false;
			};

			@board[i, j] := 'X';
			return true;
		}
		else {
			return false;
		};
	}

	method : CheckWinner(player : Char) ~ Bool {
		# --- diagonal --- 
		check := 0;
		for(i := 0; i < 3; i += 1;) {
			if(@board[i, i] = player) {
				check += 1;
			};
		};
# "d0: {$check}"->PrintLine();
		if(check = 3) {
			return true;
		};

		check := 0;
		j := 2;
		for(i := 0; i < 3; i += 1;) {
			if(@board[i, j] = player) {
				check += 1;
			};
			j -= 1;
		};
# "d1: {$check}"->PrintLine();
		if(check = 3) {
			return true;
		};

		# --- vertical ---
		check := 0;
		for(i := 0; i < 3; i += 1;) {
			if(@board[0, i] = player) {
				check += 1;
			};
		};
# "v0: {$check}"->PrintLine();
		if(check = 3) {
			return true;
		};

		check := 0;
		for(i := 0; i < 3; i += 1;) {
			if(@board[1, i] = player) {
				check += 1;
			};
		};
# "v1: {$check}"->PrintLine();
		if(check = 3) {
			return true;
		};

		check := 0;
		for(i := 0; i < 3; i += 1;) {
			if(@board[2, i] = player) {
				check += 1;
			};
		};
# "v2: {$check}"->PrintLine();
		if(check = 3) {
			return true;
		};

		# --- horizontal --- 
		check := 0;
		for(i := 0; i < 3; i += 1;) {
			if(@board[i, 0] = player) {
				check += 1;
			};
		};
# "h0: {$check}"->PrintLine();
		if(check = 3) {
			return true;
		};

		check := 0;
		for(i := 0; i < 3; i += 1;) {
			if(@board[i, 1] = player) {
				check += 1;
			};
		};
# "h1: {$check}"->PrintLine();
		if(check = 3) {
			return true;
		};

		check := 0;
		for(i := 0; i < 3; i += 1;) {
			if(@board[i, 2] = player) {
				check += 1;
			};
		};
# "h2: {$check}"->PrintLine();
		if(check = 3) {
			return true;
		};

		return false;
	}

	method : CheckTie() ~ Bool {
		for(index := 0; index < 9; index += 1;) {
			j := index / 3;
			i := index % 3;
			
			if(@board[i, j] = 'X' | @board[i, j] = 'O') {
				return false;
			}; 
		};

		return true;
	}

	method : Draw() ~ Nil {
		a1 := @board[0, 0]; a2 := @board[1, 0]; a3 := @board[2, 0];
		b1 := @board[0, 1]; b2 := @board[1, 1]; b3 := @board[2, 1];
		c1 := @board[0, 2]; c2 := @board[1, 2]; c3 := @board[2, 2];

		"==========="->PrintLine();
		" {$a1} | {$a2} | {$a3} "->PrintLine();
		"---|---|---"->PrintLine();
		" {$b1} | {$b2} | {$b3} "->PrintLine();
		"---|---|---"->PrintLine();
		" {$c1} | {$c2} | {$c3} "->PrintLine();
		"==========="->PrintLine();
	}
}

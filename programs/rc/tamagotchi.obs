class Tamagotchi  {
	@state : Int;
	@state_labels : String[];
	@age : Int;
	@hour : Int;
	@neglect : Float;

	enum States {
		HUNGRY, 
		BORED,
		POOP,
		SLEEP
	}

	function : Main(args : String[]) ~ Nil {
		tamagotchi := Tamagotchi->New();
		tamagotchi->Life();
	}

	New() {
		@state_labels := ["hungry", "bored", "poop", "sleep"];
	}

	method : Life() ~ Nil {
		for(i := 0; i < 48; i += 1;) {
			NextState();
			
			state_lablel := @state_labels[@state];
			"age={$@age}, hour={$@hour}, state={$state_lablel}"->PrintLine();

			if(@state <> States->SLEEP) {
				UpdateAction(System.IO.Console->ReadString());
			};

			NextHour();			
		};
	}

	method : UpdateAction(action : String) ~ Nil {
		if(action->Size() > 0) {
			select(action->Get(0)) {
				label 'f': {
					"\tFeed"->PrintLine();
				}

				label 'p': {
					"\tPlay"->PrintLine();
				}

				label 'c': {
					"\tClean"->PrintLine();
				}
			};
		};
	}

	method : NextState() ~ Nil {
		if(<>IsAwake()) {
			@state := States->SLEEP;
		};

		@state := Int->Random(States->SLEEP);
	}

	method : IsAwake() ~ Bool {
		return @hour > 7 & @hour < 23;
	}

	method : NextHour() ~ Nil {
		@hour += 1;
		if(@hour = 24) {
			@hour := 0;
			@age += 1;
		};
	}
}

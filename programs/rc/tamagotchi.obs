use Game.SDL2;
use Game.Framework;

class Game {
	@framework : GameFramework;
	@quit : Bool;

	@gotchi : Tamagotchi;
		
	@hungry_img : ImageSprite;
	@bored_img : ImageSprite;
	@poop_img : ImageSprite;

	@sleep_img : ImageSprite;
	@happy_img : ImageSprite;
	@ok_img : ImageSprite;
	@sad_img : ImageSprite;

	@morning_img : ImageSprite;
	@day_img : ImageSprite;
	@night_img : ImageSprite;
	@night_dark_img : ImageSprite;

	@action_chunk : MixChunk;

	@age_text : TextSprite;
	@age : Int;

	New() {
		@framework := GameFramework->New(Meta->SCREEN_WIDTH, Meta->SCREEN_HEIGHT, "Tamagotchi");
		@framework->SetClearColor(Color->New(240,248,255));
		
		@hungry_img := @framework->AddImageSprite("media/hungry.png");
		@bored_img := @framework->AddImageSprite("media/bored.png");
		@poop_img := @framework->AddImageSprite("media/poop.png");

		@sleep_img := @framework->AddImageSprite("media/sleep.png");
		@happy_img := @framework->AddImageSprite("media/happy.png");
		@ok_img := @framework->AddImageSprite("media/ok.png");
		@sad_img := @framework->AddImageSprite("media/sad.png");

		@morning_img := @framework->AddImageSprite("media/morning.png");
		@morning_img->SetScale(0.5);

		@day_img := @framework->AddImageSprite("media/day.png");
		@day_img->SetScale(0.5);

		@night_img := @framework->AddImageSprite("media/night.png");
		@night_img->SetScale(0.5);

		@night_dark_img := @framework->AddImageSprite("media/night_dark.png");
		@night_dark_img->SetScale(0.5);

		@action_chunk := MixChunk->New("media/action.wav");

		@age_text := @framework->AddTextSprite();
		@age_text->RenderedText("Age: 0");
	}

	function : Main(args : String[]) ~ Nil {
		game := Game->New();
		game->Run();
	}

	method : Run() ~ Nil {
		if(@framework->IsOk()) {
			@gotchi := Tamagotchi->New(@self);
						
			e := @framework->GetEvent();
			count := 0;
			while(<>@quit & @gotchi->IsAlive()) {
				Start();
			
				Input(e);
				if(count = @gotchi->GetTicks()) {
					@gotchi->Update();
					count := 0;
				};

				Draw();				
				count += 1;
				End();
			};
		}
		else {
			"--- Error Initializing Game Environment ---"->ErrorLine();
			return;
		};

		leaving {
			@action_chunk->Free();
			@framework->Quit();
		};
	}

	method : public : ActionSound() ~ Nil {
		@action_chunk->PlayChannel(-1, 0);
	}

	method : Input(e : Event) ~ Nil {
		# process input
		while(e->Poll() <> 0) {
			if(e->GetType() = EventType->SDL_QUIT) {
				@quit := true;
			}
			else if(e->GetType() = EventType->SDL_KEYDOWN & e->GetKey()->GetRepeat() = 0) {
				select(e->GetKey()->GetKeysym()->GetScancode()) {
					label Scancode->SDL_SCANCODE_F: {
						@gotchi->Input('f');
					}

					label Scancode->SDL_SCANCODE_P: {
						@gotchi->Input('p');
					}

					label Scancode->SDL_SCANCODE_C: {
						@gotchi->Input('c');
					}
				};
			};
		};
	}

	method : public : Draw() ~ Nil {
		action := @gotchi->GetAction();
		neglect := @gotchi->GetNeglect();
		
		if(@gotchi->GetState() = Tamagotchi->States->SLEEP) {
			@sleep_img->Render(0, 40);	
		}	
		else if(action) {
			select(@gotchi->GetState()) {
				label Tamagotchi->States->HUNGRY: {
					@hungry_img->Render(0, 40);
				}

				label Tamagotchi->States->BORED: {
					@bored_img->Render(0, 40);
				}

				label Tamagotchi->States->POOP: {
					@poop_img->Render(0, 40);
				}
			};
		}
		else if(neglect < 1.0) {
			@happy_img->Render(0, 40);
		}
		else if(neglect < 2.0) {
			@ok_img->Render(0, 40);
		}
		else {
			@sad_img->Render(0, 40);
		};

		age := @gotchi->GetAge();
		buffer := "Age: ";
		buffer += age;
		@age_text->RenderedText(buffer);
		@age_text->Render(10, 10);

		hour := @gotchi->GetHour();
		if(hour >= 6 & hour <= 10) {
			@morning_img->Render(208, 10);
		}
		else if(hour >= 10 & hour <= 18) {
			@day_img->Render(208, 10);
		}
		else if(hour >= 18 & hour <= 20) {
			@night_img->Render(208, 10);
		}
		else {
			@night_dark_img->Render(208, 10);
		};
	}

	method : Start() ~ Nil {
		@framework->FrameStart();
		@framework->Clear();
	}

	method : End() ~ Nil {
		@framework->Show();
		@framework->FrameEnd();
	}
}

class Tamagotchi  {
	@state : Int;
	@age : Int;
	@hour : Int;
	@neglect : Float;
	@game : Game;
	@action : Bool;
	@ticks : Int;

	enum States {
		HUNGRY, 
		BORED,
		POOP,
		SLEEP
	}

	New(game : Game) {
		@game := game;
		@hour := Int->Random(25);
		Update();
	}

	method : public : GetHour() ~ Int {
		return @hour;
	}

	method : public : GetTicks() ~ Int {
		return @ticks;
	}

	method : public : GetAge() ~ Int {
		return @age;
	}

	method : public : GetAction() ~ Bool {
		return @action;
	}

	method : public : GetState() ~ Int {	
		return @state;
	}

	method : public : GetNeglect() ~ Float {	
		return @neglect;
	}

	method : public : Update() ~ Nil {
		NextState();
		NextHour();	
	}

	method : public : IsAlive() ~ Bool {
		return @age < 4 & @neglect < 3.0;
	}

	method : public : Input(action : Char) ~ Nil {
		select(action) {
			label 'f': {
				if(@state = States->HUNGRY) {
					@neglect -= .6;
				};
				@action := false;
			}

			label 'p': {
				if(@state = States->BORED) {
					@neglect -= .35;
				};
				@action := false;
			}

			label 'c': {
				if(@state = States->POOP) {
					@neglect -= .85;
				};
				@action := false;
			}
		};
	}

	method : NextState() ~ Nil {
		@game->ActionSound();

		if(<>IsAwake()) {
			@state := States->SLEEP;
			@neglect -= .1;
			@action := false;
		}
		else {
			@state := Int->Random(States->SLEEP);
			select(@state) {
				label States->HUNGRY: {
					@neglect += .5;
					@action := true;
				}

				label States->BORED: {
					@neglect += .25;
					@action := true;
				}

				label States->POOP: {
					@neglect += .75;
					@action := true;
				}
			};
		};

		if(@neglect < 0.0) {
			@neglect := 0.0;
		};

"hour={$@hour}, neglect={$@neglect}"->PrintLine();
	}

	method : IsAwake() ~ Bool {
		return @hour > 7 & @hour < 23;
	}

	method : NextHour() ~ Nil {
		@hour += 1;
		if(@hour = 24) {
			@hour := 0;
			@age += 1;
		};
		@ticks := Int->Random(Meta->TICKS - Meta->TICKS / 3, Meta->TICKS + Meta->TICKS / 3);
	}
}

consts Meta {
	SCREEN_WIDTH := 240,
	SCREEN_HEIGHT := 200,
	TICKS := 20000,
#	TICKS := 2700,
	BEAT := 30
}
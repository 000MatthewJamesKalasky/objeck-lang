use Game.SDL2;
use Game.Framework;

class Game {
	@framework : GameFramework;
	@quit : Bool;
	@gotchi : Tamagotchi;

	New() {
		@framework := GameFramework->New(Meta->SCREEN_WIDTH, Meta->SCREEN_HEIGHT, "Tamagotchi");
		@framework->SetClearColor(Color->New(255, 255, 255));
	}

	function : Main(args : String[]) ~ Nil {
		game := Game->New();
		game->Run();
	}

	method : Run() ~ Nil {
		if(@framework->IsOk()) {
			@gotchi := Tamagotchi->New();

			e := @framework->GetEvent();
			while(<>@quit) {
				Start();
				
				Input(e);
				Update();
				Draw();
				
				End();
			};
		}
		else {
			"--- Error Initializing Game Environment ---"->ErrorLine();
			return;
		};

		leaving {
			@framework->Quit();
		};
	}

	method : Input(e : Event) ~ Nil {
		# process input
		while(e->Poll() <> 0) {
			if(e->GetType() = EventType->SDL_QUIT) {
				@quit := true;
			};
		};
	}

	method : public : Draw() ~ Nil {
		
	}

	method : public : Update() ~ Nil {
		
	}

	method : Start() ~ Nil {
		@framework->FrameStart();
		@framework->Clear();
	}

	method : End() ~ Nil {
		@framework->Show();
		@framework->FrameEnd();
	}
}

class Tamagotchi  {
	@state : Int;
	@state_labels : String[];
	@age : Int;
	@hour : Int;
	@neglect : Float;

	enum States {
		HUNGRY, 
		BORED,
		POOP,
		SLEEP
	}

#~
	function : Main(args : String[]) ~ Nil {
		gotchi := Tamagotchi->New();
		do {
			gotchi->Life();
		}
		while(gotchi->IsAlive());
	}
~#

	New() {
		@state_labels := ["Hungry", "Bored", "Poop!", "Sleep..."];
	}

	method : public : GetState() ~ Int {	
		return @state;
	}

	method : public : GetNeglecte() ~ Float {	
		return @neglect;
	}

	method : public : Life() ~ Nil {
		NextState();

		ShowNeed();
		if(@state <> States->SLEEP) {
			# random wait period
			UpdateAction(System.IO.Console->ReadString());
			ShowStatus();
		};					
	}

	method : ShowNeed() ~ Nil {
		state_lablel := @state_labels[@state];
		"{$state_lablel}, Neglect={$@neglect} [hour={$@hour}, age={$@age}]"->PrintLine();
	}

	method : ShowStatus() ~ Nil {
		if(@neglect < .75) {
			"\tYippie!"->PrintLine();
		}
		else if(@neglect < 1.0) {
			"\tMuh..."->PrintLine();	
		}
		else if(@neglect < 1.25) {
			"\tFeeling Sick!"->PrintLine();
		}
		else if(@neglect < 1.75) {
			"\tNeed help..."->PrintLine();	
		}
		else {
			"\t<Death!>"->PrintLine();	
		};
	}

	method : IsAlive() ~ Bool {
		NextHour();
		return @age < 4;
	}

	method : UpdateAction(action : String) ~ Nil {
		if(action->Size() > 0) {
			select(action->Get(0)) {
				label 'f': {
					if(@state = States->HUNGRY) {
						@neglect -= .5;
					};

					"\tVeggie Burger!"->PrintLine();
				}

				label 'p': {
					if(@state = States->BORED) {
						@neglect -= .25;
					};

					"\tPlayground..."->PrintLine();
				}

				label 'c': {
					if(@state = States->POOP) {
						@neglect -= .75;
					};

					"\tWipes, New Diper!"->PrintLine();
				}
			};
		};
	}

	method : NextState() ~ Nil {
		if(<>IsAwake()) {
			@state := States->SLEEP;
			@neglect -= .1;
		}
		else {
			@state := Int->Random(States->SLEEP);
			select(@state) {
				label States->HUNGRY: {
					@neglect += .5;
				}

				label States->BORED: {
					@neglect += .25;
				}

				label States->POOP: {
					@neglect += .75;
				}
			};
		};

		if(@neglect < 0.0) {
			@neglect := 0.0;
		};
	}

	method : IsAwake() ~ Bool {
		return @hour > 7 & @hour < 23;
	}

	method : NextHour() ~ Nil {
		@hour += 1;
		if(@hour = 24) {
			@hour := 0;
			@age += 1;
		};
	}
}

consts Meta {
	SCREEN_WIDTH := 240,
	SCREEN_HEIGHT := 160
}
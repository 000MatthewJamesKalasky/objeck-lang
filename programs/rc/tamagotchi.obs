use Game.SDL2;
use Game.Framework;

class Game {
	@framework : GameFramework;
	@quit : Bool;

	@gotchi : Tamagotchi;
	
	@hungry_img : ImageSprite;
	@bored_img : ImageSprite;
	@poop_img : ImageSprite;

	@sleep_img : ImageSprite;
	@happy_img : ImageSprite;
	@ok_img : ImageSprite;
	@sad_img : ImageSprite;

	@age_text : TextSprite;
	@age : Int;

	New() {
		@framework := GameFramework->New(Meta->SCREEN_WIDTH, Meta->SCREEN_HEIGHT, "Tamagotchi");
		
		@hungry_img := @framework->AddImageSprite("img/hungry.png");
		@bored_img := @framework->AddImageSprite("img/bored.png");
		@poop_img := @framework->AddImageSprite("img/poop.png");

		@sleep_img := @framework->AddImageSprite("img/sleep.png");
		@happy_img := @framework->AddImageSprite("img/happy.png");
		@ok_img := @framework->AddImageSprite("img/ok.png");
		@sad_img := @framework->AddImageSprite("img/sad.png");


	}

	function : Main(args : String[]) ~ Nil {
		game := Game->New();
		game->Run();
	}

	method : Run() ~ Nil {
		if(@framework->IsOk()) {
			@gotchi := Tamagotchi->New(@self);

					@age_text := @framework->AddTextSprite();
#		@age_text->RenderedText("Age: 0");
			
			e := @framework->GetEvent();
			count := 0;
			while(<>@quit & @gotchi->IsAlive()) {
				Start();
			
				Input(e);
				if(count = Meta->TICKS) {
					@gotchi->Update();
					count := 0;
				};

				Draw();				
				count += 1;
				End();
			};
		}
		else {
			"--- Error Initializing Game Environment ---"->ErrorLine();
			return;
		};

		leaving {
			@framework->Quit();
		};
	}

	method : Input(e : Event) ~ Nil {
		# process input
		while(e->Poll() <> 0) {
			if(e->GetType() = EventType->SDL_QUIT) {
				@quit := true;
			}
			else if(e->GetType() = EventType->SDL_KEYDOWN & e->GetKey()->GetRepeat() = 0) {
				select(e->GetKey()->GetKeysym()->GetScancode()) {
					label Scancode->SDL_SCANCODE_F: {
						@gotchi->Input('f');
					}

					label Scancode->SDL_SCANCODE_P: {
						@gotchi->Input('p');
					}

					label Scancode->SDL_SCANCODE_C: {
						@gotchi->Input('c');
					}
				};
			};
		};
	}

	method : public : Draw() ~ Nil {
		action := @gotchi->GetAction();
		neglect := @gotchi->GetNeglect();
		age := @gotchi->GetAge();

		select(@gotchi->GetState()) {
			label Tamagotchi->States->HUNGRY: {
				if(action) {
					@hungry_img->Render();	
				}
				else if(neglect < 1.0) {
					@happy_img->Render();
				}
				else if(neglect < 2.0) {
					@ok_img->Render();
				}
				else {
					@sad_img->Render();
				};
			}

			label Tamagotchi->States->BORED: {
				if(action) {
					@bored_img->Render();
				}	
				else if(neglect < 1.0) {
					@happy_img->Render();
				}
				else if(neglect < 2.0) {
					@ok_img->Render();
				}
				else {
					@sad_img->Render();
				};
			}

			label Tamagotchi->States->POOP: {
				if(action) {
					@poop_img->Render();
				}	
				else if(neglect < 1.0) {
					@happy_img->Render();
				}
				else if(neglect < 2.0) {
					@ok_img->Render();
				}
				else {
					@sad_img->Render();
				};
			}

			label Tamagotchi->States->SLEEP: {
				@sleep_img->Render();	
			}
		};

		buffer := "Age: ";
		buffer += age->ToString();
		@age_text->RenderedText(buffer);
		@age_text->Render(10, 10);
	}

	method : public : Update() ~ Nil {
		
	}

	method : Start() ~ Nil {
		@framework->FrameStart();
		@framework->Clear();
	}

	method : End() ~ Nil {
		@framework->Show();
		@framework->FrameEnd();
	}
}

class Tamagotchi  {
	@state : Int;
	@state_labels : String[];
	@age : Int;
	@hour : Int;
	@neglect : Float;
	@game : Game;
	@action : Bool;

	enum States {
		HUNGRY, 
		BORED,
		POOP,
		SLEEP
	}

	New(game : Game) {
		@game := game;
		@state_labels := ["Hungry", "Bored", "Poop!", "Sleep..."];
		Update();
	}

	method : public : GetAge() ~ Int {
		return @age;
	}

	method : public : GetAction() ~ Bool {
		return @action;
		
	}

	method : public : GetState() ~ Int {	
		return @state;
	}

	method : public : GetNeglect() ~ Float {	
		return @neglect;
	}

	method : public : Update() ~ Nil {
		NextState();
		ShowNeed();
		NextHour();				
	}

	method : ShowNeed() ~ Nil {
		state_lablel := @state_labels[@state];
		"{$state_lablel}, Neglect={$@neglect} [hour={$@hour}, age={$@age}]"->PrintLine();
	}

	method : public : IsAlive() ~ Bool {
		return @age < 4 & @neglect < 3.0;
	}

	method : public : Input(action : Char) ~ Nil {
		select(action) {
			label 'f': {
				if(@state = States->HUNGRY) {
					@neglect -= .5;
				};
				@action := false;
			}

			label 'p': {
				if(@state = States->BORED) {
					@neglect -= .25;
				};
				@action := false;
			}

			label 'c': {
				if(@state = States->POOP) {
					@neglect -= .75;
				};
				@action := false;
			}
		};
	}

	method : NextState() ~ Nil {
		if(<>IsAwake()) {
			@state := States->SLEEP;
			@neglect -= .1;
			@action := false;
		}
		else {
			@state := Int->Random(States->SLEEP);
			select(@state) {
				label States->HUNGRY: {
					@neglect += .5;
					@action := true;
				}

				label States->BORED: {
					@neglect += .25;
					@action := true;
				}

				label States->POOP: {
					@neglect += .75;
					@action := true;
				}
			};
		};

		if(@neglect < 0.0) {
			@neglect := 0.0;
		};
	}

	method : IsAwake() ~ Bool {
		return @hour > 7 & @hour < 23;
	}

	method : NextHour() ~ Nil {
		@hour += 1;
		if(@hour = 24) {
			@hour := 0;
			@age += 1;
		};
	}
}

consts Meta {
	SCREEN_WIDTH := 240,
	SCREEN_HEIGHT := 160,
	TICKS := 240
}
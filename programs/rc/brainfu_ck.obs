use System.IO.File;

class Brainfu_k {
	@program : String; @mem : Int[];
	@ip : Int;	@dp : Int;
	
	New(program : String, size : Int) {
		@program := program;
		@mem := Int → New[size];	
	}
	
	function : Main(args : String[]) ~ Nil {
		if(args → Size() = 2) {
			Brainfu_k → New(Scan(args[0]), args[1] → ToInt()) → Execute();
		};
	}
	
	function : Scan(file : String) ~ String {
		buffer := "";
		reader := FileReader->New(file);
		while(<>reader->IsEOF()) {
			line := reader->ReadString();
			each(i : line) {
				char := line->Get(i);
				select(char) {
					label '>': label '<': label '+':
				    label '-': label '.': label ',':
				    label '[': label ']': label 'd': {
						buffer += char;
					}
					label '#': { i := line->Size();	}
				};
			};
		};
		
		return buffer;
	}
	
	method : Execute() ~ Nil {
		while(@ip < @program → Size()) {
			instr := @program → Get(@ip);
			select(instr) {
				label '>': { @dp += 1; }
				label '<': { @dp -= 1; }
				label '+': { @mem[@dp] := @mem[@dp] + 1; }
				label '-': { @mem[@dp] := @mem[@dp] - 1; }
				label '.': { value := @mem[@dp] → As(Char); value → Print(); }				
				label ',': { @mem[@dp] := Read(); }
				label '[': { JumpForward(); }
				label ']': { JumpBack(); }
				label 'd': { Dump(); }
			};
			@ip += 1;
		};
	}
	
	method : JumpForward() ~ Nil {	
		depth := 1;
		if(@mem[@dp] = 0) {
			while(@ip < @program → Size()) {
				instr := @program → Get(@ip);
				if(instr = ']') {
					depth -= 1;	if(depth = 0) { return;	};	
				}
				else if(instr = '[') { depth += 1; };
				@ip += 1;
			};
			"*** Unbalanced jump ***" → ErrorLine();
			Runtime → Exit(1);
		};
	}
	
	method : JumpBack() ~ Nil {		
		depth := 1;
		if(@mem[@dp] <> 0) {
			while(@ip > 0) {
				@ip -= 1;
				instr := @program → Get(@ip);
				if(instr = '[') {
					depth -= 1;	if(depth = 0) { return; };
				}
				else if(instr = ']') { depth += 1; };
			};
			"*** Unbalanced jump ***" → ErrorLine();
			Runtime → Exit(1);
		};
	}
	
	method : Read() ~ Int {		
		in := IO.Console → ReadString();
		if(in → Size() > 0) { return in → ToInt(); };
		return 0;
	}
	
	method : Dump() ~ Nil {	
		"=> {"->Print();
		each(i : @mem) {
			value := @mem[i];
			"{$i}:[{$value}]"->Print();
			if(i + 1 < @mem->Size()) { ", "->Print(); };
		};
		'}'->PrintLine();
	}
}
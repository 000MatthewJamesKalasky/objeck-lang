use System.IO.File;

class Brainfu_k {
	@program : String; 
	@input : String; @input_ptr : Int;
	@mem : Byte[];	@instr_ptr : Int;	@dp : Int;
	
	New(program : String, size : Int) {
		@program := program;
		@mem := Byte → New[size];	
	}
	
	function : Main(args : String[]) ~ Nil {
		if(args → Size() = 1) {
			Brainfu_k → New(Scan(args[0]), 32768) → Execute();
		};
	}
	
	function : Scan(file : String) ~ String {
		buffer := "";
		reader := FileReader->New(file);
		while(<>reader->IsEOF()) {
			line := reader->ReadString();
			each(i : line) {
				char := line->Get(i);
				select(char) {
					label '>': label '<': label '+':
					label '-': label '.': label ',':
					label '[': label ']': label 'd': {
						buffer += char;
					}
					label '#': { i := line->Size();	}
				};
			};
		};
		
		return buffer;
	}
	
	method : Execute() ~ Nil {
		@program → PrintLine();
	
		while(@instr_ptr < @program → Size()) {
			instr := @program → Get(@instr_ptr);
			select(instr) {
				label '>': { @dp += 1; }
				label '<': { @dp -= 1; }
				label '+': { @mem[@dp] := @mem[@dp] + 1; }
				label '-': { @mem[@dp] := @mem[@dp] - 1; }
				label '.': { value := @mem[@dp]->As(Char); value → Print(); }				
				label ',': { 
					in := Read(); 
					if(in <> 0) {
						@mem[@dp] := in;
					}
					else {
						Runtime->Exit(0);
					};
				}
				label '[': { Forward(); }
				label ']': { Backward(); }
				label 'd': { Dump(); }
			};
			@instr_ptr += 1;
		};
	}
	
	method : Forward() ~ Nil {
		depth := 0;
		if(@mem[@dp] = 0) {
			do {
				instr := @program → Get(@instr_ptr);
				if(instr = '[') {
					depth += 1;
				}
				else if(instr = ']') {
					depth -= 1;
					if(depth = 0) { return; };
				};
				@instr_ptr += 1;
			}
			while(@instr_ptr < @program → Size());
		};
	}
	
	method : Backward() ~ Nil {		
		depth := 0;
		if(@mem[@dp] <> 0) {
			do {
				instr := @program → Get(@instr_ptr);
				if(instr = ']') {
					depth += 1;
				}
				else if(instr = '[') {
					depth -= 1;
					if(depth = 0) { return; };
				};
				@instr_ptr -= 1;
			}
			while(@instr_ptr < @program → Size());
		};
	}
	
	method : Read() ~ Char {		
		if(@input = Nil) {
			@input := IO.Console → ReadString();
		};
		
		if(@input_ptr < @input->Size()) {
			in := @input->Get(@input_ptr);
			@input_ptr += 1;
			return in;
		};
		
		return 0;
	}
	
	method : Dump() ~ Nil {	
		"=> {"->Print();
		each(i : @mem) {
			value := @mem[i];
			"{$i}:[{$value}]"->Print();
			if(i + 1 < @mem->Size()) { ", "->Print(); };
		};
		'}'->PrintLine();
	}
}
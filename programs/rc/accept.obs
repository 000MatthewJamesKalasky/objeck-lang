#~
<s> -> <expr>
<expr> -> ( + <operands> ) | ( * <operands> ) | <id>
<operands> -> <expr> <operands> | <id>
<id> -> <integer>
~#

use Collection.Generic;

class Program {
	@is_debug : static : Bool;

	function : Main(args : String[]) ~ Nil {
		@is_debug := false;

		Tests(["234", "(+ 20)", "(+ 1 234)", "(+ 2 10 200)", "(* (+ 1 2) (+ 1 3))", "(* (+ 1 2) (+ 1 3) (* 2 3))"]);
		"==="->PrintLine();
		Tests(["(* 2", "(* 2))", "(+ 2 (3 4))", "(* (+ 1 2) (1 + 3) (* 2 3))"]);
	}

	function : Tests(tests : String[]) ~ Nil {
		each(i : tests) {
			tokens := Tokenize(tests[i]);
			if(@is_debug) {
				each(j : tokens) {
					token := tokens->Get(j);
					"{$j}: '{$token}'"->PrintLine();
				};
			}
			else {
				tests[i]->PrintLine();
			};

			accept := IsExpr(tokens, 0, tokens->Size() - 1);
			"Accept: {$accept}\n---"->PrintLine();
		};
	}

	function : IsExpr(tokens : Vector<String>, start : Int, end : Int) ~ Bool {
		if(@is_debug) {
			"=IsExpr: {$start}, {$end}--"->PrintLine();
		};

		if(start > end) {
			return false;
		}
		else if(tokens->Get(start)->Equals("(") & tokens->Get(end)->Equals(")")) {
			return (tokens->Get(start + 1)->Equals("+") | tokens->Get(start + 1)->Equals("*")) & IsOperands(tokens, start + 2, end - 1);
		}
		else {
			return IsId(tokens, start, end);
		};
	}

	function : IsOperands(tokens : Vector<String>, start : Int, end : Int) ~ Bool {
		if(@is_debug) {
			"=IsOperands: {$start}, {$end}--"->PrintLine();
		};

		if(tokens->Get(start)->Equals("(")) {
			offset := start;

			while(offset < end) {
				offset := start;
				while(<>tokens->Get(offset)->Equals(")")) {
					offset += 1;
				};

				if(<>IsExpr(tokens, start, offset)) {
					return false;
				};

				start := offset + 1;
			};
		}
		else {
			while(start <= end) {
				if(<>IsId(tokens, start, end)) {
					return false;
				};

				start += 1;
			};
		};

		return true;
	}

	function : IsId(tokens : Vector<String>, start : Int, end : Int) ~ Bool {
		if(@is_debug) {
			"=IsId: {$start}, {$end}--"->PrintLine();
		};

		return IsInteger(tokens, start, end);
	}

	function : IsInteger(tokens : Vector<String>, start : Int, end : Int) ~ Bool {
		value := tokens->Get(start);

		if(@is_debug) {
			"=IsInteger: '{$value}'"->PrintLine();
		};

		each(i : value) {
			if(<>value->Get(i)->IsDigit()) {
				return false;
			};
		};


		return true;
	}

	function : Tokenize(input : String) ~ Vector<String> {
		tokens := Vector->New()<String>;

		each(i : input) {
			if(input->Get(i)->IsDigit()) {
				start := i;
				while(input->Get(i)->IsDigit()) {
					i += 1;
				};
				tokens->AddBack(input->SubString(start, i - start));
				i -= 1;
			}
			else {
				select(input->Get(i)) {
					label '+':
					label '*':
					label '(':
					label ')': {
						tokens->AddBack(input->Get(i)->ToString());
					}
				};
			};
		};

		return tokens;
	}
}
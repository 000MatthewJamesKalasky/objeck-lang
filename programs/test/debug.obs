use Collection;
use System.Time;

class Test {
	function : Main(args : String[]) ~ Nil {
		if(args->Size() <> 2) {
			return;
		};

		date := ParseDate(args[1], args[0], false);
		date->ToString()->PrintLine();
	}

	function : ParseDate(date_str : String, format : String, gmt : Bool) ~ Date {
		parts := IntMap->New();
		
		# month
		month := format->Find("MM");
		if(month > -1) {
			parts->Insert(month, DatePart->New(month, DatePart->Type->Month));
		};

		# day
		day := format->Find("dd");
		if(day > -1) {
			parts->Insert(day, DatePart->New(day, DatePart->Type->Day));
		};

		# year
		long_year_format := true;
		year := format->Find("yyyy");
		if(year > -1) {
			parts->Insert(year, DatePart->New(year, DatePart->Type->Year));
		}
		else {
			year := format->Find("yy");
			if(year > -1) {
				parts->Insert(year, DatePart->New(year, DatePart->Type->Year));
				long_year_format := false;
			};
		};
	
		# hour
		hours := format->Find("hh");
		if(hours > -1) {
			parts->Insert(hours, DatePart->New(hours, DatePart->Type->Hour));
		};

		# mins
		mins := format->Find("mm");
		if(mins > -1) {
			parts->Insert(mins, DatePart->New(mins, DatePart->Type->Min));
		};

		# secs
		secs := format->Find("ss");
		if(secs > -1) {
			parts->Insert(secs, DatePart->New(secs, DatePart->Type->Sec));
		};

		date_month := 0; date_day := 0; date_year := 0;
		date_hours := 0; date_mins := 0; date_secs := 0;
		
		offset := 0;
		values := parts->GetValues();
		each(i : values) {
			part := values->Get(i)->As(DatePart);
			index := part->GetIndex();
			type := part->GetType();

			select(type) {
				label DatePart->Type->Month: {
					pos := month + offset + 1;
					if(pos > -1 & pos < date_str->Size()) { 
						if(date_str->Get(pos)->IsDigit()) {
#							date_str->SubString(month + offset, 2)->PrintLine();
							date_month := date_str->SubString(month + offset, 2)->ToInt();
						}
						else {
#							date_str->SubString(month + offset, 1)->PrintLine();
							date_month := date_str->SubString(month + offset, 1)->ToInt();
							offset -= 1;
						};
					};
				}

				label DatePart->Type->Day: {
					pos := day + offset + 1;
					if(pos > -1 & pos < date_str->Size()) { 
						if(date_str->Get(pos)->IsDigit()) {
#							date_str->SubString(day + offset, 2)->PrintLine();
							date_day := date_str->SubString(day + offset, 2)->ToInt();
						}
						else {
#							date_str->SubString(day + offset, 1)->PrintLine();
							date_day := date_str->SubString(day + offset, 1)->ToInt();
							offset -= 1;
						};
					};
				}
				
				label DatePart->Type->Year: {
					pos := year + offset;
					if(pos > -1 & pos < date_str->Size()) {
						if(long_year_format) {
#							date_str->SubString(year + offset, 4)->PrintLine();
							date_year := date_str->SubString(year + offset, 4)->ToInt();
						}	
						else {
#							date_str->SubString(year + offset, 2)->PrintLine();
							date_year := date_str->SubString(year + offset, 2)->ToInt();
						};
					};
				}

				label DatePart->Type->Hour: {
					pos := hours + offset + 1;
					if(pos > -1 & pos < date_str->Size()) { 
						if(date_str->Get(pos)->IsDigit()) {
#							date_str->SubString(hours + offset, 2)->PrintLine();
							date_hours := date_str->SubString(hours + offset, 2)->ToInt();
						}
						else {
#							date_str->SubString(hours + offset, 1)->PrintLine();
							date_hours := date_str->SubString(hours + offset, 1)->ToInt();
							offset -= 1;
						};
					};
				}

				label DatePart->Type->Min: {
					pos := mins + offset + 1;
					if(pos > -1 & pos < date_str->Size()) { 
						if(date_str->Get(pos)->IsDigit()) {
#							date_str->SubString(mins + offset, 2)->PrintLine();
							date_mins := date_str->SubString(mins + offset, 2)->ToInt();
						}
						else {
#							date_str->SubString(mins + offset, 1)->PrintLine();
							date_mins := date_str->SubString(mins + offset, 1)->ToInt();
							offset -= 1;
						};
					};
				}

				label DatePart->Type->Sec: {
					pos := secs + offset + 1;
					if(pos > -1 & pos < date_str->Size()) { 
						if(date_str->Get(pos)->IsDigit()) {
#							date_str->SubString(secs + offset, 2)->PrintLine();
							date_secs := date_str->SubString(mins + offset, 2)->ToInt();
						}
						else {
#							date_str->SubString(secs + offset, 1)->PrintLine();
							date_secs := date_str->SubString(secs + offset, 1)->ToInt();
							offset -= 1;
						};
					};
				}
			};
		};

date_month->PrintLine();
date_year->PrintLine();
date_day->PrintLine();

		date := Date->New(date_day, date_month, date_year, gmt);
		date->AddHours(date_hours);
		date->AddMinutes(date_mins);
		date->AddSeconds(date_secs);

		return date;
	}
}

class DatePart {
	@index : Int;
	@type : Type;

	enum Type {
		Month,
		Day,
		Year,
		Hour,
		Min,
		Sec
	}

	New(index : Int, type : Type) {
		@index := index;
		@type := type;
	}

	method : public : GetType() ~ Type {
		return @type;
	}

	method : public : GetIndex() ~ Int {
		return @index;
	}
}

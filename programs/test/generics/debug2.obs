#~
	testing:
		* deceleration
		* basic get/set
		* instance
~#

class Test {
	function : Main(args : String[]) ~ Nil {
		b : Bar := Bar->New()<Foo,String>;
		z := 13;
		f := Foo->New(); # ok, zero params...
		b->Set(f); # needs type erasure
		s : Foo := b->Get();
		x : Bar := Bar->Instance(); 
		x->Set(f);
	}
}

class Bar<V : Mock, S : String> {
	@v : V;
	@n : Float;

	New() {
	}

	function : Instance() ~ Bar {
		return Bar->New()<V, S>;
#		return Nil;
	}
	
	method : public : Set(v : V) ~ Nil {
		@v := v;
		v->DoIt()->PrintLine();
	}
	
	method : public : Get() ~ V {
		return @v;
	}
}

class Foo implements Mock {
	New() {
	}

	method : public : DoIt() ~ Int {
		return 13;
	}

}

interface Mock {
	method : virtual : public : DoIt() ~ Int;
}
class BasicAi {
	function : Main(args : String[]) ~ Nil {
		weights := [
			[0.2, 0.001]
			[1.0, 0.25]];
#~
		weights := [
			[5.0, 6.0, 7.0]
			[8.0, 9.0, 10.0]];
~#

		inputs := [
			[1.0, 2.0]
			[3.0, 4.0]];

		
		x := DotProduct(weights, inputs);
		if(x <> Nil) {
			Show(x);
		};

		Sigmoid(1.9646)->PrintLine();
		
	}

	function : native : Sigmoid(x : Float) ~ Float {
		return 1.0 / (1.0 + Float->Power(Float->E(), -1.0 * x));
	}

	function : Show(m : Float[,]) ~ Nil {
		dims := m->Size();
		rows := dims[0];
		cols := dims[1];

		for(r := 0; r < rows; r +=1;) {
			'['->Print();
			for(c := 0; c < cols; c +=1;) {
				m[r,c]->Print();
				if(c + 1 < cols) {
					", "->Print();
				}
				else {
					
				};
			};
			']'->PrintLine();
		};
	}

	function : native : DotProduct(b : Float[,], a : Float[,]) ~ Float[,] {
		input_dims := a->Size();
		input_rows := input_dims[0];
		input_cols := input_dims[1];
# "A: rows={$input_rows}, cols={$input_cols}"->PrintLine();

		weight_dims := b->Size();
		weight_rows := weight_dims[0];
		weight_cols := weight_dims[1];
# "B: rows={$weight_rows}, cols={$weight_cols}"->PrintLine();

		if(input_cols <> weight_rows) {
			return Nil;
		};

		x_result := Float->New[input_rows,weight_cols];
		for(input_col := 0; input_col < input_rows; input_col += 1;) {
			for(weight_col := 0; weight_col < weight_cols; weight_col += 1;) {
				x_sum := 0.0;
				for(x_col := 0; x_col < weight_rows; x_col += 1;) {
					x_sum += a[input_col, x_col] * b[x_col, weight_col];
				};
# "--- {$input_col},{$weight_col}: {$x_sum} ---"->PrintLine();
				x_result[input_col, weight_col] := Sigmoid(x_sum);
			};
		};

		return x_result;
	}
}
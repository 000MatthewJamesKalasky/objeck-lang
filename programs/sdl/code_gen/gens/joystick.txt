method : public : Locks() ~ Nil {
        array_args := Base->New[0];

        Proxy->GetDllProxy()->CallFunction("sdl_joystick_locks", array_args);

}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_joystick_locks(VMContext& context) {
                SDL_LockJoysticks();
        }

---
method : public : Nums() ~ Int {
        array_args := Base->New[1];
        array_args[0] := IntHolder->New();

        Proxy->GetDllProxy()->CallFunction("sdl_joystick_nums", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_joystick_nums(VMContext& context) {
                const int return_value = SDL_NumJoysticks();
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : NameForIndex(device_index : Int) ~ String {
        array_args := Base->New[2];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(device_index);

        Proxy->GetDllProxy()->CallFunction("sdl_joystick_name_for_index", array_args);

        return array_args[0];
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_joystick_name_for_index(VMContext& context) {
                const int device_index = APITools_GetIntValue(context, 1);
                const wstring return_value = SDL_JoystickNameForIndex(device_index);
                APITools_SetStringValue(context, 0, return_value);
        }

---
method : public : GetDeviceGUID(device_index : Int) ~ JoystickGUID {
        array_args := Base->New[2];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(device_index);

        Proxy->GetDllProxy()->CallFunction("sdl_joystick_get_deviceguid", array_args);

        return array_args[0];
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_joystick_get_deviceguid(VMContext& context) {
                const int device_index = APITools_GetIntValue(context, 1);
                const size* return_value = SDL_JoystickGetDeviceGUID(device_index);
                APITools_SetObjectValue(context, 0, (CAST*)return_value);
        }

---
method : public : GetDeviceVendor(device_index : Int) ~ Int {
        array_args := Base->New[2];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(device_index);

        Proxy->GetDllProxy()->CallFunction("sdl_joystick_get_device_vendor", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_joystick_get_device_vendor(VMContext& context) {
                const int device_index = APITools_GetIntValue(context, 1);
                const int return_value = SDL_JoystickGetDeviceVendor(device_index);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : GetDeviceProduct(device_index : Int) ~ Int {
        array_args := Base->New[2];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(device_index);

        Proxy->GetDllProxy()->CallFunction("sdl_joystick_get_device_product", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_joystick_get_device_product(VMContext& context) {
                const int device_index = APITools_GetIntValue(context, 1);
                const int return_value = SDL_JoystickGetDeviceProduct(device_index);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : GetDeviceProductVersion(device_index : Int) ~ Int {
        array_args := Base->New[2];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(device_index);

        Proxy->GetDllProxy()->CallFunction("sdl_joystick_get_device_product_version", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_joystick_get_device_product_version(VMContext& context) {
                const int device_index = APITools_GetIntValue(context, 1);
                const int return_value = SDL_JoystickGetDeviceProductVersion(device_index);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : GetDeviceType(device_index : Int) ~ JoystickType {
        array_args := Base->New[2];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(device_index);

        Proxy->GetDllProxy()->CallFunction("sdl_joystick_get_device_type", array_args);

        return array_args[0];
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_joystick_get_device_type(VMContext& context) {
                const int device_index = APITools_GetIntValue(context, 1);
                const size* return_value = SDL_JoystickGetDeviceType(device_index);
                APITools_SetObjectValue(context, 0, (CAST*)return_value);
        }

---
method : public : GetDeviceInstanceID(device_index : Int) ~ JoystickID {
        array_args := Base->New[2];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(device_index);

        Proxy->GetDllProxy()->CallFunction("sdl_joystick_get_device_instanceid", array_args);

        return array_args[0];
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_joystick_get_device_instanceid(VMContext& context) {
                const int device_index = APITools_GetIntValue(context, 1);
                const size* return_value = SDL_JoystickGetDeviceInstanceID(device_index);
                APITools_SetObjectValue(context, 0, (CAST*)return_value);
        }

---
method : public : Open(device_index : Int) ~ Joystick {
        array_args := Base->New[2];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(device_index);

        Proxy->GetDllProxy()->CallFunction("sdl_joystick_open", array_args);

        return array_args[0];
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_joystick_open(VMContext& context) {
                const int device_index = APITools_GetIntValue(context, 1);
                const size* return_value = SDL_JoystickOpen(device_index);
                APITools_SetObjectValue(context, 0, (CAST*)return_value);
        }

---
method : public : FromInstanceID(joyid : JoystickID) ~ Joystick {
        array_args := Base->New[2];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(joyid);

        Proxy->GetDllProxy()->CallFunction("sdl_joystick_from_instanceid", array_args);

        return array_args[0];
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_joystick_from_instanceid(VMContext& context) {
                const size* joyid = (size_t*)APITools_GetObjectValue(context, 1);
                const size* return_value = SDL_JoystickFromInstanceID(joyid);
                APITools_SetObjectValue(context, 0, (CAST*)return_value);
        }

---
method : public : Name() ~ String {
        array_args := Base->New[2];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@joystick);

        Proxy->GetDllProxy()->CallFunction("sdl_joystick_name", array_args);

        return array_args[0];
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_joystick_name(VMContext& context) {
                SDL_Joystick* joystick = (Joystick*)APITools_GetIntValue(context, 1);
                const wstring return_value = SDL_JoystickName(joystick);
                APITools_SetStringValue(context, 0, return_value);
        }

---
method : public : GetGUID() ~ JoystickGUID {
        array_args := Base->New[2];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@joystick);

        Proxy->GetDllProxy()->CallFunction("sdl_joystick_getguid", array_args);

        return array_args[0];
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_joystick_getguid(VMContext& context) {
                SDL_Joystick* joystick = (Joystick*)APITools_GetIntValue(context, 1);
                const size* return_value = SDL_JoystickGetGUID(joystick);
                APITools_SetObjectValue(context, 0, (CAST*)return_value);
        }

---
method : public : GetVendor() ~ Int {
        array_args := Base->New[2];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@joystick);

        Proxy->GetDllProxy()->CallFunction("sdl_joystick_get_vendor", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_joystick_get_vendor(VMContext& context) {
                SDL_Joystick* joystick = (Joystick*)APITools_GetIntValue(context, 1);
                const int return_value = SDL_JoystickGetVendor(joystick);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : GetProduct() ~ Int {
        array_args := Base->New[2];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@joystick);

        Proxy->GetDllProxy()->CallFunction("sdl_joystick_get_product", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_joystick_get_product(VMContext& context) {
                SDL_Joystick* joystick = (Joystick*)APITools_GetIntValue(context, 1);
                const int return_value = SDL_JoystickGetProduct(joystick);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : GetProductVersion() ~ Int {
        array_args := Base->New[2];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@joystick);

        Proxy->GetDllProxy()->CallFunction("sdl_joystick_get_product_version", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_joystick_get_product_version(VMContext& context) {
                SDL_Joystick* joystick = (Joystick*)APITools_GetIntValue(context, 1);
                const int return_value = SDL_JoystickGetProductVersion(joystick);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : GetType() ~ JoystickType {
        array_args := Base->New[2];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@joystick);

        Proxy->GetDllProxy()->CallFunction("sdl_joystick_get_type", array_args);

        return array_args[0];
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_joystick_get_type(VMContext& context) {
                SDL_Joystick* joystick = (Joystick*)APITools_GetIntValue(context, 1);
                const size* return_value = SDL_JoystickGetType(joystick);
                APITools_SetObjectValue(context, 0, (CAST*)return_value);
        }

---
method : public : GetGUIDString(guid : JoystickGUID, pszGUID : String, cbGUID : Int) ~ Nil {
        array_args := Base->New[3];
        array_args[0] := IntHolder->New(guid);
        array_args[1] := pszGUID;
        array_args[2] := IntHolder->New(cbGUID);

        Proxy->GetDllProxy()->CallFunction("sdl_joystick_getguid_string", array_args);

}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_joystick_getguid_string(VMContext& context) {
                const size* guid = (size_t*)APITools_GetObjectValue(context, 0);
                const wstring pszGUID = APITools_GetStringValue(context, 1);
                const int cbGUID = APITools_GetIntValue(context, 2);
                SDL_JoystickGetGUIDString(guid, pszGUID, cbGUID);
        }

---
method : public : GetGUIDFromString(pchGUID : String) ~ JoystickGUID {
        array_args := Base->New[2];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(pchGUID);

        Proxy->GetDllProxy()->CallFunction("sdl_joystick_getguid_from_string", array_args);

        return array_args[0];
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_joystick_getguid_from_string(VMContext& context) {
                const wstring pchGUID = APITools_GetStringValue(context, 1);
                const size* return_value = SDL_JoystickGetGUIDFromString(pchGUID);
                APITools_SetObjectValue(context, 0, (CAST*)return_value);
        }

---
method : public : GetAttached() ~ Bool {
        array_args := Base->New[2];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@joystick);

        Proxy->GetDllProxy()->CallFunction("sdl_joystick_get_attached", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get() = 0 ? false : true;
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_joystick_get_attached(VMContext& context) {
                SDL_Joystick* joystick = (Joystick*)APITools_GetIntValue(context, 1);
                const int return_value = SDL_JoystickGetAttached(joystick);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : InstanceID() ~ JoystickID {
        array_args := Base->New[2];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@joystick);

        Proxy->GetDllProxy()->CallFunction("sdl_joystick_instanceid", array_args);

        return array_args[0];
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_joystick_instanceid(VMContext& context) {
                SDL_Joystick* joystick = (Joystick*)APITools_GetIntValue(context, 1);
                const size* return_value = SDL_JoystickInstanceID(joystick);
                APITools_SetObjectValue(context, 0, (CAST*)return_value);
        }

---
method : public : NumAxes() ~ Int {
        array_args := Base->New[2];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@joystick);

        Proxy->GetDllProxy()->CallFunction("sdl_joystick_num_axes", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_joystick_num_axes(VMContext& context) {
                SDL_Joystick* joystick = (Joystick*)APITools_GetIntValue(context, 1);
                const int return_value = SDL_JoystickNumAxes(joystick);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : NumBalls() ~ Int {
        array_args := Base->New[2];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@joystick);

        Proxy->GetDllProxy()->CallFunction("sdl_joystick_num_balls", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_joystick_num_balls(VMContext& context) {
                SDL_Joystick* joystick = (Joystick*)APITools_GetIntValue(context, 1);
                const int return_value = SDL_JoystickNumBalls(joystick);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : NumHats() ~ Int {
        array_args := Base->New[2];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@joystick);

        Proxy->GetDllProxy()->CallFunction("sdl_joystick_num_hats", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_joystick_num_hats(VMContext& context) {
                SDL_Joystick* joystick = (Joystick*)APITools_GetIntValue(context, 1);
                const int return_value = SDL_JoystickNumHats(joystick);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : NumButtons() ~ Int {
        array_args := Base->New[2];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@joystick);

        Proxy->GetDllProxy()->CallFunction("sdl_joystick_num_buttons", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_joystick_num_buttons(VMContext& context) {
                SDL_Joystick* joystick = (Joystick*)APITools_GetIntValue(context, 1);
                const int return_value = SDL_JoystickNumButtons(joystick);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : Update() ~ Nil {
        array_args := Base->New[0];

        Proxy->GetDllProxy()->CallFunction("sdl_joystick_update", array_args);

}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_joystick_update(VMContext& context) {
                SDL_JoystickUpdate();
        }

---
method : public : EventState(state : Int) ~ Int {
        array_args := Base->New[2];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(state);

        Proxy->GetDllProxy()->CallFunction("sdl_joystick_event_state", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_joystick_event_state(VMContext& context) {
                const int state = APITools_GetIntValue(context, 1);
                const int return_value = SDL_JoystickEventState(state);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : GetAxis(axis : Int) ~ Sint16 {
        array_args := Base->New[3];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@joystick);
        array_args[2] := IntHolder->New(axis);

        Proxy->GetDllProxy()->CallFunction("sdl_joystick_get_axis", array_args);

        return array_args[0];
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_joystick_get_axis(VMContext& context) {
                SDL_Joystick* joystick = (Joystick*)APITools_GetIntValue(context, 1);
                const int axis = APITools_GetIntValue(context, 2);
                const size* return_value = SDL_JoystickGetAxis(joystick, axis);
                APITools_SetObjectValue(context, 0, (CAST*)return_value);
        }

---
method : public : GetAxisInitialState(axis : Int, state : Sint16) ~ Bool {
        array_args := Base->New[4];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@joystick);
        array_args[2] := IntHolder->New(axis);
        array_args[3] := state;

        Proxy->GetDllProxy()->CallFunction("sdl_joystick_get_axis_initial_state", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get() = 0 ? false : true;
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_joystick_get_axis_initial_state(VMContext& context) {
                SDL_Joystick* joystick = (Joystick*)APITools_GetIntValue(context, 1);
                const int axis = APITools_GetIntValue(context, 2);
                const size* state = (size_t*)APITools_GetObjectValue(context, 3);
                const int return_value = SDL_JoystickGetAxisInitialState(joystick, axis, state);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : GetHat(hat : Int) ~ Int {
        array_args := Base->New[3];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@joystick);
        array_args[2] := IntHolder->New(hat);

        Proxy->GetDllProxy()->CallFunction("sdl_joystick_get_hat", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_joystick_get_hat(VMContext& context) {
                SDL_Joystick* joystick = (Joystick*)APITools_GetIntValue(context, 1);
                const int hat = APITools_GetIntValue(context, 2);
                const int return_value = SDL_JoystickGetHat(joystick, hat);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : GetBall(ball : Int, dx : Int, dy : Int) ~ Int {
        array_args := Base->New[5];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@joystick);
        array_args[2] := IntHolder->New(ball);
        array_args[3] := IntHolder->New(dx);
        array_args[4] := IntHolder->New(dy);

        Proxy->GetDllProxy()->CallFunction("sdl_joystick_get_ball", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_joystick_get_ball(VMContext& context) {
                SDL_Joystick* joystick = (Joystick*)APITools_GetIntValue(context, 1);
                const int ball = APITools_GetIntValue(context, 2);
                const int dx = APITools_GetIntValue(context, 3);
                const int dy = APITools_GetIntValue(context, 4);
                const int return_value = SDL_JoystickGetBall(joystick, ball, dx, dy);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : GetButton(button : Int) ~ Int {
        array_args := Base->New[3];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@joystick);
        array_args[2] := IntHolder->New(button);

        Proxy->GetDllProxy()->CallFunction("sdl_joystick_get_button", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_joystick_get_button(VMContext& context) {
                SDL_Joystick* joystick = (Joystick*)APITools_GetIntValue(context, 1);
                const int button = APITools_GetIntValue(context, 2);
                const int return_value = SDL_JoystickGetButton(joystick, button);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : Close() ~ Nil {
        array_args := Base->New[1];
        array_args[0] := IntHolder->New(@joystick);

        Proxy->GetDllProxy()->CallFunction("sdl_joystick_close", array_args);

}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_joystick_close(VMContext& context) {
                SDL_Joystick* joystick = (Joystick*)APITools_GetIntValue(context, 0);
                SDL_JoystickClose(joystick);
        }

---
method : public : CurrentPowerLevel() ~ JoystickPowerLevel {
        array_args := Base->New[2];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@joystick);

        Proxy->GetDllProxy()->CallFunction("sdl_joystick_current_power_level", array_args);

        return array_args[0];
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_joystick_current_power_level(VMContext& context) {
                SDL_Joystick* joystick = (Joystick*)APITools_GetIntValue(context, 1);
                const size* return_value = SDL_JoystickCurrentPowerLevel(joystick);
                APITools_SetObjectValue(context, 0, (CAST*)return_value);
        }

---
Compiled 8 source classes.
Linked 22 library classes.
Wrote target file: 'code_gen.obe'
---
filename='D:\Code\objeck-lang\core\lib\sdl\include\SDL_joystick.h'
function='SDL_LockJoysticks'
function='SDL_UnlockJoysticks'
function='SDL_NumJoysticks'
function='SDL_JoystickNameForIndex'
function='SDL_JoystickPathForIndex'
function='SDL_JoystickGetDevicePlayerIndex'
function='SDL_JoystickGetDeviceGUID'
function='SDL_JoystickGetDeviceVendor'
function='SDL_JoystickGetDeviceProduct'
function='SDL_JoystickGetDeviceProductVersion'
function='SDL_JoystickGetDeviceType'
function='SDL_JoystickGetDeviceInstanceID'
function='SDL_JoystickOpen'
function='SDL_JoystickFromInstanceID'
function='SDL_JoystickFromPlayerIndex'
function='SDL_JoystickAttachVirtual'
function='SDL_JoystickAttachVirtualEx'
function='SDL_JoystickDetachVirtual'
function='SDL_JoystickIsVirtual'
function='SDL_JoystickSetVirtualAxis'
function='SDL_JoystickSetVirtualButton'
function='SDL_JoystickSetVirtualHat'
function='SDL_JoystickName'
function='SDL_JoystickPath'
function='SDL_JoystickGetPlayerIndex'
function='SDL_JoystickSetPlayerIndex'
function='SDL_JoystickGetGUID'
function='SDL_JoystickGetVendor'
function='SDL_JoystickGetProduct'
function='SDL_JoystickGetProductVersion'
function='SDL_JoystickGetFirmwareVersion'
function='SDL_JoystickGetSerial'
function='SDL_JoystickGetType'
function='SDL_JoystickGetGUIDString'
function='SDL_JoystickGetGUIDFromString'
function='SDL_JoystickGetAttached'
function='SDL_JoystickInstanceID'
function='SDL_JoystickNumAxes'
function='SDL_JoystickNumBalls'
function='SDL_JoystickNumHats'
function='SDL_JoystickNumButtons'
function='SDL_JoystickUpdate'
function='SDL_JoystickEventState'
function='SDL_JoystickGetAxis'
function='SDL_JoystickGetAxisInitialState'
function='SDL_JoystickGetHat'
function='SDL_JoystickGetBall'
function='SDL_JoystickGetButton'
function='SDL_JoystickRumble'
function='SDL_JoystickRumbleTriggers'
function='SDL_JoystickHasLED'
function='SDL_JoystickHasRumble'
function='SDL_JoystickHasRumbleTriggers'
function='SDL_JoystickSetLED'
function='SDL_JoystickSendEffect'
function='SDL_JoystickClose'
function='SDL_JoystickCurrentPowerLevel'

function : Locks() ~ Nil {
	array_args := Base->New[0];

	Proxy->GetDllProxy()->CallFunction("sdl_joystick_sdl_lock_joysticks", array_args);

}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_joystick_sdl_lock_joysticks(VMContext& context) {
		SDL_LockJoysticks();
	}

---
function : Unlocks() ~ Nil {
	array_args := Base->New[0];

	Proxy->GetDllProxy()->CallFunction("sdl_joystick_sdl_unlock_joysticks", array_args);

}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_joystick_sdl_unlock_joysticks(VMContext& context) {
		SDL_UnlockJoysticks();
	}

---
function : Nums() ~ Int {
	array_args := Base->New[1];
	array_args[0] := IntHolder->New();

	Proxy->GetDllProxy()->CallFunction("sdl_joystick_sdl_num_joysticks", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_joystick_sdl_num_joysticks(VMContext& context) {
		const int return_value = SDL_NumJoysticks();
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : NameForIndex(device_index : Int) ~ String {
	array_args := Base->New[2];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(device_index);

	Proxy->GetDllProxy()->CallFunction("sdl_joystick_sdl_joystick_name_for_index", array_args);

	return array_args[0];
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_joystick_sdl_joystick_name_for_index(VMContext& context) {
		const int device_index = APITools_GetIntValue(context, 1);
		const wstring return_value = SDL_JoystickNameForIndex(device_index);
		APITools_SetStringValue(context, 0, return_value);
	}

---
method : public : PathForIndex(device_index : Int) ~ String {
	array_args := Base->New[2];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(device_index);

	Proxy->GetDllProxy()->CallFunction("sdl_joystick_sdl_joystick_path_for_index", array_args);

	return array_args[0];
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_joystick_sdl_joystick_path_for_index(VMContext& context) {
		const int device_index = APITools_GetIntValue(context, 1);
		const wstring return_value = SDL_JoystickPathForIndex(device_index);
		APITools_SetStringValue(context, 0, return_value);
	}

---
method : public : GetDevicePlayerIndex(device_index : Int) ~ Int {
	array_args := Base->New[2];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(device_index);

	Proxy->GetDllProxy()->CallFunction("sdl_joystick_sdl_joystick_get_device_player_index", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_joystick_sdl_joystick_get_device_player_index(VMContext& context) {
		const int device_index = APITools_GetIntValue(context, 1);
		const int return_value = SDL_JoystickGetDevicePlayerIndex(device_index);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : GetDeviceGUID(device_index : Int) ~ JoystickGUID {
	array_args := Base->New[2];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(device_index);

	Proxy->GetDllProxy()->CallFunction("sdl_joystick_sdl_joystick_get_deviceguid", array_args);

	return array_args[0];
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_joystick_sdl_joystick_get_deviceguid(VMContext& context) {
		const int device_index = APITools_GetIntValue(context, 1);
		const size* return_value = SDL_JoystickGetDeviceGUID(device_index);
		APITools_SetObjectValue(context, 0, (CAST*)return_value);
	}

---
method : public : GetDeviceVendor(device_index : Int) ~ Int {
	array_args := Base->New[2];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(device_index);

	Proxy->GetDllProxy()->CallFunction("sdl_joystick_sdl_joystick_get_device_vendor", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_joystick_sdl_joystick_get_device_vendor(VMContext& context) {
		const int device_index = APITools_GetIntValue(context, 1);
		const int return_value = SDL_JoystickGetDeviceVendor(device_index);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : GetDeviceProduct(device_index : Int) ~ Int {
	array_args := Base->New[2];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(device_index);

	Proxy->GetDllProxy()->CallFunction("sdl_joystick_sdl_joystick_get_device_product", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_joystick_sdl_joystick_get_device_product(VMContext& context) {
		const int device_index = APITools_GetIntValue(context, 1);
		const int return_value = SDL_JoystickGetDeviceProduct(device_index);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : GetDeviceProductVersion(device_index : Int) ~ Int {
	array_args := Base->New[2];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(device_index);

	Proxy->GetDllProxy()->CallFunction("sdl_joystick_sdl_joystick_get_device_product_version", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_joystick_sdl_joystick_get_device_product_version(VMContext& context) {
		const int device_index = APITools_GetIntValue(context, 1);
		const int return_value = SDL_JoystickGetDeviceProductVersion(device_index);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : GetDeviceType(device_index : Int) ~ JoystickType {
	array_args := Base->New[2];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(device_index);

	Proxy->GetDllProxy()->CallFunction("sdl_joystick_sdl_joystick_get_device_type", array_args);

	return array_args[0];
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_joystick_sdl_joystick_get_device_type(VMContext& context) {
		const int device_index = APITools_GetIntValue(context, 1);
		const size* return_value = SDL_JoystickGetDeviceType(device_index);
		APITools_SetObjectValue(context, 0, (CAST*)return_value);
	}

---
method : public : GetDeviceInstanceID(device_index : Int) ~ JoystickID {
	array_args := Base->New[2];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(device_index);

	Proxy->GetDllProxy()->CallFunction("sdl_joystick_sdl_joystick_get_device_instanceid", array_args);

	return array_args[0];
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_joystick_sdl_joystick_get_device_instanceid(VMContext& context) {
		const int device_index = APITools_GetIntValue(context, 1);
		const size* return_value = SDL_JoystickGetDeviceInstanceID(device_index);
		APITools_SetObjectValue(context, 0, (CAST*)return_value);
	}

---
method : public : Open(device_index : Int) ~ Joystick {
	array_args := Base->New[2];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(device_index);

	Proxy->GetDllProxy()->CallFunction("sdl_joystick_sdl_joystick_open", array_args);

	return array_args[0];
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_joystick_sdl_joystick_open(VMContext& context) {
		const int device_index = APITools_GetIntValue(context, 1);
		const size* return_value = SDL_JoystickOpen(device_index);
		APITools_SetObjectValue(context, 0, (CAST*)return_value);
	}

---
method : public : FromInstanceID(instance_id : JoystickID) ~ Joystick {
	array_args := Base->New[2];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(instance_id);

	Proxy->GetDllProxy()->CallFunction("sdl_joystick_sdl_joystick_from_instanceid", array_args);

	return array_args[0];
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_joystick_sdl_joystick_from_instanceid(VMContext& context) {
		const size* instance_id = (size_t*)APITools_GetObjectValue(context, 1);
		const size* return_value = SDL_JoystickFromInstanceID(instance_id);
		APITools_SetObjectValue(context, 0, (CAST*)return_value);
	}

---
method : public : FromPlayerIndex(player_index : Int) ~ Joystick {
	array_args := Base->New[2];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(player_index);

	Proxy->GetDllProxy()->CallFunction("sdl_joystick_sdl_joystick_from_player_index", array_args);

	return array_args[0];
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_joystick_sdl_joystick_from_player_index(VMContext& context) {
		const int player_index = APITools_GetIntValue(context, 1);
		const size* return_value = SDL_JoystickFromPlayerIndex(player_index);
		APITools_SetObjectValue(context, 0, (CAST*)return_value);
	}

---
method : public : AttachVirtual(type : JoystickType, naxes : Int, nbuttons : Int, nhats : Int) ~ Int {
	array_args := Base->New[5];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(type);
	array_args[2] := IntHolder->New(naxes);
	array_args[3] := IntHolder->New(nbuttons);
	array_args[4] := IntHolder->New(nhats);

	Proxy->GetDllProxy()->CallFunction("sdl_joystick_sdl_joystick_attach_virtual", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_joystick_sdl_joystick_attach_virtual(VMContext& context) {
		const size* type = (size_t*)APITools_GetObjectValue(context, 1);
		const int naxes = APITools_GetIntValue(context, 2);
		const int nbuttons = APITools_GetIntValue(context, 3);
		const int nhats = APITools_GetIntValue(context, 4);
		const int return_value = SDL_JoystickAttachVirtual(type, naxes, nbuttons, nhats);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : AttachVirtualEx(desc : VirtualJoystickDesc) ~ Int {
	array_args := Base->New[2];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(desc);

	Proxy->GetDllProxy()->CallFunction("sdl_joystick_sdl_joystick_attach_virtual_ex", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_joystick_sdl_joystick_attach_virtual_ex(VMContext& context) {
		const size* desc = (size_t*)APITools_GetObjectValue(context, 1);
		const int return_value = SDL_JoystickAttachVirtualEx(desc);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : DetachVirtual(device_index : Int) ~ Int {
	array_args := Base->New[2];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(device_index);

	Proxy->GetDllProxy()->CallFunction("sdl_joystick_sdl_joystick_detach_virtual", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_joystick_sdl_joystick_detach_virtual(VMContext& context) {
		const int device_index = APITools_GetIntValue(context, 1);
		const int return_value = SDL_JoystickDetachVirtual(device_index);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : IsVirtual(device_index : Int) ~ Bool {
	array_args := Base->New[2];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(device_index);

	Proxy->GetDllProxy()->CallFunction("sdl_joystick_sdl_joystick_is_virtual", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get() = 0 ? false : true;
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_joystick_sdl_joystick_is_virtual(VMContext& context) {
		const int device_index = APITools_GetIntValue(context, 1);
		const int return_value = SDL_JoystickIsVirtual(device_index);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : SetVirtualAxis(axis : Int, value : Int) ~ Int {
	array_args := Base->New[4];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@joystick);
	array_args[2] := IntHolder->New(axis);
	array_args[3] := IntHolder->New(value);

	Proxy->GetDllProxy()->CallFunction("sdl_joystick_sdl_joystick_set_virtual_axis", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_joystick_sdl_joystick_set_virtual_axis(VMContext& context) {
		SDL_Joystick* joystick = (SDL_Joystick*)APITools_GetIntValue(context, 1);
		const int axis = APITools_GetIntValue(context, 2);
		const int value = APITools_GetIntValue(context, 3);
		const int return_value = SDL_JoystickSetVirtualAxis(joystick, axis, value);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : SetVirtualButton(button : Int, value : Int) ~ Int {
	array_args := Base->New[4];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@joystick);
	array_args[2] := IntHolder->New(button);
	array_args[3] := IntHolder->New(value);

	Proxy->GetDllProxy()->CallFunction("sdl_joystick_sdl_joystick_set_virtual_button", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_joystick_sdl_joystick_set_virtual_button(VMContext& context) {
		SDL_Joystick* joystick = (SDL_Joystick*)APITools_GetIntValue(context, 1);
		const int button = APITools_GetIntValue(context, 2);
		const int value = APITools_GetIntValue(context, 3);
		const int return_value = SDL_JoystickSetVirtualButton(joystick, button, value);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : SetVirtualHat(hat : Int, value : Int) ~ Int {
	array_args := Base->New[4];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@joystick);
	array_args[2] := IntHolder->New(hat);
	array_args[3] := IntHolder->New(value);

	Proxy->GetDllProxy()->CallFunction("sdl_joystick_sdl_joystick_set_virtual_hat", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_joystick_sdl_joystick_set_virtual_hat(VMContext& context) {
		SDL_Joystick* joystick = (SDL_Joystick*)APITools_GetIntValue(context, 1);
		const int hat = APITools_GetIntValue(context, 2);
		const int value = APITools_GetIntValue(context, 3);
		const int return_value = SDL_JoystickSetVirtualHat(joystick, hat, value);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : Name() ~ String {
	array_args := Base->New[2];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@joystick);

	Proxy->GetDllProxy()->CallFunction("sdl_joystick_sdl_joystick_name", array_args);

	return array_args[0];
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_joystick_sdl_joystick_name(VMContext& context) {
		SDL_Joystick* joystick = (SDL_Joystick*)APITools_GetIntValue(context, 1);
		const wstring return_value = SDL_JoystickName(joystick);
		APITools_SetStringValue(context, 0, return_value);
	}

---
method : public : Path() ~ String {
	array_args := Base->New[2];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@joystick);

	Proxy->GetDllProxy()->CallFunction("sdl_joystick_sdl_joystick_path", array_args);

	return array_args[0];
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_joystick_sdl_joystick_path(VMContext& context) {
		SDL_Joystick* joystick = (SDL_Joystick*)APITools_GetIntValue(context, 1);
		const wstring return_value = SDL_JoystickPath(joystick);
		APITools_SetStringValue(context, 0, return_value);
	}

---
method : public : GetPlayerIndex() ~ Int {
	array_args := Base->New[2];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@joystick);

	Proxy->GetDllProxy()->CallFunction("sdl_joystick_sdl_joystick_get_player_index", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_joystick_sdl_joystick_get_player_index(VMContext& context) {
		SDL_Joystick* joystick = (SDL_Joystick*)APITools_GetIntValue(context, 1);
		const int return_value = SDL_JoystickGetPlayerIndex(joystick);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : SetPlayerIndex(player_index : Int) ~ Nil {
	array_args := Base->New[2];
	array_args[0] := IntHolder->New(@joystick);
	array_args[1] := IntHolder->New(player_index);

	Proxy->GetDllProxy()->CallFunction("sdl_joystick_sdl_joystick_set_player_index", array_args);

}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_joystick_sdl_joystick_set_player_index(VMContext& context) {
		SDL_Joystick* joystick = (SDL_Joystick*)APITools_GetIntValue(context, 0);
		const int player_index = APITools_GetIntValue(context, 1);
		SDL_JoystickSetPlayerIndex(joystick, player_index);
	}

---
method : public : GetGUID() ~ JoystickGUID {
	array_args := Base->New[2];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@joystick);

	Proxy->GetDllProxy()->CallFunction("sdl_joystick_sdl_joystick_getguid", array_args);

	return array_args[0];
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_joystick_sdl_joystick_getguid(VMContext& context) {
		SDL_Joystick* joystick = (SDL_Joystick*)APITools_GetIntValue(context, 1);
		const size* return_value = SDL_JoystickGetGUID(joystick);
		APITools_SetObjectValue(context, 0, (CAST*)return_value);
	}

---
method : public : GetVendor() ~ Int {
	array_args := Base->New[2];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@joystick);

	Proxy->GetDllProxy()->CallFunction("sdl_joystick_sdl_joystick_get_vendor", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_joystick_sdl_joystick_get_vendor(VMContext& context) {
		SDL_Joystick* joystick = (SDL_Joystick*)APITools_GetIntValue(context, 1);
		const int return_value = SDL_JoystickGetVendor(joystick);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : GetProduct() ~ Int {
	array_args := Base->New[2];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@joystick);

	Proxy->GetDllProxy()->CallFunction("sdl_joystick_sdl_joystick_get_product", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_joystick_sdl_joystick_get_product(VMContext& context) {
		SDL_Joystick* joystick = (SDL_Joystick*)APITools_GetIntValue(context, 1);
		const int return_value = SDL_JoystickGetProduct(joystick);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : GetProductVersion() ~ Int {
	array_args := Base->New[2];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@joystick);

	Proxy->GetDllProxy()->CallFunction("sdl_joystick_sdl_joystick_get_product_version", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_joystick_sdl_joystick_get_product_version(VMContext& context) {
		SDL_Joystick* joystick = (SDL_Joystick*)APITools_GetIntValue(context, 1);
		const int return_value = SDL_JoystickGetProductVersion(joystick);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : GetFirmwareVersion() ~ Int {
	array_args := Base->New[2];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@joystick);

	Proxy->GetDllProxy()->CallFunction("sdl_joystick_sdl_joystick_get_firmware_version", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_joystick_sdl_joystick_get_firmware_version(VMContext& context) {
		SDL_Joystick* joystick = (SDL_Joystick*)APITools_GetIntValue(context, 1);
		const int return_value = SDL_JoystickGetFirmwareVersion(joystick);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : GetSerial() ~ String {
	array_args := Base->New[2];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@joystick);

	Proxy->GetDllProxy()->CallFunction("sdl_joystick_sdl_joystick_get_serial", array_args);

	return array_args[0];
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_joystick_sdl_joystick_get_serial(VMContext& context) {
		SDL_Joystick* joystick = (SDL_Joystick*)APITools_GetIntValue(context, 1);
		const wstring return_value = SDL_JoystickGetSerial(joystick);
		APITools_SetStringValue(context, 0, return_value);
	}

---
method : public : GetType() ~ JoystickType {
	array_args := Base->New[2];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@joystick);

	Proxy->GetDllProxy()->CallFunction("sdl_joystick_sdl_joystick_get_type", array_args);

	return array_args[0];
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_joystick_sdl_joystick_get_type(VMContext& context) {
		SDL_Joystick* joystick = (SDL_Joystick*)APITools_GetIntValue(context, 1);
		const size* return_value = SDL_JoystickGetType(joystick);
		APITools_SetObjectValue(context, 0, (CAST*)return_value);
	}

---
method : public : GetGUIDString(guid : JoystickGUID, pszGUID : String, cbGUID : Int) ~ Nil {
	array_args := Base->New[3];
	array_args[0] := IntHolder->New(guid);
	array_args[1] := pszGUID;
	array_args[2] := IntHolder->New(cbGUID);

	Proxy->GetDllProxy()->CallFunction("sdl_joystick_sdl_joystick_getguid_string", array_args);

}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_joystick_sdl_joystick_getguid_string(VMContext& context) {
		const size* guid = (size_t*)APITools_GetObjectValue(context, 0);
		const wstring pszGUID = APITools_GetStringValue(context, 1);
		const int cbGUID = APITools_GetIntValue(context, 2);
		SDL_JoystickGetGUIDString(guid, pszGUID, cbGUID);
	}

---
method : public : GetGUIDFromString(pchGUID : String) ~ JoystickGUID {
	array_args := Base->New[2];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(pchGUID);

	Proxy->GetDllProxy()->CallFunction("sdl_joystick_sdl_joystick_getguid_from_string", array_args);

	return array_args[0];
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_joystick_sdl_joystick_getguid_from_string(VMContext& context) {
		const wstring pchGUID = APITools_GetStringValue(context, 1);
		const size* return_value = SDL_JoystickGetGUIDFromString(pchGUID);
		APITools_SetObjectValue(context, 0, (CAST*)return_value);
	}

---
method : public : GetAttached() ~ Bool {
	array_args := Base->New[2];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@joystick);

	Proxy->GetDllProxy()->CallFunction("sdl_joystick_sdl_joystick_get_attached", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get() = 0 ? false : true;
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_joystick_sdl_joystick_get_attached(VMContext& context) {
		SDL_Joystick* joystick = (SDL_Joystick*)APITools_GetIntValue(context, 1);
		const int return_value = SDL_JoystickGetAttached(joystick);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : InstanceID() ~ JoystickID {
	array_args := Base->New[2];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@joystick);

	Proxy->GetDllProxy()->CallFunction("sdl_joystick_sdl_joystick_instanceid", array_args);

	return array_args[0];
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_joystick_sdl_joystick_instanceid(VMContext& context) {
		SDL_Joystick* joystick = (SDL_Joystick*)APITools_GetIntValue(context, 1);
		const size* return_value = SDL_JoystickInstanceID(joystick);
		APITools_SetObjectValue(context, 0, (CAST*)return_value);
	}

---
method : public : NumAxes() ~ Int {
	array_args := Base->New[2];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@joystick);

	Proxy->GetDllProxy()->CallFunction("sdl_joystick_sdl_joystick_num_axes", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_joystick_sdl_joystick_num_axes(VMContext& context) {
		SDL_Joystick* joystick = (SDL_Joystick*)APITools_GetIntValue(context, 1);
		const int return_value = SDL_JoystickNumAxes(joystick);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : NumBalls() ~ Int {
	array_args := Base->New[2];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@joystick);

	Proxy->GetDllProxy()->CallFunction("sdl_joystick_sdl_joystick_num_balls", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_joystick_sdl_joystick_num_balls(VMContext& context) {
		SDL_Joystick* joystick = (SDL_Joystick*)APITools_GetIntValue(context, 1);
		const int return_value = SDL_JoystickNumBalls(joystick);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : NumHats() ~ Int {
	array_args := Base->New[2];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@joystick);

	Proxy->GetDllProxy()->CallFunction("sdl_joystick_sdl_joystick_num_hats", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_joystick_sdl_joystick_num_hats(VMContext& context) {
		SDL_Joystick* joystick = (SDL_Joystick*)APITools_GetIntValue(context, 1);
		const int return_value = SDL_JoystickNumHats(joystick);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : NumButtons() ~ Int {
	array_args := Base->New[2];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@joystick);

	Proxy->GetDllProxy()->CallFunction("sdl_joystick_sdl_joystick_num_buttons", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_joystick_sdl_joystick_num_buttons(VMContext& context) {
		SDL_Joystick* joystick = (SDL_Joystick*)APITools_GetIntValue(context, 1);
		const int return_value = SDL_JoystickNumButtons(joystick);
		APITools_SetIntValue(context, 0, return_value);
	}

---
function : Update() ~ Nil {
	array_args := Base->New[0];

	Proxy->GetDllProxy()->CallFunction("sdl_joystick_sdl_joystick_update", array_args);

}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_joystick_sdl_joystick_update(VMContext& context) {
		SDL_JoystickUpdate();
	}

---
method : public : EventState(state : Int) ~ Int {
	array_args := Base->New[2];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(state);

	Proxy->GetDllProxy()->CallFunction("sdl_joystick_sdl_joystick_event_state", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_joystick_sdl_joystick_event_state(VMContext& context) {
		const int state = APITools_GetIntValue(context, 1);
		const int return_value = SDL_JoystickEventState(state);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : GetAxis(axis : Int) ~ Int {
	array_args := Base->New[3];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@joystick);
	array_args[2] := IntHolder->New(axis);

	Proxy->GetDllProxy()->CallFunction("sdl_joystick_sdl_joystick_get_axis", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_joystick_sdl_joystick_get_axis(VMContext& context) {
		SDL_Joystick* joystick = (SDL_Joystick*)APITools_GetIntValue(context, 1);
		const int axis = APITools_GetIntValue(context, 2);
		const int return_value = SDL_JoystickGetAxis(joystick, axis);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : GetAxisInitialState(axis : Int, state : Int) ~ Bool {
	array_args := Base->New[4];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@joystick);
	array_args[2] := IntHolder->New(axis);
	array_args[3] := IntHolder->New(state);

	Proxy->GetDllProxy()->CallFunction("sdl_joystick_sdl_joystick_get_axis_initial_state", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get() = 0 ? false : true;
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_joystick_sdl_joystick_get_axis_initial_state(VMContext& context) {
		SDL_Joystick* joystick = (SDL_Joystick*)APITools_GetIntValue(context, 1);
		const int axis = APITools_GetIntValue(context, 2);
		const int state = APITools_GetIntValue(context, 3);
		const int return_value = SDL_JoystickGetAxisInitialState(joystick, axis, state);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : GetHat(hat : Int) ~ Int {
	array_args := Base->New[3];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@joystick);
	array_args[2] := IntHolder->New(hat);

	Proxy->GetDllProxy()->CallFunction("sdl_joystick_sdl_joystick_get_hat", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_joystick_sdl_joystick_get_hat(VMContext& context) {
		SDL_Joystick* joystick = (SDL_Joystick*)APITools_GetIntValue(context, 1);
		const int hat = APITools_GetIntValue(context, 2);
		const int return_value = SDL_JoystickGetHat(joystick, hat);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : GetBall(ball : Int, dx : Int, dy : Int) ~ Int {
	array_args := Base->New[5];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@joystick);
	array_args[2] := IntHolder->New(ball);
	array_args[3] := IntHolder->New(dx);
	array_args[4] := IntHolder->New(dy);

	Proxy->GetDllProxy()->CallFunction("sdl_joystick_sdl_joystick_get_ball", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_joystick_sdl_joystick_get_ball(VMContext& context) {
		SDL_Joystick* joystick = (SDL_Joystick*)APITools_GetIntValue(context, 1);
		const int ball = APITools_GetIntValue(context, 2);
		const int dx = APITools_GetIntValue(context, 3);
		const int dy = APITools_GetIntValue(context, 4);
		const int return_value = SDL_JoystickGetBall(joystick, ball, dx, dy);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : GetButton(button : Int) ~ Int {
	array_args := Base->New[3];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@joystick);
	array_args[2] := IntHolder->New(button);

	Proxy->GetDllProxy()->CallFunction("sdl_joystick_sdl_joystick_get_button", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_joystick_sdl_joystick_get_button(VMContext& context) {
		SDL_Joystick* joystick = (SDL_Joystick*)APITools_GetIntValue(context, 1);
		const int button = APITools_GetIntValue(context, 2);
		const int return_value = SDL_JoystickGetButton(joystick, button);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : Rumble(low_frequency_rumble : Int, high_frequency_rumble : Int, duration_ms : Int) ~ Int {
	array_args := Base->New[5];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@joystick);
	array_args[2] := IntHolder->New(low_frequency_rumble);
	array_args[3] := IntHolder->New(high_frequency_rumble);
	array_args[4] := IntHolder->New(duration_ms);

	Proxy->GetDllProxy()->CallFunction("sdl_joystick_sdl_joystick_rumble", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_joystick_sdl_joystick_rumble(VMContext& context) {
		SDL_Joystick* joystick = (SDL_Joystick*)APITools_GetIntValue(context, 1);
		const int low_frequency_rumble = APITools_GetIntValue(context, 2);
		const int high_frequency_rumble = APITools_GetIntValue(context, 3);
		const int duration_ms = APITools_GetIntValue(context, 4);
		const int return_value = SDL_JoystickRumble(joystick, low_frequency_rumble, high_frequency_rumble, duration_ms);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : RumbleTriggers(left_rumble : Int, right_rumble : Int, duration_ms : Int) ~ Int {
	array_args := Base->New[5];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@joystick);
	array_args[2] := IntHolder->New(left_rumble);
	array_args[3] := IntHolder->New(right_rumble);
	array_args[4] := IntHolder->New(duration_ms);

	Proxy->GetDllProxy()->CallFunction("sdl_joystick_sdl_joystick_rumble_triggers", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_joystick_sdl_joystick_rumble_triggers(VMContext& context) {
		SDL_Joystick* joystick = (SDL_Joystick*)APITools_GetIntValue(context, 1);
		const int left_rumble = APITools_GetIntValue(context, 2);
		const int right_rumble = APITools_GetIntValue(context, 3);
		const int duration_ms = APITools_GetIntValue(context, 4);
		const int return_value = SDL_JoystickRumbleTriggers(joystick, left_rumble, right_rumble, duration_ms);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : HasLED() ~ Bool {
	array_args := Base->New[2];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@joystick);

	Proxy->GetDllProxy()->CallFunction("sdl_joystick_sdl_joystick_hasled", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get() = 0 ? false : true;
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_joystick_sdl_joystick_hasled(VMContext& context) {
		SDL_Joystick* joystick = (SDL_Joystick*)APITools_GetIntValue(context, 1);
		const int return_value = SDL_JoystickHasLED(joystick);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : HasRumble() ~ Bool {
	array_args := Base->New[2];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@joystick);

	Proxy->GetDllProxy()->CallFunction("sdl_joystick_sdl_joystick_has_rumble", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get() = 0 ? false : true;
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_joystick_sdl_joystick_has_rumble(VMContext& context) {
		SDL_Joystick* joystick = (SDL_Joystick*)APITools_GetIntValue(context, 1);
		const int return_value = SDL_JoystickHasRumble(joystick);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : HasRumbleTriggers() ~ Bool {
	array_args := Base->New[2];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@joystick);

	Proxy->GetDllProxy()->CallFunction("sdl_joystick_sdl_joystick_has_rumble_triggers", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get() = 0 ? false : true;
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_joystick_sdl_joystick_has_rumble_triggers(VMContext& context) {
		SDL_Joystick* joystick = (SDL_Joystick*)APITools_GetIntValue(context, 1);
		const int return_value = SDL_JoystickHasRumbleTriggers(joystick);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : SetLED(red : Int, green : Int, blue : Int) ~ Int {
	array_args := Base->New[5];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@joystick);
	array_args[2] := IntHolder->New(red);
	array_args[3] := IntHolder->New(green);
	array_args[4] := IntHolder->New(blue);

	Proxy->GetDllProxy()->CallFunction("sdl_joystick_sdl_joystick_setled", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_joystick_sdl_joystick_setled(VMContext& context) {
		SDL_Joystick* joystick = (SDL_Joystick*)APITools_GetIntValue(context, 1);
		const int red = APITools_GetIntValue(context, 2);
		const int green = APITools_GetIntValue(context, 3);
		const int blue = APITools_GetIntValue(context, 4);
		const int return_value = SDL_JoystickSetLED(joystick, red, green, blue);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : SendEffect(data : Int, size : Int) ~ Int {
	array_args := Base->New[4];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@joystick);
	array_args[3] := IntHolder->New(size);

	Proxy->GetDllProxy()->CallFunction("sdl_joystick_sdl_joystick_send_effect", array_args);

	value := array_args[0]->As(IntHolder);
	return value->Get();
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_joystick_sdl_joystick_send_effect(VMContext& context) {
		SDL_Joystick* joystick = (SDL_Joystick*)APITools_GetIntValue(context, 1);
		const int size = APITools_GetIntValue(context, 3);
		const int return_value = SDL_JoystickSendEffect(joystick, data, size);
		APITools_SetIntValue(context, 0, return_value);
	}

---
method : public : Close() ~ Nil {
	array_args := Base->New[1];
	array_args[0] := IntHolder->New(@joystick);

	Proxy->GetDllProxy()->CallFunction("sdl_joystick_sdl_joystick_close", array_args);

}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_joystick_sdl_joystick_close(VMContext& context) {
		SDL_Joystick* joystick = (SDL_Joystick*)APITools_GetIntValue(context, 0);
		SDL_JoystickClose(joystick);
	}

---
method : public : CurrentPowerLevel() ~ JoystickPowerLevel {
	array_args := Base->New[2];
	array_args[0] := IntHolder->New();
	array_args[1] := IntHolder->New(@joystick);

	Proxy->GetDllProxy()->CallFunction("sdl_joystick_sdl_joystick_current_power_level", array_args);

	return array_args[0];
}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void sdl_joystick_sdl_joystick_current_power_level(VMContext& context) {
		SDL_Joystick* joystick = (SDL_Joystick*)APITools_GetIntValue(context, 1);
		const size* return_value = SDL_JoystickCurrentPowerLevel(joystick);
		APITools_SetObjectValue(context, 0, (CAST*)return_value);
	}

---

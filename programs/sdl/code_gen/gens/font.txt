method : public : LinkedVersion() ~ version {
        array_args := Base->New[1];
        array_args[0] := IntHolder->New();

        Proxy->GetDllProxy()->CallFunction("sdl_font_linked_version", array_args);

        return array_args[0];
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_font_linked_version(VMContext& context) {
                const size* return_value = TTF_Linked_Version();
                APITools_SetObjectValue(context, 0, (CAST*)return_value);
        }

---
method : public : ByteSwappedUNICODE(swapped : Int) ~ Nil {
        array_args := Base->New[1];
        array_args[0] := IntHolder->New(swapped);

        Proxy->GetDllProxy()->CallFunction("sdl_font_byte_swappedunicode", array_args);

}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_font_byte_swappedunicode(VMContext& context) {
                const int swapped = APITools_GetIntValue(context, 0);
                TTF_ByteSwappedUNICODE(swapped);
        }

---
method : public : Init() ~ Int {
        array_args := Base->New[1];
        array_args[0] := IntHolder->New();

        Proxy->GetDllProxy()->CallFunction("sdl_font_init", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_font_init(VMContext& context) {
                const int return_value = TTF_Init();
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : Open(file : String, ptsize : Int) ~ Font {
        array_args := Base->New[3];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(file);
        array_args[2] := IntHolder->New(ptsize);

        Proxy->GetDllProxy()->CallFunction("sdl_font_open", array_args);

        return array_args[0];
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_font_open(VMContext& context) {
                const wstring file = APITools_GetStringValue(context, 1);
                const int ptsize = APITools_GetIntValue(context, 2);
                const size* return_value = TTF_OpenFont(file, ptsize);
                APITools_SetObjectValue(context, 0, (CAST*)return_value);
        }

---
method : public : OpenRW(src : RWops, freesrc : Int, ptsize : Int) ~ Font {
        array_args := Base->New[4];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(src);
        array_args[2] := IntHolder->New(freesrc);
        array_args[3] := IntHolder->New(ptsize);

        Proxy->GetDllProxy()->CallFunction("sdl_font_openrw", array_args);

        return array_args[0];
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_font_openrw(VMContext& context) {
                const size* src = (size_t*)APITools_GetObjectValue(context, 1);
                const int freesrc = APITools_GetIntValue(context, 2);
                const int ptsize = APITools_GetIntValue(context, 3);
                const size* return_value = TTF_OpenFontRW(src, freesrc, ptsize);
                APITools_SetObjectValue(context, 0, (CAST*)return_value);
        }

---
method : public : GetStyle() ~ Int {
        array_args := Base->New[2];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@font);

        Proxy->GetDllProxy()->CallFunction("sdl_font_get_style", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_font_get_style(VMContext& context) {
                SDL_Font* font = (Font*)APITools_GetIntValue(context, 1);
                const int return_value = TTF_GetFontStyle(font);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : GetOutline() ~ Int {
        array_args := Base->New[2];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@font);

        Proxy->GetDllProxy()->CallFunction("sdl_font_get_outline", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_font_get_outline(VMContext& context) {
                SDL_Font* font = (Font*)APITools_GetIntValue(context, 1);
                const int return_value = TTF_GetFontOutline(font);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : GetHinting() ~ Int {
        array_args := Base->New[2];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@font);

        Proxy->GetDllProxy()->CallFunction("sdl_font_get_hinting", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_font_get_hinting(VMContext& context) {
                SDL_Font* font = (Font*)APITools_GetIntValue(context, 1);
                const int return_value = TTF_GetFontHinting(font);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : Height() ~ Int {
        array_args := Base->New[2];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@font);

        Proxy->GetDllProxy()->CallFunction("sdl_font_height", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_font_height(VMContext& context) {
                SDL_Font* font = (Font*)APITools_GetIntValue(context, 1);
                const int return_value = TTF_FontHeight(font);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : Ascent() ~ Int {
        array_args := Base->New[2];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@font);

        Proxy->GetDllProxy()->CallFunction("sdl_font_ascent", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_font_ascent(VMContext& context) {
                SDL_Font* font = (Font*)APITools_GetIntValue(context, 1);
                const int return_value = TTF_FontAscent(font);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : Descent() ~ Int {
        array_args := Base->New[2];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@font);

        Proxy->GetDllProxy()->CallFunction("sdl_font_descent", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_font_descent(VMContext& context) {
                SDL_Font* font = (Font*)APITools_GetIntValue(context, 1);
                const int return_value = TTF_FontDescent(font);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : LineSkip() ~ Int {
        array_args := Base->New[2];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@font);

        Proxy->GetDllProxy()->CallFunction("sdl_font_line_skip", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_font_line_skip(VMContext& context) {
                SDL_Font* font = (Font*)APITools_GetIntValue(context, 1);
                const int return_value = TTF_FontLineSkip(font);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : GetKerning() ~ Int {
        array_args := Base->New[2];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@font);

        Proxy->GetDllProxy()->CallFunction("sdl_font_get_kerning", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_font_get_kerning(VMContext& context) {
                SDL_Font* font = (Font*)APITools_GetIntValue(context, 1);
                const int return_value = TTF_GetFontKerning(font);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : Faces() ~ long {
        array_args := Base->New[2];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@font);

        Proxy->GetDllProxy()->CallFunction("sdl_font_faces", array_args);

        return array_args[0];
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_font_faces(VMContext& context) {
                SDL_Font* font = (Font*)APITools_GetIntValue(context, 1);
                const size* return_value = TTF_FontFaces(font);
                APITools_SetObjectValue(context, 0, (CAST*)return_value);
        }

---
method : public : FaceIsFixedWidth() ~ Int {
        array_args := Base->New[2];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@font);

        Proxy->GetDllProxy()->CallFunction("sdl_font_face_is_fixed_width", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_font_face_is_fixed_width(VMContext& context) {
                SDL_Font* font = (Font*)APITools_GetIntValue(context, 1);
                const int return_value = TTF_FontFaceIsFixedWidth(font);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : FaceStyleName() ~ String {
        array_args := Base->New[2];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@font);

        Proxy->GetDllProxy()->CallFunction("sdl_font_face_style_name", array_args);

        return array_args[0];
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_font_face_style_name(VMContext& context) {
                SDL_Font* font = (Font*)APITools_GetIntValue(context, 1);
                const wstring return_value = TTF_FontFaceStyleName(font);
                APITools_SetStringValue(context, 0, return_value);
        }

---
method : public : GlyphIsProvided(ch : Int) ~ Int {
        array_args := Base->New[3];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@font);
        array_args[2] := IntHolder->New(ch);

        Proxy->GetDllProxy()->CallFunction("sdl_font_glyph_is_provided", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_font_glyph_is_provided(VMContext& context) {
                SDL_Font* font = (Font*)APITools_GetIntValue(context, 1);
                const int ch = APITools_GetIntValue(context, 2);
                const int return_value = TTF_GlyphIsProvided(font, ch);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : GlyphMetrics(ch : Int, minx : Int, maxx : Int, miny : Int, maxy : Int, advance : Int) ~ Int {
        array_args := Base->New[8];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@font);
        array_args[2] := IntHolder->New(ch);
        array_args[3] := IntHolder->New(minx);
        array_args[4] := IntHolder->New(maxx);
        array_args[5] := IntHolder->New(miny);
        array_args[6] := IntHolder->New(maxy);
        array_args[7] := IntHolder->New(advance);

        Proxy->GetDllProxy()->CallFunction("sdl_font_glyph_metrics", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_font_glyph_metrics(VMContext& context) {
                SDL_Font* font = (Font*)APITools_GetIntValue(context, 1);
                const int ch = APITools_GetIntValue(context, 2);
                const int minx = APITools_GetIntValue(context, 3);
                const int maxx = APITools_GetIntValue(context, 4);
                const int miny = APITools_GetIntValue(context, 5);
                const int maxy = APITools_GetIntValue(context, 6);
                const int advance = APITools_GetIntValue(context, 7);
                const int return_value = TTF_GlyphMetrics(font, ch, minx, maxx, miny, maxy, advance);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : SizeText(text : String, w : Int, h : Int) ~ Int {
        array_args := Base->New[5];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@font);
        array_args[2] := text;
        array_args[3] := IntHolder->New(w);
        array_args[4] := IntHolder->New(h);

        Proxy->GetDllProxy()->CallFunction("sdl_font_size_text", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_font_size_text(VMContext& context) {
                SDL_Font* font = (Font*)APITools_GetIntValue(context, 1);
                const wstring text = APITools_GetStringValue(context, 2);
                const int w = APITools_GetIntValue(context, 3);
                const int h = APITools_GetIntValue(context, 4);
                const int return_value = TTF_SizeText(font, text, w, h);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : SizeUNICODE(text : Int, w : Int, h : Int) ~ Int {
        array_args := Base->New[5];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@font);
        array_args[2] := IntHolder->New(text);
        array_args[3] := IntHolder->New(w);
        array_args[4] := IntHolder->New(h);

        Proxy->GetDllProxy()->CallFunction("sdl_font_sizeunicode", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_font_sizeunicode(VMContext& context) {
                SDL_Font* font = (Font*)APITools_GetIntValue(context, 1);
                const int text = APITools_GetIntValue(context, 2);
                const int w = APITools_GetIntValue(context, 3);
                const int h = APITools_GetIntValue(context, 4);
                const int return_value = TTF_SizeUNICODE(font, text, w, h);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : RenderTextSolid(text : String, fg : Color) ~ Surface {
        array_args := Base->New[4];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@font);
        array_args[2] := text;
        array_args[3] := fg;

        Proxy->GetDllProxy()->CallFunction("sdl_font_render_text_solid", array_args);

        return array_args[0];
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_font_render_text_solid(VMContext& context) {
                SDL_Font* font = (Font*)APITools_GetIntValue(context, 1);
                const wstring text = APITools_GetStringValue(context, 2);
                const size* fg = (size_t*)APITools_GetObjectValue(context, 3);
                const size* return_value = TTF_RenderText_Solid(font, text, fg);
                APITools_SetObjectValue(context, 0, (CAST*)return_value);
        }

---
method : public : RenderUNICODESolid(text : Int, fg : Color) ~ Surface {
        array_args := Base->New[4];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@font);
        array_args[2] := IntHolder->New(text);
        array_args[3] := fg;

        Proxy->GetDllProxy()->CallFunction("sdl_font_renderunicode_solid", array_args);

        return array_args[0];
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_font_renderunicode_solid(VMContext& context) {
                SDL_Font* font = (Font*)APITools_GetIntValue(context, 1);
                const int text = APITools_GetIntValue(context, 2);
                const size* fg = (size_t*)APITools_GetObjectValue(context, 3);
                const size* return_value = TTF_RenderUNICODE_Solid(font, text, fg);
                APITools_SetObjectValue(context, 0, (CAST*)return_value);
        }

---
method : public : RenderGlyphSolid(ch : Int, fg : Color) ~ Surface {
        array_args := Base->New[4];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@font);
        array_args[2] := IntHolder->New(ch);
        array_args[3] := fg;

        Proxy->GetDllProxy()->CallFunction("sdl_font_render_glyph_solid", array_args);

        return array_args[0];
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_font_render_glyph_solid(VMContext& context) {
                SDL_Font* font = (Font*)APITools_GetIntValue(context, 1);
                const int ch = APITools_GetIntValue(context, 2);
                const size* fg = (size_t*)APITools_GetObjectValue(context, 3);
                const size* return_value = TTF_RenderGlyph_Solid(font, ch, fg);
                APITools_SetObjectValue(context, 0, (CAST*)return_value);
        }

---
method : public : RenderTextShaded(text : String, fg : Color, bg : Color) ~ Surface {
        array_args := Base->New[5];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@font);
        array_args[2] := text;
        array_args[3] := fg;
        array_args[4] := bg;

        Proxy->GetDllProxy()->CallFunction("sdl_font_render_text_shaded", array_args);

        return array_args[0];
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_font_render_text_shaded(VMContext& context) {
                SDL_Font* font = (Font*)APITools_GetIntValue(context, 1);
                const wstring text = APITools_GetStringValue(context, 2);
                const size* fg = (size_t*)APITools_GetObjectValue(context, 3);
                const size* bg = (size_t*)APITools_GetObjectValue(context, 4);
                const size* return_value = TTF_RenderText_Shaded(font, text, fg, bg);
                APITools_SetObjectValue(context, 0, (CAST*)return_value);
        }

---
method : public : RenderUNICODEShaded(text : Int, fg : Color, bg : Color) ~ Surface {
        array_args := Base->New[5];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@font);
        array_args[2] := IntHolder->New(text);
        array_args[3] := fg;
        array_args[4] := bg;

        Proxy->GetDllProxy()->CallFunction("sdl_font_renderunicode_shaded", array_args);

        return array_args[0];
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_font_renderunicode_shaded(VMContext& context) {
                SDL_Font* font = (Font*)APITools_GetIntValue(context, 1);
                const int text = APITools_GetIntValue(context, 2);
                const size* fg = (size_t*)APITools_GetObjectValue(context, 3);
                const size* bg = (size_t*)APITools_GetObjectValue(context, 4);
                const size* return_value = TTF_RenderUNICODE_Shaded(font, text, fg, bg);
                APITools_SetObjectValue(context, 0, (CAST*)return_value);
        }

---
method : public : RenderGlyphShaded(ch : Int, fg : Color, bg : Color) ~ Surface {
        array_args := Base->New[5];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@font);
        array_args[2] := IntHolder->New(ch);
        array_args[3] := fg;
        array_args[4] := bg;

        Proxy->GetDllProxy()->CallFunction("sdl_font_render_glyph_shaded", array_args);

        return array_args[0];
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_font_render_glyph_shaded(VMContext& context) {
                SDL_Font* font = (Font*)APITools_GetIntValue(context, 1);
                const int ch = APITools_GetIntValue(context, 2);
                const size* fg = (size_t*)APITools_GetObjectValue(context, 3);
                const size* bg = (size_t*)APITools_GetObjectValue(context, 4);
                const size* return_value = TTF_RenderGlyph_Shaded(font, ch, fg, bg);
                APITools_SetObjectValue(context, 0, (CAST*)return_value);
        }

---
method : public : RenderTextBlended(text : String, fg : Color) ~ Surface {
        array_args := Base->New[4];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@font);
        array_args[2] := text;
        array_args[3] := fg;

        Proxy->GetDllProxy()->CallFunction("sdl_font_render_text_blended", array_args);

        return array_args[0];
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_font_render_text_blended(VMContext& context) {
                SDL_Font* font = (Font*)APITools_GetIntValue(context, 1);
                const wstring text = APITools_GetStringValue(context, 2);
                const size* fg = (size_t*)APITools_GetObjectValue(context, 3);
                const size* return_value = TTF_RenderText_Blended(font, text, fg);
                APITools_SetObjectValue(context, 0, (CAST*)return_value);
        }

---
method : public : RenderUNICODEBlended(text : Int, fg : Color) ~ Surface {
        array_args := Base->New[4];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@font);
        array_args[2] := IntHolder->New(text);
        array_args[3] := fg;

        Proxy->GetDllProxy()->CallFunction("sdl_font_renderunicode_blended", array_args);

        return array_args[0];
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_font_renderunicode_blended(VMContext& context) {
                SDL_Font* font = (Font*)APITools_GetIntValue(context, 1);
                const int text = APITools_GetIntValue(context, 2);
                const size* fg = (size_t*)APITools_GetObjectValue(context, 3);
                const size* return_value = TTF_RenderUNICODE_Blended(font, text, fg);
                APITools_SetObjectValue(context, 0, (CAST*)return_value);
        }

---
method : public : RenderTextBlended_Wrapped(text : String, fg : Color, wrapLength : Int) ~ Surface {
        array_args := Base->New[5];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@font);
        array_args[2] := text;
        array_args[3] := fg;
        array_args[4] := IntHolder->New(wrapLength);

        Proxy->GetDllProxy()->CallFunction("sdl_font_render_text_blended_wrapped", array_args);

        return array_args[0];
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_font_render_text_blended_wrapped(VMContext& context) {
                SDL_Font* font = (Font*)APITools_GetIntValue(context, 1);
                const wstring text = APITools_GetStringValue(context, 2);
                const size* fg = (size_t*)APITools_GetObjectValue(context, 3);
                const int wrapLength = APITools_GetIntValue(context, 4);
                const size* return_value = TTF_RenderText_Blended_Wrapped(font, text, fg, wrapLength);
                APITools_SetObjectValue(context, 0, (CAST*)return_value);
        }

---
method : public : RenderUNICODEBlended_Wrapped(text : Int, fg : Color, wrapLength : Int) ~ Surface {
        array_args := Base->New[5];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@font);
        array_args[2] := IntHolder->New(text);
        array_args[3] := fg;
        array_args[4] := IntHolder->New(wrapLength);

        Proxy->GetDllProxy()->CallFunction("sdl_font_renderunicode_blended_wrapped", array_args);

        return array_args[0];
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_font_renderunicode_blended_wrapped(VMContext& context) {
                SDL_Font* font = (Font*)APITools_GetIntValue(context, 1);
                const int text = APITools_GetIntValue(context, 2);
                const size* fg = (size_t*)APITools_GetObjectValue(context, 3);
                const int wrapLength = APITools_GetIntValue(context, 4);
                const size* return_value = TTF_RenderUNICODE_Blended_Wrapped(font, text, fg, wrapLength);
                APITools_SetObjectValue(context, 0, (CAST*)return_value);
        }

---
method : public : RenderGlyphBlended(ch : Int, fg : Color) ~ Surface {
        array_args := Base->New[4];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@font);
        array_args[2] := IntHolder->New(ch);
        array_args[3] := fg;

        Proxy->GetDllProxy()->CallFunction("sdl_font_render_glyph_blended", array_args);

        return array_args[0];
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_font_render_glyph_blended(VMContext& context) {
                SDL_Font* font = (Font*)APITools_GetIntValue(context, 1);
                const int ch = APITools_GetIntValue(context, 2);
                const size* fg = (size_t*)APITools_GetObjectValue(context, 3);
                const size* return_value = TTF_RenderGlyph_Blended(font, ch, fg);
                APITools_SetObjectValue(context, 0, (CAST*)return_value);
        }

---
method : public : Close() ~ Nil {
        array_args := Base->New[1];
        array_args[0] := IntHolder->New(@font);

        Proxy->GetDllProxy()->CallFunction("sdl_font_close", array_args);

}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_font_close(VMContext& context) {
                SDL_Font* font = (Font*)APITools_GetIntValue(context, 0);
                TTF_CloseFont(font);
        }

---
method : public : Quit() ~ Nil {
        array_args := Base->New[0];

        Proxy->GetDllProxy()->CallFunction("sdl_font_quit", array_args);

}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_font_quit(VMContext& context) {
                TTF_Quit();
        }

---
method : public : WasInit() ~ Int {
        array_args := Base->New[1];
        array_args[0] := IntHolder->New();

        Proxy->GetDllProxy()->CallFunction("sdl_font_was_init", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_font_was_init(VMContext& context) {
                const int return_value = TTF_WasInit();
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : GetName(format : Int) ~ String {
        array_args := Base->New[2];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(format);

        Proxy->GetDllProxy()->CallFunction("sdl_pixelformat_get_name", array_args);

        return array_args[0];
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_pixelformat_get_name(VMContext& context) {
                const int format = APITools_GetIntValue(context, 1);
                const wstring return_value = SDL_GetPixelFormatName(format);
                APITools_SetStringValue(context, 0, return_value);
        }

---
method : public : EnumToMasks(format : Int, bpp : Int, Rmask : Int, Gmask : Int, Bmask : Int, Amask : Int) ~ Bool {
        array_args := Base->New[7];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(format);
        array_args[2] := IntHolder->New(bpp);
        array_args[3] := IntHolder->New(Rmask);
        array_args[4] := IntHolder->New(Gmask);
        array_args[5] := IntHolder->New(Bmask);
        array_args[6] := IntHolder->New(Amask);

        Proxy->GetDllProxy()->CallFunction("sdl_pixelformat_enum_to_masks", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get() = 0 ? false : true;
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_pixelformat_enum_to_masks(VMContext& context) {
                const int format = APITools_GetIntValue(context, 1);
                const int bpp = APITools_GetIntValue(context, 2);
                const int Rmask = APITools_GetIntValue(context, 3);
                const int Gmask = APITools_GetIntValue(context, 4);
                const int Bmask = APITools_GetIntValue(context, 5);
                const int Amask = APITools_GetIntValue(context, 6);
                const int return_value = SDL_PixelFormatEnumToMasks(format, bpp, Rmask, Gmask, Bmask, Amask);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : MasksToEnum(bpp : Int, Rmask : Int, Gmask : Int, Bmask : Int, Amask : Int) ~ Int {
        array_args := Base->New[6];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(bpp);
        array_args[2] := IntHolder->New(Rmask);
        array_args[3] := IntHolder->New(Gmask);
        array_args[4] := IntHolder->New(Bmask);
        array_args[5] := IntHolder->New(Amask);

        Proxy->GetDllProxy()->CallFunction("sdl_pixelformat_masks_to_enum", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_pixelformat_masks_to_enum(VMContext& context) {
                const int bpp = APITools_GetIntValue(context, 1);
                const int Rmask = APITools_GetIntValue(context, 2);
                const int Gmask = APITools_GetIntValue(context, 3);
                const int Bmask = APITools_GetIntValue(context, 4);
                const int Amask = APITools_GetIntValue(context, 5);
                const int return_value = SDL_MasksToPixelFormatEnum(bpp, Rmask, Gmask, Bmask, Amask);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : AllocFormat(pixel_format : Int) ~ PixelFormat {
        array_args := Base->New[2];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(pixel_format);

        Proxy->GetDllProxy()->CallFunction("sdl_pixelformat_alloc_format", array_args);

        return array_args[0];
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_pixelformat_alloc_format(VMContext& context) {
                const int pixel_format = APITools_GetIntValue(context, 1);
                const long* return_value = SDL_AllocFormat(pixel_format);
                APITools_SetObjectValue(context, 0, (CAST*)return_value);
        }

---
method : public : FreeFormat() ~ Nil {
        array_args := Base->New[1];
        array_args[0] := IntHolder->New(@format);

        Proxy->GetDllProxy()->CallFunction("sdl_pixelformat_free_format", array_args);

}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_pixelformat_free_format(VMContext& context) {
                SDL_PixelFormat* format = (PixelFormat*)APITools_GetIntValue(context, 0);
                SDL_FreeFormat(format);
        }

---
method : public : AllocPalette(ncolors : Int) ~ Palette {
        array_args := Base->New[2];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(ncolors);

        Proxy->GetDllProxy()->CallFunction("sdl_pixelformat_alloc_palette", array_args);

        return array_args[0];
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_pixelformat_alloc_palette(VMContext& context) {
                const int ncolors = APITools_GetIntValue(context, 1);
                const long* return_value = SDL_AllocPalette(ncolors);
                APITools_SetObjectValue(context, 0, (CAST*)return_value);
        }

---
method : public : SetPalette(palette : Palette) ~ Int {
        array_args := Base->New[3];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@format);
        array_args[2] := palette;

        Proxy->GetDllProxy()->CallFunction("sdl_pixelformat_set_palette", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_pixelformat_set_palette(VMContext& context) {
                SDL_PixelFormat* format = (PixelFormat*)APITools_GetIntValue(context, 1);
                const long* palette = (size_t*)APITools_GetObjectValue(context, 2);
                const int return_value = SDL_SetPixelFormatPalette(format, palette);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : SetPaletteColors(palette : Palette, colors : Color, firstcolor : Int, ncolors : Int) ~ Int {
        array_args := Base->New[5];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(palette);
        array_args[2] := colors;
        array_args[3] := IntHolder->New(firstcolor);
        array_args[4] := IntHolder->New(ncolors);

        Proxy->GetDllProxy()->CallFunction("sdl_pixelformat_set_palette_colors", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_pixelformat_set_palette_colors(VMContext& context) {
                const long* palette = (size_t*)APITools_GetObjectValue(context, 1);
                const long* colors = (size_t*)APITools_GetObjectValue(context, 2);
                const int firstcolor = APITools_GetIntValue(context, 3);
                const int ncolors = APITools_GetIntValue(context, 4);
                const int return_value = SDL_SetPaletteColors(palette, colors, firstcolor, ncolors);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : FreePalette(palette : Palette) ~ Nil {
        array_args := Base->New[1];
        array_args[0] := IntHolder->New(palette);

        Proxy->GetDllProxy()->CallFunction("sdl_pixelformat_free_palette", array_args);

}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_pixelformat_free_palette(VMContext& context) {
                const long* palette = (size_t*)APITools_GetObjectValue(context, 0);
                SDL_FreePalette(palette);
        }

---
method : public : MapRGB(r : Int, g : Int, b : Int) ~ Int {
        array_args := Base->New[5];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@format);
        array_args[2] := IntHolder->New(r);
        array_args[3] := IntHolder->New(g);
        array_args[4] := IntHolder->New(b);

        Proxy->GetDllProxy()->CallFunction("sdl_pixelformat_maprgb", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_pixelformat_maprgb(VMContext& context) {
                SDL_PixelFormat* format = (PixelFormat*)APITools_GetIntValue(context, 1);
                const int r = APITools_GetIntValue(context, 2);
                const int g = APITools_GetIntValue(context, 3);
                const int b = APITools_GetIntValue(context, 4);
                const int return_value = SDL_MapRGB(format, r, g, b);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : MapRGBA(r : Int, g : Int, b : Int, a : Int) ~ Int {
        array_args := Base->New[6];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@format);
        array_args[2] := IntHolder->New(r);
        array_args[3] := IntHolder->New(g);
        array_args[4] := IntHolder->New(b);
        array_args[5] := IntHolder->New(a);

        Proxy->GetDllProxy()->CallFunction("sdl_pixelformat_maprgba", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_pixelformat_maprgba(VMContext& context) {
                SDL_PixelFormat* format = (PixelFormat*)APITools_GetIntValue(context, 1);
                const int r = APITools_GetIntValue(context, 2);
                const int g = APITools_GetIntValue(context, 3);
                const int b = APITools_GetIntValue(context, 4);
                const int a = APITools_GetIntValue(context, 5);
                const int return_value = SDL_MapRGBA(format, r, g, b, a);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : GetRGB(pixel : Int, format : PixelFormat, r : Int, g : Int, b : Int) ~ Nil {
        array_args := Base->New[5];
        array_args[0] := IntHolder->New(pixel);
        array_args[1] := format;
        array_args[2] := IntHolder->New(r);
        array_args[3] := IntHolder->New(g);
        array_args[4] := IntHolder->New(b);

        Proxy->GetDllProxy()->CallFunction("sdl_pixelformat_getrgb", array_args);

}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_pixelformat_getrgb(VMContext& context) {
                const int pixel = APITools_GetIntValue(context, 0);
                const long* format = (size_t*)APITools_GetObjectValue(context, 1);
                const int r = APITools_GetIntValue(context, 2);
                const int g = APITools_GetIntValue(context, 3);
                const int b = APITools_GetIntValue(context, 4);
                SDL_GetRGB(pixel, format, r, g, b);
        }

---
method : public : GetRGBA(pixel : Int, format : PixelFormat, r : Int, g : Int, b : Int, a : Int) ~ Nil {
        array_args := Base->New[6];
        array_args[0] := IntHolder->New(pixel);
        array_args[1] := format;
        array_args[2] := IntHolder->New(r);
        array_args[3] := IntHolder->New(g);
        array_args[4] := IntHolder->New(b);
        array_args[5] := IntHolder->New(a);

        Proxy->GetDllProxy()->CallFunction("sdl_pixelformat_getrgba", array_args);

}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_pixelformat_getrgba(VMContext& context) {
                const int pixel = APITools_GetIntValue(context, 0);
                const long* format = (size_t*)APITools_GetObjectValue(context, 1);
                const int r = APITools_GetIntValue(context, 2);
                const int g = APITools_GetIntValue(context, 3);
                const int b = APITools_GetIntValue(context, 4);
                const int a = APITools_GetIntValue(context, 5);
                SDL_GetRGBA(pixel, format, r, g, b, a);
        }

---
method : public : CalculateGammaRamp(gamma : float, ramp : Int) ~ Nil {
        array_args := Base->New[2];
        array_args[0] := IntHolder->New(gamma);
        array_args[1] := IntHolder->New(ramp);

        Proxy->GetDllProxy()->CallFunction("sdl_pixelformat_calculate_gamma_ramp", array_args);

}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_pixelformat_calculate_gamma_ramp(VMContext& context) {
                const long* gamma = (size_t*)APITools_GetObjectValue(context, 0);
                const int ramp = APITools_GetIntValue(context, 1);
                SDL_CalculateGammaRamp(gamma, ramp);
        }

---
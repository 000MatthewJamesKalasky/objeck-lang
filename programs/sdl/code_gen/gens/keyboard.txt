method : public : GetFocus() ~ Window {
        array_args := Base->New[1];
        array_args[0] := IntHolder->New();

        Proxy->GetDllProxy()->CallFunction("sdl_keyboard_get_focus", array_args);

        return array_args[0];
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_keyboard_get_focus(VMContext& context) {
                const size* return_value = SDL_GetKeyboardFocus();
                APITools_SetObjectValue(context, 0, (CAST*)return_value);
        }

---
method : public : GetState(numkeys : Int) ~ Int {
        array_args := Base->New[2];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(numkeys);

        Proxy->GetDllProxy()->CallFunction("sdl_keyboard_get_state", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_keyboard_get_state(VMContext& context) {
                const int numkeys = APITools_GetIntValue(context, 1);
                const int return_value = SDL_GetKeyboardState(numkeys);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : GetModState() ~ Keymod {
        array_args := Base->New[1];
        array_args[0] := IntHolder->New();

        Proxy->GetDllProxy()->CallFunction("sdl_keyboard_get_mod_state", array_args);

        return array_args[0];
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_keyboard_get_mod_state(VMContext& context) {
                const size* return_value = SDL_GetModState();
                APITools_SetObjectValue(context, 0, (CAST*)return_value);
        }

---
method : public : SetModState(modstate : Keymod) ~ Nil {
        array_args := Base->New[1];
        array_args[0] := IntHolder->New(modstate);

        Proxy->GetDllProxy()->CallFunction("sdl_keyboard_set_mod_state", array_args);

}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_keyboard_set_mod_state(VMContext& context) {
                const size* modstate = (size_t*)APITools_GetObjectValue(context, 0);
                SDL_SetModState(modstate);
        }

---
method : public : GetKeyFromScancode(scancode : Scancode) ~ Keycode {
        array_args := Base->New[2];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(scancode);

        Proxy->GetDllProxy()->CallFunction("sdl_keyboard_get_key_from_scancode", array_args);

        return array_args[0];
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_keyboard_get_key_from_scancode(VMContext& context) {
                const size* scancode = (size_t*)APITools_GetObjectValue(context, 1);
                const size* return_value = SDL_GetKeyFromScancode(scancode);
                APITools_SetObjectValue(context, 0, (CAST*)return_value);
        }

---
method : public : GetScancodeFromKey(key : Keycode) ~ Scancode {
        array_args := Base->New[2];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(key);

        Proxy->GetDllProxy()->CallFunction("sdl_keyboard_get_scancode_from_key", array_args);

        return array_args[0];
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_keyboard_get_scancode_from_key(VMContext& context) {
                const size* key = (size_t*)APITools_GetObjectValue(context, 1);
                const size* return_value = SDL_GetScancodeFromKey(key);
                APITools_SetObjectValue(context, 0, (CAST*)return_value);
        }

---
method : public : GetScancodeName(scancode : Scancode) ~ String {
        array_args := Base->New[2];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(scancode);

        Proxy->GetDllProxy()->CallFunction("sdl_keyboard_get_scancode_name", array_args);

        return array_args[0];
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_keyboard_get_scancode_name(VMContext& context) {
                const size* scancode = (size_t*)APITools_GetObjectValue(context, 1);
                const wstring return_value = SDL_GetScancodeName(scancode);
                APITools_SetStringValue(context, 0, return_value);
        }

---
method : public : GetScancodeFromName(name : String) ~ Scancode {
        array_args := Base->New[2];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(name);

        Proxy->GetDllProxy()->CallFunction("sdl_keyboard_get_scancode_from_name", array_args);

        return array_args[0];
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_keyboard_get_scancode_from_name(VMContext& context) {
                const wstring name = APITools_GetStringValue(context, 1);
                const size* return_value = SDL_GetScancodeFromName(name);
                APITools_SetObjectValue(context, 0, (CAST*)return_value);
        }

---
method : public : GetKeyName(key : Keycode) ~ String {
        array_args := Base->New[2];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(key);

        Proxy->GetDllProxy()->CallFunction("sdl_keyboard_get_key_name", array_args);

        return array_args[0];
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_keyboard_get_key_name(VMContext& context) {
                const size* key = (size_t*)APITools_GetObjectValue(context, 1);
                const wstring return_value = SDL_GetKeyName(key);
                APITools_SetStringValue(context, 0, return_value);
        }

---
method : public : GetKeyFromName(name : String) ~ Keycode {
        array_args := Base->New[2];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(name);

        Proxy->GetDllProxy()->CallFunction("sdl_keyboard_get_key_from_name", array_args);

        return array_args[0];
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_keyboard_get_key_from_name(VMContext& context) {
                const wstring name = APITools_GetStringValue(context, 1);
                const size* return_value = SDL_GetKeyFromName(name);
                APITools_SetObjectValue(context, 0, (CAST*)return_value);
        }

---
method : public : StartTextInput() ~ Nil {
        array_args := Base->New[0];

        Proxy->GetDllProxy()->CallFunction("sdl_keyboard_start_text_input", array_args);

}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_keyboard_start_text_input(VMContext& context) {
                SDL_StartTextInput();
        }

---
method : public : IsTextInputActive() ~ Bool {
        array_args := Base->New[1];
        array_args[0] := IntHolder->New();

        Proxy->GetDllProxy()->CallFunction("sdl_keyboard_is_text_input_active", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get() = 0 ? false : true;
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_keyboard_is_text_input_active(VMContext& context) {
                const int return_value = SDL_IsTextInputActive();
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : StopTextInput() ~ Nil {
        array_args := Base->New[0];

        Proxy->GetDllProxy()->CallFunction("sdl_keyboard_stop_text_input", array_args);

}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_keyboard_stop_text_input(VMContext& context) {
                SDL_StopTextInput();
        }

---
method : public : SetTextInputRect(rect : Rect) ~ Nil {
        array_args := Base->New[1];
        array_args[0] := IntHolder->New(rect);

        Proxy->GetDllProxy()->CallFunction("sdl_keyboard_set_text_input_rect", array_args);

}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_keyboard_set_text_input_rect(VMContext& context) {
                const size* rect = (size_t*)APITools_GetObjectValue(context, 0);
                SDL_SetTextInputRect(rect);
        }

---
method : public : HasScreenSupport() ~ Bool {
        array_args := Base->New[1];
        array_args[0] := IntHolder->New();

        Proxy->GetDllProxy()->CallFunction("sdl_keyboard_has_screen_support", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get() = 0 ? false : true;
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_keyboard_has_screen_support(VMContext& context) {
                const int return_value = SDL_HasScreenKeyboardSupport();
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : IsScreenShown(window : Window) ~ Bool {
        array_args := Base->New[2];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(window);

        Proxy->GetDllProxy()->CallFunction("sdl_keyboard_is_screen_shown", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get() = 0 ? false : true;
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_keyboard_is_screen_shown(VMContext& context) {
                const size* window = (size_t*)APITools_GetObjectValue(context, 1);
                const int return_value = SDL_IsScreenKeyboardShown(window);
                APITools_SetIntValue(context, 0, return_value);
        }

---
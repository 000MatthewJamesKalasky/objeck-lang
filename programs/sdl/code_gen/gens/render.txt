method : public : GetNumRenderDrivers() ~ Int {
        array_args := Base->New[1];
        array_args[0] := IntHolder->New();

        @lib_proxy := Proxy->GetDllProxy();
        @lib_proxy->CallFunction("sdl_renderer_get_num_render_drivers", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_renderer_get_num_render_drivers(VMContext& context) {
                const int return_value = SDL_GetNumRenderDrivers();
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : GetRenderDriverInfo(index : Int, info : RendererInfo) ~ Int {
        array_args := Base->New[3];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(index);
        array_args[2] := info;

        @lib_proxy := Proxy->GetDllProxy();
        @lib_proxy->CallFunction("sdl_renderer_get_render_driver_info", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_renderer_get_render_driver_info(VMContext& context) {
                const int index = APITools_GetIntValue(context, 1);
                const long* info = (long*)APITools_GetObjectValue(context, 2);
                const int return_value = SDL_GetRenderDriverInfo(index, info);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : Create(window : Window, index : Int, flags : Int) ~ Renderer {
        array_args := Base->New[4];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(window);
        array_args[2] := IntHolder->New(index);
        array_args[3] := IntHolder->New(flags);

        @lib_proxy := Proxy->GetDllProxy();
        @lib_proxy->CallFunction("sdl_renderer_create", array_args);

        return array_args[0];
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_renderer_create(VMContext& context) {
                const long* window = (long*)APITools_GetObjectValue(context, 1);
                const int index = APITools_GetIntValue(context, 2);
                const int flags = APITools_GetIntValue(context, 3);
                const long* return_value = SDL_CreateRenderer(window, index, flags);
                APITools_SetObjectValue(context, 0, (CAST*)return_value);
        }

---
method : public : CreateSoftware(surface : Surface) ~ Renderer {
        array_args := Base->New[2];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(surface);

        @lib_proxy := Proxy->GetDllProxy();
        @lib_proxy->CallFunction("sdl_renderer_create_software", array_args);

        return array_args[0];
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_renderer_create_software(VMContext& context) {
                const long* surface = (long*)APITools_GetObjectValue(context, 1);
                const long* return_value = SDL_CreateSoftwareRenderer(surface);
                APITools_SetObjectValue(context, 0, (CAST*)return_value);
        }

---
method : public : Get(window : Window) ~ Renderer {
        array_args := Base->New[2];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(window);

        @lib_proxy := Proxy->GetDllProxy();
        @lib_proxy->CallFunction("sdl_renderer_get", array_args);

        return array_args[0];
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_renderer_get(VMContext& context) {
                const long* window = (long*)APITools_GetObjectValue(context, 1);
                const long* return_value = SDL_GetRenderer(window);
                APITools_SetObjectValue(context, 0, (CAST*)return_value);
        }

---

method : public : GetInfo(info : RendererInfo) ~ Int {
        array_args := Base->New[3];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@renderer);
        array_args[2] := info;

        @lib_proxy := Proxy->GetDllProxy();
        @lib_proxy->CallFunction("sdl_renderer_get_info", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_renderer_get_info(VMContext& context) {
                SDL_Renderer* renderer = (Renderer*)APITools_GetIntValue(context, 1);
                const long* info = (long*)APITools_GetObjectValue(context, 2);
                const int return_value = SDL_GetRendererInfo(renderer, info);
                APITools_SetIntValue(context, 0, return_value);
        }

###############

method : public : GetOutputSize(w : Int, h : Int) ~ Int {
        array_args := Base->New[4];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@renderer);
        array_args[2] := IntHolder->New(w);
        array_args[3] := IntHolder->New(h);

        @lib_proxy := Proxy->GetDllProxy();
        @lib_proxy->CallFunction("sdl_renderer_get_output_size", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_renderer_get_output_size(VMContext& context) {
                SDL_Renderer* renderer = (Renderer*)APITools_GetIntValue(context, 1);
                const int w = APITools_GetIntValue(context, 2);
                const int h = APITools_GetIntValue(context, 3);
                const int return_value = SDL_GetRendererOutputSize(renderer, w, h);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : CreateTexture(format : Int, access : Int, w : Int, h : Int) ~ Texture {
        array_args := Base->New[6];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@renderer);
        array_args[2] := IntHolder->New(format);
        array_args[3] := IntHolder->New(access);
        array_args[4] := IntHolder->New(w);
        array_args[5] := IntHolder->New(h);

        @lib_proxy := Proxy->GetDllProxy();
        @lib_proxy->CallFunction("sdl_renderer_create_texture", array_args);

        return array_args[0];
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_renderer_create_texture(VMContext& context) {
                SDL_Renderer* renderer = (Renderer*)APITools_GetIntValue(context, 1);
                const int format = APITools_GetIntValue(context, 2);
                const int access = APITools_GetIntValue(context, 3);
                const int w = APITools_GetIntValue(context, 4);
                const int h = APITools_GetIntValue(context, 5);
                const long* return_value = SDL_CreateTexture(renderer, format, access, w, h);
                APITools_SetObjectValue(context, 0, (CAST*)return_value);
        }

---
method : public : CreateTextureFromSurface(surface : Surface) ~ Texture {
        array_args := Base->New[3];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@renderer);
        array_args[2] := surface;

        @lib_proxy := Proxy->GetDllProxy();
        @lib_proxy->CallFunction("sdl_renderer_create_texture_from_surface", array_args);

        return array_args[0];
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_renderer_create_texture_from_surface(VMContext& context) {
                SDL_Renderer* renderer = (Renderer*)APITools_GetIntValue(context, 1);
                const long* surface = (long*)APITools_GetObjectValue(context, 2);
                const long* return_value = SDL_CreateTextureFromSurface(renderer, surface);
                APITools_SetObjectValue(context, 0, (CAST*)return_value);
        }

---
method : public : QueryTexture(texture : Texture, format : Int, access : Int, w : Int, h : Int) ~ Int {
        array_args := Base->New[6];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(texture);
        array_args[2] := IntHolder->New(format);
        array_args[3] := IntHolder->New(access);
        array_args[4] := IntHolder->New(w);
        array_args[5] := IntHolder->New(h);

        @lib_proxy := Proxy->GetDllProxy();
        @lib_proxy->CallFunction("sdl_renderer_query_texture", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_renderer_query_texture(VMContext& context) {
                const long* texture = (long*)APITools_GetObjectValue(context, 1);
                const int format = APITools_GetIntValue(context, 2);
                const int access = APITools_GetIntValue(context, 3);
                const int w = APITools_GetIntValue(context, 4);
                const int h = APITools_GetIntValue(context, 5);
                const int return_value = SDL_QueryTexture(texture, format, access, w, h);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : SetTextureColorMod(texture : Texture, r : Int, g : Int, b : Int) ~ Int {
        array_args := Base->New[5];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(texture);
        array_args[2] := IntHolder->New(r);
        array_args[3] := IntHolder->New(g);
        array_args[4] := IntHolder->New(b);

        @lib_proxy := Proxy->GetDllProxy();
        @lib_proxy->CallFunction("sdl_renderer_set_texture_color_mod", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_renderer_set_texture_color_mod(VMContext& context) {
                const long* texture = (long*)APITools_GetObjectValue(context, 1);
                const int r = APITools_GetIntValue(context, 2);
                const int g = APITools_GetIntValue(context, 3);
                const int b = APITools_GetIntValue(context, 4);
                const int return_value = SDL_SetTextureColorMod(texture, r, g, b);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : GetTextureColorMod(texture : Texture, r : Int, g : Int, b : Int) ~ Int {
        array_args := Base->New[5];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(texture);
        array_args[2] := IntHolder->New(r);
        array_args[3] := IntHolder->New(g);
        array_args[4] := IntHolder->New(b);

        @lib_proxy := Proxy->GetDllProxy();
        @lib_proxy->CallFunction("sdl_renderer_get_texture_color_mod", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_renderer_get_texture_color_mod(VMContext& context) {
                const long* texture = (long*)APITools_GetObjectValue(context, 1);
                const int r = APITools_GetIntValue(context, 2);
                const int g = APITools_GetIntValue(context, 3);
                const int b = APITools_GetIntValue(context, 4);
                const int return_value = SDL_GetTextureColorMod(texture, r, g, b);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : SetTextureAlphaMod(texture : Texture, alpha : Int) ~ Int {
        array_args := Base->New[3];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(texture);
        array_args[2] := IntHolder->New(alpha);

        @lib_proxy := Proxy->GetDllProxy();
        @lib_proxy->CallFunction("sdl_renderer_set_texture_alpha_mod", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_renderer_set_texture_alpha_mod(VMContext& context) {
                const long* texture = (long*)APITools_GetObjectValue(context, 1);
                const int alpha = APITools_GetIntValue(context, 2);
                const int return_value = SDL_SetTextureAlphaMod(texture, alpha);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : GetTextureAlphaMod(texture : Texture, alpha : Int) ~ Int {
        array_args := Base->New[3];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(texture);
        array_args[2] := IntHolder->New(alpha);

        @lib_proxy := Proxy->GetDllProxy();
        @lib_proxy->CallFunction("sdl_renderer_get_texture_alpha_mod", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_renderer_get_texture_alpha_mod(VMContext& context) {
                const long* texture = (long*)APITools_GetObjectValue(context, 1);
                const int alpha = APITools_GetIntValue(context, 2);
                const int return_value = SDL_GetTextureAlphaMod(texture, alpha);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : SetTextureBlendMode(texture : Texture, blendMode : BlendMode) ~ Int {
        array_args := Base->New[3];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(texture);
        array_args[2] := blendMode;

        @lib_proxy := Proxy->GetDllProxy();
        @lib_proxy->CallFunction("sdl_renderer_set_texture_blend_mode", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_renderer_set_texture_blend_mode(VMContext& context) {
                const long* texture = (long*)APITools_GetObjectValue(context, 1);
                const long* blendMode = (long*)APITools_GetObjectValue(context, 2);
                const int return_value = SDL_SetTextureBlendMode(texture, blendMode);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : GetTextureBlendMode(texture : Texture, blendMode : BlendMode) ~ Int {
        array_args := Base->New[3];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(texture);
        array_args[2] := blendMode;

        @lib_proxy := Proxy->GetDllProxy();
        @lib_proxy->CallFunction("sdl_renderer_get_texture_blend_mode", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_renderer_get_texture_blend_mode(VMContext& context) {
                const long* texture = (long*)APITools_GetObjectValue(context, 1);
                const long* blendMode = (long*)APITools_GetObjectValue(context, 2);
                const int return_value = SDL_GetTextureBlendMode(texture, blendMode);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : UpdateTexture(texture : Texture, rect : Rect, pixels : Int, pitch : Int) ~ Int {
        array_args := Base->New[5];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(texture);
        array_args[2] := rect;
        array_args[4] := IntHolder->New(pitch);

        @lib_proxy := Proxy->GetDllProxy();
        @lib_proxy->CallFunction("sdl_renderer_update_texture", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_renderer_update_texture(VMContext& context) {
                const long* texture = (long*)APITools_GetObjectValue(context, 1);
                const long* rect = (long*)APITools_GetObjectValue(context, 2);
                const int pitch = APITools_GetIntValue(context, 4);
                const int return_value = SDL_UpdateTexture(texture, rect, pixels, pitch);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : UpdateYUVTexture(texture : Texture, rect : Rect, Yplane : Int, Ypitch : Int, Uplane : Int, Upitch : Int, Vplane : Int, Vpitch : Int) ~ Int {
        array_args := Base->New[9];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(texture);
        array_args[2] := rect;
        array_args[3] := IntHolder->New(Yplane);
        array_args[4] := IntHolder->New(Ypitch);
        array_args[5] := IntHolder->New(Uplane);
        array_args[6] := IntHolder->New(Upitch);
        array_args[7] := IntHolder->New(Vplane);
        array_args[8] := IntHolder->New(Vpitch);

        @lib_proxy := Proxy->GetDllProxy();
        @lib_proxy->CallFunction("sdl_renderer_updateyuv_texture", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_renderer_updateyuv_texture(VMContext& context) {
                const long* texture = (long*)APITools_GetObjectValue(context, 1);
                const long* rect = (long*)APITools_GetObjectValue(context, 2);
                const int Yplane = APITools_GetIntValue(context, 3);
                const int Ypitch = APITools_GetIntValue(context, 4);
                const int Uplane = APITools_GetIntValue(context, 5);
                const int Upitch = APITools_GetIntValue(context, 6);
                const int Vplane = APITools_GetIntValue(context, 7);
                const int Vpitch = APITools_GetIntValue(context, 8);
                const int return_value = SDL_UpdateYUVTexture(texture, rect, Yplane, Ypitch, Uplane, Upitch, Vplane, Vpitch);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : UnlockTexture(texture : Texture) ~ Nil {
        array_args := Base->New[1];
        array_args[0] := IntHolder->New(texture);

        @lib_proxy := Proxy->GetDllProxy();
        @lib_proxy->CallFunction("sdl_renderer_unlock_texture", array_args);

}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_renderer_unlock_texture(VMContext& context) {
                const long* texture = (long*)APITools_GetObjectValue(context, 0);
                SDL_UnlockTexture(texture);
        }

---
method : public : RenderTargetSupported() ~ Bool {
        array_args := Base->New[2];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@renderer);

        @lib_proxy := Proxy->GetDllProxy();
        @lib_proxy->CallFunction("sdl_renderer_render_target_supported", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get() = 0 ? false : true;
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_renderer_render_target_supported(VMContext& context) {
                SDL_Renderer* renderer = (Renderer*)APITools_GetIntValue(context, 1);
                const int return_value = SDL_RenderTargetSupported(renderer);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : SetRenderTarget(texture : Texture) ~ Int {
        array_args := Base->New[3];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@renderer);
        array_args[2] := texture;

        @lib_proxy := Proxy->GetDllProxy();
        @lib_proxy->CallFunction("sdl_renderer_set_render_target", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_renderer_set_render_target(VMContext& context) {
                SDL_Renderer* renderer = (Renderer*)APITools_GetIntValue(context, 1);
                const long* texture = (long*)APITools_GetObjectValue(context, 2);
                const int return_value = SDL_SetRenderTarget(renderer, texture);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : GetRenderTarget() ~ Texture {
        array_args := Base->New[2];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@renderer);

        @lib_proxy := Proxy->GetDllProxy();
        @lib_proxy->CallFunction("sdl_renderer_get_render_target", array_args);

        return array_args[0];
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_renderer_get_render_target(VMContext& context) {
                SDL_Renderer* renderer = (Renderer*)APITools_GetIntValue(context, 1);
                const long* return_value = SDL_GetRenderTarget(renderer);
                APITools_SetObjectValue(context, 0, (CAST*)return_value);
        }

---
method : public : RenderSetLogicalSize(w : Int, h : Int) ~ Int {
        array_args := Base->New[4];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@renderer);
        array_args[2] := IntHolder->New(w);
        array_args[3] := IntHolder->New(h);

        @lib_proxy := Proxy->GetDllProxy();
        @lib_proxy->CallFunction("sdl_renderer_render_set_logical_size", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_renderer_render_set_logical_size(VMContext& context) {
                SDL_Renderer* renderer = (Renderer*)APITools_GetIntValue(context, 1);
                const int w = APITools_GetIntValue(context, 2);
                const int h = APITools_GetIntValue(context, 3);
                const int return_value = SDL_RenderSetLogicalSize(renderer, w, h);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : RenderGetLogicalSize(w : Int, h : Int) ~ Nil {
        array_args := Base->New[3];
        array_args[0] := IntHolder->New(@renderer);
        array_args[1] := IntHolder->New(w);
        array_args[2] := IntHolder->New(h);

        @lib_proxy := Proxy->GetDllProxy();
        @lib_proxy->CallFunction("sdl_renderer_render_get_logical_size", array_args);

}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_renderer_render_get_logical_size(VMContext& context) {
                SDL_Renderer* renderer = (Renderer*)APITools_GetIntValue(context, 0);
                const int w = APITools_GetIntValue(context, 1);
                const int h = APITools_GetIntValue(context, 2);
                SDL_RenderGetLogicalSize(renderer, w, h);
        }

---
method : public : RenderSetIntegerScale(enable : Bool) ~ Int {
        array_args := Base->New[3];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@renderer);
        array_args[2] := IntHolder->New(enable ? 0 : 1);

        @lib_proxy := Proxy->GetDllProxy();
        @lib_proxy->CallFunction("sdl_renderer_render_set_integer_scale", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_renderer_render_set_integer_scale(VMContext& context) {
                SDL_Renderer* renderer = (Renderer*)APITools_GetIntValue(context, 1);
                const int enable = APITools_GetIntValue(context, 2);
                const int return_value = SDL_RenderSetIntegerScale(renderer, enable);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : RenderGetIntegerScale() ~ Bool {
        array_args := Base->New[2];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@renderer);

        @lib_proxy := Proxy->GetDllProxy();
        @lib_proxy->CallFunction("sdl_renderer_render_get_integer_scale", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get() = 0 ? false : true;
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_renderer_render_get_integer_scale(VMContext& context) {
                SDL_Renderer* renderer = (Renderer*)APITools_GetIntValue(context, 1);
                const int return_value = SDL_RenderGetIntegerScale(renderer);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : RenderSetViewport(rect : Rect) ~ Int {
        array_args := Base->New[3];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@renderer);
        array_args[2] := rect;

        @lib_proxy := Proxy->GetDllProxy();
        @lib_proxy->CallFunction("sdl_renderer_render_set_viewport", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_renderer_render_set_viewport(VMContext& context) {
                SDL_Renderer* renderer = (Renderer*)APITools_GetIntValue(context, 1);
                const long* rect = (long*)APITools_GetObjectValue(context, 2);
                const int return_value = SDL_RenderSetViewport(renderer, rect);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : RenderGetViewport(rect : Rect) ~ Nil {
        array_args := Base->New[2];
        array_args[0] := IntHolder->New(@renderer);
        array_args[1] := rect;

        @lib_proxy := Proxy->GetDllProxy();
        @lib_proxy->CallFunction("sdl_renderer_render_get_viewport", array_args);

}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_renderer_render_get_viewport(VMContext& context) {
                SDL_Renderer* renderer = (Renderer*)APITools_GetIntValue(context, 0);
                const long* rect = (long*)APITools_GetObjectValue(context, 1);
                SDL_RenderGetViewport(renderer, rect);
        }

---
method : public : RenderSetClipRect(rect : Rect) ~ Int {
        array_args := Base->New[3];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@renderer);
        array_args[2] := rect;

        @lib_proxy := Proxy->GetDllProxy();
        @lib_proxy->CallFunction("sdl_renderer_render_set_clip_rect", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_renderer_render_set_clip_rect(VMContext& context) {
                SDL_Renderer* renderer = (Renderer*)APITools_GetIntValue(context, 1);
                const long* rect = (long*)APITools_GetObjectValue(context, 2);
                const int return_value = SDL_RenderSetClipRect(renderer, rect);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : RenderGetClipRect(rect : Rect) ~ Nil {
        array_args := Base->New[2];
        array_args[0] := IntHolder->New(@renderer);
        array_args[1] := rect;

        @lib_proxy := Proxy->GetDllProxy();
        @lib_proxy->CallFunction("sdl_renderer_render_get_clip_rect", array_args);

}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_renderer_render_get_clip_rect(VMContext& context) {
                SDL_Renderer* renderer = (Renderer*)APITools_GetIntValue(context, 0);
                const long* rect = (long*)APITools_GetObjectValue(context, 1);
                SDL_RenderGetClipRect(renderer, rect);
        }

---
method : public : RenderIsClipEnabled() ~ Bool {
        array_args := Base->New[2];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@renderer);

        @lib_proxy := Proxy->GetDllProxy();
        @lib_proxy->CallFunction("sdl_renderer_render_is_clip_enabled", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get() = 0 ? false : true;
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_renderer_render_is_clip_enabled(VMContext& context) {
                SDL_Renderer* renderer = (Renderer*)APITools_GetIntValue(context, 1);
                const int return_value = SDL_RenderIsClipEnabled(renderer);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : RenderSetScale(scaleX : float, scaleY : float) ~ Int {
        array_args := Base->New[4];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@renderer);
        array_args[2] := scaleX;
        array_args[3] := scaleY;

        @lib_proxy := Proxy->GetDllProxy();
        @lib_proxy->CallFunction("sdl_renderer_render_set_scale", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_renderer_render_set_scale(VMContext& context) {
                SDL_Renderer* renderer = (Renderer*)APITools_GetIntValue(context, 1);
                const long* scaleX = (long*)APITools_GetObjectValue(context, 2);
                const long* scaleY = (long*)APITools_GetObjectValue(context, 3);
                const int return_value = SDL_RenderSetScale(renderer, scaleX, scaleY);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : RenderGetScale(scaleX : float, scaleY : float) ~ Nil {
        array_args := Base->New[3];
        array_args[0] := IntHolder->New(@renderer);
        array_args[1] := scaleX;
        array_args[2] := scaleY;

        @lib_proxy := Proxy->GetDllProxy();
        @lib_proxy->CallFunction("sdl_renderer_render_get_scale", array_args);

}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_renderer_render_get_scale(VMContext& context) {
                SDL_Renderer* renderer = (Renderer*)APITools_GetIntValue(context, 0);
                const long* scaleX = (long*)APITools_GetObjectValue(context, 1);
                const long* scaleY = (long*)APITools_GetObjectValue(context, 2);
                SDL_RenderGetScale(renderer, scaleX, scaleY);
        }

---
method : public : SetRenderDrawColor(r : Int, g : Int, b : Int, a : Int) ~ Int {
        array_args := Base->New[6];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@renderer);
        array_args[2] := IntHolder->New(r);
        array_args[3] := IntHolder->New(g);
        array_args[4] := IntHolder->New(b);
        array_args[5] := IntHolder->New(a);

        @lib_proxy := Proxy->GetDllProxy();
        @lib_proxy->CallFunction("sdl_renderer_set_render_draw_color", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_renderer_set_render_draw_color(VMContext& context) {
                SDL_Renderer* renderer = (Renderer*)APITools_GetIntValue(context, 1);
                const int r = APITools_GetIntValue(context, 2);
                const int g = APITools_GetIntValue(context, 3);
                const int b = APITools_GetIntValue(context, 4);
                const int a = APITools_GetIntValue(context, 5);
                const int return_value = SDL_SetRenderDrawColor(renderer, r, g, b, a);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : GetRenderDrawColor(r : Int, g : Int, b : Int, a : Int) ~ Int {
        array_args := Base->New[6];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@renderer);
        array_args[2] := IntHolder->New(r);
        array_args[3] := IntHolder->New(g);
        array_args[4] := IntHolder->New(b);
        array_args[5] := IntHolder->New(a);

        @lib_proxy := Proxy->GetDllProxy();
        @lib_proxy->CallFunction("sdl_renderer_get_render_draw_color", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_renderer_get_render_draw_color(VMContext& context) {
                SDL_Renderer* renderer = (Renderer*)APITools_GetIntValue(context, 1);
                const int r = APITools_GetIntValue(context, 2);
                const int g = APITools_GetIntValue(context, 3);
                const int b = APITools_GetIntValue(context, 4);
                const int a = APITools_GetIntValue(context, 5);
                const int return_value = SDL_GetRenderDrawColor(renderer, r, g, b, a);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : SetRenderDrawBlendMode(blendMode : BlendMode) ~ Int {
        array_args := Base->New[3];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@renderer);
        array_args[2] := blendMode;

        @lib_proxy := Proxy->GetDllProxy();
        @lib_proxy->CallFunction("sdl_renderer_set_render_draw_blend_mode", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_renderer_set_render_draw_blend_mode(VMContext& context) {
                SDL_Renderer* renderer = (Renderer*)APITools_GetIntValue(context, 1);
                const long* blendMode = (long*)APITools_GetObjectValue(context, 2);
                const int return_value = SDL_SetRenderDrawBlendMode(renderer, blendMode);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : GetRenderDrawBlendMode(blendMode : BlendMode) ~ Int {
        array_args := Base->New[3];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@renderer);
        array_args[2] := blendMode;

        @lib_proxy := Proxy->GetDllProxy();
        @lib_proxy->CallFunction("sdl_renderer_get_render_draw_blend_mode", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_renderer_get_render_draw_blend_mode(VMContext& context) {
                SDL_Renderer* renderer = (Renderer*)APITools_GetIntValue(context, 1);
                const long* blendMode = (long*)APITools_GetObjectValue(context, 2);
                const int return_value = SDL_GetRenderDrawBlendMode(renderer, blendMode);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : RenderClear() ~ Int {
        array_args := Base->New[2];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@renderer);

        @lib_proxy := Proxy->GetDllProxy();
        @lib_proxy->CallFunction("sdl_renderer_render_clear", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_renderer_render_clear(VMContext& context) {
                SDL_Renderer* renderer = (Renderer*)APITools_GetIntValue(context, 1);
                const int return_value = SDL_RenderClear(renderer);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : RenderDrawPoint(x : Int, y : Int) ~ Int {
        array_args := Base->New[4];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@renderer);
        array_args[2] := IntHolder->New(x);
        array_args[3] := IntHolder->New(y);

        @lib_proxy := Proxy->GetDllProxy();
        @lib_proxy->CallFunction("sdl_renderer_render_draw_point", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_renderer_render_draw_point(VMContext& context) {
                SDL_Renderer* renderer = (Renderer*)APITools_GetIntValue(context, 1);
                const int x = APITools_GetIntValue(context, 2);
                const int y = APITools_GetIntValue(context, 3);
                const int return_value = SDL_RenderDrawPoint(renderer, x, y);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : RenderDrawPoints(points : Point, count : Int) ~ Int {
        array_args := Base->New[4];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@renderer);
        array_args[2] := points;
        array_args[3] := IntHolder->New(count);

        @lib_proxy := Proxy->GetDllProxy();
        @lib_proxy->CallFunction("sdl_renderer_render_draw_points", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_renderer_render_draw_points(VMContext& context) {
                SDL_Renderer* renderer = (Renderer*)APITools_GetIntValue(context, 1);
                const long* points = (long*)APITools_GetObjectValue(context, 2);
                const int count = APITools_GetIntValue(context, 3);
                const int return_value = SDL_RenderDrawPoints(renderer, points, count);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : RenderDrawLine(x1 : Int, y1 : Int, x2 : Int, y2 : Int) ~ Int {
        array_args := Base->New[6];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@renderer);
        array_args[2] := IntHolder->New(x1);
        array_args[3] := IntHolder->New(y1);
        array_args[4] := IntHolder->New(x2);
        array_args[5] := IntHolder->New(y2);

        @lib_proxy := Proxy->GetDllProxy();
        @lib_proxy->CallFunction("sdl_renderer_render_draw_line", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_renderer_render_draw_line(VMContext& context) {
                SDL_Renderer* renderer = (Renderer*)APITools_GetIntValue(context, 1);
                const int x1 = APITools_GetIntValue(context, 2);
                const int y1 = APITools_GetIntValue(context, 3);
                const int x2 = APITools_GetIntValue(context, 4);
                const int y2 = APITools_GetIntValue(context, 5);
                const int return_value = SDL_RenderDrawLine(renderer, x1, y1, x2, y2);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : RenderDrawLines(points : Point, count : Int) ~ Int {
        array_args := Base->New[4];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@renderer);
        array_args[2] := points;
        array_args[3] := IntHolder->New(count);

        @lib_proxy := Proxy->GetDllProxy();
        @lib_proxy->CallFunction("sdl_renderer_render_draw_lines", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_renderer_render_draw_lines(VMContext& context) {
                SDL_Renderer* renderer = (Renderer*)APITools_GetIntValue(context, 1);
                const long* points = (long*)APITools_GetObjectValue(context, 2);
                const int count = APITools_GetIntValue(context, 3);
                const int return_value = SDL_RenderDrawLines(renderer, points, count);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : RenderDrawRect(rect : Rect) ~ Int {
        array_args := Base->New[3];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@renderer);
        array_args[2] := rect;

        @lib_proxy := Proxy->GetDllProxy();
        @lib_proxy->CallFunction("sdl_renderer_render_draw_rect", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_renderer_render_draw_rect(VMContext& context) {
                SDL_Renderer* renderer = (Renderer*)APITools_GetIntValue(context, 1);
                const long* rect = (long*)APITools_GetObjectValue(context, 2);
                const int return_value = SDL_RenderDrawRect(renderer, rect);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : RenderDrawRects(rects : Rect, count : Int) ~ Int {
        array_args := Base->New[4];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@renderer);
        array_args[2] := rects;
        array_args[3] := IntHolder->New(count);

        @lib_proxy := Proxy->GetDllProxy();
        @lib_proxy->CallFunction("sdl_renderer_render_draw_rects", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_renderer_render_draw_rects(VMContext& context) {
                SDL_Renderer* renderer = (Renderer*)APITools_GetIntValue(context, 1);
                const long* rects = (long*)APITools_GetObjectValue(context, 2);
                const int count = APITools_GetIntValue(context, 3);
                const int return_value = SDL_RenderDrawRects(renderer, rects, count);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : RenderFillRect(rect : Rect) ~ Int {
        array_args := Base->New[3];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@renderer);
        array_args[2] := rect;

        @lib_proxy := Proxy->GetDllProxy();
        @lib_proxy->CallFunction("sdl_renderer_render_fill_rect", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_renderer_render_fill_rect(VMContext& context) {
                SDL_Renderer* renderer = (Renderer*)APITools_GetIntValue(context, 1);
                const long* rect = (long*)APITools_GetObjectValue(context, 2);
                const int return_value = SDL_RenderFillRect(renderer, rect);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : RenderFillRects(rects : Rect, count : Int) ~ Int {
        array_args := Base->New[4];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@renderer);
        array_args[2] := rects;
        array_args[3] := IntHolder->New(count);

        @lib_proxy := Proxy->GetDllProxy();
        @lib_proxy->CallFunction("sdl_renderer_render_fill_rects", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_renderer_render_fill_rects(VMContext& context) {
                SDL_Renderer* renderer = (Renderer*)APITools_GetIntValue(context, 1);
                const long* rects = (long*)APITools_GetObjectValue(context, 2);
                const int count = APITools_GetIntValue(context, 3);
                const int return_value = SDL_RenderFillRects(renderer, rects, count);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : RenderCopy(texture : Texture, srcrect : Rect, dstrect : Rect) ~ Int {
        array_args := Base->New[5];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@renderer);
        array_args[2] := texture;
        array_args[3] := srcrect;
        array_args[4] := dstrect;

        @lib_proxy := Proxy->GetDllProxy();
        @lib_proxy->CallFunction("sdl_renderer_render_copy", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_renderer_render_copy(VMContext& context) {
                SDL_Renderer* renderer = (Renderer*)APITools_GetIntValue(context, 1);
                const long* texture = (long*)APITools_GetObjectValue(context, 2);
                const long* srcrect = (long*)APITools_GetObjectValue(context, 3);
                const long* dstrect = (long*)APITools_GetObjectValue(context, 4);
                const int return_value = SDL_RenderCopy(renderer, texture, srcrect, dstrect);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : RenderCopyEx(texture : Texture, srcrect : Rect, dstrect : Rect, angle : double, center : Point, flip : RendererFlip) ~ Int {
        array_args := Base->New[8];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@renderer);
        array_args[2] := texture;
        array_args[3] := srcrect;
        array_args[4] := dstrect;
        array_args[5] := angle;
        array_args[6] := center;
        array_args[7] := flip;

        @lib_proxy := Proxy->GetDllProxy();
        @lib_proxy->CallFunction("sdl_renderer_render_copy_ex", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_renderer_render_copy_ex(VMContext& context) {
                SDL_Renderer* renderer = (Renderer*)APITools_GetIntValue(context, 1);
                const long* texture = (long*)APITools_GetObjectValue(context, 2);
                const long* srcrect = (long*)APITools_GetObjectValue(context, 3);
                const long* dstrect = (long*)APITools_GetObjectValue(context, 4);
                const long* angle = (long*)APITools_GetObjectValue(context, 5);
                const long* center = (long*)APITools_GetObjectValue(context, 6);
                const long* flip = (long*)APITools_GetObjectValue(context, 7);
                const int return_value = SDL_RenderCopyEx(renderer, texture, srcrect, dstrect, angle, center, flip);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : RenderReadPixels(rect : Rect, format : Int, pixels : Int, pitch : Int) ~ Int {
        array_args := Base->New[6];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@renderer);
        array_args[2] := rect;
        array_args[3] := IntHolder->New(format);
        array_args[5] := IntHolder->New(pitch);

        @lib_proxy := Proxy->GetDllProxy();
        @lib_proxy->CallFunction("sdl_renderer_render_read_pixels", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_renderer_render_read_pixels(VMContext& context) {
                SDL_Renderer* renderer = (Renderer*)APITools_GetIntValue(context, 1);
                const long* rect = (long*)APITools_GetObjectValue(context, 2);
                const int format = APITools_GetIntValue(context, 3);
                const int pitch = APITools_GetIntValue(context, 5);
                const int return_value = SDL_RenderReadPixels(renderer, rect, format, pixels, pitch);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : RenderPresent() ~ Nil {
        array_args := Base->New[1];
        array_args[0] := IntHolder->New(@renderer);

        @lib_proxy := Proxy->GetDllProxy();
        @lib_proxy->CallFunction("sdl_renderer_render_present", array_args);

}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_renderer_render_present(VMContext& context) {
                SDL_Renderer* renderer = (Renderer*)APITools_GetIntValue(context, 0);
                SDL_RenderPresent(renderer);
        }

---
method : public : DestroyTexture(texture : Texture) ~ Nil {
        array_args := Base->New[1];
        array_args[0] := IntHolder->New(texture);

        @lib_proxy := Proxy->GetDllProxy();
        @lib_proxy->CallFunction("sdl_renderer_destroy_texture", array_args);

}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_renderer_destroy_texture(VMContext& context) {
                const long* texture = (long*)APITools_GetObjectValue(context, 0);
                SDL_DestroyTexture(texture);
        }

---
method : public : Destroy() ~ Nil {
        array_args := Base->New[1];
        array_args[0] := IntHolder->New(@renderer);

        @lib_proxy := Proxy->GetDllProxy();
        @lib_proxy->CallFunction("sdl_renderer_destroy", array_args);

}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_renderer_destroy(VMContext& context) {
                SDL_Renderer* renderer = (Renderer*)APITools_GetIntValue(context, 0);
                SDL_DestroyRenderer(renderer);
        }

---
method : public : GLBindTexture(texture : Texture, texw : float, texh : float) ~ Int {
        array_args := Base->New[4];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(texture);
        array_args[2] := texw;
        array_args[3] := texh;

        @lib_proxy := Proxy->GetDllProxy();
        @lib_proxy->CallFunction("sdl_renderer_gl_bind_texture", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_renderer_gl_bind_texture(VMContext& context) {
                const long* texture = (long*)APITools_GetObjectValue(context, 1);
                const long* texw = (long*)APITools_GetObjectValue(context, 2);
                const long* texh = (long*)APITools_GetObjectValue(context, 3);
                const int return_value = SDL_GL_BindTexture(texture, texw, texh);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : GLUnbindTexture(texture : Texture) ~ Int {
        array_args := Base->New[2];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(texture);

        @lib_proxy := Proxy->GetDllProxy();
        @lib_proxy->CallFunction("sdl_renderer_gl_unbind_texture", array_args);

        value := array_args[0]->As(IntHolder);
        return value->Get();
}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_renderer_gl_unbind_texture(VMContext& context) {
                const long* texture = (long*)APITools_GetObjectValue(context, 1);
                const int return_value = SDL_GL_UnbindTexture(texture);
                APITools_SetIntValue(context, 0, return_value);
        }

---
method : public : RenderGetMetalLayer() ~ Int {
        array_args := Base->New[2];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@renderer);

        @lib_proxy := Proxy->GetDllProxy();
        @lib_proxy->CallFunction("sdl_renderer_render_get_metal_layer", array_args);

}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_renderer_render_get_metal_layer(VMContext& context) {
                SDL_Renderer* renderer = (Renderer*)APITools_GetIntValue(context, 1);
        }

---
method : public : RenderGetMetalCommandEncoder() ~ Int {
        array_args := Base->New[2];
        array_args[0] := IntHolder->New();
        array_args[1] := IntHolder->New(@renderer);

        @lib_proxy := Proxy->GetDllProxy();
        @lib_proxy->CallFunction("sdl_renderer_render_get_metal_command_encoder", array_args);

}

#ifdef _WIN32
        __declspec(dllexport)
#endif
        void sdl_renderer_render_get_metal_command_encoder(VMContext& context) {
                SDL_Renderer* renderer = (Renderer*)APITools_GetIntValue(context, 1);
        }

---
#~
Lesson 32
http:# http://lazyfoo.net/tutorials/SDL/32_text_input_and_clipboard_handling/index.php
~#

use Game.SDL2;

class LTexture {
	@renderer : Renderer;
	@font : Font;
	@texture : Texture;
	@render_quad : Rect;

	New(renderer : Renderer, font : Font := Nil) {
		@renderer := renderer;
		@font := font;
		@render_quad := Rect->New();
	}

	method : public : LoadFromRenderedText(textureText : String, textColor : Color) ~ Bool {
		Free();

		# Render text surface
		textSurface := @font->RenderTextSolid(textureText, textColor);
		if(textSurface->IsNull()) {
			"Unable to render text surface!"->ErrorLine();
			return false;
		};

		texture := textSurface->CreateTexture(@renderer);
		@render_quad->SetW(textSurface->GetW());
		@render_quad->SetH(textSurface->GetH());
		
		@texture := texture;
		return @texture <> Nil;
	}

	# Loads image at specified path
	method : public : LoadFromFile(path : String) ~ Bool {
		Free();

		# Load image at specified path
		loadedSurface := Image->Load(path);
		if(loadedSurface->IsNull()) {
			"Unable to load surface"->ErrorLine();
			return false;
		};

		loadedSurface->SetColorKey(true, loadedSurface->GetPixelFormat()->MapRGB(0, 0xFF, 0xFF));

		texture := loadedSurface->CreateTexture(@renderer);
		if(texture->IsNull()) {
			"Unable to create texture!"->ErrorLine();
			return false;
		};
		@render_quad->SetW(loadedSurface->GetW());
		@render_quad->SetH(loadedSurface->GetH());
		
		loadedSurface->Free();

		@texture := texture;
		return @texture <> Nil;
	}

	# Deallocates texture
	method : public : Free() ~ Nil {
		if(@texture <> Nil)	{
			@texture->Destroy();
		};
	}

	method : public : SetColor(red : Int, green : Int, blue : Int) ~ Nil {
		@texture->SetColorMod(red, green, blue);
	}

	method : public : SetBlendMode(blending : BlendMode) ~ Nil {
		# Set blending function
		@texture->SetBlendMode(blending);
	}
	
	method : public : SetAlpha(alpha : Int) ~ Nil {
		# Modulate texture alpha
		@texture->SetAlphaMod(alpha );
	}

	# Renders texture at given point
	method : public : Render(x : Int, y : Int, clip : Rect := Nil, 
			angle : Float := 0.0, center : Point := Nil, flip : RendererFlip := RendererFlip->SDL_FLIP_NONE) ~ Nil {
		@render_quad->SetX(x);
		@render_quad->SetY(y);

		if(clip <> Nil)	{
			@render_quad->SetW(clip->GetW());
			@render_quad->SetH(clip->GetH());
		};

		@renderer->CopyEx(@texture, clip, @render_quad, angle, center, flip);
	}

	# Gets image dimensions
	method : public : GetWidth() ~ Int {
		return @render_quad->GetW();
	}

	method : public : GetHeight() ~ Int {
		return @render_quad->GetH();
	}
}

consts Screen {
	SCREEN_WIDTH := 640,
	SCREEN_HEIGHT := 480,
	FPS := 60
}

class Test {
	@window : static : Window;
	@renderer : static : Renderer;
	@input_text_texture : static : LTexture;
	@prompt_text_texture : static : LTexture;
	@font : static : Font;
	
	function : Main(args : String[]) ~ Nil {
		# Start up SDL and create window
		if( <>Init() ) {
			"Failed to initialize!"->ErrorLine();
			return;
		};
		
		# Load media
		if( <>LoadMedia() ) {
			"Failed to load media!"->ErrorLine();
			return;
		};

		FRAME_RATE := 1000 / Screen->FPS->As(Int);
			
		# Main loop flag
		quit := false;

		# Event handler
		e := Event->New();

		# While application is running
		Keyboard->StartTextInput();
		while(<>quit) {
			start := Timer->GetTicks();

			# Handle events on queue
			while( e->Poll() <> 0 ) {
				# User requests quit
				if(e->GetType() = EventType->SDL_QUIT) {
					quit := true;
				}
				# Special key input
				else if( e->GetType() = EventType->SDL_KEYDOWN ) {
				};
			};
			
			@renderer->SetDrawColor(0xFF, 0xFF, 0xFF, 0xFF);
			@renderer->Clear();

			# Render background
			@prompt_text_texture->Render( ( Screen->SCREEN_WIDTH - @prompt_text_texture->GetWidth() ) / 2, 0 );
			@input_text_texture->Render( ( Screen->SCREEN_WIDTH - @input_text_texture->GetWidth() ) / 2, @input_text_texture->GetHeight() );

			# Update screen
			@renderer->Present();

			end := start - Timer->GetTicks();
			if(end < FRAME_RATE) {
				Timer->Delay(FRAME_RATE - end);
			};
		};
		Keyboard->StopTextInput();

		e->Free();
		Close();
	}
	
	function : Init() ~ Bool {
		SCREEN_WIDTH := 640;
		SCREEN_HEIGHT := 480;

		# Initialize SDL
		if(Core->Init(HardwareFlags->SDL_INIT_VIDEO) < 0) {
			"SDL could not initialize!"->ErrorLine();
			return false;
		};
		
		if(<>Hints->Set("SDL_RENDER_SCALE_QUALITY", "1")) {
			"Warning: Linear texture filtering not enabled!"->ErrorLine();
			return false;
		};

		# Create window
		@window := Window->New("SDL Tutorial", 
			WindowFlags->SDL_WINDOWPOS_UNDEFINED, WindowFlags->SDL_WINDOWPOS_UNDEFINED, 
			Screen->SCREEN_WIDTH, Screen->SCREEN_HEIGHT, WindowFlags->SDL_WINDOW_SHOWN);
		if(@window->IsNull()) {
			"Cannot create window!"->ErrorLine();
			return false;
		};

		# Get window surface
		@renderer := Renderer->New(@window, -1, 
			RendererFlags->SDL_RENDERER_ACCELERATED and RendererFlags->SDL_RENDERER_PRESENTVSYNC);
		if(@renderer->IsNull()) {
			"Cannot create renderer!"->ErrorLine();
			return false;
		};
		@renderer->SetDrawColor(0xFF, 0xFF, 0xFF, 0xFF);

		img_flags := ImageFlags->IMG_INIT_PNG->As(Int);
		if((Image->Init(img_flags) and img_flags) = 0) {
			"SDL image could not initialize!"->ErrorLine();
			return false;
		};

		@input_text_texture := LTexture->New(@renderer, @font);
		@prompt_text_texture := LTexture->New(@renderer, @font);
		
		return true;
	}
	
	function : LoadMedia() ~ Bool {
		font_path := Runtime->GetProperty("install_dir");
		if(font_path = Nil) {
			"Failed to load font!"->ErrorLine();
			return false;
		};
		font_path += "/lib/sdl/fonts/lazy.ttf";

		@font := Font->New(font_path, 24);
		if(@font->IsNull()) {
			"Failed to load font '{$font_path}'!"->ErrorLine();
			return false;
		};

		color := Color->New();
		if(<>@prompt_text_texture->LoadFromRenderedText( "Enter Text:", color )) {
			"Failed to render text"->ErrorLine();
			return false;
		};

		return true;
	}
	
	function : LoadTexture(path : String) ~ Texture {
		# Load image at specified path
		loadedSurface := Image->Load(path);
		if(loadedSurface->IsNull()) {
			"Unable to load surface"->ErrorLine();
			return Nil;
		};

		texture := loadedSurface->CreateTexture(@renderer);
		if(texture->IsNull()) {
			"Unable to create texture!"->ErrorLine();
			return Nil;
		};

		loadedSurface->Free();
		
		return texture;
	}
	
	function : Close() ~ Nil {
		@input_text_texture->Free();
		@prompt_text_texture->Free();

		@renderer->Destroy();
		@window->Destroy();

		Image->Quit();
		Core->Quit();
	}
}
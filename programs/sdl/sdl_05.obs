#~
Lesson 05
Optimized Surface Loading and Soft Stretching

http://lazyfoo.net/tutorials/SDL/05_optimized_surface_loading_and_soft_stretching/index.php
~#

use Game.SDL2;

class Test {
	@window : static : Window;
	@screen_surface : static : Surface;
	@stretched_surface : static : Surface;
	
	function : Main(args : String[]) ~ Nil {
		# Start up SDL and create window
		if( <>Init() ) {
			"Failed to initialize!"->ErrorLine();
		}
		else {
			# Load media
			if( <>LoadMedia() ) {
				"Failed to load media!"->PrintLine();
			}
			else {			
				# Main loop flag
				quit := false;
				
				# Event handler
				e := Event->New();
				
				# While application is running
				while( <>quit )
				{
					# Handle events on queue
					while( e->Poll() <> 0 ) {
						# User requests quit
						if( e->GetType() = EventType->SDL_QUIT ) {
							quit := true;
						};
					};

					# Apply the image
					stretchRect := Rect->New();
					stretchRect->SetX(0);
					stretchRect->SetY(0);
					stretchRect->SetW(640);
					stretchRect->SetH(480);
					@stretched_surface->BlitScaled( Nil, @screen_surface, stretchRect );
				
					# Update the surface
					@window->UpdateSurface();
				};
			};
		};
		
		Close();
	}
	
	function : Init() ~ Bool {
		# Initialization flag
		success := true;
		
		# Initialize SDL
		if(Core->Init(HardwareFlags->SDL_INIT_VIDEO) < 0) {
			"SDL could not initialize!"->ErrorLine();
			success := false;
		}
		else {
			# Create window
			# Create window
			@window := Window->New( "SDL Tutorial", WindowFlags->SDL_WINDOWPOS_UNDEFINED, 
				WindowFlags->SDL_WINDOWPOS_UNDEFINED, 640, 480, WindowFlags->SDL_WINDOW_SHOWN);
			# Get window surface
			@screen_surface := @window->GetSurface();
		};
		
		return success;
	}
	
	function : LoadMedia() ~ Bool {
		@stretched_surface := loadSurface( "images/stretch.bmp" );		
		return true;
	}
	
	function : loadSurface(path : String) ~ Surface {
		# Load image at specified path
		loadedSurface := Surface->LoadBMP( path );
		
		optimizedSurface := loadedSurface->Convert( @screen_surface->GetPixelFormat(), 0 );
		loadedSurface->Free();
		
		return optimizedSurface;
	}
	
	function : Close() ~ Nil {
		@stretched_surface->Free();
	
		# Destroy window
		@window->Destroy();
		@window := Nil;

		# Quit SDL subsystems
		Core->Quit();
	}
}

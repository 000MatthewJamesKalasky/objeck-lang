use Game.SDL2;

consts Screen {
	WIDTH := 640,
	HEIGHT := 480
}

class Test {
	@renderer : static : Renderer;
	@window : static : Window;

	function : Main(args : String[]) ~ Nil {
		# Start up SDL and create window
		if( <>Init() ) {
			"Failed to initialize!"->ErrorLine();
			return;
		};
		
		# Load media
		if( <>LoadMedia() ) {
			"Failed to load media!"->ErrorLine();
			return;
		};
		
		# Main loop flag
		quit := false;

		# Event handler
		e := Event->New();

		# While application is running
		while(<>quit) {
			start := Timer->GetTicks();

			# Handle events on queue
			while( e->Poll() <> 0 ) {
				# User requests quit
				if(e->GetType() = EventType->SDL_QUIT) {
					quit := true;
				};
			};

			Regulate();
			
			@renderer->SetDrawColor(0xFF, 0xFF, 0xFF, 0xFF);
			@renderer->Clear();

			# Update screen
			@renderer->Present();
		};
		e->Free();

		Close();
	}
	
	function : Regulate() ~ Nil {
#		Filesystem->GetBasePath()->PrintLine();
		
		secs := IntHolder->New();
		pct := IntHolder->New();

		Power->GetInfo(secs, pct);

		secs->Get()->PrintLine();
		pct->Get()->PrintLine();
	}

	function : Init() ~ Bool {
		# Initialize SDL
		if(Core->Init(HardwareFlags->SDL_INIT_VIDEO) < 0) {
			"SDL could not initialize!"->ErrorLine();
			return false;
		};
		
		if(<>Hints->Set("SDL_RENDER_SCALE_QUALITY", "1")) {
			"Warning: Linear texture filtering not enabled!"->ErrorLine();
			return false;
		};

		# Create window
		@window := Window->New("SDL Tutorial", WindowFlags->SDL_WINDOWPOS_UNDEFINED, 
			WindowFlags->SDL_WINDOWPOS_UNDEFINED, Screen->WIDTH, Screen->HEIGHT, 
			WindowFlags->SDL_WINDOW_SHOWN);
		if(@window->IsNull()) {
			"Cannot create window!"->ErrorLine();
			return false;
		};

		# Get window surface
		@renderer := Renderer->New(@window, -1, 
			(RendererFlags->SDL_RENDERER_ACCELERATED and RendererFlags->SDL_RENDERER_PRESENTVSYNC)->As(Int));
		if(@renderer->IsNull()) {
			"Cannot create renderer!"->ErrorLine();
			return false;
		};
		@renderer->SetDrawColor(0xFF, 0xFF, 0xFF, 0xFF);

		return true;
	}
	
	function : LoadMedia() ~ Bool {		
		return true;
	}
	
	function : Close() ~ Nil {
		@renderer->Destroy();
		@window->Destroy();
		Core->Quit();
	}
}
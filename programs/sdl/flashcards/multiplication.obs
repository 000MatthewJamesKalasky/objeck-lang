use Game.SDL2;
use Game.Framework;

class Chalkboard {
	@framework : GameFramework;

	@score_tries : Int;

	# card
	@card : Rectangle;
	@card_text_color : Color;
	@card_text_mul_sign : TextSprite;
	@card_text_eql_sign : TextSprite;
	@card_text_top : TextSprite;
	@card_text_bottom : TextSprite;

	@card_button_font : Font;

	@check_button : Rectangle;
	@check_button_text : TextSprite;

	@card_text_font : Font;

	@clear_button : Rectangle;
	@clear_button_text : TextSprite;

	@card_carry_box_font : Font;
	@card_carry_box : Rectangle;
	@card_carry_text : TextSprite;

	@card_table_text : TextSprite;
	
	# mouse input
	@mouse_x : IntHolder;
	@mouse_y : IntHolder;
	@mouse_pos : Point;

	# sounds
	@cheer_chunk : MixChunk;
	@aww_chunk : MixChunk;

	function : Main(args : String[]) ~ Nil {
		flash_cards : Chalkboard;
		
		if(args->Size() = 1) {
			flash_cards := Chalkboard->New(true);
		}
		else {
			flash_cards := Chalkboard->New(false);
		};

		flash_cards->Run();
	}

	New(is_sound : Bool) {
		@framework := GameFramework->New(GameValues->SCREEN_WIDTH, GameValues->SCREEN_HEIGHT, "Multiplication");		
		@framework->SetClearColor(Color->New(105, 105, 105));
		
		LoadMedia();
		BuildCard();
		WireInput();
		Reset();
	}

	method : LoadMedia() ~ Nil {
		font_path :=  "./media/hella.ttf";
		@card_button_font := Font->New(font_path, 22);
		if(@card_button_font->IsNull()) {
			"Failed to load font '{$font_path}'!"->ErrorLine();
			Runtime->Exit(1);
		};

		font_path :=  "./media/chalk.ttf";
		@card_text_font := Font->New(font_path, 56);
		if(@card_text_font->IsNull()) {
			"Failed to load font '{$font_path}'!"->ErrorLine();
			Runtime->Exit(1);
		};

		font_path :=  "./media/maghrib.ttf";
		@card_carry_box_font := Font->New(font_path, 72);
		if(@card_carry_box_font->IsNull()) {
			"Failed to load font '{$font_path}'!"->ErrorLine();
			Runtime->Exit(1);
		};

		@cheer_chunk := MixChunk->New("./media/cheer.wav");
		if(@cheer_chunk->IsNull()) {
			"--- Cannot load sound! ---"->ErrorLine();
			Runtime->Exit(1);
		};

		@aww_chunk := MixChunk->New("./media/aww.wav");
		if(@aww_chunk->IsNull()) {
			"--- Cannot load sound! ---"->ErrorLine();
			Runtime->Exit(1);
		};

		# adjust volume
		Mixer->Volume(-1, 16);
	}

	method : BuildCard() ~ Nil {
		@card_text_color := Color->New(224, 219, 200);

		# card
		@card := @framework->AddRectangle(GameValues->SCREEN_WIDTH - GameValues->SCREEN_PADDING * 2, GameValues->SCREEN_HEIGHT - GameValues->SCREEN_PADDING * 4);
		@card->SetColor(Color->New(46, 139, 87));
		@card->SetFill(true);

		# check button
		@check_button := @framework->AddRectangle(180, 30);
		@check_button->SetColor(Color->New(105, 105, 105));
		@check_button->SetFill(true);

		@check_button_text := @framework->AddTextSprite();
		@check_button_text->SetFont(@card_button_font);
		@check_button_text->RenderedText("Check");

		# clear button
		@clear_button := @framework->AddRectangle(180, 30);
		@clear_button->SetColor(Color->New(192, 192, 192));
		@clear_button->SetFill(true);

		@clear_button_text := @framework->AddTextSprite();
		@clear_button_text->SetFont(@card_button_font);

		# sign
		@card_text_mul_sign := @framework->AddTextSprite();
		@card_text_mul_sign->SetFont(@card_text_font);
		@card_text_mul_sign->RenderedText("X", @card_text_color);

		@card_text_eql_sign := @framework->AddTextSprite();
		@card_text_eql_sign->SetFont(@card_text_font);
		@card_text_eql_sign->RenderedText("=", @card_text_color);

		@card_carry_text := @framework->AddTextSprite();
		@card_carry_text->SetFont(@card_carry_box_font);
		@card_carry_text->RenderedText("16");

		@card_table_text := @framework->AddTextSprite();
		@card_table_text->SetFont(@card_button_font);
		@card_table_text->RenderedText("3, 6, 9, 12, 15, 18, 21, 24, 27, 30", Color->New(0, 0, 139));

		# TODO: change me
		@card_text_top := @framework->AddTextSprite();
		@card_text_top->SetFont(@card_text_font);
		@card_text_top->RenderedText("2", @card_text_color);

		#
		@card_carry_box := @framework->AddRectangle(GameValues->SCREEN_PADDING * 4.5, GameValues->SCREEN_PADDING * 2.5);

		@card_text_bottom := @framework->AddTextSprite();
		@card_text_bottom->SetFont(@card_text_font);
		@card_text_bottom->RenderedText("3", @card_text_color);
	}

	method : WireInput() ~ Nil {
		@mouse_x := IntHolder->New();
		@mouse_y := IntHolder->New();
		@mouse_pos := Point->New(0, 0);
	}

	method : Run() ~ Nil {
		if(@framework->IsOk()) {
			e := @framework->GetEvent();
						
			quit := false;
			while(<>quit) {
				@framework->FrameStart();
				
				# process input
				while(e->Poll() <> 0) {
					if(e->GetType() = EventType->SDL_QUIT) {
						quit := true;
					}
					# keyboard
					else if(e->GetType() = EventType->SDL_KEYDOWN & e->GetKey()->GetRepeat() = 0) {
				        KeyboardInput(e);
				    }
				    # mouse
				    else if(e->GetType() = EventType->SDL_MOUSEBUTTONDOWN) {				    	
				    	MouseInput(e);
				    }
				    else if(e->GetType() = EventType->SDL_MOUSEBUTTONUP) {
				    	@check_button->SetFill(true);
				    	@clear_button->SetFill(true);
				    }
					else if(@score_tries = 0 & e->GetType() = EventType->SDL_MOUSEMOTION) {
						Cursor->GetMouseState(@mouse_x, @mouse_y);
						@mouse_pos->SetX(@mouse_x->Get());
						@mouse_pos->SetY(@mouse_y->Get());

						if(@clear_button->GetPosition()->GetRect()->PointIn(@mouse_pos)) {
		    				@clear_button->SetFill(false);
		    			}
		    			else {
		    				@clear_button->SetFill(true);
		    			};
		    		};
				};

				Render();

				frame_count += 1;
				if(frame_count >= @framework->GetFps()) {					
					frame_count := 0;
				};

				@framework->FrameEnd();
			};
		}
		else {
			"--- Error Initializing Environment ---"->ErrorLine();
			return;
		};

		leaving {
			@cheer_chunk->Free();
			@aww_chunk->Free();
			@framework->Quit();
		};
	}

	method : KeyboardInput(e : Event) ~ Nil {
		if(@score_tries > 0) {
			select(e->GetKey()->GetKeysym()->GetScancode()) {
				label Scancode->SDL_SCANCODE_BACKSPACE:
	        	label Scancode->SDL_SCANCODE_DELETE: {
	            }

				label Scancode->SDL_SCANCODE_0:
	        	label Scancode->SDL_SCANCODE_KP_0: {
	            	
	            }

	            label Scancode->SDL_SCANCODE_1:
	            label Scancode->SDL_SCANCODE_KP_1: {
	            	
	            }

	            label Scancode->SDL_SCANCODE_2:
	            label Scancode->SDL_SCANCODE_KP_2: {
	            	
	            }

	            label Scancode->SDL_SCANCODE_3:
	            label Scancode->SDL_SCANCODE_KP_3: {
	            	
	            }

	            label Scancode->SDL_SCANCODE_4:
	            label Scancode->SDL_SCANCODE_KP_4: {
	            	
	            }

	            label Scancode->SDL_SCANCODE_5:
	            label Scancode->SDL_SCANCODE_KP_5: {
	            	
	            }

	            label Scancode->SDL_SCANCODE_6:
	            label Scancode->SDL_SCANCODE_KP_6: {
	            	
	            }

	            label Scancode->SDL_SCANCODE_7:
	            label Scancode->SDL_SCANCODE_KP_7: {
	            	
	            }

	            label Scancode->SDL_SCANCODE_8:
	            label Scancode->SDL_SCANCODE_KP_8: {
	            	
	            }

	            label Scancode->SDL_SCANCODE_9:
	            label Scancode->SDL_SCANCODE_KP_9: {
	            	
	            }
			};
		};
		
		if(e->GetKey()->GetKeysym()->GetScancode() = Scancode->SDL_SCANCODE_RETURN | e->GetKey()->GetKeysym()->GetScancode() = Scancode->SDL_SCANCODE_KP_ENTER) {
			CheckInput();
			@check_button->SetFill(true);
		}
		else if(e->GetKey()->GetKeysym()->GetScancode() = Scancode->SDL_SCANCODE_ESCAPE) {
			ClearInput();
			@clear_button->SetFill(true);
		};
	}

	method : MouseInput(e : Event) ~ Nil {
		Cursor->GetMouseState(@mouse_x, @mouse_y);
		@mouse_pos->SetX(@mouse_x->Get());
		@mouse_pos->SetY(@mouse_y->Get());

		if(@check_button->GetPosition()->GetRect()->PointIn(@mouse_pos)) {
			CheckInput();
		}
		else if(@clear_button->GetPosition()->GetRect()->PointIn(@mouse_pos)) {
			ClearInput();
		}
		else if(@score_tries > 0) {
#~			
			found := false;
			each(i : @card_carry_boxes) {
				card_carry_box := @card_carry_boxes[i];
				if(card_carry_box->GetPosition()->GetRect()->PointIn(@mouse_pos)) {
					card_carry_box->SetColor(@card_carry_neutral_color);
					card_carry_box->SetFill(true);
					@card_carry_string_index := i;
					found := true;
				}
				else {
					card_carry_box->SetFill(false);
				};				
			};
~#
		};
	}

	method : CheckInput() ~ Nil {
		if(@score_tries > 0) {
			
		};
	}

	method : ClearInput() ~ Nil {
		if(@score_tries > 0) {
		}
		else {
			Reset();
		};
	}

	method : GenerateProblem() ~ Nil {
		
	}

	method : NextProblem() ~ Nil {
		ClearInput();
		GenerateProblem();
	}

	method : Reset() ~ Nil {
		@score_index := 0;
		@score_tries := 10;

		@clear_button->SetFill(true);
		@clear_button_text->RenderedText("Clear");

		NextProblem();
	}

	method : Render() ~ Nil {
		@framework->Clear();

		if(@score_tries > 0) {
			RenderGame();
		}
		else {
			RenderFinalScore();
		};

		@framework->Show();
	}

	method : RenderGame() ~ Nil {
		# card
		@card->Render(GameValues->SCREEN_PADDING, GameValues->SCREEN_PADDING * 3);

		#
		@card_table_text->Render(GameValues->SCREEN_WIDTH / 2 - @card_table_text->GetWidth() / 2, GameValues->SCREEN_PADDING * 2);

		# problem and inputs
		RenderProblem();
		RenderInputs();

		# sign
		@card_text_mul_sign->Render(GameValues->SCREEN_PADDING * 6, GameValues->SCREEN_HEIGHT - GameValues->SCREEN_PADDING * 8);

		@card_text_eql_sign->Render(GameValues->SCREEN_PADDING * 10, GameValues->SCREEN_HEIGHT - GameValues->SCREEN_PADDING * 8);
		
		# clear button
		@clear_button->Render(GameValues->SCREEN_WIDTH / 2 - @clear_button->GetWidth() / 2, GameValues->SCREEN_HEIGHT - GameValues->SCREEN_PADDING * 4);
		@clear_button_text->Render(GameValues->SCREEN_WIDTH / 2 - @clear_button_text->GetWidth() / 2, GameValues->SCREEN_HEIGHT - GameValues->SCREEN_PADDING * 4);

		# check button
		@check_button->Render(GameValues->SCREEN_WIDTH / 2 - @check_button->GetWidth() / 2, GameValues->SCREEN_HEIGHT - GameValues->SCREEN_PADDING * 2.75);
		@check_button_text->Render(GameValues->SCREEN_WIDTH / 2 - @check_button_text->GetWidth() / 2, GameValues->SCREEN_HEIGHT - GameValues->SCREEN_PADDING * 2.75);
	}

	method : RenderProblem() ~ Nil {
		@card_text_top->Render(GameValues->SCREEN_PADDING * 4, GameValues->SCREEN_HEIGHT - GameValues->SCREEN_PADDING * 8);
		@card_text_bottom->Render(GameValues->SCREEN_PADDING * 8, GameValues->SCREEN_HEIGHT - GameValues->SCREEN_PADDING * 8);
	}

	method : RenderInputs() ~ Nil {
		@card_carry_box->Render(GameValues->SCREEN_PADDING * 12, GameValues->SCREEN_HEIGHT - GameValues->SCREEN_PADDING * 8);
		@card_carry_text->Render(GameValues->SCREEN_PADDING * 13.5, GameValues->SCREEN_HEIGHT - GameValues->SCREEN_PADDING * 8);
	}

	method : RenderFinalScore() ~ Nil {
	}

	enum Layout {
	}

	consts GameValues {
		SCREEN_WIDTH := 630,
		SCREEN_HEIGHT := 400,
		SCREEN_PADDING := 30,
		PLAY_TIME := 60 * 5
	}
}
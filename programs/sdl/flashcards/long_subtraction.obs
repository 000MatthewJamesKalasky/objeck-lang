class LongSubtraction {
	enum Line {
		CARRY,
		TOP,
		BOTTOM,
		ANSWER
	}

	function : Main(args : String[]) ~ Nil {
		problem := GenerateProblem();

		ShowProblem(problem);
		SetAnswer(problem);

		CheckProblem(problem)->PrintLine();
		ShowProblem(problem);
	}

	function : SetAnswer(problem : String[,]) ~ Nil {
		values := System.IO.Console->ReadString()->Split(" ");
		if(values->Size() = 3) {
			problem[Line->CARRY, 0] := values[2];
			problem[Line->CARRY, 1] := values[1];
			problem[Line->CARRY, 2] := values[0];
		};

		values := System.IO.Console->ReadString()->Split(" ");
		if(values->Size() = 3) {
			problem[Line->ANSWER, 0] := values[2];
			problem[Line->ANSWER, 1] := values[1];
			problem[Line->ANSWER, 2] := values[0];
		};
	}

	function : CheckProblem(problem : String[,]) ~ Bool {
		barrow := false;

		dims := problem->Size();
		for(i := dims[1] - 1; i > -1; i -= 1;) {
			carry := 0;
			if(problem[Line->CARRY, i] <> Nil) {
				carry := problem[Line->CARRY, i]->ToInt();				
			};

			top := 0;
			if(problem[Line->TOP, i] <> Nil) {
				top := problem[Line->TOP, i]->ToInt();
			};

			bottom := 0;
			if(problem[Line->BOTTOM, i] <> Nil) {
				bottom := problem[Line->BOTTOM, i]->ToInt();
			};

			# check barrow
			neg_borrow := false;
			if(barrow) {
				top -= 1;
				if(top < 0) {
					top := 9;
					barrow := neg_borrow := true;
				};
			};
			
			# do the math
			check : Int;
			if(top < bottom) {	
				top += 10;
				check := top - bottom;				
				barrow := true;
			}
			else {
				check := top - bottom;
				if(<>neg_borrow) {
					barrow := false;
				};
			};

			answer := 0;
			if(problem[Line->ANSWER, i] <> Nil) {
				answer := problem[Line->ANSWER, i]->ToInt();
			};

 "\n\n{$top} equals [{$carry}]\n{$bottom}\n--\n{$check} equals [{$answer}]"->PrintLine();

			if(answer <> check) {
				return false;
			};
		};

		return true;
	}

	function : GenerateProblem() ~ String[,] {
		problem := String->New[4, 3];

		# set top number
		problem[Line->TOP, 0] := "3"; problem[Line->TOP, 1] := "8"; problem[Line->TOP, 2] := "0";
		# set bottom number
		problem[Line->BOTTOM, 1] := "7"; problem[Line->BOTTOM, 2] := "3";

		return problem;
	}

	function : ShowProblem(problem : String[,]) ~ Nil {
		dims := problem->Size();
		
		'\n'->Print();
		for(i := 0; i < dims[0]; i += 1;) {
			if(i = Line->ANSWER) {
				"------------------"->PrintLine();
			};

			for(j := 0; j < dims[1]; j += 1;) {
				digit_str := problem[i,j];
				if(digit_str = Nil) {
					" \t"->Print();
				}
				else if(digit_str->Equals("#")) {
					"#\t"->Print();
				}
				else {
					digit := digit_str->ToInt();
					"{$digit}\t"->Print();
				};
				
			};

			'\n'->Print();
			if(i = Line->CARRY) {
				"=================="->PrintLine();
			};
		};
	}
}
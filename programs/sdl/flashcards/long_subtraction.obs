use Game.SDL2;
use Game.Framework;

class Flashcards {
	@framework : GameFramework;

	# card
	@card : Rectangle;
	@card_line : Rectangle;
	@card_problem_font : Font;

	# carry boxes
	@card_carry_boxes : Rectangle[];

	# card text
	@card_text_color : Color;
	@card_texts : TextSprite[];
	@card_text_sign : TextSprite;

	# mouse input
	@mouse_x : IntHolder;
	@mouse_y : IntHolder;
	@mouse_pos : Point;

	function : Main(args : String[]) ~ Nil {
		flash_cards : Flashcards;
		
		if(args->Size() = 1) {
			flash_cards := Flashcards->New(true);
		}
		else {
			flash_cards := Flashcards->New(false);
		};

		flash_cards->Run();
	}

	New(is_sound : Bool) {
		@framework := GameFramework->New(GameValues->SCREEN_WIDTH, GameValues->SCREEN_HEIGHT, "Flashcards");		
		@framework->SetClearColor(Color->New(0, 0, 0));
		
		LoadMedia();
		BuildCard();
		WireInput();
	}

	method : LoadMedia() ~ Nil {
		font_path :=  "./media/chalk.ttf";
		@card_problem_font := Font->New(font_path, 96);
		if(@card_problem_font->IsNull()) {
			"Failed to load font '{$font_path}'!"->ErrorLine();
			Runtime->Exit(1);
		};
	}

	method : BuildCard() ~ Nil {
		# card
		@card := @framework->AddRectangle(GameValues->SCREEN_WIDTH - GameValues->SCREEN_PADDING * 2, GameValues->SCREEN_HEIGHT - GameValues->SCREEN_PADDING * 4);
		@card->SetColor(Color->New(46, 139, 87));
		@card->SetFill(true);

		# carry boxes
		@card_carry_boxes := Rectangle->New[6];
		each(i : @card_carry_boxes) {
			@card_carry_boxes[i] := @framework->AddRectangle(120, 80);
			@card_carry_boxes[i]->SetColor(Color->New(179, 229, 252));
			@card_carry_boxes[i]->SetFill(false);
		};

		# text
		@card_text_color := Color->New(224, 219, 200);

		@card_texts := TextSprite->New[6];
		each(i : @card_texts) {
			@card_texts[i] := @framework->AddTextSprite();
			@card_texts[i]->SetFont(@card_problem_font);
		};

		# sign
		@card_text_sign := @framework->AddTextSprite();
		@card_text_sign->SetFont(@card_problem_font);
		@card_text_sign->RenderedText("-", @card_text_color);

		# line
		@card_line := @framework->AddRectangle(GameValues->SCREEN_PADDING * 14, 6);
		@card_line->SetColor(@card_text_color);
		@card_line->SetFill(true);
	}

	method : WireInput() ~ Nil {
		@mouse_x := IntHolder->New();
		@mouse_y := IntHolder->New();
		@mouse_pos := Point->New(0, 0);
	}

	method : Run() ~ Nil {
		if(@framework->IsOk()) {
			e := @framework->GetEvent();
						
			quit := false;
			while(<>quit) {
				@framework->FrameStart();
				
				# process input
				while(e->Poll() <> 0) {
					if(e->GetType() = EventType->SDL_QUIT) {
						quit := true;
					}
					# keyboard
					else if(e->GetType() = EventType->SDL_KEYDOWN & e->GetKey()->GetRepeat() = 0) {
				        KeyboardInput(e);
				    }
				    # mouse
				    else if(e->GetType() = EventType->SDL_MOUSEBUTTONDOWN) {				    	
				    	MouseInput(e);
				    };
				};

				Render();

				frame_count += 1;
				if(frame_count >= @framework->GetFps()) {					
					frame_count := 0;
				};

				@framework->FrameEnd();
			};
		}
		else {
			"--- Error Initializing Environment ---"->ErrorLine();
			return;
		};

		leaving {
			
		};
	}

	method : KeyboardInput(e : Event) ~ Nil {		
	}

	method : MouseInput(e : Event) ~ Nil {
		Cursor->GetMouseState(@mouse_x, @mouse_y);
		@mouse_pos->SetX(@mouse_x->Get());
		@mouse_pos->SetY(@mouse_y->Get());

		each(i : @card_carry_boxes) {
			card_carry_box := @card_carry_boxes[i];
			if(card_carry_box->GetPosition()->GetRect()->PointIn(@mouse_pos)) {
				 card_carry_box->SetFill(true);
			}
			else {
				card_carry_box->SetFill(false);
			};
		};
	}

	method : Render() ~ Nil {
		@framework->Clear();

		# card
		@card->Render(GameValues->SCREEN_PADDING, GameValues->SCREEN_PADDING * 3);

		# carry
		@card_carry_boxes[CarryBoxes->CARRY_RIGHT_TOP]->Render(GameValues->SCREEN_WIDTH - GameValues->SCREEN_PADDING * 7.5, GameValues->SCREEN_PADDING * 5);
		@card_carry_boxes[CarryBoxes->CARRY_RIGHT_BOTTOM]->Render(GameValues->SCREEN_WIDTH - GameValues->SCREEN_PADDING * 7.5, GameValues->SCREEN_PADDING * 14.5);

		@card_carry_boxes[CarryBoxes->CARRY_MIDDLE_TOP]->Render(GameValues->SCREEN_WIDTH - GameValues->SCREEN_PADDING * 11.5, GameValues->SCREEN_PADDING * 5);
		@card_carry_boxes[CarryBoxes->CARRY_MIDDLE_BOTTOM]->Render(GameValues->SCREEN_WIDTH - GameValues->SCREEN_PADDING * 11.5, GameValues->SCREEN_PADDING * 14.5);

		@card_carry_boxes[CarryBoxes->CARRY_LEFT_TOP]->Render(GameValues->SCREEN_WIDTH - GameValues->SCREEN_PADDING * 15.5, GameValues->SCREEN_PADDING * 5);
		@card_carry_boxes[CarryBoxes->CARRY_LEFT_BOTTOM]->Render(GameValues->SCREEN_WIDTH - GameValues->SCREEN_PADDING * 15.5, GameValues->SCREEN_PADDING * 14.5);

		# top row of text
		top_x_offset := 7;
		@card_texts[CarryBoxes->CARRY_RIGHT_TOP]->RenderedText("9", @card_text_color);
		@card_texts[CarryBoxes->CARRY_RIGHT_TOP]->Render(GameValues->SCREEN_WIDTH - GameValues->SCREEN_PADDING * 7, GameValues->SCREEN_PADDING * 7);

		@card_texts[CarryBoxes->CARRY_RIGHT_BOTTOM]->RenderedText("8", @card_text_color);
		@card_texts[CarryBoxes->CARRY_RIGHT_BOTTOM]->Render(GameValues->SCREEN_WIDTH - GameValues->SCREEN_PADDING * 11, GameValues->SCREEN_PADDING * 7);

		@card_texts[CarryBoxes->CARRY_MIDDLE_TOP]->RenderedText("7", @card_text_color);
		@card_texts[CarryBoxes->CARRY_MIDDLE_TOP]->Render(GameValues->SCREEN_WIDTH - GameValues->SCREEN_PADDING * 15, GameValues->SCREEN_PADDING * 7);

		# bottom row of text
		@card_texts[CarryBoxes->CARRY_MIDDLE_BOTTOM]->RenderedText("6", @card_text_color);
		@card_texts[CarryBoxes->CARRY_MIDDLE_BOTTOM]->Render(GameValues->SCREEN_WIDTH - GameValues->SCREEN_PADDING * 7, GameValues->SCREEN_PADDING * 10);

		@card_texts[CarryBoxes->CARRY_LEFT_TOP]->RenderedText("5", @card_text_color);
		@card_texts[CarryBoxes->CARRY_LEFT_TOP]->Render(GameValues->SCREEN_WIDTH - GameValues->SCREEN_PADDING * 11, GameValues->SCREEN_PADDING * 10);

		@card_texts[CarryBoxes->CARRY_LEFT_BOTTOM]->RenderedText("4", @card_text_color);
		@card_texts[CarryBoxes->CARRY_LEFT_BOTTOM]->Render(GameValues->SCREEN_WIDTH - GameValues->SCREEN_PADDING * 15, GameValues->SCREEN_PADDING * 10);

		# sign		
		@card_text_sign->Render(GameValues->SCREEN_WIDTH - GameValues->SCREEN_PADDING * 17, GameValues->SCREEN_PADDING * 10);

		# line
		@card_line->Render(GameValues->SCREEN_WIDTH - GameValues->SCREEN_PADDING * 17, GameValues->SCREEN_PADDING * 14);

		@framework->Show();
	}

	enum CarryBoxes {
		CARRY_LEFT_TOP,
		CARRY_LEFT_BOTTOM,
		CARRY_MIDDLE_TOP,
		CARRY_MIDDLE_BOTTOM,
		CARRY_RIGHT_TOP,
		CARRY_RIGHT_BOTTOM
	}

	consts GameValues {
		SCREEN_WIDTH := 800,
		SCREEN_HEIGHT := 800,
		SCREEN_PADDING := 40,
		PLAY_TIME := 60 * 5
	}
}

# -------------------------------------

class LongSubtraction {
	enum Line {
		CARRY,
		TOP,
		BOTTOM,
		ANSWER
	}

#~
	function : Main(args : String[]) ~ Nil {
		problem := GenerateProblem();

		ShowProblem(problem);
		SetAnswer(problem);

		CheckProblem(problem)->PrintLine();
		ShowProblem(problem);
	}
~#

	function : SetAnswer(problem : String[,]) ~ Nil {
		values := System.IO.Console->ReadString()->Split(" ");
		if(values->Size() = 3) {
			problem[Line->CARRY, 0] := values[2];
			problem[Line->CARRY, 1] := values[1];
			problem[Line->CARRY, 2] := values[0];
		};

		values := System.IO.Console->ReadString()->Split(" ");
		if(values->Size() = 3) {
			problem[Line->ANSWER, 0] := values[2];
			problem[Line->ANSWER, 1] := values[1];
			problem[Line->ANSWER, 2] := values[0];
		};
	}

	function : CheckProblem(problem : String[,]) ~ Bool {
		barrow := false;

		dims := problem->Size();
		for(i := dims[1] - 1; i > -1; i -= 1;) {
			carry := 0;
			if(problem[Line->CARRY, i] <> Nil) {
				carry := problem[Line->CARRY, i]->ToInt();				
			};

			top := 0;
			if(problem[Line->TOP, i] <> Nil) {
				top := problem[Line->TOP, i]->ToInt();
			};

			bottom := 0;
			if(problem[Line->BOTTOM, i] <> Nil) {
				bottom := problem[Line->BOTTOM, i]->ToInt();
			};

			# check barrow
			neg_borrow := false;
			if(barrow) {
				top -= 1;
				if(top < 0) {
					top := 9;
					barrow := neg_borrow := true;
				};
			};
			
			# do the math
			check : Int;
			if(top < bottom) {	
				top += 10;
				check := top - bottom;				
				barrow := true;
			}
			else {
				check := top - bottom;
				if(<>neg_borrow) {
					barrow := false;
				};
			};

			answer := 0;
			if(problem[Line->ANSWER, i] <> Nil) {
				answer := problem[Line->ANSWER, i]->ToInt();
			};

 "\n\n{$top} equals [{$carry}]\n{$bottom}\n--\n{$check} equals [{$answer}]"->PrintLine();

			if(answer <> check) {
				return false;
			};
		};

		return true;
	}

	function : GenerateProblem() ~ String[,] {
		problem := String->New[4, 3];

		# set top number
		problem[Line->TOP, 0] := "3"; problem[Line->TOP, 1] := "8"; problem[Line->TOP, 2] := "0";
		# set bottom number
		problem[Line->BOTTOM, 1] := "7"; problem[Line->BOTTOM, 2] := "3";

		return problem;
	}

	function : ShowProblem(problem : String[,]) ~ Nil {
		dims := problem->Size();
		
		'\n'->Print();
		for(i := 0; i < dims[0]; i += 1;) {
			if(i = Line->ANSWER) {
				"------------------"->PrintLine();
			};

			for(j := 0; j < dims[1]; j += 1;) {
				digit_str := problem[i,j];
				if(digit_str = Nil) {
					" \t"->Print();
				}
				else if(digit_str->Equals("#")) {
					"#\t"->Print();
				}
				else {
					digit := digit_str->ToInt();
					"{$digit}\t"->Print();
				};
				
			};

			'\n'->Print();
			if(i = Line->CARRY) {
				"=================="->PrintLine();
			};
		};
	}
}
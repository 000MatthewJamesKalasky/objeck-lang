class LongSubtraction {
	enum Line {
		CARRY,
		TOP,
		BOTTOM,
		ANSWER
	}

	function : Main(args : String[]) ~ Nil {
		problem := GenerateProblem();

		PrintProblem(problem);
		SetAnswer(problem);		
		CheckProblem(problem);
	}

	function : SetAnswer(problem : String[,]) ~ Nil {
		values := System.IO.Console->ReadString()->Split(" ");
		if(values->Size() = 3) {
			problem[Line->CARRY, 0] := values[2];
			problem[Line->CARRY, 1] := values[1];
			problem[Line->CARRY, 2] := values[0];
		};

		values := System.IO.Console->ReadString()->Split(" ");
		if(values->Size() = 3) {
			problem[Line->ANSWER, 0] := values[2];
			problem[Line->ANSWER, 1] := values[1];
			problem[Line->ANSWER, 2] := values[0];
		};
	}

	function : CheckProblem(problem : String[,]) ~ Nil {
		carry_over := false;

		dims := problem->Size();
		for(i := dims[1] - 1; i > -1; i -= 1;) {
			carry := 0;
			if(problem[Line->CARRY, i] <> Nil) {
				carry := problem[Line->CARRY, i]->ToInt();
			};

			top := 0;
			if(problem[Line->TOP, i] <> Nil) {
				top := problem[Line->TOP, i]->ToInt();
			};

			bottom := 0;
			if(problem[Line->BOTTOM, i] <> Nil) {
				bottom := problem[Line->BOTTOM, i]->ToInt();
			};

			check : Int;
			if(carry = 0) {
				check := CarryOver(top, carry_over) - bottom;
				carry_over := false;
			}
			else {
				check := CarryOver(carry, carry_over) - bottom;
				carry_over := true;
			};

			answer := 0;
			if(problem[Line->ANSWER, i] <> Nil) {
				answer := problem[Line->ANSWER, i]->ToInt();
			};

			"\n\n{$carry}\n==\n{$top}\n{$bottom}\n--\n{$answer} equals {$check}?"->PrintLine();
		};
	}

	function : CarryOver(number : Int, carry_over : Bool) ~ Int {
		if(<>carry_over) {
			return number;
		};

		if(number = 0) {
			return 9;
		};

		return number - 1;
	}

	function : GenerateProblem() ~ String[,] {
		problem := String->New[4, 3];

		# set top number
		problem[Line->TOP, 0] := "1"; problem[Line->TOP, 1] := "0"; problem[Line->TOP, 2] := "1";
		# set bottom number
		problem[Line->BOTTOM, 1] := "7"; problem[Line->BOTTOM, 2] := "8";

		return problem;
	}

	function : PrintProblem(problem : String[,]) ~ Nil {
		dims := problem->Size();
		
		for(i := 0; i < dims[0]; i += 1;) {
			if(i = Line->ANSWER) {
				"------------------"->PrintLine();
			};

			for(j := 0; j < dims[1]; j += 1;) {
				digit_str := problem[i,j];
				if(digit_str = Nil) {
					" \t"->Print();
				}
				else {
					digit := digit_str->ToInt();
					"{$digit}\t"->Print();
				};
				
			};

			'\n'->Print();
			if(i = Line->CARRY) {
				"=================="->PrintLine();
			};
		};
	}
}
#~
Lesson 14
http://lazyfoo.net/tutorials/SDL/14_animated_sprites_and_vsync/index.php
~#

use SDL2;

class Sprite {
	@renderer : Renderer;
	@font : Font;
	@texture : Texture;
	@width : Int;
	@height : Int;

	New(renderer : Renderer, font : Font := Nil) {
		@renderer := renderer;
		@font := font;
	}

	method : public : LoadFromRenderedText(textureText : String, textColor : Color) ~ Bool {
		Free();

		# Render text surface
		textSurface := @font->RenderTextSolid(textureText, textColor);
		if(textSurface->IsNull()) {
			"Unable to render text surface!"->ErrorLine();
			return false;
		};

		texture := textSurface->CreateTexture(@renderer);
		@width := textSurface->GetW();
		@height := textSurface->GetH();
		
		@texture := texture;
		return @texture <> Nil;
	}

	# Loads image at specified path
	method : public : LoadFromFile(path : String) ~ Bool {
		# Load image at specified path
		loadedSurface := Image->Load(path);
		if(loadedSurface->IsNull()) {
			"Unable to load surface"->ErrorLine();
			return false;
		};

		loadedSurface->SetColorKey(true, loadedSurface->GetPixelFormat()->MapRGB(0, 0xFF, 0xFF));

		texture := loadedSurface->CreateTexture(@renderer);
		if(texture->IsNull()) {
			"Unable to create texture!"->ErrorLine();
			return false;
		};

		@width := loadedSurface->GetW();
		@height := loadedSurface->GetH();
		
		loadedSurface->Free();
		@texture := texture;

		return @texture <> Nil;
	}

	# Deallocates texture
	method : public : Free() ~ Nil {
		if(@texture <> Nil)	{
			@texture->Destroy();
		};
	}

	method : public : SetColor(red : Int, green : Int, blue : Int) ~ Nil {
		@texture->SetColorMod(red, green, blue);
	}

	method : public : SetBlendMode(blending : BlendMode) ~ Nil {
		# Set blending function
		@texture->SetBlendMode(blending);
	}
	
	method : public : SetAlpha(alpha : Int) ~ Nil {
		# Modulate texture alpha
		@texture->SetAlphaMod(alpha );
	}

	# Renders texture at given point
	method : public : Render(x : Int, y : Int, clip : Rect := Nil) ~ Nil {
		render_quad := Rect->New(x, y, @width, @height);

		if(clip <> Nil)	{
			render_quad->SetW(clip->GetW());
			render_quad->SetH(clip->GetH());
		};

		@renderer->Copy(@texture, clip, render_quad);
	}

	# Gets image dimensions
	method : public : GetWidth() ~ Int {
		return @width;
	}

	method : public : GetHeight() ~ Int {
		return @height;
	}
}

consts Environment {
	SCREEN_WIDTH := 800,
	SCREEN_HEIGHT := 600,
	FPS := 30,
	RED_ZONE := 60
}

class Paddle {
	FRAME_RATE : static : Int;
	SPEED : static : Int;

	@window : Window;
	@renderer : Renderer;

	@paddle_sprite : Sprite;
	@ball_sprite : Sprite;
	@text_texture : Sprite;
	@score_color : Color;
	
	@ball_x : Int;
	@ball_y : Int;
	@ball_x_dir : Int;
	@ball_y_dir : Int;
	@paddle_x : Int;
	@paddle_y : Int;

	@score : Int;
	
	function : Main(args : String[]) ~ Nil {
		game := Paddle->New();
		game->Run();
	}

	New() {
	}

	method : Run() ~ Nil {
		if(<>Init()) {
			"Failed to initialize!"->ErrorLine();
			return;
		};
		
		if(<>LoadMedia()) {
			"Failed to load media!"->ErrorLine();
			return;
		};

		FRAME_RATE := 1000 / Environment->FPS->As(Int);
		SPEED := 8;

		@ball_x_dir := 1;
		@ball_y_dir := -1;

		@ball_x := Environment->SCREEN_WIDTH->As(Int) / 2 - @ball_sprite->GetWidth() / 2;
		@ball_y := Environment->SCREEN_HEIGHT->As(Int) - @paddle_sprite->GetHeight() - 
			@ball_sprite->GetHeight() - Environment->RED_ZONE->As(Int);

		@paddle_x := Environment->SCREEN_WIDTH->As(Int) / 2 - @paddle_sprite->GetWidth() / 2;
		@paddle_y := Environment->SCREEN_HEIGHT->As(Int) - @paddle_sprite->GetHeight() - 
			Environment->RED_ZONE->As(Int);

		quit := false;
		e := Event->New();

		while(<>quit) {
			start := Timer->GetTicks();

			while( e->Poll() <> 0 ) {
				# User requests quit
				if(e->GetType() = EventType->SDL_QUIT) {
					quit := true;
				};
			};

			Paddle(Keyboard->GetState());
			Ball();
			Render();

			end := start - Timer->GetTicks();
			if(end < FRAME_RATE) {
				Timer->Delay(FRAME_RATE - end);
			};
		};

		e->Free();

		Quit();
	}

	method : native : Paddle(key_states : Byte[]) ~ Nil {
		if(key_states[Scancode->SDL_SCANCODE_LEFT] <> 0 ) {
			if(@paddle_x > 0) {
				@paddle_x -= SPEED;
				if(@paddle_x < 0) {
					@paddle_x := 0;
				};
			};
		}
		else if(key_states[Scancode->SDL_SCANCODE_RIGHT] <> 0) {
			if(@paddle_x + @paddle_sprite->GetWidth() < Environment->SCREEN_WIDTH->As(Int)) {
				@paddle_x += SPEED;
				if(@paddle_x + @paddle_sprite->GetWidth() > Environment->SCREEN_WIDTH->As(Int)) {
					@paddle_x := Environment->SCREEN_WIDTH->As(Int) - @paddle_sprite->GetWidth();
				};
			};
		}
		else if(key_states[Scancode->SDL_SCANCODE_UP] <> 0) {
		};
	}

	method : native : Ball() ~ Nil {
		# hit top
		if(@ball_y <= 0) {
			@ball_y_dir := 1;
		}
		# hit bottom
		else if(@ball_y + @ball_sprite->GetHeight() >= Environment->SCREEN_HEIGHT->As(Int)) {
			@ball_y_dir := -1;
		};

		# hit left
		if(@ball_x <= 0) {
			@ball_x_dir := 1;
		}
		# hit right
		else if(@ball_x + @ball_sprite->GetWidth() >= Environment->SCREEN_WIDTH->As(Int)) {
			@ball_x_dir := -1;
		};

		@ball_x += @ball_x_dir * SPEED;
		@ball_y += @ball_y_dir * SPEED;
	}

	method : Render() ~ Nil {
		@renderer->SetDrawColor(70, 130, 180, 0);
		@renderer->Clear();

		@ball_sprite->Render(@ball_x, @ball_y);
		@paddle_sprite->Render(@paddle_x, @paddle_y);
		@text_texture->Render(10, 10);
		
		@renderer->Present();
	}

	method : Init() ~ Bool {
		# Initialize SDL
		if(Core->Init(HardwareFlags->SDL_INIT_VIDEO->As(Int)) < 0) {
			"SDL could not initialize!"->ErrorLine();
			return false;
		};
		
		if(<>Hints->Set("SDL_RENDER_SCALE_QUALITY", "1")) {
			"Warning: Linear texture filtering not enabled!"->ErrorLine();
			return false;
		};

		# Create window
		@window := Window->New("SDL Tutorial", WindowFlags->SDL_WINDOWPOS_UNDEFINED, 			
			WindowFlags->SDL_WINDOWPOS_UNDEFINED, Environment->SCREEN_WIDTH->As(Int), 
			Environment->SCREEN_HEIGHT->As(Int), WindowFlags->SDL_WINDOW_SHOWN);
		if(@window->IsNull()) {
			"Cannot create window!"->ErrorLine();
			return false;
		};

		# Get window surface
		@renderer := Renderer->New(@window, -1, 
			(RendererFlags->SDL_RENDERER_ACCELERATED and RendererFlags->SDL_RENDERER_PRESENTVSYNC)->As(Int));
		if(@renderer->IsNull()) {
			"Cannot create renderer!"->ErrorLine();
			return false;
		};
		@renderer->SetDrawColor(0xFF, 0xFF, 0xFF, 0xFF);

		@paddle_sprite := Sprite->New(@renderer);
		@ball_sprite := Sprite->New(@renderer);

		img_flags := ImageFlags->IMG_INIT_PNG->As(Int);
		if((Image->Init(img_flags) and img_flags) = 0) {
			"SDL image could not initialize!"->ErrorLine();
			return false;
		};

		if(Font->Init() < 0) {
			"SDL_ttf could not initialize!"->ErrorLine();
			return false;
		};

		@font := Font->New("images/digital.ttf", 28);
		if(@font->IsNull()) {
			"Failed to load font!"->ErrorLine();
			return false;
		};
		@text_texture := Sprite->New(@renderer, @font);
		
		return true;
	}
	
	method : LoadMedia() ~ Bool {
		if(<>@paddle_sprite->LoadFromFile("images/paddle.png")) {
			return false;
		};

		if(<>@ball_sprite->LoadFromFile("images/ball.png")) {
			return false;
		};

		@score_color := Color->New(245, 245, 245);
		if(<>@text_texture->LoadFromRenderedText( "Count: {$@score}", @score_color)) {
			"Failed to render text texture!"->ErrorLine();
			return false;
		};

		return true;
	}
	
	method : LoadTexture(path : String) ~ Texture {
		# Load image at specified path
		loadedSurface := Image->Load(path);
		if(loadedSurface->IsNull()) {
			"Unable to load surface"->ErrorLine();
			return Nil;
		};

		texture := loadedSurface->CreateTexture(@renderer);
		if(texture->IsNull()) {
			"Unable to create texture!"->ErrorLine();
			return Nil;
		};

		loadedSurface->Free();
		
		return texture;
	}
	
	method : Quit() ~ Nil {
		@paddle_sprite->Free();
		@ball_sprite->Free();
		@text_texture->Free();
		@renderer->Destroy();
		@window->Destroy();

		# Quit SDL subsystems
		Image->Quit();
		Font->Quit();
		Core->Quit();
	}
}

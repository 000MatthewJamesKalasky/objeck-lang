#~
Lesson 14
http://lazyfoo.net/tutorials/SDL/14_animated_sprites_and_vsync/index.php
~#

use SDL2;

class Sprite {
	@renderer : Renderer;
	@font : Font;
	@texture : Texture;
	@width : Int;
	@height : Int;

	New(renderer : Renderer, font : Font := Nil) {
		@renderer := renderer;
		@font := font;
	}

	method : public : LoadFromRenderedText(textureText : String, textColor : Color) ~ Bool {
		Free();

		# Render text surface
		textSurface := @font->RenderTextSolid(textureText, textColor);
		if(textSurface->IsNull()) {
			"Unable to render text surface!"->ErrorLine();
			return false;
		};

		texture := textSurface->CreateTexture(@renderer);
		@width := textSurface->GetW();
		@height := textSurface->GetH();
		
		@texture := texture;
		return @texture <> Nil;
	}

	# Loads image at specified path
	method : public : LoadFromFile(path : String) ~ Bool {
		# Load image at specified path
		loadedSurface := Image->Load(path);
		if(loadedSurface->IsNull()) {
			"Unable to load surface"->ErrorLine();
			return false;
		};

		loadedSurface->SetColorKey(true, loadedSurface->GetPixelFormat()->MapRGB(0, 0xFF, 0xFF));

		texture := loadedSurface->CreateTexture(@renderer);
		if(texture->IsNull()) {
			"Unable to create texture!"->ErrorLine();
			return false;
		};

		@width := loadedSurface->GetW();
		@height := loadedSurface->GetH();
		
		loadedSurface->Free();
		@texture := texture;

		return @texture <> Nil;
	}

	# Deallocates texture
	method : public : Free() ~ Nil {
		if(@texture <> Nil)	{
			@texture->Destroy();
		};
	}

	method : public : SetColor(red : Int, green : Int, blue : Int) ~ Nil {
		@texture->SetColorMod(red, green, blue);
	}

	method : public : SetBlendMode(blending : BlendMode) ~ Nil {
		# Set blending function
		@texture->SetBlendMode(blending);
	}
	
	method : public : SetAlpha(alpha : Int) ~ Nil {
		# Modulate texture alpha
		@texture->SetAlphaMod(alpha );
	}

	# Renders texture at given point
	method : public : Render(x : Int, y : Int, clip : Rect := Nil) ~ Nil {
		render_quad := Rect->New(x, y, @width, @height);

		if(clip <> Nil)	{
			render_quad->SetW(clip->GetW());
			render_quad->SetH(clip->GetH());
		};

		@renderer->Copy(@texture, clip, render_quad);
	}

	# Gets image dimensions
	method : public : GetWidth() ~ Int {
		return @width;
	}

	method : public : GetHeight() ~ Int {
		return @height;
	}
}

class Paddle {
	SCREEN_WIDTH : static : Int;
	SCREEN_HEIGHT : static : Int;

	FRAME_RATE : static : Int;
	VELOCITY : static : Int;
	BALL_LEFT : static : Int;
	BALL_RIGHT : static : Int;
	BALL_CENTER : static : Int;
	BALL_TOP : static : Int;
	BALL_BOTTOM : static : Int;
	PADDLE_LEFT : static : Int;
	PADDLE_RIGHT : static : Int;
	PADDLE_CENTER : static : Int;
	PADDLE_TOP : static : Int;
	PADDLE_BOTTOM : static : Int;
	PADDLE_HEIGHT : static : Int;
	BALL_PADDLE_BOTTOM : static : Int;

	@window : Window;
	@renderer : Renderer;

	@sprite_paddle_texture : Sprite;
	@sprite_ball_texture : Sprite;
	@text_texture : Sprite;
	@score_color : Color;
	
	@ball_x : Int;
	@ball_y : Int;
	@x_dir : Int;
	@y_dir : Int;
	@paddle_x : Int;
	@paddle_y : Int;

	@score : Int;
	
	function : Main(args : String[]) ~ Nil {
		game := Paddle->New();
		game->Run();
	}

	New () {
	}

	method : Run() ~ Nil {
		# Start up SDL and create window
		if( <>Init() ) {
			"Failed to initialize!"->ErrorLine();
			return;
		};
		
		# Load media
		if( <>LoadMedia() ) {
			"Failed to load media!"->ErrorLine();
			return;
		};

		# Main loop flag
		quit := false;

		FRAME_RATE := 1000/30;
		VELOCITY := FRAME_RATE / 3;

		BALL_LEFT := 0 ;
		BALL_RIGHT := SCREEN_WIDTH - @sprite_ball_texture->GetWidth();
		BALL_CENTER := SCREEN_WIDTH / 2 - @sprite_ball_texture->GetWidth() / 2;
		BALL_TOP := 0;
		BALL_BOTTOM := SCREEN_HEIGHT; # - @sprite_ball_texture->GetHeight();

		PADDLE_LEFT := 0;
		PADDLE_RIGHT := SCREEN_WIDTH - @sprite_paddle_texture->GetWidth();
		PADDLE_CENTER := SCREEN_WIDTH / 2 - @sprite_paddle_texture->GetWidth() / 2;
		PADDLE_TOP := 0;
		PADDLE_BOTTOM := SCREEN_HEIGHT - @sprite_paddle_texture->GetHeight();
		PADDLE_HEIGHT := SCREEN_HEIGHT - @sprite_paddle_texture->GetHeight() - 60;

		BALL_PADDLE_BOTTOM := PADDLE_HEIGHT - @sprite_ball_texture->GetHeight();

		# Event handler
		e := Event->New();

		@ball_x := BALL_CENTER;
		@ball_y := BALL_PADDLE_BOTTOM;

		@paddle_x := PADDLE_CENTER;
		@paddle_y := PADDLE_HEIGHT;

		@x_dir := 1;
		@y_dir := 1;

		# While application is running
		while(<>quit) {
			start := Timer->GetTicks();

			# Handle events on queue
			while( e->Poll() <> 0 ) {
				# User requests quit
				if(e->GetType() = EventType->SDL_QUIT) {
					quit := true;
				};
			};

			UpdatePaddle(Keyboard->GetState());
			
			UpdateBall();
			Render();

			end := start - Timer->GetTicks();
			if(end < FRAME_RATE) {
				Timer->Delay(FRAME_RATE - end);
			};
		};
		e->Free();

		Close();
	}

	method : native : UpdatePaddle(key_states : Byte[]) ~ Nil {
		if(key_states[Scancode->SDL_SCANCODE_LEFT] <> 0 ) {
			if(@paddle_x - VELOCITY / 2 > PADDLE_LEFT) {
				@paddle_x -= VELOCITY;
			};
		}
		else if(key_states[Scancode->SDL_SCANCODE_RIGHT] <> 0) {
			if(@paddle_x  + VELOCITY / 2 < PADDLE_RIGHT) {
				@paddle_x += VELOCITY;
			};
		};
	}

	method : native : UpdateBall() ~ Nil {
		# hit left or right
		if(@ball_x <= BALL_LEFT) {
			@x_dir := 1;
		}
		else if(@ball_x >= BALL_RIGHT) {
			@x_dir := -1;
		};
		
		# hit top or bottom
		if(@ball_y <= BALL_TOP) {
			@y_dir := 1;
		};
#~		
		else if(@ball_y >= BALL_BOTTOM) {
			@y_dir := -1;
		};
~#		

		# hit paddle
		ball_center := @ball_x + @sprite_ball_texture->GetWidth() / 2;
		paddle_end := @paddle_x + @sprite_paddle_texture->GetWidth();
		if(@ball_y >= BALL_PADDLE_BOTTOM & ball_center >= @paddle_x & ball_center <= paddle_end) {
if(@ball_y + VELOCITY> BALL_PADDLE_BOTTOM)			
"{$@ball_x}, {$@ball_y}"->PrintLine();
};
			@y_dir := -1;
		}
		else if(@ball_y >= BALL_BOTTOM) {
			color := Color->New(245, 245, 245);
			@score += 1;
			@text_texture->LoadFromRenderedText("Count: {$@score}", @score_color);

			@ball_x := BALL_CENTER;
			@ball_y := BALL_PADDLE_BOTTOM;
			@paddle_x := PADDLE_CENTER;
			@paddle_y := PADDLE_HEIGHT;
		};

		@ball_x += @x_dir * VELOCITY;
		@ball_y += @y_dir * VELOCITY;
	}

	method : Render() ~ Nil {
		@renderer->SetDrawColor(70, 130, 180, 0);
		@renderer->Clear();

		@text_texture->Render(10, 10);
		@sprite_ball_texture->Render(@ball_x, @ball_y);
		@sprite_paddle_texture->Render(@paddle_x, @paddle_y);
		
		@renderer->Present();
	}

	method : Init() ~ Bool {
		SCREEN_WIDTH := 800;
		SCREEN_HEIGHT := 600;
		
		# Initialize SDL
		if(Core->Init(HardwareFlags->SDL_INIT_VIDEO->As(Int)) < 0) {
			"SDL could not initialize!"->ErrorLine();
			return false;
		};
		
		if(<>Hints->Set("SDL_RENDER_SCALE_QUALITY", "1")) {
			"Warning: Linear texture filtering not enabled!"->ErrorLine();
			return false;
		};

		# Create window
		@window := Window->New("SDL Tutorial", WindowFlags->SDL_WINDOWPOS_UNDEFINED, 			
			WindowFlags->SDL_WINDOWPOS_UNDEFINED, SCREEN_WIDTH, SCREEN_HEIGHT, WindowFlags->SDL_WINDOW_SHOWN);
		if(@window->IsNull()) {
			"Cannot create window!"->ErrorLine();
			return false;
		};

		# Get window surface
		@renderer := Renderer->New(@window, -1, 
			(RendererFlags->SDL_RENDERER_ACCELERATED and RendererFlags->SDL_RENDERER_PRESENTVSYNC)->As(Int));
		if(@renderer->IsNull()) {
			"Cannot create renderer!"->ErrorLine();
			return false;
		};
		@renderer->SetDrawColor(0xFF, 0xFF, 0xFF, 0xFF);

		@sprite_paddle_texture := Sprite->New(@renderer);
		@sprite_ball_texture := Sprite->New(@renderer);

		img_flags := ImageFlags->IMG_INIT_PNG->As(Int);
		if((Image->Init(img_flags) and img_flags) = 0) {
			"SDL image could not initialize!"->ErrorLine();
			return false;
		};

		if(Font->Init() < 0) {
			"SDL_ttf could not initialize!"->ErrorLine();
			return false;
		};

		@font := Font->New("images/digital.ttf", 28);
		if(@font->IsNull()) {
			"Failed to load lazy font!"->ErrorLine();
			return false;
		};
		@text_texture := Sprite->New(@renderer, @font);
		
		return true;
	}
	
	method : LoadMedia() ~ Bool {
		if(<>@sprite_paddle_texture->LoadFromFile("images/paddle.png")) {
			return false;
		};

		if(<>@sprite_ball_texture->LoadFromFile("images/ball.png")) {
			return false;
		};

		@score_color := Color->New(245, 245, 245);
		if(<>@text_texture->LoadFromRenderedText( "Count: {$@score}", @score_color)) {
			"Failed to render text texture!"->ErrorLine();
			return false;
		};

		return true;
	}
	
	method : LoadTexture(path : String) ~ Texture {
		# Load image at specified path
		loadedSurface := Image->Load(path);
		if(loadedSurface->IsNull()) {
			"Unable to load surface"->ErrorLine();
			return Nil;
		};

		texture := loadedSurface->CreateTexture(@renderer);
		if(texture->IsNull()) {
			"Unable to create texture!"->ErrorLine();
			return Nil;
		};

		loadedSurface->Free();
		
		return texture;
	}
	
	method : Close() ~ Nil {
		@sprite_paddle_texture->Free();
		@sprite_ball_texture->Free();
		@text_texture->Free();
		@renderer->Destroy();
		@window->Destroy();

		# Quit SDL subsystems
		Image->Quit();
		Font->Quit();
		Core->Quit();
	}
}

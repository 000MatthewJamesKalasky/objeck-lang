#~
Lesson 31
http:# lazyfoo.net/tutorials/SDL/31_scrolling_backgrounds/index.php
~#

use SDL2;

class LTexture {
	@renderer : Renderer;
	@font : Font;
	@texture : Texture;
	@render_quad : Rect;

	New(renderer : Renderer, font : Font := Nil) {
		@renderer := renderer;
		@font := font;
		@render_quad := Rect->New();
	}

	method : public : LoadFromRenderedText(textureText : String, textColor : Color) ~ Bool {
		Free();

		# Render text surface
		textSurface := @font->RenderTextSolid(textureText, textColor);
		if(textSurface->IsNull()) {
			"Unable to render text surface!"->ErrorLine();
			return false;
		};

		texture := textSurface->CreateTexture(@renderer);
		@render_quad->SetW(textSurface->GetW());
		@render_quad->SetH(textSurface->GetH());
		
		@texture := texture;
		return @texture <> Nil;
	}

	# Loads image at specified path
	method : public : LoadFromFile(path : String) ~ Bool {
		Free();

		# Load image at specified path
		loadedSurface := Image->Load(path);
		if(loadedSurface->IsNull()) {
			"Unable to load surface"->ErrorLine();
			return false;
		};

		loadedSurface->SetColorKey(true, loadedSurface->GetPixelFormat()->MapRGB(0, 0xFF, 0xFF));

		texture := loadedSurface->CreateTexture(@renderer);
		if(texture->IsNull()) {
			"Unable to create texture!"->ErrorLine();
			return false;
		};
		@render_quad->SetW(loadedSurface->GetW());
		@render_quad->SetH(loadedSurface->GetH());
		
		loadedSurface->Free();

		@texture := texture;
		return @texture <> Nil;
	}

	# Deallocates texture
	method : public : Free() ~ Nil {
		if(@texture <> Nil)	{
			@texture->Destroy();
		};
	}

	method : public : SetColor(red : Int, green : Int, blue : Int) ~ Nil {
		@texture->SetColorMod(red, green, blue);
	}

	method : public : SetBlendMode(blending : BlendMode) ~ Nil {
		# Set blending function
		@texture->SetBlendMode(blending);
	}
	
	method : public : SetAlpha(alpha : Int) ~ Nil {
		# Modulate texture alpha
		@texture->SetAlphaMod(alpha );
	}

	# Renders texture at given point
	method : public : Render(x : Int, y : Int, clip : Rect := Nil, 
			angle : Float := 0.0, center : Point := Nil, flip : RendererFlip := RendererFlip->SDL_FLIP_NONE) ~ Nil {
		@render_quad->SetX(x);
		@render_quad->SetY(y);

		if(clip <> Nil)	{
			@render_quad->SetW(clip->GetW());
			@render_quad->SetH(clip->GetH());
		};

		@renderer->CopyEx(@texture, clip, @render_quad, angle, center, flip);
	}

	# Gets image dimensions
	method : public : GetWidth() ~ Int {
		return @render_quad->GetW();
	}

	method : public : GetHeight() ~ Int {
		return @render_quad->GetH();
	}
}

class Dot {
	@dot_texture : LTexture;
	@x : Int;
	@y : Int;
	@velX : Int; 
	@velY : Int;
	DOT_VEL : Int;

	New(dot_texture : LTexture) {
		@dot_texture := dot_texture;
		DOT_VEL := 10;
	}

	# Takes key presses and adjusts the dot's velocity
	method : HandleEvent(e : Event) ~ Nil {
		# If a key was pressed
		if(e->GetType() = EventType->SDL_KEYDOWN & e->GetKey()->GetRepeat() = 0) {
	        # Adjust the velocity
	        select(e->GetType()->GetKeysym->GetSym()) {
#~	    	
	            case SDLK_UP: mVelY -= DOT_VEL; break;
	            case SDLK_DOWN: mVelY += DOT_VEL; break;
	            case SDLK_LEFT: mVelX -= DOT_VEL; break;
	            case SDLK_RIGHT: mVelX += DOT_VEL; break;
~#	        	            
	        };
	    };
#~	    
	    # If a key was released
	    else if( e.type == SDL_KEYUP && e.key.repeat == 0 )
	    {
	        # Adjust the velocity
	        switch( e.key.keysym.sym )
	        {
	            case SDLK_UP: mVelY += DOT_VEL; break;
	            case SDLK_DOWN: mVelY -= DOT_VEL; break;
	            case SDLK_LEFT: mVelX += DOT_VEL; break;
	            case SDLK_RIGHT: mVelX -= DOT_VEL; break;
	        }
	    };
~#	    
	}

	# Moves the dot
	method : Move() ~ Nil {
		
	}

	# Shows the dot1 on the screen
	method : Render() ~ Nil {
		
	}
}

consts Screen {
	WIDTH := 640,
	HEIGHT := 480,
	FPS := 30
}

class Test {
	@window : static : Window;
	@renderer : static : Renderer;
	@bg_texture : static : LTexture;
	@dot_texture : static : LTexture;
	
	function : Main(args : String[]) ~ Nil {
		# Start up SDL and create window
		if( <>Init() ) {
			"Failed to initialize!"->ErrorLine();
			return;
		};
		
		# Load media
		if( <>LoadMedia() ) {
			"Failed to load media!"->ErrorLine();
			return;
		};
			
		# Main loop flag
		quit := false;

		# Event handler
		e := Event->New();

		# While application is running
		while(<>quit) {
			# Handle events on queue
			while( e->Poll() <> 0 ) {
				# User requests quit
				if(e->GetType() = EventType->SDL_QUIT) {
					quit := true;
				};
			};
			
			@renderer->SetDrawColor(0xFF, 0xFF, 0xFF, 0xFF);
			@renderer->Clear();

			@bg_texture->Render(0, 0);

			# Update screen
			@renderer->Present();
		};

		e->Free();
		Close();
	}
	
	function : Init() ~ Bool {
		# Initialization flag
		success := true;

		SCREEN_WIDTH := 640;
		SCREEN_HEIGHT := 480;

		# Initialize SDL
		if(Core->Init(HardwareFlags->SDL_INIT_VIDEO) < 0) {
			"SDL could not initialize!"->ErrorLine();
			return false;
		};
		
		if(<>Hints->Set("SDL_RENDER_SCALE_QUALITY", "1")) {
			"Warning: Linear texture filtering not enabled!"->ErrorLine();
			return false;
		};

		# Create window
		@window := Window->New("SDL Tutorial", 
			WindowFlags->SDL_WINDOWPOS_UNDEFINED, WindowFlags->SDL_WINDOWPOS_UNDEFINED, 
			Screen->WIDTH->As(Int), Screen->HEIGHT->As(Int), WindowFlags->SDL_WINDOW_SHOWN);
		if(@window->IsNull()) {
			"Cannot create window!"->ErrorLine();
			return false;
		};

		# Get window surface
		@renderer := Renderer->New(@window, -1, 
			RendererFlags->SDL_RENDERER_ACCELERATED and RendererFlags->SDL_RENDERER_PRESENTVSYNC);
		if(@renderer->IsNull()) {
			"Cannot create renderer!"->ErrorLine();
			return false;
		};
		@renderer->SetDrawColor(0xFF, 0xFF, 0xFF, 0xFF);

		img_flags := ImageFlags->IMG_INIT_PNG->As(Int);
		if((Image->Init(img_flags) and img_flags) = 0) {
			"SDL image could not initialize!"->ErrorLine();
			return false;
		};

		@bg_texture := LTexture->New(@renderer);
		@dot_texture := LTexture->New(@renderer);
		
		return true;
	}
	
	function : LoadMedia() ~ Bool {
		if(<>@dot_texture->LoadFromFile("images/dot.bmp")) {
			"Failed to load bg image"->ErrorLine();
			return false;
		};

		if(<>@bg_texture->LoadFromFile("images/bg.png")) {
			"Failed to load bg image"->ErrorLine();
			return false;
		};

		return true;
	}
	
	function : LoadTexture(path : String) ~ Texture {
		# Load image at specified path
		loadedSurface := Image->Load(path);
		if(loadedSurface->IsNull()) {
			"Unable to load surface"->ErrorLine();
			return Nil;
		};

		texture := loadedSurface->CreateTexture(@renderer);
		if(texture->IsNull()) {
			"Unable to create texture!"->ErrorLine();
			return Nil;
		};

		loadedSurface->Free();
		
		return texture;
	}
	
	function : Close() ~ Nil {
		@bg_texture->Free();
		@dot_texture->Free();

		@renderer->Destroy();
		@window->Destroy();

		Image->Quit();
		Core->Quit();
	}
}

#~
Credit: https://github.com/gameprogcpp/code/tree/master/Chapter02
# ----------------------------------------------------------------
# From Game Programming in C++ by Sanjay Madhav
# Copyright (C) 2017 Sanjay Madhav. All rights reserved.
# 
# Released under the BSD License
# See LICENSE in root directory for full details.
# ----------------------------------------------------------------
~#

use Collection;
use Game.SDL2;
use Game.Framework;

class Game {
	@textures : StringMap;

	# All the actors in the game
	@actors : Vector;
	# Any pending actors
	@pending_actors : Vector;

	# All the sprite components drawn
	@sprites : Vector;

	@window : Window;
	@title : String;
	@renderer : Renderer;
	@ticks_count : Int;
	@event : Event;
	@is_running : Bool;

	# Track if we're updating actors right now
	@is_updating_actors : Bool;

	# Game-specific
	@ship : Ship;

	New(title : String) {
		@title := title;
		@textures := StringMap->New();

		@actors := Vector->New();
		@pending_actors := Vector->New();
		@sprites := Vector->New();

		@event := Event->New();
	}

	function : Main(args : String[]) ~ Nil {
		game := Game->New("Game Programming in C++ (Chapter 2)");
		success := game->Initialize();
		if(success) {
			game->RunLoop();
		};
		game->Shutdown();
	}

	method : public : Initialize() ~ Bool {
		init_flags := HardwareFlags->SDL_INIT_VIDEO or
			HardwareFlags->SDL_INIT_AUDIO or 
			HardwareFlags->SDL_INIT_JOYSTICK;

		if(Core->Init(init_flags) < 0) {
			"SDL could not initialize!"->ErrorLine();
			return false;
		};

		if(<>Hints->Set("SDL_RENDER_SCALE_QUALITY", "1")) {
			"Warning: Linear texture filtering not enabled!"->ErrorLine();
			return false;
		};

		if(<>Hints->Set("SDL_HINT_VIDEO_HIGHDPI_DISABLED", "1")) {
			"Warning: Linear texture filtering not enabled!"->ErrorLine();
			return false;
		};
		
		@window := Window->New(@title, WindowFlags->SDL_WINDOWPOS_UNDEFINED, 
			WindowFlags->SDL_WINDOWPOS_UNDEFINED, 800, 600, 
			WindowFlags->SDL_WINDOW_SHOWN);
		if(@window->IsNull()) {
			"Cannot create window!"->ErrorLine();
			return false;
		};

		@renderer := Renderer->New(@window, -1, 
			RendererFlags->SDL_RENDERER_ACCELERATED or RendererFlags->SDL_RENDERER_PRESENTVSYNC);
		if(@renderer->IsNull()) {
			"Cannot create renderer!"->ErrorLine();
			return false;
		};
		@renderer->SetDrawColor(0xFF, 0xFF, 0xFF, 0xFF);

		img_flags := ImageFlags->IMG_INIT_PNG;
		if((Image->Init(img_flags) and img_flags) = 0) {
			"SDL image could not initialize!"->ErrorLine();
			return false;
		};

		LoadData();
		@ticks_count := Timer->GetTicks();

		return true;
	}

	method : public : RunLoop() ~ Nil {
		@is_running := true;
		while(@is_running) {
			ProcessInput();
			UpdateGame();
			GenerateOutput();
		};
	}

	method : public : Shutdown() ~ Nil {
		UnloadData();

		@renderer->Destroy();
		@window->Destroy();

		Image->Quit();
		Core->Quit();
	}

	method : public : AddActor(actor : Actor) ~ Nil {
		# If we're updating actors, need to add to pending
		if(@is_updating_actors) {
			@pending_actors->AddBack(actor);
		}
		else {
			@actors->AddBack(actor);
		};
	}

	method : public : RemoveActor(actor : Actor) ~ Nil {
		# Is it in pending actors?
		index := @pending_actors->Find(actor);
		if(index > -1) {
			# Swap to end of vector and pop off (avoid erase copies)
			@pending_actors->Swap(index, @pending_actors->Size() - 1);
			@pending_actors->RemoveBack();
		};

		# Is it in actors?
		index := @actors->Find(actor);
		if(index > -1) {
			# Swap to end of vector and pop off (avoid erase copies)
			@actors->Swap(index, @actors->Size() - 1);
			@actors->RemoveBack();
		};		
	}

	method : public : AddSprite(sprite : SpriteComponent) ~ Nil {
		# Find the insertion point in the sorted vector
		# (The first element with a higher draw order than me)
		draw_order := sprite->GetDrawOrder();

#~
		found := false;
		i : Int;
		for(i := 0; i < @sprites->Size(); i += 1;) {
			sprite := @sprites->Get(i)->As(SpriteComponent);
			if(draw_order < sprite->GetDrawOrder()) {
				found := true;
			};
		};

i->PrintLine()
		# Inserts element before position of iterator
		@sprites->Set(sprite, i);		
~#
		@sprites->AddBack(sprite);		
	}

	method : public : RemoveSprite(sprite : SpriteComponent) ~ Nil {
		# (We can't swap because it ruins ordering)
		index := @sprites->Find(sprite);
		if(index > -1) {
			@sprites->Remove(index);
		};
	}

	method : ProcessInput() ~ Nil {
		while(@event->Poll() <> 0 ) {
			# User requests quit
			if(@event->GetType() = EventType->SDL_QUIT) {
				@is_running := false;
			};
		};

		state := Keyboard->GetState();
		if(state[Scancode->SDL_SCANCODE_ESCAPE] <> 0) {
			@is_running := false;
		};

		# Process ship input
		@ship->ProcessKeyboard(state);
	}

	method : UpdateGame() ~ Nil {
		# Compute delta time
		# Wait until 16ms has elapsed since last frame
		while(<>Timer->Passed(Timer->GetTicks(), @ticks_count + 16)) {};

		delta_time : Float := (Timer->GetTicks() - @ticks_count) / 1000.0;
		if(delta_time > 0.05) {
			delta_time := 0.05;
		};
		ticks_count := Timer->GetTicks();

		# Update all actors
		@is_updating_actors := true;
		each(i : @actors) {
			# ship and background
			@actors->Get(i)->As(Ship)->UpdateActor(delta_time);
		};
		@is_updating_actors := false;

		# Move any pending actors to mActors
		each(i : @pending_actors) {
			@actors->AddBack(@pending_actors->Get(i));
		};
		@pending_actors->Empty();

		# Add any dead actors to a temp vector
		dead_actors := Vector->New();
		each(i : @actors) {
			actor := @actors->Get(i)->As(Actor);
			if(actor->GetState() = Actor->State->EDead) {
				dead_actors->AddBack(actor);
			};
		};

		# Delete dead actors (which removes them from mActors)
		each(i : dead_actors) {
			dead_actors->Get(i)->As(Actor)->Free();
		};
	}

	method : GenerateOutput() ~ Nil {
		@renderer->SetDrawColor(0, 0, 0, 255);
		@renderer->Clear();

		each(i : @sprites) {
			sprite := @sprites->Get(i)->As(SpriteComponent);
			sprite->Draw(@renderer);
		};

		@renderer->Present();
	}	

	method : public : GetTexture(file_name : String) ~ Texture {
		# Is the texture already in the map?
		texture := @textures->Find(file_name)->As(Texture);
		if(texture <> Nil) {
			return texture;
		}
		else {
			surface := Image->Load(file_name);
			if(surface->IsNull()) {
				"Unable to load image '{$file_name}'!"->ErrorLine();
				return Nil;
			};
			
			texture := surface->CreateTexture(@renderer);
			if(texture->IsNull()) {
				"Unable to create texture!"->ErrorLine();
				return Nil;
			};
			surface->Free();

			@textures->Insert(file_name, texture);

			return texture;
		};
	}

	method : LoadData() ~ Nil {
		# Create player's ship
		@ship := Ship->New(@self);
		@ship->SetPosition(Vector2->New(100.0, 384.0));
		@ship->SetScale(1.5);

		# Create actor for the background (this doesn't need a subclass)
		temp := Actor->New(@self);
		temp->SetPosition(Vector2->New(512.0, 384.0));
		
		# Create the "far back" background
		bg := BGSpriteComponent->New(temp);
		bg->SetScreenSize(Vector2->New(1024.0, 768.0));
		bgtexs := Vector->New();
		bgtexs->AddBack(GetTexture("Assets/Farback01.png"));
		bgtexs->AddBack(GetTexture("Assets/Farback02.png"));
		bg->SetBGTextures(bgtexs);
		bg->SetScrollSpeed(-100.0);

		# Create the closer background
		bg := BGSpriteComponent->New(temp, 50);
		bg->SetScreenSize(Vector2->New(1024.0, 768.0));
		bgtexs := Vector->New();
		bgtexs->AddBack(GetTexture("Assets/Stars.png"));
		bgtexs->AddBack(GetTexture("Assets/Stars.png"));
		bg->SetBGTextures(bgtexs);
		bg->SetScrollSpeed(-200.0);

		AddActor(@ship);
	}

	method : UnloadData() ~ Nil {
		each(i : @actors) {
			@actors->Get(i)->As(Actor)->Free();
		};

		textures := @textures->GetValues();
		each(i : textures) {
			textures->Get(i)->As(Texture)->Destroy();
		};

		@textures->Empty();
	}	
}
use Collection;
use Game.Framework;

class Actor {
	@state : State;
	@position : Vector2;
	@scale : Float;
	@rotation : Float;
	@components : Vector;
	@game : Game;

	enum State {
		EActive,
		EPaused,
		EDead
	}

	New(game : Game) {
		@game := game;
		@components := Vector->New();
	}

	method : public : Update(delta_time : Float) ~ Nil {
		if(@state = State->EActive) {
			UpdateComponents(delta_time);
			UpdateActor(delta_time);
		};
	}

	method : UpdateComponents(delta_time : Float) ~ Nil {
		each(i : @components) {
			@components->Get(i)->As(Component)->Update(delta_time);
		};
	}

	method : UpdateActor(delta_time : Float) ~ Nil {
	}

	method : public : AddComponent(component : Component) ~ Nil {
		order := component->GetUpdateOrder();

		found := false;	i : Int;
		for(i := 0; <>found & i < @components->Size(); i += 1;) {
			compare := @components->Get(i)->As(Component);
			if(order < compare->GetUpdateOrder()) {
				found := true;
			};
		};

		@components->Set(component, i);
	}

	method : public : RemoveComponent(component : Component) ~ Nil {
		found := false;	i : Int;
		for(i := 0; <>found & i < @components->Size(); i += 1;) {
			compare := @components->Get(i)->As(Component);
			if(compare = component) {
				found := true;
			};
		};

		if(found) {
			@components->Remove(i);
		};
	}
}
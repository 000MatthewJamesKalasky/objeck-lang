#~
# 2D smooth scrolling
# 
# compiler: obc -src sdl_test_5.obs -lib collect.obl,sdl_game.obl,sdl2.obl -dest sdl_test_5.obe
# run: obr game2d.obe
~#

use Game.SDL2;
use Game.Framework;
use Collection.Generic;

class Demo {
	@framework : GameFramework;
	@player : Player;
	@enemy : Enemy;
	@level : Level;

	function : Main(args : String[]) ~ Nil {
		Demo->New()->Run();
	}

	New() {
		@framework := GameFramework->New(Game->SCREEN_WIDTH, Game->SCREEN_HEIGHT, "Scroll Test");
		@framework->SetClearColor(Color->New(0, 0, 255));
	}

	method : Run() ~ Nil {
		if(@framework->IsOk()) {
			@player := Player->New(@framework->AddRectangle(30, 30), Color->New(255, 0, 0), 120, Game->SCREEN_HEIGHT / 2);
			@enemy := Enemy->New(@framework->AddRectangle(30, 30));
			@level := Level->New(@player, @enemy, @framework);

			quit := false;
			e := @framework->GetEvent();
			while(<>quit) {
				@framework->FrameStart();
				@framework->Clear();
				
				# process input
				while(e->Poll() <> 0) {
					if(e->GetType() = EventType->SDL_QUIT) {
						quit := true;
					};

					ProcessInput(e);
				};

				# update
				@player->Update();
				@enemy->Update(@player);
				@level->Update();

				shift := @level->GetShiftX();
				if(@player->GetRight() >= 500) {
					diff := @player->GetRight() - 500;
					@player->SetRight(500);
					if(shift > -1500) {
						@level->ShiftWorld(-1 * diff);
					};
				};

				if(@player->GetLeft() <= 120) {
					diff := 120 - @player->GetLeft();
					@player->SetLeft(120);
					if(shift < 0) {
						@level->ShiftWorld(diff);
					};
				};
				
				# draw
				@player->Draw();
				@enemy->Draw();
				@level->Draw();

				# show
				@framework->Show();
				@framework->FrameEnd();
			};
		}
		else {
			"--- Error Initializing Game Environment ---"->ErrorLine();
			return;
		};

		leaving {
			@framework->Quit();
		};
	}

	method : public : ProcessInput(e : Event) ~ Nil {
		if(e->GetType() = EventType->SDL_KEYDOWN) {
			select(e->GetKey()->GetKeysym()->GetScancode()) {		
				label Scancode->SDL_SCANCODE_LEFT: {
					@player->GoWest();
				}

				label Scancode->SDL_SCANCODE_RIGHT: {
					@player->GoEast();
				}

				label Scancode->SDL_SCANCODE_UP: {
					@player->GoNorth();
				}

				label Scancode->SDL_SCANCODE_DOWN: {
					@player->GoSouth();
				}
			};
		}
		else if(e->GetType() = EventType->SDL_KEYUP) {
		   	code := e->GetKey()->GetKeysym()->GetScancode();
		   	
		   	if(code = Scancode->SDL_SCANCODE_LEFT & @player->ChangeEastWest() < 0) {
		   		@player->Stop();
			};

			if(code = Scancode->SDL_SCANCODE_RIGHT & @player->ChangeEastWest() > 0) {
				@player->Stop();
			};

			if(code = Scancode->SDL_SCANCODE_UP & @player->ChangeNorthSouth() < 0) {
		   		@player->Stop();
			};

			if(code = Scancode->SDL_SCANCODE_DOWN & @player->ChangeNorthSouth() > 0) {
				@player->Stop();
			};
		};
	}
}

class Enemy from Player {
	New(rect : Rectangle) {
		Parent(rect, Color->New(255, 255, 255), 320, Game->SCREEN_HEIGHT / 2);
	}

	method : public : AddX(x : Int)  ~ Nil {
		@rect->AddX(x);
	}

	method : public : Update(player : Player)  ~ Nil {
		rect := GetRect();

		test := Position->New(GetRect()->GetPosition()->GetRect());
		test->AddY(-6);
		up := Level->Distance(player->GetRect()->GetPosition(), test);

		test := Position->New(GetRect()->GetPosition()->GetRect());
		test->AddY(6);
		down := Level->Distance(player->GetRect()->GetPosition(), test);

		test := Position->New(GetRect()->GetPosition()->GetRect());
		test->AddX(-6);
		left := Level->Distance(player->GetRect()->GetPosition(), test);

		test := Position->New(GetRect()->GetPosition()->GetRect());
		test->AddX(6);
		right := Level->Distance(player->GetRect()->GetPosition(), test);

		
	}
}

class Player {
	@rect : Rectangle;
		
	@change_x : Float;
	@vel_x : Vector2;
	@acc_x : Vector2;

	@change_y : Float;
	@vel_y : Vector2;
	@acc_y : Vector2;

	@barriers : Vector<Barrier>;

	New(rect : Rectangle, color : Color, start_x : Int, start_y : Int) {
		@rect := rect;
		@rect->SetFill(true);
		@rect->SetColor(color);
		@rect->SetLeft(start_x);
		@rect->SetCenterY(start_y);

		@vel_x := Vector2->New();
		@acc_x := Vector2->New();

		@vel_y := Vector2->New();
		@acc_y := Vector2->New();
	}

	method : public : GetRect() ~ Rectangle {
		return @rect; 
	}

	method : public : GetLeft() ~ Int {
		return @rect->GetLeft();
	}

	method : public : GetRight() ~ Int {
		return @rect->GetRight();
	}

	method : public : SetLeft(x : Int) ~ Nil {
		@rect->SetLeft(x);
	}

	method : public : SetRight(x2 : Int) ~ Nil {
		@rect->SetRight(x2);
	}

	method : public : SetLevel(level : Level)  ~ Nil {
		@barriers := level->GetBarriers()<Barrier>;
	}

	method : public : ChangeEastWest()  ~ Int {
		return @change_x;
	}

	method : public : ChangeNorthSouth()  ~ Int {
		return @change_y;
	}

	method : public : GoWest()  ~ Nil {
		@change_x := -6;
	}

	method : public : GoEast()  ~ Nil {
		@change_x := 6;
	}

	method : public : Stop() ~ Nil {
		@change_x := @change_y := 0;
	}

	method : public : GoNorth()  ~ Nil {
		@change_y := -6;
	}

	method : public : GoSouth()  ~ Nil {
		@change_y := 6;
	}

	method : public : native : Update()  ~ Nil {
		# move east/west
		@acc_x->SetX(@change_x * 0.195);
		@acc_x->Add(Vector2->Mul(@vel_x, -0.0925));
		@vel_x->Add(Vector2->Mul(@acc_x, 0.75));
		@rect->AddX(@vel_x->GetX());
		@acc_x->Zero();

		collides := Level->Collisions(@self, @barriers);
		each(i : collides) {
			# move east
			platform := collides->Get(i);
			if(@vel_x->GetX() > 0) {
				@rect->SetRight(platform->GetLeft());
			}
			# moving west
			else if(@vel_x->GetX() < 0) {
				@rect->SetLeft(platform->GetRight());
			};
		};

		# move north/south
		@acc_y->SetY(@change_y * 0.195);
		@acc_y->Add(Vector2->Mul(@vel_y, -0.0925));
		@vel_y->Add(Vector2->Mul(@acc_y, 0.75));
		@rect->AddY(@vel_y->GetY());
		@acc_y->Zero();

		# check north and south bounds
		if(@rect->GetTop() < 0) {
			@rect->SetTop(0);
		};

		if(@rect->GetBottom() > Game->SCREEN_HEIGHT) {
			@rect->SetBottom(Game->SCREEN_HEIGHT);
		};

		each(i : @barriers) {
			platform := @barriers->Get(i);
			if(platform->Collides(@rect)) {
				# moving south
				if(@vel_y->GetY() > 0) {
					@rect->SetBottom(platform->GetTop());
				}
				# moving north
				else if(@vel_y->GetY() < 0) {
					@rect->SetTop(platform->GetBottom());
				};
			};
		};				
	}

	method : public : Draw()  ~ Nil {
		@rect->Render();
	}
}

class Barrier {
	@rect : Rectangle;

	New(x : Int, y : Int, rect : Rectangle) {
		@rect := rect;
		@rect->SetFill(true);
		@rect->SetColor(Color->New(0, 255, 0));
		@rect->Set(x, y);
	}

	method : public : AddX(x : Int)  ~ Nil {
		@rect->AddX(x);
	}

	method : public : GetLeft()  ~ Int {
		return @rect->GetLeft();
	}

	method : public : GetRight()  ~ Int {
		return @rect->GetRight();
	}

	method : public : GetTop()  ~ Int {
		return @rect->GetTop();
	}

	method : public : GetBottom()  ~ Int {
		return @rect->GetBottom();
	}

	method : public : Draw()  ~ Nil {
		@rect->Render();
	}

	method : public : Collides(rect : Rectangle) ~ Bool {
		return @rect->GetPosition()->Overlaps(rect->GetPosition());
	}
}

class Level {
	@player : Player;
	@enemy : Enemy;
	@barriers : Vector<Barrier>;
	@shift_x : Int;

	New(player : Player, enemy : Enemy, framework : GameFramework) {
		@player := player;
		@enemy := enemy;

		@barriers := Vector->New()<Barrier>;		
		@barriers->AddBack(Barrier->New(300, 50, framework->AddRectangle(50, 80)));	
		@barriers->AddBack(Barrier->New(600, 400, framework->AddRectangle(50, 140)));	
		@barriers->AddBack(Barrier->New(400, 300, framework->AddRectangle(50, 120)));	
		@barriers->AddBack(Barrier->New(1005, 200, framework->AddRectangle(50, 100)));

		@player->SetLevel(@self);
		@enemy->SetLevel(@self);
	}

	function : Collides(player : Player, obstacles : Vector<Barrier>) ~ Bool {
		each(i : obstacles) {
			obstacle := obstacles->Get(i);
			if(obstacle->Collides(player->GetRect())) {
				return true;
			};
		};

		return false;
	}

	function : Collisions(player : Player, obstacles : Vector<Barrier>) ~ Vector<Barrier> {
		collides := Vector->New()<Barrier>;

		each(i : obstacles) {
			obstacle := obstacles->Get(i);
			if(obstacle->Collides(player->GetRect())) {
				collides->AddBack(obstacle);
			};
		};

		return collides;
	}

	method : public : GetShiftX() ~ Int {
		return @shift_x;
	}

	method : public : ShiftWorld(shift_x : Int) ~ Nil {
		@shift_x += shift_x;
		
		@enemy->AddX(shift_x);
		each(i : @barriers) {
			platform := @barriers->Get(i);
			platform->AddX(shift_x);
		};
	}

	method : public : GetBarriers() ~ Vector<Barrier> {
		return @barriers;
	}

	method : public : Update()  ~ Nil {
		each(i : @barriers) {
			platform := @barriers->Get(i);
		};
	}

	method : public : Draw()  ~ Nil {
		each(i : @barriers) {
			@barriers->Get(i)->Draw();
		};
	}

	function : Distance(a : Position, b : Position) ~ Float {
		x_norm := Float->Power(a->GetCenterX()->ToFloat() - b->GetCenterX()->ToFloat(), 2.0);
		y_norm := Float->Power(a->GetCenterY()->ToFloat() - b->GetCenterY()->ToFloat(), 2.0);

		return (x_norm + y_norm)->SquareRoot();
	}
}

consts Game {
	SCREEN_WIDTH := 800,
	SCREEN_HEIGHT := 600
}
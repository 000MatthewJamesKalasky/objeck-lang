#~
Lesson 19
http:# lazyfoo.net/tutorials/SDL/19_gamepads_and_joysticks/index.php
~#

use SDL2;

consts Screen {
	SCREEN_WIDTH := 640, 
	SCREEN_HEIGHT := 480
}

class LTexture {
	@renderer : Renderer;
	@font : Font;
	@texture : Texture;
	@width : Int;
	@height : Int;

	New(renderer : Renderer, font : Font := Nil) {
		@renderer := renderer;
		@font := font;
	}

	method : public : LoadFromRenderedText(textureText : String, textColor : Color) ~ Bool {
		Free();

		# Render text surface
		textSurface := @font->RenderTextSolid(textureText, textColor);
		if(textSurface->IsNull()) {
			"Unable to render text surface!"->ErrorLine();
			return false;
		};

		texture := textSurface->CreateTexture(@renderer);
		@width := textSurface->GetW();
		@height := textSurface->GetH();
		
		@texture := texture;
		return @texture <> Nil;
	}

	# Loads image at specified path
	method : public : LoadFromFile(path : String) ~ Bool {
		Free();

		# Load image at specified path
		loadedSurface := Image->Load(path);
		if(loadedSurface->IsNull()) {
			"Unable to load surface"->ErrorLine();
			return false;
		};

		loadedSurface->SetColorKey(true, loadedSurface->GetPixelFormat()->MapRGB(0, 0xFF, 0xFF));

		texture := loadedSurface->CreateTexture(@renderer);
		if(texture->IsNull()) {
			"Unable to create texture!"->ErrorLine();
			return false;
		};
		@width := loadedSurface->GetW();
		@height := loadedSurface->GetH();
		
		loadedSurface->Free();

		@texture := texture;
		return @texture <> Nil;
	}

	# Deallocates texture
	method : public : Free() ~ Nil {
		if(@texture <> Nil)	{
			@texture->Destroy();
		};
	}

	method : public : SetColor(red : Int, green : Int, blue : Int) ~ Nil {
		@texture->SetColorMod(red, green, blue);
	}

	method : public : SetBlendMode(blending : BlendMode) ~ Nil {
		# Set blending function
		@texture->SetBlendMode(blending);
	}
	
	method : public : SetAlpha(alpha : Int) ~ Nil {
		# Modulate texture alpha
		@texture->SetAlphaMod(alpha );
	}

	# Renders texture at given point
	method : public : Render(x : Int, y : Int, clip : Rect := Nil, angle : Float := 0.0, 
			center : Point := Nil, flip : RendererFlip := RendererFlip->SDL_FLIP_NONE) ~ Nil {
		
		render_quad := Rect->New(x, y, @width, @height);
		if(clip <> Nil)	{
			render_quad->SetW(clip->GetW());
			render_quad->SetH(clip->GetH());
		};

		@renderer->CopyEx(@texture, clip, render_quad, angle, center, flip );
	}

	# Gets image dimensions
	method : public : GetWidth() ~ Int {
		return @width;
	}

	method : public : GetHeight() ~ Int {
		return @height;
	}
}

class Test {
	@window : static : Window;
	@renderer : static : Renderer;
	@arrow_texture : static : LTexture;
	@joystick : static : Joystick;
	
	function : Main(args : String[]) ~ Nil {
		# Start up SDL and create window
		if( <>Init() ) {
			"Failed to initialize!"->ErrorLine();
			return;
		};
		
		# Load media
		if( <>LoadMedia() ) {
			"Failed to load media!"->ErrorLine();
			return;
		};
			
		# Main loop flag
		quit := false;

		current_texture : LTexture;

		# Event handler
		e := Event->New();

		x_dir : Float := 0;
		y_dir : Float := 0;

		JOYSTICK_DEAD_ZONE := 8000;
		rate := 30;

		x_pos := (Screen->SCREEN_WIDTH->As(Int) - @arrow_texture->GetWidth()) / 2;
		y_pos := (Screen->SCREEN_HEIGHT->As(Int) - @arrow_texture->GetHeight()) / 2;
		
		# While application is running
		while(<>quit) {
			start := Timer->GetTicks();

			# Handle events on queue
			while( e->Poll() <> 0 ) {
				# User requests quit
				if(e->GetType() = EventType->SDL_QUIT) {
					quit := true;
				}
				else if(e->GetType() = EventType->SDL_JOYAXISMOTION) {
					# Motion on controller 0
					if( e->GetJAxis()->GetWhich() = 0 ) {						
						# X axis motion
						if( e->GetJAxis()->GetAxis() = 0 )	{
							# Left of dead zone
							if( e->GetJAxis()->GetValue() < (-1 * JOYSTICK_DEAD_ZONE) ) {
								x_dir := -1;
							}
							# Right of dead zone
							else if( e->GetJAxis()->GetValue() > JOYSTICK_DEAD_ZONE ) {
								x_dir :=  1;
							}
							else {
								x_dir := 0;
							};
						}
						# Y axis motion
						else if( e->GetJAxis()->GetAxis() = 1 ) {
							# Below of dead zone
							if( e->GetJAxis()->GetValue() < (-1 * JOYSTICK_DEAD_ZONE) ) {
								y_dir := -1;
							}
							# Above of dead zone
							else if( e->GetJAxis()->GetValue() > JOYSTICK_DEAD_ZONE ) {
								y_dir :=  1;
							}
							else {
								y_dir := 0;
							};
						};
					};
				};
			};
			
			if(x_dir = 1 & y_dir = 1) {
				x_pos += 1;	
				y_pos += 1;
			}
			else if(x_dir = -1 & y_dir = -1) {
				x_pos -= 1;	
				y_pos -= 1;
			}
			else if(x_dir = 1 & y_dir = -1) {
				x_pos += 1;	
				y_pos -= 1;
			}
			else if(x_dir = -1 & y_dir = 1) {
				x_pos -= 1;	
				y_pos += 1;
			}
			else if(x_dir = 0 & y_dir = -1) {
				y_pos -= 1;	
			}
			else if(x_dir = 0 & y_dir = 1) {
				y_pos += 1;	
			}
			else if(x_dir = -1 & y_dir = 0) {
				x_pos -= 1;	
			}
			else if(x_dir = 1 & y_dir = 0) {
				x_pos += 1;	
			};

# "-- {$x_pos}, {$y_pos} --"->PrintLine();			
			@renderer->SetDrawColor(0xFF, 0xFF, 0xFF, 0xFF);
			@renderer->Clear();

			angle := Float->ArcTan2(y_dir, x_dir) * 180.0 / Float->Pi();
			@arrow_texture->Render( x_pos , y_pos, Nil, angle);

			time := start - Timer->GetTicks();
			if(time < rate) {
				Timer->Delay(rate - time);
			};

			# Update screen
			@renderer->Present();
		};
		
		e->Free();
		Close();
	}
	
	function : Init() ~ Bool {
		# Initialization flag
		success := true;

		# Initialize SDL
		if(Core->Init((HardwareFlags->SDL_INIT_VIDEO or HardwareFlags->SDL_INIT_JOYSTICK)->As(Int)) < 0) {
			"SDL could not initialize!"->ErrorLine();
			return false;
		};
		
		if(<>Hints->Set("SDL_RENDER_SCALE_QUALITY", "1")) {
			"Warning: Linear texture filtering not enabled!"->ErrorLine();
			return false;
		};

		if(Joystick->Number() < 1) {
			"Warning: No joysticks connected!"->PrintLine();
			return false;
		};

		@joystick := Joystick->New(0);

		# Create window
		@window := Window->New("SDL Tutorial", WindowFlags->SDL_WINDOWPOS_UNDEFINED, 
			WindowFlags->SDL_WINDOWPOS_UNDEFINED, Screen->SCREEN_WIDTH, Screen->SCREEN_HEIGHT, 
			WindowFlags->SDL_WINDOW_SHOWN);
		if(@window->IsNull()) {
			"Cannot create window!"->ErrorLine();
			return false;
		};

		# Get window surface
		@renderer := Renderer->New(@window, -1, (RendererFlags->SDL_RENDERER_ACCELERATED or 
			RendererFlags->SDL_RENDERER_PRESENTVSYNC)->As(Int));
		if(@renderer->IsNull()) {
			"Cannot create renderer!"->ErrorLine();
			return false;
		};
		@renderer->SetDrawColor(0xFF, 0xFF, 0xFF, 0xFF);

		img_flags := ImageFlags->IMG_INIT_PNG->As(Int);
		if((Image->Init(img_flags) and img_flags) = 0) {
			"SDL image could not initialize!"->ErrorLine();
			return false;
		};

		@arrow_texture := LTexture->New(@renderer);
		
		return true;
	}
	
	function : LoadMedia() ~ Bool {
		if(<>@arrow_texture->LoadFromFile("images/arrow.png")) {
			"Failed to load press texture!"->ErrorLine();
			return false;
		};

		return true;
	}
	
	function : LoadTexture(path : String) ~ Texture {
		# Load image at specified path
		loadedSurface := Image->Load(path);
		if(loadedSurface->IsNull()) {
			"Unable to load surface"->ErrorLine();
			return Nil;
		};

		texture := loadedSurface->CreateTexture(@renderer);
		if(texture->IsNull()) {
			"Unable to create texture!"->ErrorLine();
			return Nil;
		};

		loadedSurface->Free();
		
		return texture;
	}
	
	function : Close() ~ Nil {
		@joystick->Free();
		@arrow_texture->Free();

		@renderer->Destroy();
		@window->Destroy();

		# Quit SDL subsystems
		Image->Quit();
		Core->Quit();
	}
}

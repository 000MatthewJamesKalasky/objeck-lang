#~
Lesson 09
http://lazyfoo.net/tutorials/SDL/09_the_viewport/index.php
~#

use Game.SDL2;

class Test {
	@window : static : Window;
	@renderer : static : Renderer;
	@texture : static : Texture;
	SCREEN_WIDTH : static : Int;
	SCREEN_HEIGHT : static : Int;
	
	function : Main(args : String[]) ~ Nil {
		# Start up SDL and create window
		if( <>Init() ) {
			"Failed to initialize!"->ErrorLine();
		}
		else {
			# Load media
			if( <>LoadMedia() ) {
				"Failed to load media!"->PrintLine();
			}
			else {			
				# Main loop flag
				quit := false;

				# Top left corner viewport
				topLeftViewport := Rect->New(0, 0, SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2);

				# Top right viewport
				topRightViewport := Rect->New(SCREEN_WIDTH / 2, 0, SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2);

				# Bottom viewport
				bottomViewport := Rect->New(0, SCREEN_HEIGHT / 2, SCREEN_WIDTH, SCREEN_HEIGHT / 2);
				
				# Event handler
				e := Event->New();
				
				# While application is running
				while(<>quit)
				{
					# Handle events on queue
					while( e->Poll() <> 0 ) {
						# User requests quit
						if( e->GetType() = EventType->SDL_QUIT ) {
							quit := true;
						};
					};

					@renderer->SetDrawColor(0xFF, 0xFF, 0xFF, 0xFF);
					@renderer->Clear();

					@renderer->SetViewport(topLeftViewport);
					@renderer->Copy(@texture, Nil, Nil);

					@renderer->SetViewport(topRightViewport);
					@renderer->Copy(@texture, Nil, Nil);

					@renderer->SetViewport(bottomViewport);
					@renderer->Copy(@texture, Nil, Nil);
					
					@renderer->Present();
				};
			};
		};
		
		Close();
	}
	
	function : Init() ~ Bool {
		# Initialization flag
		success := true;

		SCREEN_WIDTH := 640;
		SCREEN_HEIGHT := 480;
		
		# Initialize SDL
		if(Core->Init(HardwareFlags->SDL_INIT_VIDEO) < 0) {
			"SDL could not initialize!"->ErrorLine();
			success := false;
		}
		else {
			if(<>Hints->Set("SDL_RENDER_SCALE_QUALITY", "1")) {
				"Warning: Linear texture filtering not enabled!"->ErrorLine();
				return false;
			};

			# Create window
			@window := Window->New( "SDL Tutorial", WindowFlags->SDL_WINDOWPOS_UNDEFINED, 
				WindowFlags->SDL_WINDOWPOS_UNDEFINED, 640, 480, WindowFlags->SDL_WINDOW_SHOWN);
			if(@window->IsNull()) {
				"Cannot create window!"->ErrorLine();
				return false;
			};
			
			# Get window surface
			@renderer := Renderer->New(@window, -1, RendererFlags->SDL_RENDERER_ACCELERATED);
			if(@renderer->IsNull()) {
				"Cannot create renderer!"->ErrorLine();
				return false;
			};
			@renderer->SetDrawColor(0xFF, 0xFF, 0xFF, 0xFF);

			img_flags := ImageFlags->IMG_INIT_PNG;
			if((Image->Init(img_flags) and img_flags) = 0) {
				"SDL image could not initialize!"->ErrorLine();
				success := false;
			};
		};
		
		return success;
	}
	
	function : LoadMedia() ~ Bool {
		@texture := LoadTexture( "images/viewport.png");
		return @texture <> Nil ? true : false;
	}
	
	function : LoadTexture(path : String) ~ Texture {
		# Load image at specified path
		loadedSurface := Image->Load(path);
		if(loadedSurface->IsNull()) {
			"Unable to load surface"->PrintLine();
			return Nil;
		};

		texture := loadedSurface->CreateTexture(@renderer);
		if(texture->IsNull()) {
			"Unable to create texture!"->PrintLine();
			return Nil;
		};

		loadedSurface->Free();
		
		return texture;
	}
	
	function : Close() ~ Nil {
		# Destroy window
		@texture->Destroy();
		@renderer->Destroy();
		@window->Destroy();

		# Quit SDL subsystems
		Image->Quit();
		Core->Quit();
	}
}

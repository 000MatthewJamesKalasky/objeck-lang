#~
Lesson 40
http:# http:# lazyfoo.net/tutorials/SDL/40_texture_manipulation/index.php
~#

use Game.SDL2;

class LTexture {
	@renderer : Renderer;
	@font : Font;
	@texture : Texture;
	@render_quad : Rect;
	@window : Window;
	@pixels : PixelData;
	@pitch : Int;
	@width : Int;
	@height : Int;

	New(renderer : Renderer, window : Window, font : Font := Nil) {
		@renderer := renderer;
		@window := window;
		@font := font;
		@render_quad := Rect->New();
	}

	method : public : LoadFromRenderedText(textureText : String, textColor : Color) ~ Bool {
		Free();

		# Render text surface
		textSurface := @font->RenderTextSolid(textureText, textColor);
		if(textSurface->IsNull()) {
			"Unable to render text surface!"->ErrorLine();
			return false;
		};

		texture := textSurface->CreateTexture(@renderer);
		@render_quad->SetW(textSurface->GetW());
		@render_quad->SetH(textSurface->GetH());
		
		@texture := texture;
		return @texture <> Nil;
	}

	# Loads image at specified path
	method : public : LoadFromFile(path : String) ~ Bool {
		Free();

		# Load image at specified path
		loadedSurface := Image->Load(path);
		if(loadedSurface->IsNull()) {
			"Unable to load surface"->ErrorLine();
			return false;
		};

		formattedSurface := loadedSurface->ConvertFormat(@window->GetPixelFormat(), 0);
		if(formattedSurface->IsNull()) {
			"Unable to convert loaded surface to display format!"->ErrorLine();
			return false;
		};

		newTexture := @renderer->CreateTexture(@window->GetPixelFormat(), 
			TextureAccess->SDL_TEXTUREACCESS_STREAMING, 
			formattedSurface->GetW(), formattedSurface->GetH() );
		if(newTexture->IsNull()) {
			"Unable to create blank texture!"->ErrorLine();
			return false;
		};

		@pixels := newTexture->Lock(Nil);
		@pitch := @pixels->GetPitch();
		surface_pixels := formattedSurface->GetPixels();
		@pixels->Copy(surface_pixels);
		newTexture->Unlock();
		@pixels := Nil;

		@width := formattedSurface->GetW();
		@height := formattedSurface->GetH();

		formattedSurface->Free();
		loadedSurface->Free();

		@texture := newTexture;
		return @texture <> Nil;
	}

	method : public : Lock() ~ Bool {
		# Texture is already locked
		if( @pixels <> Nil )
		{
			"Texture is already locked"->PrintLine();
			return false;
		}
		# Lock texture
		else
		{
			@pixels :=@texture->Lock(Nil);
			if(@pixels->IsNull())
			{
				"Unable to lock texture!"->PrintLine();
				return false;
			};
			@pitch := @pixels->GetPitch();
		};

		return true;
	}

	method : public : Unlock() ~ Bool {
		# Texture is not locked
		if( @pixels = Nil )
		{
			"Texture is not locked!"->PrintLine();
			return false;
		}
		# Unlock texture
		else
		{
			@texture->Unlock(  );
			@pixels := Nil;
			@pitch := 0;
		};

		return true;
	}

	method : public : GetWidth() ~ Int {
		return @width;
	}

	method : public : GetHeight() ~ Int {
		return @height;
	}

	# Deallocates texture
	method : public : Free() ~ Nil {
		if(@texture <> Nil)	{
			@texture->Destroy();
		};
	}

	method : public : SetColor(red : Int, green : Int, blue : Int) ~ Nil {
		@texture->SetColorMod(red, green, blue);
	}

	method : public : SetBlendMode(blending : BlendMode) ~ Nil {
		# Set blending function
		@texture->SetBlendMode(blending);
	}
	
	method : public : SetAlpha(alpha : Int) ~ Nil {
		# Modulate texture alpha
		@texture->SetAlphaMod(alpha );
	}

	# Renders texture at given point
	method : public : Render(x : Int, y : Int, clip : Rect := Nil, 
			angle : Float := 0.0, center : Point := Nil, flip : RendererFlip := RendererFlip->SDL_FLIP_NONE) ~ Nil {
		@render_quad->SetX(x);
		@render_quad->SetY(y);

		if(clip <> Nil)	{
			@render_quad->SetW(clip->GetW());
			@render_quad->SetH(clip->GetH());
		};

		@renderer->CopyEx(@texture, clip, @render_quad, angle, center, flip);
	}
}

class Test {
	@window : static : Window;
	@renderer : static : Renderer;
	@foo_texture : static : LTexture;

	function : Main(args : String[]) ~ Nil {
		# Start up SDL and create window
		if( <>Init() ) {
			"Failed to initialize!"->ErrorLine();
			return;
		};
		
		# Load media
		if( <>LoadMedia() ) {
			"Failed to load media!"->ErrorLine();
			return;
		};

		FRAME_RATE := 1000 / Consts->FPS;
			
		# Main loop flag
		quit := false;

		# Event handler
		e := Event->New();

		# While application is running
		while(<>quit) {
			start := Timer->GetTicks();

			# Handle events on queue
			while( e->Poll() <> 0 ) {
				# User requests quit
				if(e->GetType() = EventType->SDL_QUIT) {
					quit := true;
				};

				# Handle input for the dot
				
			};

			@renderer->SetDrawColor(0xFF, 0xFF, 0xFF, 0xFF);
			@renderer->Clear();
			
			# Update screen
			@renderer->Present();

			end := start - Timer->GetTicks();
			if(end < FRAME_RATE) {
				Timer->Delay(FRAME_RATE - end);
			};
			frame += 1;
		};

		e->Free();
		Close();
	}
	
	function : Init() ~ Bool {
		# Initialize SDL
		if(Core->Init(HardwareFlags->SDL_INIT_VIDEO) < 0) {
			"SDL could not initialize!"->ErrorLine();
			return false;
		};
		
		if(<>Hints->Set("SDL_RENDER_SCALE_QUALITY", "1")) {
			"Warning: Linear texture filtering not enabled!"->ErrorLine();
			return false;
		};

		# Create window
		@window := Window->New("SDL Tutorial", 
			WindowFlags->SDL_WINDOWPOS_UNDEFINED, WindowFlags->SDL_WINDOWPOS_UNDEFINED, 
			Consts->SCREEN_WIDTH, Consts->SCREEN_HEIGHT, WindowFlags->SDL_WINDOW_SHOWN);
		if(@window->IsNull()) {
			"Cannot create window!"->ErrorLine();
			return false;
		};

		# Get window surface
		@renderer := Renderer->New(@window, -1, 
			RendererFlags->SDL_RENDERER_ACCELERATED and RendererFlags->SDL_RENDERER_PRESENTVSYNC);
		if(@renderer->IsNull()) {
			"Cannot create renderer!"->ErrorLine();
			return false;
		};
		@renderer->SetDrawColor(0xFF, 0xFF, 0xFF, 0xFF);

		img_flags := ImageFlags->IMG_INIT_PNG->As(Int);
		if((Image->Init(img_flags) and img_flags) = 0) {
			"SDL image could not initialize!"->ErrorLine();
			return false;
		};

		@foo_texture := LTexture->New(@renderer, @window);
				
		return true;
	}
	
	function : LoadMedia() ~ Bool {
		if(<>@foo_texture->LoadFromFile("images/foo.png")) {
			"Failed to load image"->ErrorLine();
			return false;
		};

		return true;
	}
	
	function : LoadTexture(path : String) ~ Texture {
		# Load image at specified path
		loadedSurface := Image->Load(path);
		if(loadedSurface->IsNull()) {
			"Unable to load surface"->ErrorLine();
			return Nil;
		};

		texture := loadedSurface->CreateTexture(@renderer);
		if(texture->IsNull()) {
			"Unable to create texture!"->ErrorLine();
			return Nil;
		};

		loadedSurface->Free();
		
		return texture;
	}
	
	function : Close() ~ Nil {
		@foo_texture->Free();
		@renderer->Destroy();
		@window->Destroy();

		Image->Quit();
		Core->Quit();
	}
}

consts Consts {
	SCREEN_WIDTH := 640,
	SCREEN_HEIGHT := 480,
	FPS := 60
}
#~
Lesson 05
Optimized Surface Loading and Soft Stretching

http://lazyfoo.net/tutorials/SDL/05_optimized_surface_loading_and_soft_stretching/index.php
~#

use SDL;

class Test {
	@window : static : Window;
	@renderer : static : Renderer;
	@texture : static : Texture;
	SCREEN_WIDTH : static : Int;
	SCREEN_HEIGHT : static : Int;
	
	function : Main(args : String[]) ~ Nil {
		# Start up SDL and create window
		if( <>Init() ) {
			"Failed to initialize!"->ErrorLine();
		}
		else {
			# Load media
			if( <>LoadMedia() ) {
				"Failed to load media!"->PrintLine();
			}
			else {			
				# Main loop flag
				quit := false;
				
				# Event handler
				e := Event->New();
				
				fillRect := Rect->New();
				fillRect->SetX(SCREEN_WIDTH / 4); fillRect->SetY(SCREEN_HEIGHT / 4);
				fillRect->SetW(SCREEN_WIDTH / 2); fillRect->SetH(SCREEN_HEIGHT / 2);

				outlineRect := Rect->New();
				outlineRect->SetX(SCREEN_WIDTH / 6); outlineRect->SetY(SCREEN_HEIGHT / 6);
				outlineRect->SetW(SCREEN_WIDTH * 2 / 3); outlineRect->SetH(SCREEN_HEIGHT * 2 / 3);

				# While application is running
				while( <>quit )
				{
					# Handle events on queue
					while( e->Poll() <> 0 ) {
						# User requests quit
						if( e->GetType() = Flags->SDL_QUIT->As(Int) ) {
							quit := true;
						};
					};

					# Clear screen
					@renderer->SetDrawColor(0xFF, 0xFF, 0xFF, 0xFF);
					@renderer->Clear();

					# Render red filled quad
					@renderer->SetDrawColor(0xFF, 0x00, 0x00, 0xFF);		
					@renderer->FillRect(fillRect);

					# Render green outlined quad
					@renderer->SetDrawColor(0x00, 0xFF, 0x00, 0xFF );		
					@renderer->DrawRect(outlineRect);

					# Draw blue horizontal line
					@renderer->SetDrawColor(0x00, 0x00, 0xFF, 0xFF);
					@renderer->DrawLine(0, SCREEN_HEIGHT / 2, SCREEN_WIDTH, SCREEN_HEIGHT / 2);

					# Draw vertical line of yellow dots
					@renderer->SetDrawColor(0xFF, 0xFF, 0x00, 0xFF);
					for(i := 0; i < SCREEN_HEIGHT; i += 4;) {
						@renderer->DrawPoint(SCREEN_WIDTH / 2, i);
					};

					# Update screen
					@renderer->Present();
					
				};
			};
		};
		
		Close();
	}
	
	function : Init() ~ Bool {
		# Initialization flag
		success := true;

		SCREEN_WIDTH := 640;
		SCREEN_HEIGHT := 480;
		
		# Initialize SDL
		if(Core->Init(Flags->SDL_INIT_VIDEO->As(Int)) < 0) {
			"SDL could not initialize!"->ErrorLine();
			success := false;
		}
		else {
			if(<>Hints->Set("SDL_RENDER_SCALE_QUALITY", "1")) {
				"Warning: Linear texture filtering not enabled!"->ErrorLine();
				return false;
			};

			# Create window
			@window := Window->New( "SDL Tutorial", Flags->SDL_WINDOW_POS_UNDEFINED->As(Int), 
				Flags->SDL_WINDOW_POS_UNDEFINED->As(Int), SCREEN_WIDTH, SCREEN_HEIGHT, Flags->SDL_WINDOW_SHOWN->As(Int));
			if(@window->IsNull()) {
				"Cannot create window!"->ErrorLine();
				return false;
			};

			# Get window surface
			@renderer := Renderer->New(@window, -1, RendererFlags->SDL_RENDERER_ACCELERATED->As(Int));
			if(@renderer->IsNull()) {
				"Cannot create renderer!"->ErrorLine();
				return false;
			};
			@renderer->SetDrawColor(0xFF, 0xFF, 0xFF, 0xFF);

			img_flags := ImageFlags->IMG_INIT_PNG->As(Int);
			if((Image->Init(img_flags) and img_flags) = 0) {
				"SDL image could not initialize!"->ErrorLine();
				success := false;
			};
		};
		
		return success;
	}
	
	function : LoadMedia() ~ Bool {
		return true;
	}
	
	function : LoadTexture(path : String) ~ Texture {
		# Load image at specified path
		loadedSurface := Image->Load(path);
		if(loadedSurface->IsNull()) {
			"Unable to load surface"->PrintLine();
			return Nil;
		};

		texture := loadedSurface->CreateTexture(@renderer);
		if(texture->IsNull()) {
			"Unable to create texture!"->PrintLine();
			return Nil;
		};
		loadedSurface->Free();
		
		return texture;
	}
	
	function : Close() ~ Nil {
		# Destroy window
		@renderer->Destroy();
		@window->Destroy();

		# Quit SDL subsystems
		Image->Quit();
		Core->Quit();
	}
}

#~
Lesson 39
http:# lazyfoo.net/tutorials/SDL/39_tiling/index.php
~#

use Game.SDL2;

class LTexture {
	@renderer : Renderer;
	@font : Font;
	@texture : Texture;
	@render_quad : Rect;

	New(renderer : Renderer, font : Font := Nil) {
		@renderer := renderer;
		@font := font;
		@render_quad := Rect->New();
	}

	method : public : LoadFromRenderedText(textureText : String, textColor : Color) ~ Bool {
		Free();

		# Render text surface
		textSurface := @font->RenderTextSolid(textureText, textColor);
		if(textSurface->IsNull()) {
			"Unable to render text surface!"->ErrorLine();
			return false;
		};

		texture := textSurface->CreateTexture(@renderer);
		@render_quad->SetW(textSurface->GetW());
		@render_quad->SetH(textSurface->GetH());
		
		@texture := texture;
		return @texture <> Nil;
	}

	# Loads image at specified path
	method : public : LoadFromFile(path : String) ~ Bool {
		Free();

		# Load image at specified path
		loadedSurface := Image->Load(path);
		if(loadedSurface->IsNull()) {
			"Unable to load surface"->ErrorLine();
			return false;
		};

		loadedSurface->SetColorKey(true, loadedSurface->GetPixelFormat()->MapRGB(0, 0xFF, 0xFF));

		texture := loadedSurface->CreateTexture(@renderer);
		if(texture->IsNull()) {
			"Unable to create texture!"->ErrorLine();
			return false;
		};
		@render_quad->SetW(loadedSurface->GetW());
		@render_quad->SetH(loadedSurface->GetH());
		
		loadedSurface->Free();

		@texture := texture;
		return @texture <> Nil;
	}

	# Deallocates texture
	method : public : Free() ~ Nil {
		if(@texture <> Nil)	{
			@texture->Destroy();
		};
	}

	method : public : SetColor(red : Int, green : Int, blue : Int) ~ Nil {
		@texture->SetColorMod(red, green, blue);
	}

	method : public : SetBlendMode(blending : BlendMode) ~ Nil {
		# Set blending function
		@texture->SetBlendMode(blending);
	}
	
	method : public : SetAlpha(alpha : Int) ~ Nil {
		# Modulate texture alpha
		@texture->SetAlphaMod(alpha );
	}

	# Renders texture at given point
	method : public : Render(x : Int, y : Int, clip : Rect := Nil, 
			angle : Float := 0.0, center : Point := Nil, flip : RendererFlip := RendererFlip->SDL_FLIP_NONE) ~ Nil {
		@render_quad->SetX(x);
		@render_quad->SetY(y);

		if(clip <> Nil)	{
			@render_quad->SetW(clip->GetW());
			@render_quad->SetH(clip->GetH());
		};

		@renderer->CopyEx(@texture, clip, @render_quad, angle, center, flip);
	}

	# Gets image dimensions
	method : public : GetWidth() ~ Int {
		return @render_quad->GetW();
	}

	method : public : GetHeight() ~ Int {
		return @render_quad->GetH();
	}
}

class Tile {
	# The attributes of the tile
	@box : Rect;

	# The tile type
	@type : Int;

	@tileClips : Rect[];
	@tileTexture : LTexture;

	# Initializes position and type
	New(x : Int, y : Int, tileType : Int, tileClips : Rect[], tileTexture : LTexture) {
		# Get the offsets
	    @box->SetX(x);
	    @box->SetY(y);

	    # Set the collision box
	    @box->SetW(Consts->TILE_WIDTH);
	    @box->SetH(Consts->TILE_HEIGHT);

	    # Get the tile type
	    @type := tileType;

	    @tileClips := tileClips;
	    @tileTexture := tileTexture;
	}

	# Shows the tile
	method : public : Render(camera : Rect) ~ Nil {
		# If the tile is on screen
	    if( Test->CheckCollision( camera, @box ) ) {
	        # Show the tile
	        @tileTexture->Render( @box->GetX() - camera->GetX(), @box->GetY() - camera->GetY(), @tileClips[ @type ] );
	    };
	}

	# Get the tile type
	method : public : GetType() ~ Int {
		return @type;
	}

	# Get the collision box
	method : public : GetBox() ~ Rect {
		return @box;
	}
}

class Dot {
	@dot_texture : LTexture;
	@box : Rect;
	@velX : Int; 
	@velY : Int;

	New(x : Int, y : Int, dot_texture : LTexture) {
		# Initialize the offsets
	    @posX := x;
	    @posY := y;
	    @dot_texture := dot_texture;

	    # Initialize the velocity
	    @velX := 0;
	    @velY := 0;
	}

	# Takes key presses and adjusts the dot's velocity
	method : public : HandleEvent(e : Event) ~ Nil {
		# If a key was pressed
		if(e->GetType() = EventType->SDL_KEYDOWN & e->GetKey()->GetRepeat() = 0) {
	        # Adjust the velocity
	        select(e->GetKey()->GetKeysym()->GetScancode()) {    	
	            label Scancode->SDL_SCANCODE_UP: {
	            	@velY -= Consts->DOT_VEL;
	            }

	            label Scancode->SDL_SCANCODE_DOWN: {
	            	@velY += Consts->DOT_VEL;
	            }

	            label Scancode->SDL_SCANCODE_LEFT: {
	            	@velX -= Consts->DOT_VEL;
	            }

	            label Scancode->SDL_SCANCODE_RIGHT: {
	            	@velX += Consts->DOT_VEL;
	            }        	            
	        };
	    }
	    # If a key was released
	    else if(e->GetType() = EventType->SDL_KEYUP & e->GetKey()->GetRepeat() = 0) {
	        # Adjust the velocity
	        select(e->GetKey()->GetKeysym()->GetScancode()) {
	        	label Scancode->SDL_SCANCODE_UP: {
	            	@velY += Consts->DOT_VEL;
	            }

	            label Scancode->SDL_SCANCODE_DOWN: {
	            	@velY -= Consts->DOT_VEL;
	            }

	            label Scancode->SDL_SCANCODE_LEFT: {
	            	@velX += Consts->DOT_VEL;
	            }

	            label Scancode->SDL_SCANCODE_RIGHT: {
	            	@velX -= Consts->DOT_VEL;
	            }
	        };
	    };   
	}

	# Moves the dot
	method : public : Move(tiles : Tile[]) ~ Nil {
		# Move the dot left or right
	    @box->AddX(@velX);

	    # If the dot went too far to the left or right or touched a wall
	    if( ( @box->GetX() < 0 ) | ( @box->GetX() + Consts->DOT_WIDTH > Consts->LEVEL_WIDTH ) | TouchesWall( @box, tiles ) )
	    {
	        # move back
	        @box->SubX(@velX);
	    };

	    # Move the dot up or down
	    @box->AddY(@velY);

	    # If the dot went too far up or down or touched a wall
	    if( ( @box->GetY() < 0 ) | ( @box->GetY() + Consts->DOT_HEIGHT > Consts->LEVEL_HEIGHT ) | TouchesWall( @box, tiles ) )
	    {
	        # move back
	        @box->SubY(@velY);
	    };
	}

	# Checks collision box against set of tiles
	method : TouchesWall( box : Rect, tiles : Tile[] ) ~ Bool {
		return false;
	}

	# Show the dot
	method : public : Render(camera : Rect) ~ Nil {
		@dot_texture->Render(@box->GetX() - camera->GetX(), @box->GetY() - camera->GetY());
	}

	method : public : Free() ~ Nil {
		@dot_texture->Free();
	}
}

class Test {
	@window : static : Window;
	@renderer : static : Renderer;
	@dot_texture : static : LTexture;
	@dot : static : Dot;
	@bg_texture : static : LTexture;

	function : Main(args : String[]) ~ Nil {
		# Start up SDL and create window
		if( <>Init() ) {
			"Failed to initialize!"->ErrorLine();
			return;
		};
		
		# Load media
		if( <>LoadMedia() ) {
			"Failed to load media!"->ErrorLine();
			return;
		};

		FRAME_RATE := 1000 / Consts->FPS;
			
		# Main loop flag
		quit := false;

		# Event handler
		e := Event->New();

		camera := Rect->New(0, 0, Consts->SCREEN_WIDTH, Consts->SCREEN_HEIGHT );
		@dot := Dot->New(0, 0, @dot_texture);

		# While application is running
		while(<>quit) {
			start := Timer->GetTicks();

			# Handle events on queue
			while( e->Poll() <> 0 ) {
				# User requests quit
				if(e->GetType() = EventType->SDL_QUIT) {
					quit := true;
				};

				# Handle input for the dot
				@dot->HandleEvent(e);
			};
#~
			# Move the dot and check collision
			@dot->Move();

			# Center the camera over the dot
			camera->SetX(( @dot->GetPosX() + Consts->DOT_WIDTH / 2 ) - Consts->SCREEN_WIDTH / 2);
			camera->SetY(( @dot->GetPosY() + Consts->DOT_HEIGHT / 2 ) - Consts->SCREEN_HEIGHT / 2);

			# Keep the camera in bounds
			if( camera->GetX() < 0 )
			{ 
				camera->SetX(0);
			};
			
			if( camera->GetY() < 0 )
			{
				camera->SetY(0);
			};
			
			if( camera->GetX() > Consts->LEVEL_WIDTH - camera->GetW() )
			{
				camera->SetX(Consts->LEVEL_WIDTH - camera->GetW());
			};

			if( camera->GetY() > Consts->LEVEL_HEIGHT - camera->GetH() )
			{
				camera->SetY(Consts->LEVEL_HEIGHT - camera->GetH());
			};

			@renderer->SetDrawColor(0xFF, 0xFF, 0xFF, 0xFF);
			@renderer->Clear();

			@bg_texture->Render(0, 0, camera);
			@dot->Render(camera->GetX(), camera->GetY());
~#
			# Update screen
			@renderer->Present();

			end := start - Timer->GetTicks();
			if(end < FRAME_RATE) {
				Timer->Delay(FRAME_RATE - end);
			};
			frame += 1;
		};

		e->Free();
		Close();
	}
	
	function : Init() ~ Bool {
		# Initialize SDL
		if(Core->Init(HardwareFlags->SDL_INIT_VIDEO) < 0) {
			"SDL could not initialize!"->ErrorLine();
			return false;
		};
		
		if(<>Hints->Set("SDL_RENDER_SCALE_QUALITY", "1")) {
			"Warning: Linear texture filtering not enabled!"->ErrorLine();
			return false;
		};

		# Create window
		@window := Window->New("SDL Tutorial", 
			WindowFlags->SDL_WINDOWPOS_UNDEFINED, WindowFlags->SDL_WINDOWPOS_UNDEFINED, 
			Consts->SCREEN_WIDTH, Consts->SCREEN_HEIGHT, WindowFlags->SDL_WINDOW_SHOWN);
		if(@window->IsNull()) {
			"Cannot create window!"->ErrorLine();
			return false;
		};

		# Get window surface
		@renderer := Renderer->New(@window, -1, 
			RendererFlags->SDL_RENDERER_ACCELERATED and RendererFlags->SDL_RENDERER_PRESENTVSYNC);
		if(@renderer->IsNull()) {
			"Cannot create renderer!"->ErrorLine();
			return false;
		};
		@renderer->SetDrawColor(0xFF, 0xFF, 0xFF, 0xFF);

		img_flags := ImageFlags->IMG_INIT_PNG->As(Int);
		if((Image->Init(img_flags) and img_flags) = 0) {
			"SDL image could not initialize!"->ErrorLine();
			return false;
		};

		@dot_texture := LTexture->New(@renderer);
		@bg_texture := LTexture->New(@renderer);
				
		return true;
	}
	
	function : LoadMedia() ~ Bool {
		if(<>@dot_texture->LoadFromFile("images/dot.bmp")) {
			"Failed to load image"->ErrorLine();
			return false;
		};

		if(<>@bg_texture->LoadFromFile("images/bg.png")) {
			"Failed to load image"->ErrorLine();
			return false;
		};

		return true;
	}
	
	function : LoadTexture(path : String) ~ Texture {
		# Load image at specified path
		loadedSurface := Image->Load(path);
		if(loadedSurface->IsNull()) {
			"Unable to load surface"->ErrorLine();
			return Nil;
		};

		texture := loadedSurface->CreateTexture(@renderer);
		if(texture->IsNull()) {
			"Unable to create texture!"->ErrorLine();
			return Nil;
		};

		loadedSurface->Free();
		
		return texture;
	}
	
	function : CheckCollision( a : Rect, b : Rect ) ~ Bool {
	    # Calculate the sides of rect A
	    leftA := a->GetX();
	    rightA := a->GetX() + a->GetW();
	    topA := a->GetY();
	    bottomA := a->GetY() + a->GetH();

	    # Calculate the sides of rect B
	    leftB := b->GetX();
	    rightB := b->GetX() + b->GetW();
	    topB := b->GetY();
	    bottomB := b->GetY() + b->GetH();

	    # If any of the sides from A are outside of B
	    if( bottomA <= topB )
	    {
	        return false;
	    };

	    if( topA >= bottomB )
	    {
	        return false;
	    };

	    if( rightA <= leftB )
	    {
	        return false;
	    };

	    if( leftA >= rightB )
	    {
	        return false;
	    };

	    # If none of the sides from A are outside B
	    return true;
	}

	function : Close() ~ Nil {
		@dot_texture->Free();
		@dot->Free();
		@bg_texture->Free();

		@renderer->Destroy();
		@window->Destroy();

		Image->Quit();
		Core->Quit();
	}
}

consts Consts {
	# Screen dimension constants
	SCREEN_WIDTH := 640,
	SCREEN_HEIGHT := 480,
	LEVEL_WIDTH := 1280,
	LEVEL_HEIGHT := 960,

	# Tile constants
	TILE_WIDTH := 80,
	TILE_HEIGHT := 80,
	TOTAL_TILES := 192,
	TOTAL_TILE_SPRITES := 12,

	# The different tile sprites
	TILE_RED := 0,
	TILE_GREEN := 1,
	TILE_BLUE := 2,
	TILE_CENTER := 3,
	TILE_TOP := 4,
	TILE_TOPRIGHT := 5,
	TILE_RIGHT := 6,
	TILE_BOTTOMRIGHT := 7,
	TILE_BOTTOM := 8,
	TILE_BOTTOMLEFT := 9,
	TILE_LEFT := 10,
	TILE_TOPLEFT := 11,

	DOT_VEL := 10,
	DOT_WIDTH := 20,
	DOT_HEIGHT := 20,

	FPS := 60
}
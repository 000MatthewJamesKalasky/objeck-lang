use SDL2;
use Collection;

class ImageSprite from Sprite {
	New(renderer : Renderer, font : Font) {
		Parent(renderer);
	}

	method : public : LoadImage(path : String) ~ Bool {
		Free();

		surface := Image->Load(path);
		if(surface->IsNull()) {
			"Unable to load surface"->ErrorLine();
			return false;
		};
		# TODO: set colorkey
		surface->SetColorKey(true, surface->GetPixelFormat()->MapRGB(0, 0xFF, 0xFF));

		texture := surface->CreateTexture(@renderer);
		if(texture->IsNull()) {
			"Unable to create texture!"->ErrorLine();
			return false;
		};
		@render_rect->SetW(surface->GetW());
		@render_rect->SetH(surface->GetH());
		
		surface->Free();

		@texture := texture;
		return @texture <> Nil;
	}
}

class TextSprite from Sprite {
	@font : Font;

	New(renderer : Renderer, font : Font) {
		Parent(renderer);
		@font := font;
	}

	method : public : RenderedText(text : String, color : Color := Nil) ~ Bool {
		Free();

		if(color = Nil) {
			color := Color->New(32, 32, 32);
		};

		# Render text surface
		textSurface := @font->RenderTextSolid(text, color);
		if(textSurface->IsNull()) {
			"Unable to render text surface!"->ErrorLine();
			return false;
		};

		texture := textSurface->CreateTexture(@renderer);
		@render_rect->SetW(textSurface->GetW());
		@render_rect->SetH(textSurface->GetH());
		
		@texture := texture;
		return @texture <> Nil;
	}
}

class Sprite {
	@texture : Texture;
	@render_rect : Rect;
	@renderer : Renderer;

	New(renderer : Renderer) {
		@renderer := renderer;
		@render_rect := Rect->New();
	}

	method : public : Free() ~ Nil {
		if(@texture <> Nil)	{
			@texture->Destroy();
			@render_rect->SetX(0);
			@render_rect->SetY(0);
		};
	}

	method : public : SetColor(red : Int, green : Int, blue : Int) ~ Nil {
		@texture->SetColorMod(red, green, blue);
	}

	method : public : SetBlendMode(blending : BlendMode) ~ Nil {
		@texture->SetBlendMode(blending);
	}
	
	method : public : SetAlpha(alpha : Int) ~ Nil {
		@texture->SetAlphaMod(alpha );
	}

	method : public : Render(x : Int, y : Int, clip : Rect := Nil, 
			angle : Float := 0.0, center : Point := Nil, 
			flip : RendererFlip := RendererFlip->SDL_FLIP_NONE) ~ Nil {
		@render_rect->SetX(x);
		@render_rect->SetY(y);

		if(clip <> Nil)	{
			@render_rect->SetW(clip->GetW());
			@render_rect->SetH(clip->GetH());
		};

		@renderer->CopyEx(@texture, clip, @render_rect, angle, center, flip);
	}

	method : public : GetWidth() ~ Int {
		return @render_rect->GetW();
	}

	method : public : GetHeight() ~ Int {
		return @render_rect->GetH();
	}
}

class GameEngine {
	@is_ok : Bool;
	@screen_width : Int;
	@screen_height : Int;
	@sprites : Vector;

	New(screen_width : Int, screen_height : Int, title : String, init_flags : Int) {
		Init(screen_width, screen_height, title, init_flags);
		@sprites := Vector->New();
	}

	method : Init(screen_width : Int, screen_height : Int, title : String, init_flags : Int) ~ Bool {
		success := true;

		@screen_width := screen_width;
		@screen_height := screen_height;

		# Initialize SDL
		if(Core->Init(init_flags) < 0) {
			"SDL could not initialize!"->ErrorLine();
			return false;
		};
		
		if(<>Hints->Set("SDL_RENDER_SCALE_QUALITY", "1")) {
			"Warning: Linear texture filtering not enabled!"->ErrorLine();
			return false;
		};

		# Create window
		@window := Window->New(title, WindowFlags->SDL_WINDOWPOS_UNDEFINED, 
			WindowFlags->SDL_WINDOWPOS_UNDEFINED, @screen_width, @screen_height, 
			WindowFlags->SDL_WINDOW_SHOWN);
		if(@window->IsNull()) {
			"Cannot create window!"->ErrorLine();
			return false;
		};

		@renderer := Renderer->New(@window, -1, 
			RendererFlags->SDL_RENDERER_ACCELERATED and RendererFlags->SDL_RENDERER_PRESENTVSYNC);
		if(@renderer->IsNull()) {
			"Cannot create renderer!"->ErrorLine();
			return false;
		};
		@renderer->SetDrawColor(0xFF, 0xFF, 0xFF, 0xFF);

		img_flags := ImageFlags->IMG_INIT_PNG->As(Int);
		if((Image->Init(img_flags) and img_flags) = 0) {
			"SDL image could not initialize!"->ErrorLine();
			return false;
		};

		if(<>Mixer->OpenAudio(44100, Mixer->Flags->MIX_DEFAULT_FORMAT, 2, 2048)) {
			"SDL mixer could not initialize!"->ErrorLine();
			return false;
		};
		
		return true;
	}

	method : public : Run() ~ Bool {
		if(@is_ok) {
			return true;
		};

		return false;
	}

	method : virtual : ProcessInput(e : Event) ~ Nil;

	method : virtual : UpdateAI() ~ Nil;

	method : virtual : Render() ~ Nil;	

	method : public : Quit() ~ Nil {
		Image->Quit();
		Mixer->Quit();
		Core->Quit();
	}
}
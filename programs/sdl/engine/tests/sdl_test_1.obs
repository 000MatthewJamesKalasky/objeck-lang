#~
Game demo v1
link: https://github.com/objeck/objeck-lang/blob/master/programs/sdl/engine/tests/sdl_test_1.obs
~#

use Game.SDL2;
use Game.Engine;

class PlatformDemo {
	@game : GameEngine;
	@game_map : Int[,];
	@game_frame : Int;

	
	@enemy : Rectangle;
	@enemy_x_direction : Int;
	
	@space : Rectangle;
	@block : Rectangle;
	@test : Rectangle;
	@test2 : Rectangle;

	@player : Rectangle;
	@player_x_position : Int;
	@player_y_position : Int;
	@player_x_direction : Int;
	@player_falling : Bool;
	@player_jumping : Bool;
	@player_jump_height : Int;

	@player_speed : Int;
	
	function : Main(args : String[]) ~ Nil {
		platform := PlatformDemo->New();
		platform->Run();
	}

	New() {
		@game := GameEngine->New(Size->SCREEN_WIDTH, Size->SCREEN_HEIGHT, "Engine One");
		@game->SetClearColor(Color->New());

		@player := @game->AddRectangle(Size->BLOCK_WIDTH, Size->BLOCK_HEIGHT * 2);
		@player->SetFill(true);
		@player->SetColor(Color->New(12, 35, 64));
		@player_speed := Size->BLOCK_WIDTH / 4;
		
		@player_y_position := Size->SCREEN_HEIGHT - Size->BLOCK_WIDTH * 4;
		
		@space := @game->AddRectangle(Size->BLOCK_WIDTH, Size->BLOCK_HEIGHT);
		@space->SetColor(Color->New(0, 177, 64));
		
		@test := @game->AddRectangle(Size->BLOCK_WIDTH, Size->BLOCK_HEIGHT);
		@test->SetColor(Color->New(255, 255, 51));
		
		@test2 := @game->AddRectangle(Size->BLOCK_WIDTH, Size->BLOCK_HEIGHT);
		@test2->SetColor(Color->New(255, 255, 250));
		
		@block := @game->AddRectangle(Size->BLOCK_WIDTH, Size->BLOCK_HEIGHT);
		@block->SetFill(true);
		@block->SetColor(Color->New(204, 0, 0));

		@enemy := @game->AddRectangle(Size->BLOCK_WIDTH / 2, Size->BLOCK_HEIGHT / 2);
		@enemy->SetFill(true);
		@enemy->SetColor(Color->New(249, 166, 2));
		@enemy_x_direction := 1;
		
		@game_map := CreateMap();
	}

	method : Run() ~ Nil {
		if(@game->IsOk()) {
			e := @game->GetEvent();
			quit := false;
			while(<>quit) {
				@game->FrameStart();
				
				# process input
				while(e->Poll() <> 0) {
					if(e->GetType() = EventType->SDL_QUIT) {
						quit := true;
					};
					ProcessInput(e);
				};

				UpdateEvents();
				Render();

				@game->FrameEnd();
			};
		}
		else {
			"--- Error Initializing Game Environment ---"->ErrorLine();
			return;
		};

		leaving {
			@game->Quit();
		};
	}
	
	method : public : ProcessInput(e : Event) ~ Nil {
		if(e->GetType() = EventType->SDL_KEYDOWN & e->GetKey()->GetRepeat() = 0) {
	        select(e->GetKey()->GetKeysym()->GetScancode()) {    	
	            label Scancode->SDL_SCANCODE_LEFT: {
	            	@player_x_direction := -1;
	            }

	            label Scancode->SDL_SCANCODE_RIGHT: {
	            	@player_x_direction := 1;
	            }

	            label Scancode->SDL_SCANCODE_SPACE: {
	            	if(<>@player_jumping & <>@player_falling) {
	            		@player_jumping := true;
	            	};
	            }
	        };
	    }
	    else if(e->GetType() = EventType->SDL_KEYUP & e->GetKey()->GetRepeat() = 0) {
	        select(e->GetKey()->GetKeysym()->GetScancode()) {
	        	label Scancode->SDL_SCANCODE_LEFT:
	            label Scancode->SDL_SCANCODE_RIGHT: {
	            	@player_x_direction := 0;
	            }
	        };
	    };   
	}

	method : native : UpdateEvents() ~ Nil {		
		@game_frame += 1;

		if(@game_frame <= @game->GetFps()) {
			if(@game_frame % 2 = 0) {
				# move left
				if(@player_x_direction = -1) {
					@player_x_position -= @player_speed;
				}
				# move right
				else if(@player_x_direction = 1) {
					@player_x_position += @player_speed;
				};

				# move up
				if(@player_jumping) {
					if(@player_jump_height < 1.5 * Size->BLOCK_HEIGHT) {
						@player_y_position -= @player_speed;
						@player_jump_height += @player_speed;
						@player_falling := false;
					}
					else {
						@player_jump_height := 0;
						@player_jumping := false;
						@player_falling := true;
					};
				};

				# falling
				if(@player_falling) {
					@player_y_position += @player_speed;
				};

				if(@enemy->GetY() > 0) {
					if(@enemy_x_direction = 1) {
						@enemy->GetPosition()->Set(@enemy->GetX() + @player_speed / 2, @enemy->GetY());
					}
					else if(@enemy_x_direction = -1) {
						@enemy->GetPosition()->Set(@enemy->GetX() - @player_speed / 2, @enemy->GetY());
					};
				};
			};	
		}
		else {
			@game_frame := 1;
		};
	}

	method : Render() ~ Nil {
		@game->Clear();

		RenderMap();
		
		@game->Show();
	}

	method : native : RenderMap() ~ Nil {
		dims := @game_map->Size();

		view_x_offset := @player_x_position / Size->BLOCK_WIDTH;
		view_y_offset := @player_y_position / Size->BLOCK_HEIGHT;

		y_end := dims[0];
		x_end := view_x_offset + 21; # TODO: load map from file
		if(x_end > dims[1]) {			
			x_end := dims[1];	
		};

		for(x := view_x_offset; x < x_end; x += 1;) {
			pixel_x := x * Size->BLOCK_WIDTH - @player_x_position;

			for(y := 0; y < y_end; y += 1;) {
				pixel_y := y * Size->BLOCK_HEIGHT;

				if(@game_map[y, x] = 1) {
					@block->GetPosition()->Set(pixel_x, pixel_y);
					@block->Render();

					PlayerCollision(@block);
 					EnemyCollisions(@block);
				}
				else if(@game_map[y, x] = 2) {
					if(@enemy->GetY() = 0) {
						@enemy->GetPosition()->Set(pixel_x, pixel_y + Size->BLOCK_HEIGHT / 2);
					}
					else {
						@enemy->Render();
					};
				}
				else {
					# left player blocks
					render_space := true;

					if(x - view_x_offset = 2) {
						if(pixel_y + Size->BLOCK_HEIGHT > @player_y_position + Size->BLOCK_HEIGHT * 2 & 
								pixel_y + Size->BLOCK_HEIGHT <= @player_y_position + Size->BLOCK_HEIGHT * 3) {
							if(@test->GetPosition()->GetCenterX() = @player->GetPosition()->GetCenterX()) {
								@player_falling := true;
							};

							render_space := false;
							@test->GetPosition()->Set(pixel_x, pixel_y);
							@test->Render();
						};
					}
					# right player blocks
					else if(x - view_x_offset = 3) {
						if(pixel_y + Size->BLOCK_HEIGHT > @player_y_position + Size->BLOCK_HEIGHT * 2 & 
								pixel_y + Size->BLOCK_HEIGHT <= @player_y_position + Size->BLOCK_HEIGHT * 3) {
							render_space := false;
							@test2->GetPosition()->Set(pixel_x, pixel_y);
							@test2->Render();
						};
					};
					
					if(render_space) {
						@space->GetPosition()->Set(pixel_x, pixel_y);
						@space->Render();
					};
				};

				@player->GetPosition()->Set(Size->BLOCK_WIDTH * 2, @player_y_position);
				@player->Render();
			};
		};
	}

	method : EnemyCollisions(block : Rectangle) ~ Nil {
		if(block->GetPosition()->Overlaps(@enemy->GetPosition())) {
			if(@enemy_x_direction = 1) {
				@enemy_x_direction := -1;
				if(@player_x_direction = 1) {
					@enemy->GetPosition()->Set(@enemy->GetX() - @player_speed * 2, @enemy->GetY());
				}
				else {
					@enemy->GetPosition()->Set(@enemy->GetX() - @player_speed, @enemy->GetY());
				};
			}
			else if(@enemy_x_direction = -1) {
				@enemy_x_direction := 1;
				if(@player_x_direction = -1) {
					@enemy->GetPosition()->Set(@enemy->GetX() + @player_speed * 2, @enemy->GetY());
				}
				else {
					@enemy->GetPosition()->Set(@enemy->GetX() + @player_speed, @enemy->GetY());
				};
			};
		};
	}

	method : PlayerCollision(block : Rectangle) ~ Bool {
		if(block->GetPosition()->Overlaps(@player->GetPosition())) {
			# right
			if(@player_x_direction = 1) {
				@player_x_position -= @player_speed;
				
			}
			# left
			else if(@player_x_direction = -1) {
				@player_x_position += @player_speed;
			};

			player_bottom := @player->GetPosition()->GetY2() - @player_speed;
			block_top := block->GetPosition()->GetY();
			if(player_bottom <> block_top) {
				@player_x_direction := 0;
			};

			# top
			if(@player_jumping) {
				@player_y_position += @player_speed;
				@player_jumping := false;
				@player_falling := true;
				@player_jump_height := 0;
			}
			# bottom
			else if(@player_falling) {
				@player_y_position -= @player_speed; # reset
				@player_falling := false;
			};

			return true;
		};

		return false;
	}

	method : native : CreateMap() ~ Int[,] {
		game_map := [
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0,   0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 2, 0, 1, 1, 1, 1, 1, 1, 1,   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]
			[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
		];

		return game_map;
	}
}

consts Size {
	SCREEN_WIDTH := 640,
	SCREEN_HEIGHT := 480,
	BLOCK_WIDTH := 32,
	BLOCK_HEIGHT := 32
}
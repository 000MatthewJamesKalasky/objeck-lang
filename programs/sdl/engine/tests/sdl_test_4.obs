use Game.SDL2;
use Game.Engine;
use Collection;

class Demo {
	@engine : GameEngine;
	@player : Player;
	@level : Level;

	function : Main(args : String[]) ~ Nil {
		Demo->New()->Run();
	}

	New() {
		@engine := GameEngine->New(Game->SCREEN_WIDTH, Game->SCREEN_HEIGHT, "Platformer Jumper");
		@engine->SetClearColor(Color->New(0, 0, 255));
	}

	method : Run() ~ Nil {
		if(@engine->IsOk()) {
			@player := Player->New(@engine->AddRectangle(40, 60));
			@level := Level->New(@player, @engine);

			e := @engine->GetEvent();
			quit := false;
			while(<>quit) {
				@engine->FrameStart();
				@engine->Clear();
				
				# process input
				while(e->Poll() <> 0) {
					if(e->GetType() = EventType->SDL_QUIT) {
						quit := true;
					};

					ProcessInput(e);
				};

				# update
				@player->Update();
				@level->Update();

				# draw
				@player->Draw();
				@level->Draw();

				# show
				@engine->Show();
				@engine->FrameEnd();
			};
		}
		else {
			"--- Error Initializing Game Environment ---"->ErrorLine();
			return;
		};

		leaving {
			@engine->Quit();
		};
	}

	method : public : ProcessInput(e : Event) ~ Nil {
		if(e->GetType() = EventType->SDL_KEYDOWN) {
	        select(e->GetKey()->GetKeysym()->GetScancode()) {    	
	            label Scancode->SDL_SCANCODE_LEFT: {
	            	@player->GoLeft();
	            }

	            label Scancode->SDL_SCANCODE_RIGHT: {
	            	@player->GoRight();
	            }

	            label Scancode->SDL_SCANCODE_UP: {
	            	@player->Jump();
	            }
	        };
	    }
	    else if(e->GetType() = EventType->SDL_KEYUP) {
	       	code := e->GetKey()->GetKeysym()->GetScancode();
	       	
	       	if(code = Scancode->SDL_SCANCODE_LEFT & @player->ChangeX() < 0) {
	        };

	        if(code = Scancode->SDL_SCANCODE_RIGHT & @player->ChangeX() > 0) {
	        };
	    };
	}
}

class Player {
	@rect : Rectangle;
	@change_x : Float;
	@change_y : Float;

	New(rect : Rectangle) {
		@rect := rect;
		@rect->SetFill(true);
		@rect->SetColor(Color->New(255, 0, 0));
	}

	method : public : ChangeX()  ~ Int {
		return 0;
	}

	method : public : GoLeft()  ~ Nil {
		@change_x := -6;
	}

	method : public : GoRight()  ~ Nil {
		@change_x := 6;
	}

	method : public : Stop()  ~ Nil {
		@change_x := 0;
	}

	# TODO
	method : public : Jump()  ~ Nil {
	}

	# TODO
	method : public : Update()  ~ Nil {
		Gravity();

		# Move left/right
        @rect->AddY(@change_y);
		
	}

	method : public : Draw()  ~ Nil {
		@rect->Render();
	}

	# TODO
	method : public : Gravity()  ~ Nil {
        if(@change_y = 0) {
            @change_y := 1;
        }
        else {
            @change_y += .35;
        };
 
        # See if we are on the ground.
        if(@rect->GetY() >= Game->SCREEN_HEIGHT - @rect->GetHeight() & @change_y >= 0) {
            @change_y := 0;
            @rect->SetY(Game->SCREEN_HEIGHT - @rect->GetHeight());
        };
	}
}

class Platform {
	@rect : Rectangle;

	New(x : Int, y : Int, rect : Rectangle) {
		@rect := rect;
		@rect->SetFill(true);
		@rect->SetColor(Color->New(0, 255, 0));
		@rect->Set(x, y);
	}

	method : public : Update()  ~ Nil {
	}

	method : public : Draw()  ~ Nil {
		@rect->Render();
	}
}

class Level {
	@player : Player;
	@platforms : Vector;

	New(player : Player, engine : GameEngine) {
		@player := player;
		@platforms := Vector->New();

		@platforms->AddBack(Platform->New(500, 500, engine->AddRectangle(210, 70)));
		@platforms->AddBack(Platform->New(200, 400, engine->AddRectangle(210, 70)));	
		@platforms->AddBack(Platform->New(600, 300, engine->AddRectangle(210, 70)));
	}

	method : public : Update()  ~ Nil {
		each(i : @platforms) {
			@platforms->Get(i)->As(Platform)->Update();
		};
	}

	method : public : Draw()  ~ Nil {
		each(i : @platforms) {
			@platforms->Get(i)->As(Platform)->Draw();
		};
	}
}

consts Game {
	SCREEN_WIDTH := 800,
	SCREEN_HEIGHT := 600
}
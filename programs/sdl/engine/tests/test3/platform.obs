use Game.SDL2;
use Game.Engine;
use Collection;

class Platform {
	@engine : GameEngine;
	@quit_game : Bool;
	@game_map : Int[,];
	@frame_count : Int;

	@player : Player;
	@block1 : ImageSprite;
	@block2 : ImageSprite;
	@block3 : ImageSprite;
	@block4 : ImageSprite;

	@hamburger : AnimatedImageSprite;
	@hamburger_frame : Int;

	@gem : AnimatedImageSprite;
	@gem_frame : Int;
	
	@enemies : List;
	@bullets : List;

	@time : Int;
	@time_text : TextSprite;

	@score : Int;
	@score_text : TextSprite;

	@bullet_fired : Bool;
	
	function : Main(args : String[]) ~ Nil {
		platform := Platform->New();
		
		while(platform->StartGame()) {
			platform->Run();
		};

		platform->Free();
	}

	New() {
		@engine := GameEngine->New(Values->SCREEN_WIDTH, Values->SCREEN_HEIGHT, "Engine Three");
		Enemy->Init(@self);		
		Bullet->Init(@self);
	}

	method : Free() ~ Nil {
		@engine->Quit();
	}

	method : public : GetEngine() ~ GameEngine {
		return @engine;
	}

	method : public : GetMap() ~ Int[,] {
		return @game_map;
	}

	method : public : GetFrameCount() ~ Int {
		return @frame_count;
	}

	method : public : EndGame() ~ Nil {
		@quit_game := true;
	}

	method : public : GotHamburger() ~ Nil {
		@score += 10;
	}

	method : public : GotGem() ~ Nil {
		@score += 25;
	}

	method : StartGame() ~ Bool {
		e := @engine->GetEvent();

		play_text := @engine->AddTextSprite();
		quit_text := @engine->AddTextSprite();

		quit := false;
		while(<>quit) {
			@engine->FrameStart();
			
			# process input
			while(e->Poll() <> 0) {
				if(e->GetType() = EventType->SDL_QUIT) {
					quit := true;
				}
				else if(e->GetType() = EventType->SDL_JOYHATMOTION) {
					if(e->GetJHat()->GetWhich() = 0 ) {
						select(e->GetJHat()->GetValue()) {
							# up 
							label 1: {
							}

							# down
							label 4: {
							}			
						};
					};
				}
				# keyboard
				else if(e->GetType() = EventType->SDL_KEYDOWN & e->GetKey()->GetRepeat() = 0) {
			        select(e->GetKey()->GetKeysym()->GetScancode()) {
			        	# up  	
			        	label Scancode->SDL_SCANCODE_UP: {
			            }

			            # down
						label Scancode->SDL_SCANCODE_DOWN: {
			            }

			            label Scancode->SDL_SCANCODE_P: {
			            	return true;
			            }

			            label Scancode->SDL_SCANCODE_Q:
			            label Scancode->SDL_SCANCODE_ESCAPE: {
							return false;
			            }
			        };
				};
			};

			play_text->RenderedText("(P)lay!");
			quit_text->RenderedText("(Q)uit");

			@engine->Clear();

			play_text->Render(Values->SCREEN_WIDTH / 2 - play_text->GetWidth() /2, Values->SCREEN_HEIGHT / 2 - 16);
			quit_text->Render(Values->SCREEN_WIDTH / 2 - quit_text->GetWidth() /2, Values->SCREEN_HEIGHT / 2 + 16);

			@engine->FrameEnd();

			@engine->Show();
		};

		leaving {
			@engine->FreeShapes();
		};

		return false;
	}

	method : Run() ~ Nil {
		if(@engine->IsOk()) {
			@game_map := CreateMap();
			@block1 := @engine->AddImageSprite("images/block1.png");
			@block2 := @engine->AddImageSprite("images/block2.png");
			@block3 := @engine->AddImageSprite("images/block3.png");
			@block4 := @engine->AddImageSprite("images/block4.png");

			@score_text := @engine->AddTextSprite();
			@time_text := @engine->AddTextSprite();
			@time := 45;
			@time_text->RenderedText("Time: {$@time}");
			
			@player := Player->New(@self);
			@enemies := List->New();
			@hamburger := @engine->AddAnimatedImageSprite("images/food.png", 5);
			@gem := @engine->AddAnimatedImageSprite("images/gems.png", 6);
			@bullets := List->New();
		
			e := @engine->GetEvent();

			@quit_game := false;
			while(<>@quit_game) {
				@engine->FrameStart();
				
				# process input
				while(e->Poll() <> 0) {
					if(e->GetType() = EventType->SDL_QUIT) {
						@quit_game := true;
					};
					ProcessInput(e);
				};

				HandleEvents();
				Render();

				@engine->FrameEnd();
			};
		}
		else {
			"--- Error Initializing Game Environment ---"->ErrorLine();
			return;
		};

		leaving {
			@engine->FreeShapes();
		};
	}
	
	method : public : ProcessInput(e : Event) ~ Nil {
		# Joystick
		if(e->GetType() = EventType->SDL_JOYHATMOTION) {
			if(e->GetJHat()->GetWhich() = 0 ) {
				select(e->GetJHat()->GetValue()) {
					# release pad
					label 0: {
						@player->SetXVelocity(0);
					}

					# right pad
					label 2: {
		            	@player->SetXVelocity(1);
					}

					# left pad
					label 8: {
						@player->SetXVelocity(-1);
					}					
				};
			};
		}
		else if(e->GetType() = EventType->SDL_JOYBUTTONDOWN) {
			# 'a' button
			if(e->GetJButton()->GetButton() = 0) {
				if(<>@player->IsJumping()) {
            		@player->SetJumping(true);
            	};
			}
			# 'b' button
			else if(e->GetJButton()->GetButton() = 1) {
				if(<>@bullet_fired) {
        			@bullet_fired := true;
        		};
			};
		}
		# keyboard
		else if(e->GetType() = EventType->SDL_KEYDOWN & e->GetKey()->GetRepeat() = 0) {
	        select(e->GetKey()->GetKeysym()->GetScancode()) {    	
	        	label Scancode->SDL_SCANCODE_UP: {
	        		if(<>@bullet_fired) {
	        			@bullet_fired := true;
	        		};
	            }

	            label Scancode->SDL_SCANCODE_LEFT: {
	            	@player->SetXVelocity(-1);
	            }

	            label Scancode->SDL_SCANCODE_RIGHT: {
	            	@player->SetXVelocity(1);
	            }

	            label Scancode->SDL_SCANCODE_SPACE: {
	            	if(@player->JumpHeight() = 0) {
            			@player->SetJumping(true);
            		};
	            }

	            label Scancode->SDL_SCANCODE_Q:
	            label Scancode->SDL_SCANCODE_ESCAPE: {
					@quit_game := true;
			    }
	        };
	    }
	    else if(e->GetType() = EventType->SDL_KEYUP & e->GetKey()->GetRepeat() = 0) {
	        select(e->GetKey()->GetKeysym()->GetScancode()) {
	        	label Scancode->SDL_SCANCODE_LEFT:
	            label Scancode->SDL_SCANCODE_RIGHT: {
	            	@player->SetXVelocity(0);
	            }
	        };
	    };   
	}

	method : native : HandleEvents() ~ Nil {
		@frame_count += 1;
		if(@frame_count >= @engine->GetFps()) {
			@frame_count := 0;
		};

		@score_text->RenderedText("Score: {$@score}");
		if(@frame_count % @engine->GetFps() = 0) {
			@time -= 1;
			if(@time < 0) {
				@player->SetAlive(false);
			}
			else {
				@time_text->RenderedText("Time: {$@time}");
			};
		};

		if(@frame_count % 5 = 0) {
			@hamburger_frame += 1;
			if(@hamburger_frame >= @hamburger->GetClipCount()) {
				@hamburger_frame := 0;
			};
		};

		if(@frame_count % 3 = 0) {
			@gem_frame += 1;
			if(@gem_frame >= @gem->GetClipCount()) {
				@gem_frame := 0;
			};
		};

		@player->HandleEvents();

		if(@bullet_fired & @bullets->Size() < 6) {
"--- SHOT FIRED ---"->PrintLine();
			@bullets->AddBack(Bullet->New(@player->GetRelX() + 16, 
				@player->GetRelY() + 32, @player->GetFacingLeft() ? 1 : -1));
			@bullet_fired := false;
		};

		@enemies->Rewind();
		while(@enemies->More()) {
			enemy := @enemies->Get()->As(Enemy);			
			# out of range
			if(enemy->GetRelX() < 0 | <>enemy->IsAlive()) {
				@enemies->Remove();
			}
			else {
				enemy->HandleEvents(@player);
			};

			# check bullet
			@bullets->Rewind();
			while(@bullets->More()) {
				bullet := @bullets->Get()->As(Bullet);
				bullet->HandleEvents(enemy, @player);
				if(<>bullet->IsAlive()) {
					@bullets->Remove();
				};
				@bullets->Next();
			};

			@enemies->Next();
		};
	}

	method : Render() ~ Nil {
		# render background
		@player->RenderBackground();
		
		# calculate camera view
		dims := @game_map->Size();		
		start_x := @player->GetMapX() / Values->BLOCK_WIDTH;
		if(start_x < 0) {
			start_x := 0;
		};

		end_x := start_x + 26; # could be calculated using screen and block width
		if(end_x >= dims[1]) {
			end_x := dims[1] - 1;
		};

		# render blocks
		for(x := start_x; x < end_x; x += 1;) {
			rel_x := x * Values->BLOCK_WIDTH - @player->GetMapX();
			for(y := 0; y < dims[0]; y += 1;) {
				rel_y := y * Values->BLOCK_HEIGHT;
				select(@game_map[y, x]) {
					label 1: {
						@block1->Render(rel_x, rel_y);
					}

					label 2: {
						@block2->Render(rel_x, rel_y);
					}

					label 3: {
						@block3->Render(rel_x, rel_y);
					}

					label 4: {
						@block4->Render(rel_x, rel_y);
					}

					label 5: {
						@hamburger->Render(rel_x, rel_y, @hamburger_frame);
					}

					label 6: {
						@gem->Render(rel_x, rel_y, @gem_frame);
					}

					label 7: {
						if(y < 24) {
							@enemies->AddBack(Enemy->New(rel_x, rel_y));
							@game_map[y, x] := 0;
						};
					}
				};
			};
		};

		# render player
		@player->RenderPlayer();

		# render enemy
		@enemies->Rewind();
		while(@enemies->More()) {
			@enemies->Get()->As(Enemy)->Render();
			@enemies->Next();
		};


		# render bullets
		@bullets->Rewind();
		while(@bullets->More()) {
			@bullets->Get()->As(Bullet)->Render();
			@bullets->Next();
		};

		@time_text->Render(Values->SCREEN_WIDTH - 128, 16);
		@score_text->Render(Values->SCREEN_WIDTH - 128, 48);

		@engine->Show();
	}

	method : native : CreateMap() ~ Int[,] {
		game_map := [
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]
			[0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 5, 0, 6, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]
			[2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2,]
			[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,]
		];

		return game_map;
	}
}

consts Values {
	SCREEN_WIDTH := 800,
	SCREEN_HEIGHT := 640,
	BLOCK_WIDTH := 32,
	BLOCK_HEIGHT := 32,
	SPEED := 2
}

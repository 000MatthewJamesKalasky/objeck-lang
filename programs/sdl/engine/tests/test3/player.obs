use Game.SDL2;
use Game.Engine;

class Player {
	@platform : Platform;
	@game_map : Int[,];
	@player : AnimatedImageSprite;
	@frame : Int;
	@x_position : Int;
	@x_rel_position : Int;
	@y_rel_position : Int;
	@x_velocity : Int;
	@y_velocity : Int;
	@jumping : Bool;
	@jump_height : Int;
	@last_height : Int;

	@background : ImageSprite;
	@background_offset : Int;

	New(platform : Platform) {
		@platform := platform;
		@game_map := @platform->GetMap();
		@player := @platform->GetEngine()->AddAnimatedImageSprite("images/player.png", 5);
		@frame := @player->GetClipCount() - 1;
		@y_rel_position := Values->SCREEN_HEIGHT - 128;

		@background := @platform->GetEngine()->AddImageSprite("images/background.png");
	}

	method : public : GetXStart() ~ Int {
		return @x_position - @x_rel_position;
	}

	method : public : GetX() ~ Int {
		return @x_rel_position;
	}

	method : public : GetY() ~ Int {
		return @y_rel_position;
	}	

	method : public : SetXVelocity(player_x_velocity : Int) ~ Nil {
		@x_velocity := player_x_velocity;

		if(@x_velocity = 1) {
			if(@player->GetFlip() = RendererFlip->SDL_FLIP_HORIZONTAL) {
				@player->SetFlip(RendererFlip->SDL_FLIP_NONE);
			};
		}
		else if(@x_velocity = -1) {
			@player->SetFlip(RendererFlip->SDL_FLIP_HORIZONTAL);
		};
	}

	method : public : SetYVelocity(y_velocity : Int) ~ Nil {
		@y_velocity := y_velocity;
	}

	method : public : IsJumping() ~ Bool {
		return @jumping;
	}

	method : public : SetJumping(jumping : Bool) ~ Nil {
		if(jumping) {
			@jumping := true;
            @y_velocity := 1;
      	};
	}

	method : public : native : HandleEvents() ~ Nil {
		frame_count := @platform->GetFrameCount();

		if(@x_velocity = 1) {
			@x_position += Values->SPEED;
		}
		else if(@x_velocity = -1) {
			@x_position -= Values->SPEED;
		};

		if(@y_velocity = 1) {
			if(@jump_height < 1.5 * Values->BLOCK_HEIGHT) {
				@jump_height += Values->SPEED * 2;
				@y_rel_position -= Values->SPEED * 2;
			}
			else {
				@jumping := false;
			};
		}
		else if(@y_velocity = -1) {
			@y_rel_position += Values->SPEED * 2;
			if(@jump_height > 0) {
				@jump_height -= Values->SPEED * 2;
			};
		};

		if(<>PlayerCollision()) {
			# update walk frame
			if(frame_count % 5 = 0) {
				# apply gravity
				if(<>@jumping) {
					@y_velocity := -1;
				}
				else {
					@y_velocity := 1;
				};

				if(@x_velocity <> 0) {
					@frame -= 1;
					if(@frame < 0) {
						@frame :=  @player->GetClipCount() - 1;
					};
				};
			}
			else if(@x_velocity = 0) {
				@frame :=  @player->GetClipCount() - 1;
			};

			# move right
			if(@x_velocity = 1) {
				@x_rel_position += Values->SPEED;
				if(@x_rel_position > Values->SCREEN_WIDTH / 4) {
					@x_rel_position := Values->SCREEN_WIDTH / 4;
					@background_offset -= Values->SPEED / 2;
					if(@background_offset < -1 * @background->GetWidth()) {
						@background_offset := 0;
					};
				};
			}
			# move left
			else if(@x_velocity = -1) {
				@x_rel_position -= Values->SPEED;
				if(@x_rel_position < Values->BLOCK_WIDTH * 2) {		
					@x_rel_position := Values->BLOCK_WIDTH * 2;
					@background_offset += Values->SPEED / 2;
					if(@background_offset > 0) {
						@background_offset := -1 * @background->GetWidth();
					};
				};
			};
		};
	}

	method : public : JumpHeight() ~ Int {
		return @jump_height;
	}

	method : native : PlayerCollision() ~ Bool {
		# calculate camera view
		dims := @game_map->Size();
		start_x := (@x_position - @x_rel_position) / Values->BLOCK_WIDTH;
		if(start_x < 0) {
			start_x := 0;
		};
		end_x := start_x + 26; # could be calculated using screen and block width

		# render blocks
		for(x := start_x; x < end_x; x += 1;) {
			block_rel_x := x * Values->BLOCK_WIDTH - (@x_position - @x_rel_position);
			for(y := 0; y < dims[0]; y += 1;) {
				block_rel_y := y * Values->BLOCK_HEIGHT;
				if(@game_map[y, x] =  1) {
					block_rel_x2 := block_rel_x + Values->BLOCK_WIDTH;
					block_rel_y2 := block_rel_y + Values->BLOCK_HEIGHT;

					player_rel_y := @y_rel_position;
					player_rel_y2 := player_rel_y + @player->GetHeight();
					player_rel_x := @x_rel_position;
					player_rel_x2 := player_rel_x + Values->BLOCK_WIDTH;

					if(player_rel_x2 > block_rel_x & player_rel_x < block_rel_x2 & 
						player_rel_y2 > block_rel_y & player_rel_y < block_rel_y2) {

						# top
						if(@y_velocity = 1) {
							@y_rel_position += Values->SPEED * 2;
							@jumping := false;
							@y_velocity := 0;
						}
						# bottom
						else if(@y_velocity = -1) {
							@y_rel_position -= Values->SPEED * 2;
							@y_velocity := 0;

							if(@jump_height > 0 & @x_velocity <> 0) {
								@last_height := @jump_height;
							};							
						};

						# right
						if(@x_velocity = 1) {
							@x_position -= Values->SPEED;							
							if(@jump_height > 0 & @last_height <> @jump_height) {
								@x_velocity := 0;
							}
							else {
								@last_height := 0;
							};
						}
						# left
						else if(@x_velocity = -1) {
							@x_position += Values->SPEED;
							if(@jump_height > 0 & @last_height <> @jump_height) {
								@x_velocity := 0;
							}
							else {
								@last_height := 0;
							};
						};

						return true;
					};
				};
			};
		};

		return false;
	}

	method : public : RenderBackground() ~ Nil {
		@background->Render(@background_offset, 0);
		@background->Render(@background_offset + @background->GetWidth(), 0);
	}

	method : public : RenderPlayer() ~ Nil {
		@player->Render(@x_rel_position, @y_rel_position, @frame);
	}
}
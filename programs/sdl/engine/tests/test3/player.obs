use Game.SDL2;
use Game.Engine;

class Player {
	@platform : Platform;
	@game_map : Int[,];
	@player : AnimatedImageSprite;
	@frame : Int;
	@x_map_position : Int;
	@x_rel_position : Int;
	@y_rel_position : Int;
	@x_velocity : Int;
	@y_velocity : Int;
	@jumping : Bool;
	@jump_height : Int;
	@last_height : Int;
	@camera_shift : Int;
	@is_alive : Bool;

	@background : ImageSprite;
	@background_offset : Int;

	New(platform : Platform) {
		@platform := platform;
		@game_map := @platform->GetMap();
		@player := @platform->GetEngine()->AddAnimatedImageSprite("images/player.png", 6);
		@frame := @player->GetClipCount() - 1;
		@y_rel_position := Values->SCREEN_HEIGHT - 256;

		@background := @platform->GetEngine()->AddImageSprite("images/background.png");
		@is_alive := true;
	}

	method : public : GetFacingLeft() ~ Bool {
		return @player->GetFlip() = RendererFlip->SDL_FLIP_NONE;
	}
	
	method : public : GetMapX() ~ Int {
		return @x_map_position - @x_rel_position;
	}

	method : public : GetRelX() ~ Int {
		return @x_rel_position;
	}

	method : public : GetRelY() ~ Int {
		return @y_rel_position;
	}

	method : public : GetHeight() ~ Int {
		return @player->GetHeight();
	}

	method : public : GetWidth() ~ Int {
		return @player->GetWidth();
	}

	method : public : GetCameraShift() ~ Int {
		return @camera_shift;
	}

	method : public : IsAlive() ~ Bool {
		return @is_alive;
	}

	method : public : SetAlive(is_alive : Bool) ~ Nil {
		@is_alive := is_alive;
	}

	method : public : SetXVelocity(x_velocity : Int) ~ Nil {
		@x_velocity := x_velocity;

		if(@x_velocity = 1) {
			if(@player->GetFlip() = RendererFlip->SDL_FLIP_HORIZONTAL) {
				@player->SetFlip(RendererFlip->SDL_FLIP_NONE);
			};
		}
		else if(@x_velocity = -1) {
			@player->SetFlip(RendererFlip->SDL_FLIP_HORIZONTAL);
		};
	}

	method : public : SetYVelocity(y_velocity : Int) ~ Nil {
		@y_velocity := y_velocity;
	}

	method : public : IsJumping() ~ Bool {
		return @jumping;
	}

	method : public : JumpHeight() ~ Int {
		return @jump_height;
	}

	method : public : SetJumping(jumping : Bool) ~ Nil {
		if(jumping) {
			@jumping := true;
            @y_velocity := 1;
      	};
	}

	method : public : native : HandleEvents() ~ Nil {
		frame_count := @platform->GetFrameCount();

		# player died!
		if(<>@is_alive) {
			@y_rel_position += Values->SPEED / 2;
			if(@y_rel_position > Values->SCREEN_HEIGHT) {
				Runtime->Exit(0);
			};
		}
		else {
			if(@x_velocity = 1) {
				@x_map_position += Values->SPEED;
			}
			else if(@x_velocity = -1) {
				@x_map_position -= Values->SPEED;
			};

			if(@y_velocity = 1) {
				if(@jump_height < 2 * Values->BLOCK_HEIGHT) {
					@jump_height += Values->SPEED * 2;
					@y_rel_position -= Values->SPEED * 2;
				}
				else {
					@jumping := false;
				};
			}
			else if(@y_velocity = -1) {
				@y_rel_position += Values->SPEED * 2;
				if(@jump_height > 0) {
					@jump_height -= Values->SPEED * 2;
				};
			};

			if(<>BlockCollision()) {
				# update walk frame
				if(frame_count % 5 = 0) {
					# apply gravity
					if(<>@jumping) {
						@y_velocity := -1;
					}
					else {
						@y_velocity := 1;
					};

					if(@x_velocity <> 0 & @jump_height = 0) {
						@frame -= 1;
						if(@frame < 0) {
							@frame :=  @player->GetClipCount() - 2;
						};
					};
				}
				else if(@jump_height > 0 & @x_velocity <> 0) {
					@frame :=  @player->GetClipCount() - 1;
				}
				else if(@x_velocity = 0) {
					@frame :=  @player->GetClipCount() - 2;
				};

				# move right
				if(@x_velocity = 1) {
					@x_rel_position += Values->SPEED;
					if(@x_rel_position > Values->SCREEN_WIDTH / 4) {
						@camera_shift := 1;
						@x_rel_position := Values->SCREEN_WIDTH / 4;
						@background_offset -= Values->SPEED / 2;
						if(@background_offset < -1 * @background->GetWidth()) {
							@background_offset := 0;
						};
					}
					else {
						@camera_shift := 0;
					};
				}
				# move left
				else if(@x_velocity = -1) {
					@x_rel_position -= Values->SPEED;
					if(@x_rel_position < Values->BLOCK_WIDTH * 2) {	
						@x_velocity := 0;
#~						
						@camera_shift := -1;
						@x_rel_position := Values->BLOCK_WIDTH * 2;
						@background_offset += Values->SPEED / 2;
						if(@background_offset > 0) {
							@background_offset := -1 * @background->GetWidth();
						};
~#						
					}
					else {
						@camera_shift := 0;
					};
				}
				else {
					@camera_shift := 0;
				};
			};
		};
	}

	method : native : BlockCollision() ~ Bool {
		dims := @game_map->Size();

		start_x := (@x_map_position - @x_rel_position) / Values->BLOCK_WIDTH;
		if(start_x < 0) {
			start_x := 0;
		};

		end_x := start_x + 26; # could be calculated using screen and block width
		if(end_x >= dims[1]) {
			end_x := dims[1] - 1;
		};

		# render blocks
		for(x := start_x; x < end_x; x += 1;) {
			block_rel_x := x * Values->BLOCK_WIDTH - (@x_map_position - @x_rel_position);
			for(y := 0; y < dims[0]; y += 1;) {
				block_rel_y := y * Values->BLOCK_HEIGHT;
				if(@game_map[y, x] =  1) {
					block_rel_x2 := block_rel_x + Values->BLOCK_WIDTH;
					block_rel_y2 := block_rel_y + Values->BLOCK_HEIGHT;

					rel_y := @y_rel_position;
					rel_y2 := rel_y + @player->GetHeight();
					rel_x := @x_rel_position;
					rel_x2 := rel_x + @player->GetWidth();

					if(rel_x2 > block_rel_x & rel_x < block_rel_x2 & 
						rel_y2 > block_rel_y & rel_y < block_rel_y2) {

						# top
						if(@y_velocity = 1) {
							@y_rel_position += Values->SPEED * 2;
							@jumping := false;
							@y_velocity := 0;
						}
						# bottom
						else if(@y_velocity = -1) {
							@y_rel_position -= Values->SPEED * 2;
							@y_velocity := 0;

							if(@jump_height > 0 & @x_velocity <> 0) {
								@last_height := @jump_height;
							};							
						};

						# right
						if(@x_velocity = 1) {
							@x_map_position -= Values->SPEED;							
							if(@jump_height > 0 & @last_height <> @jump_height) {
								@x_velocity := 0;
							}
							else {
								@last_height := 0;
							};
						}
						# left
						else if(@x_velocity = -1) {
							@x_map_position += Values->SPEED;
							if(@jump_height > 0 & @last_height <> @jump_height) {
								@x_velocity := 0;
							}
							else {
								@last_height := 0;
							};
						};

						return true;
					};
				};
			};
		};

		return false;
	}

	method : public : RenderBackground() ~ Nil {
		@background->Render(@background_offset, 0);
		@background->Render(@background_offset + @background->GetWidth(), 0);
	}

	method : public : RenderPlayer() ~ Nil {
		@player->Render(@x_rel_position, @y_rel_position, @frame);
	}
}
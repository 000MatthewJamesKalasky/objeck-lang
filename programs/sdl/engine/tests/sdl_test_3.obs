use Game.SDL2;
use Game.Engine;

class PlatformDemo {
	@game : GameEngine;
	@game_map : Int[,];
	@frame_count : Int;

	@background : ImageSprite;
	@background_offset : Int;

	@player : AnimatedImageSprite;
	@player_frame : Int;
	@player_x_position : Int;
	@player_x_rel_position : Int;
	@player_y_rel_position : Int;
	
	@player_x_velocity : Int;
	@player_y_velocity : Int;

	@block : ImageSprite;
	
	function : Main(args : String[]) ~ Nil {
		platform := PlatformDemo->New();
		platform->Run();
	}

	New() {
		@game := GameEngine->New(Values->SCREEN_WIDTH, Values->SCREEN_HEIGHT, "Engine Three");
		
		@background := @game->AddImageSprite("images/background.png");
		@block := @game->AddImageSprite("images/block4.png");
		@player := @game->AddAnimatedImageSprite("images/player.png", 5);
		@player_frame := @player->GetClipCount() - 1;
		@player_y_rel_position := Values->SCREEN_HEIGHT - 116;

		@game_map := CreateMap();

@player->GetHeight()->PrintLine();		
	}

	method : Run() ~ Nil {
		if(@game->IsOk()) {
			e := @game->GetEvent();
			quit := false;
			while(<>quit) {
				@game->FrameStart();
				
				# process input
				while(e->Poll() <> 0) {
					if(e->GetType() = EventType->SDL_QUIT) {
						quit := true;
					};
					ProcessInput(e);
				};

				HandleEvents();
				Render();

				@game->FrameEnd();
			};
		}
		else {
			"--- Error Initializing Game Environment ---"->ErrorLine();
			return;
		};

		leaving {
			@game->Quit();
		};
	}
	
	method : public : ProcessInput(e : Event) ~ Nil {
		if(e->GetType() = EventType->SDL_KEYDOWN & e->GetKey()->GetRepeat() = 0) {
	        select(e->GetKey()->GetKeysym()->GetScancode()) {    	
	            label Scancode->SDL_SCANCODE_LEFT: {
	            	@player_x_velocity := -1;
	            }

	            label Scancode->SDL_SCANCODE_RIGHT: {
	            	@player_x_velocity := 1;
	            }

	            label Scancode->SDL_SCANCODE_UP: {
	            	@player_y_velocity := 1;
	            }

	            label Scancode->SDL_SCANCODE_DOWN: {
	            	@player_y_velocity := -1;
	            }

	            label Scancode->SDL_SCANCODE_SPACE: {
	            }
	        };
	    }
	    else if(e->GetType() = EventType->SDL_KEYUP & e->GetKey()->GetRepeat() = 0) {
	        select(e->GetKey()->GetKeysym()->GetScancode()) {
	        	label Scancode->SDL_SCANCODE_LEFT:
	            label Scancode->SDL_SCANCODE_RIGHT: {
	            	@player_x_velocity := 0;
	            }

	            label Scancode->SDL_SCANCODE_UP:
	            label Scancode->SDL_SCANCODE_DOWN: {
	            	@player_y_velocity := 0;
	            }
	        };
	    };   
	}

	method : native : HandleEvents() ~ Nil {
		@frame_count += 1;
		if(@frame_count >= @game->GetFps()) {
			@frame_count := 0;
		};

		if(@player_x_velocity = 1) {
			@player_x_position += Values->SPEED;
		}
		else if(@player_x_velocity = -1) {
			@player_x_position -= Values->SPEED;
		};

		if(@player_y_velocity = 1) {
			@player_y_rel_position -= Values->SPEED;
		}
		else if(@player_y_velocity = -1) {
			@player_y_rel_position += Values->SPEED;
		};

		if(<>PlayerCollusion()) {
			# update walk frame
			if(@player_x_velocity <> 0 & @frame_count % 5 = 0) {
				@player_frame -= 1;
				if(@player_frame < 0) {
					@player_frame :=  @player->GetClipCount() - 1;
				};
			}
			else if(@player_x_velocity = 0) {
				@player_frame :=  @player->GetClipCount() - 1;
			};

			# move right
			if(@player_x_velocity = 1) {
				if(@player->GetFlip() = RendererFlip->SDL_FLIP_HORIZONTAL) {
					@player->SetFlip(RendererFlip->SDL_FLIP_NONE);
				};

				@player_x_rel_position += Values->SPEED;
				if(@player_x_rel_position > Values->SCREEN_WIDTH / 4) {
					@player_x_rel_position := Values->SCREEN_WIDTH / 4;
					@background_offset -= Values->SPEED;
					if(@background_offset < -1 * @background->GetWidth()) {
						@background_offset := 0;
					};
				};
			}
			# move left
			else if(@player_x_velocity = -1) {
				@player->SetFlip(RendererFlip->SDL_FLIP_HORIZONTAL);

				@player_x_rel_position -= Values->SPEED;
				if(@player_x_rel_position < Values->BLOCK_WIDTH * 2) {		
					@player_x_rel_position := Values->BLOCK_WIDTH * 2;
					@background_offset += Values->SPEED;
					if(@background_offset > 0) {
						@background_offset := -1 * @background->GetWidth();
					};
				};
			};
		};
	}

	method : Render() ~ Nil {
		# render background
		@background->Render(@background_offset, 0);
		@background->Render(@background_offset + @background->GetWidth(), 0);
		
		# calculate camera view
		dims := @game_map->Size();
		start_x := (@player_x_position - @player_x_rel_position) / Values->BLOCK_WIDTH;
		if(start_x < 0) {
			start_x := 0;
		};
		end_x := start_x + 26; # could be calculated using screen and block width

		# render blocks
		for(x := start_x; x < end_x; x += 1;) {
			rel_x := x * Values->BLOCK_WIDTH - (@player_x_position - @player_x_rel_position);
			for(y := 0; y < dims[0]; y += 1;) {
				rel_y := y * Values->BLOCK_HEIGHT;
				select(@game_map[y, x]) {
					label 1: {
						@block->Render(rel_x, rel_y);
					}
				};
			};
		};

		# render player
		@player->Render(@player_x_rel_position, @player_y_rel_position, @player_frame);

		@game->Show();
	}

	method : PlayerCollusion() ~ Bool {
		# calculate camera view
		dims := @game_map->Size();
		start_x := (@player_x_position - @player_x_rel_position) / Values->BLOCK_WIDTH;
		if(start_x < 0) {
			start_x := 0;
		};
		end_x := start_x + 26; # could be calculated using screen and block width

		# render blocks
		for(x := start_x; x < end_x; x += 1;) {
			block_rel_x := x * Values->BLOCK_WIDTH - (@player_x_position - @player_x_rel_position);
			for(y := 0; y < dims[0]; y += 1;) {
				block_rel_y := y * Values->BLOCK_HEIGHT;
				if(@game_map[y, x] =  1) {
					block_rel_x2 := block_rel_x + Values->BLOCK_WIDTH;
					block_rel_y2 := block_rel_y + Values->BLOCK_HEIGHT;

					player_rel_y := @player_y_rel_position;
					player_rel_y2 := player_rel_y + @player->GetHeight();
					player_rel_x := @player_x_rel_position;
					player_rel_x2 := player_rel_x + Values->BLOCK_WIDTH;

					if(player_rel_x2 > block_rel_x & player_rel_x < block_rel_x2 & 
						player_rel_y2 > block_rel_y & player_rel_y < block_rel_y2) {

						if(@player_x_velocity = 1) {
							@player_x_position -= Values->SPEED;
						}
						else if(@player_x_velocity = -1) {
							@player_x_position += Values->SPEED;
						};

						if(@player_y_velocity = 1) {
							@player_y_rel_position += Values->SPEED;
						}
						else if(@player_y_velocity = -1) {
							@player_y_rel_position -= Values->SPEED;
						};

						return true;
					};
				};
			};
		};

		return false;
	}

	method : native : CreateMap() ~ Int[,] {
		game_map := [
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]
			[0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]
			[0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]
			[0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]
			[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,]
		];

		return game_map;
	}
}

consts Values {
	SCREEN_WIDTH := 800,
	SCREEN_HEIGHT := 640,
	BLOCK_WIDTH := 32,
	BLOCK_HEIGHT := 32,
	SPEED := 2
}
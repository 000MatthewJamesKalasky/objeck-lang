#~
Game demo v2
~#

use Game.SDL2;
use Game.Engine;

class PlatformDemo {
	@game : GameEngine;
	@game_map : Int[,];
	@x_end : Int;
	@y_end : Int;

	@space : Rectangle;
	@block : Rectangle;
	
	@player_position : Int;
	@player_x_direction : Int;

	@enemy : Rectangle;
	@enemy_x_direction : Int;
	@enemy_position : Int;

	function : Main(args : String[]) ~ Nil {
		platform := PlatformDemo->New();
		platform->Run();
	}

	New() {
		@game := GameEngine->New(Size->SCREEN_WIDTH, Size->SCREEN_HEIGHT, "Engine Two");
		@game->SetClearColor(Color->New());

		@space := @game->AddRectangle(Size->BLOCK_WIDTH, Size->BLOCK_HEIGHT);
		@space->SetColor(Color->New(0, 177, 64));

		@block := @game->AddRectangle(Size->BLOCK_WIDTH, Size->BLOCK_HEIGHT);
		@block->SetFill(true);
		@block->SetColor(Color->New(204, 0, 0));

		@enemy := @game->AddRectangle(Size->BLOCK_WIDTH / 2, Size->BLOCK_HEIGHT / 2);
		@enemy->SetFill(true);
		@enemy->SetColor(Color->New(249, 166, 2));
		@enemy_x_direction := 1;

		@game_map := CreateMap();
		dims := @game_map->Size();
		@y_end := dims[0];
		@x_end := dims[1];
	}

	method : Run() ~ Nil {
		if(@game->IsOk()) {
			e := @game->GetEvent();
			quit := false;
			while(<>quit) {
				@game->FrameStart();
				
				# process input
				while(e->Poll() <> 0) {
					if(e->GetType() = EventType->SDL_QUIT) {
						quit := true;
					};

					ProcessInput(e);
				};

				Update();

				@game->FrameEnd();
			};
		}
		else {
			"--- Error Initializing Game Environment ---"->ErrorLine();
			return;
		};

		leaving {
			@game->Quit();
		};
	}
	
	method : public : ProcessInput(e : Event) ~ Nil {
		if(e->GetType() = EventType->SDL_KEYDOWN & e->GetKey()->GetRepeat() = 0) {
	        select(e->GetKey()->GetKeysym()->GetScancode()) {    	
	            label Scancode->SDL_SCANCODE_LEFT: {
	            	@player_x_direction := -1;
	            }

	            label Scancode->SDL_SCANCODE_RIGHT: {
	            	@player_x_direction := 1;
	            }
	        };
	    }
	    else if(e->GetType() = EventType->SDL_KEYUP & e->GetKey()->GetRepeat() = 0) {
	        select(e->GetKey()->GetKeysym()->GetScancode()) {
	        	label Scancode->SDL_SCANCODE_LEFT:
	            label Scancode->SDL_SCANCODE_RIGHT: {
	            	@player_x_direction := 0;
	            }
	        };
	    };   
	}

	method : native : Update() ~ Nil {		
		#--- Update ---

		if(@player_x_direction = -1) {
			@player_position += 4;
		}
		else if(@player_x_direction = 1) {
			@player_position -= 4;
		};

		

		#--- Render ---

		@game->Clear();

		for(x := 0; x < @x_end; x += 1;) {
			pixel_x := x * Size->BLOCK_WIDTH + @player_position;

			for(y := 0; y < @y_end; y += 1;) {
				pixel_y := y * Size->BLOCK_HEIGHT;

				if(@game_map[y, x] = 0) {
					@space->GetPosition()->Set(pixel_x, pixel_y);
					@space->Render();
				}
				else if(@game_map[y, x] = 1) {
					@block->GetPosition()->Set(pixel_x, pixel_y);
					@block->Render();
				}
				else if(@game_map[y, x] = 2) {
					e_x := pixel_x + Size->BLOCK_WIDTH / 2 + @enemy_position;
					b_x := pixel_x + ((x + 1) * Size->BLOCK_WIDTH);

					if(e_x > b_x) {
						@enemy_position -= 2;
					}
					else {
						@enemy_position += 2;
					};

					@enemy->GetPosition()->Set(e_x, pixel_y + Size->BLOCK_HEIGHT / 2);
					@enemy->Render();
				};
			};
		};

		@game->Show();
	}

	method : native : CreateMap() ~ Int[,] {
		game_map := [
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 2, 0, 1, 1, 1, 1, 1,   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]
			[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
		];

		return game_map;
	}
}

consts Size {
	SCREEN_WIDTH := 640,
	SCREEN_HEIGHT := 480,
	BLOCK_WIDTH := 32,
	BLOCK_HEIGHT := 32
}
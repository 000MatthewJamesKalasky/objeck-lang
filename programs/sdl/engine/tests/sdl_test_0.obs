use SDL2;
use SDL2.Game;

class PlatformDemo {
	@game : GameEngine;

	# screen stuff
	SCREEN_WIDTH : Int;
	SCREEN_HEIGHT : Int;
	BLOCK_WIDTH : Int;
	BLOCK_HEIGHT : Int;
	@frame : Int;
	
	# background stuff
	@bg : ImageSprite;
	@bg_x : Int;
	@bg_y : Int;
	@move_speed : Int;

	# hero stuff
	@hero : AnimatedImageSprite;
	@hero_frame : Int;
	@hero_x : Int;
	@hero_y : Int;
	@hero_x_block : Int;
	@hero_position : Int;
	@hero_direction : Int;
	@helo_flip : Bool;

	# block stuff
	@block1 : ImageSprite;
	@block2 : ImageSprite;
	@block3 : ImageSprite;
	@block4 : ImageSprite;
	@fauna1 : ImageSprite;
	@fauna2 : ImageSprite;
	@fauna3 : ImageSprite;
	@spikes1 : ImageSprite;

	# gem stuff
	@gems : AnimatedImageSprite;
	@gems_index : Int;

	@platform_grid : Int[,];
	@platform_grid_length : Int;
	@x_start : Int;
	@x_end : Int;
	@y_end : Int;

	# game timer stuff
	@game_time : TextSprite;
	@game_time_seconds : Int;
	@game_time_text : String;
	
	function : Main(args : String[]) ~ Nil {
		platform := PlatformDemo->New();
		platform->Run();
	}

	New() {
		SCREEN_WIDTH := 640;
		SCREEN_HEIGHT := 480;

		BLOCK_WIDTH := 32;
		BLOCK_HEIGHT := 32;

		@game := GameEngine->New(SCREEN_WIDTH, SCREEN_HEIGHT, "Engine Zero");

		@bg := @game->AddImageSprite("../../../../programs/sdl/engine/tests/media/images/hills.png");
		@block1 := @game->AddImageSprite("../../../../programs/sdl/engine/tests/media/images/block1.png");
		@block2 := @game->AddImageSprite("../../../../programs/sdl/engine/tests/media/images/block2.png");
		@block3 := @game->AddImageSprite("../../../../programs/sdl/engine/tests/media/images/block3.png");
		@block4 := @game->AddImageSprite("../../../../programs/sdl/engine/tests/media/images/block4.png");
		@fauna1 := @game->AddImageSprite("../../../../programs/sdl/engine/tests/media/images/fauna1.png");
		@fauna2 := @game->AddImageSprite("../../../../programs/sdl/engine/tests/media/images/fauna3.png");
		@fauna3 := @game->AddImageSprite("../../../../programs/sdl/engine/tests/media/images/fauna3.png");
		@spikes1 := @game->AddImageSprite("../../../../programs/sdl/engine/tests/media/images/spikes1.png");
		@hero := @game->AddAnimatedImageSprite("../../../../programs/sdl/engine/tests/media/images/walk.png", 6);
		@gems := @game->AddAnimatedImageSprite("../../../../programs/sdl/engine/tests/media/images/gems.png", 6);

		@game_time := @game->AddTextSprite();

		@platform_grid := CreatePlatform();
		platform_dims := @platform_grid->Size();
		@platform_grid_length := platform_dims[1];

		@bg_x := 0;
		@bg_y := 0;
		@move_speed := 12;

		@hero_x := 2 * BLOCK_WIDTH;
		@hero_y := SCREEN_HEIGHT - (@hero->GetHeight() + 2 * BLOCK_HEIGHT);
		@hero_position := @hero_x;
		@hero_x_block := @hero_position / BLOCK_WIDTH;

		@frame := 1;
		
		@game_time_seconds := 120;
		@game_time_text := "Time: 120";
		@game_time->RenderedText(@game_time_text, Nil);

		GameCheck()->PrintLine();
	}

	method : Run() ~ Nil {
	
		if(@game->IsOk()) {
			e := @game->GetEvent();
			quit := false;
			while(<>quit) {
				@game->FrameStart();
				# user input
				while(e->Poll() <> 0) {
					if(e->GetType() = EventType->SDL_QUIT) {
						quit := true;
					};

					 HandleInput(e);
				};

				ProcessAi();
				ProcessTimeEvent();
				Render();

				@game->FrameEnd();
			};
		};

		leaving {
			@game->Quit();
		};
	}
	
	method : public : HandleInput(e : Event) ~ Nil {
		if(e->GetType() = EventType->SDL_KEYDOWN & e->GetKey()->GetRepeat() = 0) {
	        select(e->GetKey()->GetKeysym()->GetScancode()) {    	
	            label Scancode->SDL_SCANCODE_UP: {
	            	"-- [up] down --"->PrintLine();
	            }

	            label Scancode->SDL_SCANCODE_DOWN: {
	            	"-- [down] down --"->PrintLine();
	            }

	            label Scancode->SDL_SCANCODE_LEFT: {
	            	@hero->SetFlip(RendererFlip->SDL_FLIP_HORIZONTAL);
	            	@helo_flip := true;
	            	@hero_direction := -1;
	            }

	            label Scancode->SDL_SCANCODE_RIGHT: {
	            	if(@helo_flip) {
	            		@hero->SetFlip(RendererFlip->SDL_FLIP_NONE);
	            		@helo_flip := false;
	            	};
	            	@hero_direction := 1;
	            }        	            
	        };
	    }
	    else if(e->GetType() = EventType->SDL_KEYUP & e->GetKey()->GetRepeat() = 0) {
	        select(e->GetKey()->GetKeysym()->GetScancode()) {
	        	label Scancode->SDL_SCANCODE_UP: {
	        		"-- [up] up --"->PrintLine();
	            }

	            label Scancode->SDL_SCANCODE_DOWN: {
	            	"-- [down] up --"->PrintLine();
	            }

	            label Scancode->SDL_SCANCODE_LEFT:
	            label Scancode->SDL_SCANCODE_RIGHT: {
	            	@hero_direction := 0;
	            }
	        };
	    };   
	}

	method : native : ProcessTimeEvent() ~ Nil {		
		@frame += 1;

		if(@frame <= @game->GetFps()) {
			# update once per second
			if(@frame % @game->GetFps() = 0) {
				@game_time_seconds -= 1;
				if(@game_time_seconds < 0) {
					@game_time_seconds := 120;
				};
				@game_time_text := "Time: {$@game_time_seconds}";
				@game_time->RenderedText(@game_time_text, Nil);
			};

			# update 2x per second
			if(@frame % 5 = 0) {
				# hero moving
				if(@hero_direction <> 0) {
					@hero_frame += 1;
					if(@hero_frame >= @hero->GetClipCount()) {
						@hero_frame := 0;
					};
				};
				
				if(@hero_direction = 1) {
					if(@hero_x_block < @platform_grid_length) {
						@bg_x -= @bg->GetWidth() / 50;
						if(@bg_x < -1 * @bg->GetWidth()) {
							@bg_x := 0;
						};
						@hero_position += @move_speed;
					};
				}				
				else if(@hero_direction = -1) {
					if(@hero_x_block > -1) {
						@bg_x += @bg->GetWidth() / 50;
						if(@bg_x > 0) {
							@bg_x := -1 * @bg->GetWidth();
						};
						@hero_position -= @move_speed;
					};
				};
			};
		}
		else {
			@frame := 1;
		};
	}

	method : native : ProcessAi() ~ Nil {
		@x_end := SCREEN_WIDTH / BLOCK_WIDTH;
		@y_end := SCREEN_HEIGHT / BLOCK_HEIGHT;

		@x_start := @hero_x_block - (@hero_x / BLOCK_WIDTH);
		@x_end += @x_start + 1;

		@screen_left_edge := @x_start < 0;
		if(@screen_left_edge) {
			@x_start := 0;
		};

		@screen_right_edge := @x_end > @platform_grid_length;
		if(@screen_right_edge) {
			@x_end := @platform_grid_length;
		};

		@hero_x_block := @hero_position / BLOCK_WIDTH;
		hero_y_block := @hero_y / BLOCK_HEIGHT + @hero->GetHeight() / BLOCK_HEIGHT;

		# check below
		if(@platform_grid[hero_y_block, @hero_x_block] = 0) {
			@hero_y += BLOCK_HEIGHT;
		};
		
		# check right
		if(@platform_grid[hero_y_block - 1, @hero_x_block + 1] <> 0) {
			"STOP"->PrintLine();
		};
	}

	method : Render() ~ Nil {
		@game->Clear();

		#background
		@bg->Render(@bg_x, 0);
		@bg->Render(@bg_x + @bg->GetWidth(), 0);

		# platform
		RenderPlatform();

		# hero
		@hero->Render(@hero_x, @hero_y, @hero_frame);

		# random gem
#		@gems->Render(@gems->GetWidth() * 3, @gems->GetHeight() * 2, @gems_index);

		# timer
		@game_time->Render(16, 16);

		@game->Show();
	}

	method : native : RenderPlatform() ~ Nil {
"window: {$@x_start}, {$@x_end}"->PrintLine();
		for(x := @x_start; x < @x_end; x += 1;) {
			for(y := 0; y < @y_end; y += 1;) {
				select(@platform_grid[y, x]) {
					label 1: {
						@block1->Render(x * BLOCK_WIDTH - @hero_position + @hero_x, y * BLOCK_HEIGHT);
					}

					label 2: {
						@block2->Render(x * BLOCK_WIDTH - @hero_position + @hero_x, y * BLOCK_HEIGHT);
					}

					label 3: {
						@block3->Render(x * BLOCK_WIDTH - @hero_position + @hero_x, y * BLOCK_HEIGHT);
					}

					label 4: {
						@block4->Render(x * BLOCK_WIDTH - @hero_position + @hero_x, y * BLOCK_HEIGHT);
					}

					label 5: {
						@fauna1->Render(x * BLOCK_WIDTH - @hero_position + @hero_x, y * BLOCK_HEIGHT);
					}

					label 6: {
						@fauna2->Render(x * BLOCK_WIDTH - @hero_position + @hero_x, y * BLOCK_HEIGHT);
					}

					label 7: {
						@spikes1->Render(x * BLOCK_WIDTH - @hero_position + @hero_x, y * BLOCK_HEIGHT);
					}
				};
			};
		};
	}

	method : native : CreatePlatform() ~ Int[,] {
		platform_grid := [
			[4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 4, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3,   3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0]
			[4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,   0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4]
		];

		return platform_grid;
	}

	method : GameCheck() ~ Bool {
		return SCREEN_WIDTH % BLOCK_WIDTH = 0 & SCREEN_HEIGHT % BLOCK_HEIGHT = 0;
	}
}
#~
Game demo v0
link: https://github.com/objeck/objeck-lang/blob/master/programs/sdl/engine/tests/sdl_test_0.obs
~#

# TODO: Map pixel pos, to map block

use SDL2;
use SDL2.Game;

class PlatformDemo {
	SCREEN_WIDTH : static : Int;
	SCREEN_HEIGHT : static : Int;
	BLOCK_WIDTH : static : Int;
	BLOCK_HEIGHT : static : Int;

	@game : GameEngine;
	@game_map : Int[,];
	@game_frame : Int;

	@player : Rectangle;
	@space : Rectangle;
	@solid : Rectangle;

	@player_x_direction : Int;
	@player_x_position : Int;
	@player_y_position : Int;
	@player_y_jumping : Bool;
	@player_y_jump_height : Int;

	@player_can_move_left : Bool;
	@player_can_move_right : Bool;

	@print_debug : Bool;
	
	function : Main(args : String[]) ~ Nil {
		platform := PlatformDemo->New();
		platform->Run();
	}

	New() {
		SCREEN_WIDTH := 640;
		SCREEN_HEIGHT := 480;
		BLOCK_WIDTH := 32;
		BLOCK_HEIGHT := 32;

		@game := GameEngine->New(SCREEN_WIDTH, SCREEN_HEIGHT, "Engine Zero");
		@game->SetClearColor(Color->New());

		@player := @game->AddRectangle(BLOCK_WIDTH, BLOCK_HEIGHT * 2);
		@player->SetFill(true);
		@player->SetColor(Color->New(12, 35, 64));
		@player_y_position := SCREEN_HEIGHT - BLOCK_WIDTH * 4;
		
		@player_can_move_left := true;
		@player_can_move_right := true;

		@space := @game->AddRectangle(BLOCK_WIDTH, BLOCK_HEIGHT);
		@space->SetColor(Color->New(0, 177, 64));

		@solid := @game->AddRectangle(BLOCK_WIDTH, BLOCK_HEIGHT);
		@solid->SetFill(true);
		@solid->SetColor(Color->New(204, 0, 0));

		@game_map := CreateMap();
	}

	method : Run() ~ Nil {
		if(@game->IsOk()) {
			e := @game->GetEvent();
			quit := false;
			while(<>quit) {
				@game->FrameStart();
				
				# process input
				while(e->Poll() <> 0) {
					if(e->GetType() = EventType->SDL_QUIT) {
						quit := true;
					};
					ProcessInput(e);
				};

				UpdateEvents();
				Render();

				@game->FrameEnd();
			};
		}
		else {
			"--- Error Initializing Game Environment ---"->ErrorLine();
			return;
		};

		leaving {
			@game->Quit();
		};
	}
	
	method : public : ProcessInput(e : Event) ~ Nil {
		if(e->GetType() = EventType->SDL_KEYDOWN & e->GetKey()->GetRepeat() = 0) {
	        select(e->GetKey()->GetKeysym()->GetScancode()) {    	
	            label Scancode->SDL_SCANCODE_SPACE: {
	            	if(@player_y_jump_height = 0) {
	            		@player_y_jumping := true;
	            	};
	            }

	            label Scancode->SDL_SCANCODE_LEFT: {
	            	@player_x_direction := -1;
	            }

	            label Scancode->SDL_SCANCODE_RIGHT: {
	            	if(@player_can_move_right) {
	            		@player_x_direction := 1;
	            	};
	            }

	            label Scancode->SDL_SCANCODE_DOWN: {
	            	@print_debug := true;
	            }
	        };
	    }
	    else if(e->GetType() = EventType->SDL_KEYUP & e->GetKey()->GetRepeat() = 0) {
	        select(e->GetKey()->GetKeysym()->GetScancode()) {
	        	label Scancode->SDL_SCANCODE_LEFT:
	            label Scancode->SDL_SCANCODE_RIGHT: {
	            	@player_x_direction := 0;
	            }
	        };
	    };   
	}
	
	method : native : UpdateEvents() ~ Nil {		
		@game_frame += 1;

		if(@game_frame <= @game->GetFps()) {
			if(@game_frame % 2 = 0) {
				# left
				if(@player_x_direction = -1 & @player_can_move_left) {
					@player_x_position -= BLOCK_WIDTH / 8;
				}
				# right
				else if(@player_x_direction = 1 & @player_can_move_right) {
					@player_x_position += BLOCK_WIDTH / 8;
				};

				# jump
				if(@player_y_jumping) {
					@player_y_jump_height += BLOCK_WIDTH / 8;
					if(@player_y_jump_height >= 1.5 * BLOCK_WIDTH) {
						@player_y_jumping := false;
						@player_y_jump_height -= BLOCK_WIDTH / 8;
					};
				}
				else if(@player_y_jump_height <> 0) {
					@player_y_jump_height -= BLOCK_WIDTH / 8;
				};
			};
		}
		else {
			@game_frame := 1;
		};
	}

	method : Render() ~ Nil {
		@game->Clear();

		RenderPlatform();
		@player->Render(BLOCK_WIDTH * 2, @player_y_position - @player_y_jump_height);

		@game->Show();
	}

	method : native : RenderPlatform() ~ Nil {
		dims := @game_map->Size();
		y_end := dims[0];
		x_end := dims[1];

		view_x_offset := @player_x_position / BLOCK_WIDTH + 1;
		view_y_offset := ((@player_y_position - @player_y_jump_height) / BLOCK_WIDTH) + 1;

# GameEngine->Debug("view: {$view_x_offset}, {$view_y_offset}");
		
		for(x := view_x_offset; x < view_x_offset + 20; x += 1;) {
			pixel_x := x * BLOCK_WIDTH - @player_x_position;

			for(y := 0; y < y_end; y += 1;) {
				pixel_y := y * BLOCK_HEIGHT;
				player_y_bottom := @player_y_position - @player_y_jump_height + BLOCK_WIDTH;

foo := @player_y_position / BLOCK_HEIGHT + 1;
				if(x - view_x_offset = 2 & @player_y_jump_height > BLOCK_HEIGHT & y = foo) {
					if(@game_map[y, x] = 1) {
						@player_y_position -= BLOCK_HEIGHT;
						@player_y_jump_height := 0;
						@player_y_jumping := false;
GameEngine->Debug("jump block: {$x}, {$y}, foo={$foo}");
					};
				};


if(@print_debug) {
	bar := foo + 1;
	GameEngine->Debug("Debug: {$x}, {$y}, bar={$bar}; jump={$@player_y_jump_height}; pixel_y={$pixel_y}");
	
	@print_debug := false;
};
				
				if(x - view_x_offset = 1 & pixel_x = 36 & pixel_y = player_y_bottom) {
					if(@game_map[y, x] = 1) {
						@player_can_move_left := false;
# GameEngine->Debug("left: {$pixel_x}, {$pixel_y}; bottom={$player_y_bottom}");
					}
					else {
						@player_can_move_left := true;
					};
				};


				if(x - view_x_offset = 3 & pixel_x = 100 & pixel_y = player_y_bottom) {
					if(@game_map[y, x] = 1) {
						@player_can_move_right := false;
# GameEngine->Debug("right: x={$pixel_x}, y={$pixel_y}; bottom={$player_y_bottom}");
					}
					else {
						@player_can_move_right := true;
					};
				};

				if(@game_map[y, x] = 0) {
					@space->Render(x * BLOCK_WIDTH - @player_x_position, y * BLOCK_HEIGHT);
				}
				else {
					@solid->Render(x * BLOCK_WIDTH - @player_x_position, y * BLOCK_HEIGHT);
				};
			};
		};
	}

	method : native : CreateMap() ~ Int[,] {
		game_map := [
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1,   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1,   1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]
			[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,   1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1]
			[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
		];

		return game_map;
	}
}
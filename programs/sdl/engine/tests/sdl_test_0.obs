#~
Game engine v0
Randy Hollines (with help from daughter)
link: https://github.com/objeck/objeck-lang/blob/master/programs/sdl/engine/tests/sdl_test_0.obs
~#

use SDL2;
use SDL2.Game;

class PlatformDemo {
	@debug_msg : static : String;

	@game : GameEngine;
	@game_check : Bool;

	# screen
	SCREEN_WIDTH : Int;
	SCREEN_HEIGHT : Int;
	BLOCK_WIDTH : Int;
	BLOCK_HEIGHT : Int;
	@frame : Int;

	# game grid
	@platform_grid : Int[,];
	@platform_grid_length : Int;
	@x_start : Int;
	@x_end : Int;
	@y_end : Int;

	# player
	@player_map_x_block : Int;
	@player_map_pixel_position : Int;
	@player_x_direction : Int;
	@player_x : Int;
	@player_y : Int;
	@player_bounds : Int[];

	@player_jumping : Bool;
	@player_jump_height : Int;

	function : Main(args : String[]) ~ Nil {
		platform := PlatformDemo->New();
		platform->Run();
	}

	function : Debug(debug_msg : String) ~ Nil {
		if(@debug_msg = Nil) {
			@debug_msg := debug_msg;
			@debug_msg->PrintLine();
		};

		if(<>debug_msg->Equals(@debug_msg)) {
			@debug_msg := debug_msg;
			@debug_msg->PrintLine();
		};
	}
	
	New() {
		SCREEN_WIDTH := 640;
		SCREEN_HEIGHT := 480;

		BLOCK_WIDTH := 32;
		BLOCK_HEIGHT := 32;

		@game := GameEngine->New(SCREEN_WIDTH, SCREEN_HEIGHT, "Engine Zero");

		@game_time := @game->AddTextSprite();
		@platform_grid := CreatePlatform();
		platform_dims := @platform_grid->Size();
		@platform_grid_length := platform_dims[1];

		@player_x := 2 * BLOCK_WIDTH;
		@player_y := SCREEN_HEIGHT - (@player->GetHeight() + 2 * BLOCK_HEIGHT);
		@player_bounds := Int->New[6];
		@player_map_pixel_position := @player_x;
		@player_map_x_block := @player_map_pixel_position / BLOCK_WIDTH;

		@frame := 1;
		
		@game_time_seconds := 120;
		@game_time_text := "Time: 120";
		@game_time->RenderedText(@game_time_text, Nil);

		@game_check := GameCheck();
	}

	method : Run() ~ Nil {
		if(@game->IsOk() & @game_check) {
			e := @game->GetEvent();
			quit := false;
			while(<>quit) {
				@game->FrameStart();
				
				# process input
				while(e->Poll() <> 0) {
					if(e->GetType() = EventType->SDL_QUIT) {
						quit := true;
					};
					ProcessInput(e);
				};

				# update environment & render
				UpdateTimedEvents();
				RenderFrame();

				@game->FrameEnd();
			};
		}
		else {
			"--- Error Initializing Game Environment ---"->ErrorLine();
			return;
		};

		leaving {
			@game->Quit();
		};
	}
	
	method : public : ProcessInput(e : Event) ~ Nil {
		if(e->GetType() = EventType->SDL_KEYDOWN & e->GetKey()->GetRepeat() = 0) {
	        select(e->GetKey()->GetKeysym()->GetScancode()) {    	
	            label Scancode->SDL_SCANCODE_SPACE: {
	            	
	            }

	            label Scancode->SDL_SCANCODE_LEFT: {
	            	
	            }

	            label Scancode->SDL_SCANCODE_RIGHT: {
	            	
	            }        	            
	        };
	    }
	    else if(e->GetType() = EventType->SDL_KEYUP & e->GetKey()->GetRepeat() = 0) {
	        select(e->GetKey()->GetKeysym()->GetScancode()) {
	        	label Scancode->SDL_SCANCODE_LEFT:
	            label Scancode->SDL_SCANCODE_RIGHT: {
	            	@player_x_direction := 0;
	            }
	        };
	    };   
	}

	method : native : UpdateTimedEvents() ~ Nil {		
		@frame += 1;

		if(@frame <= @game->GetFps()) {
		}
		else {
			@frame := 1;
		};
	}

	method : RenderFrame() ~ Nil {
		@game->Clear();

		# platform
		RenderPlatform();

		# hero
		player_jump_height := -1 * @player_jump_height;
		@player->Render(@player_x, @player_y - @player_jump_height);

		@game->Show();
	}

	method : native : RenderPlatform() ~ Nil {
		@x_end := SCREEN_WIDTH / BLOCK_WIDTH;
		@y_end := SCREEN_HEIGHT / BLOCK_HEIGHT;

		@x_start := @player_map_x_block - (@player_x / BLOCK_WIDTH);
		@x_end += @x_start + 1;

		screen_left_edge := @x_start < 0;
		if(screen_left_edge) {
			@x_start := 0;
		};

		screen_right_edge := @x_end > @platform_grid_length;
		if(screen_right_edge) {
			@x_end := @platform_grid_length;
		};
		@player_map_x_block := @player_map_pixel_position / BLOCK_WIDTH;

		for(x := @x_start; x < @x_end; x += 1;) {
			x_pos := x * BLOCK_WIDTH - @player_map_pixel_position + @player_x;
			
			for(y := 0; y < @y_end; y += 1;) {
				y_pos := y * BLOCK_HEIGHT;
				
				type := @platform_grid[y, x];

				select(type) {
					label 1: {
#						@block1->Render(x_pos, y_pos);
					}

					label 2: {
#						@block2->Render(x_pos, y_pos);
					}

					label 3: {
#						@block3->Render(x_pos, y_pos);
					}
				};
			};
		};
	}

	method : native : CreatePlatform() ~ Int[,] {
		platform_grid := [
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
		];

		return platform_grid;
	}

	method : GameCheck() ~ Bool {
		return SCREEN_WIDTH % BLOCK_WIDTH = 0 & SCREEN_HEIGHT % BLOCK_HEIGHT = 0;
	}
}
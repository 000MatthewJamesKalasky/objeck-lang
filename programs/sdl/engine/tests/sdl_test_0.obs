#~
Game demo v0
link: https://github.com/objeck/objeck-lang/blob/master/programs/sdl/engine/tests/sdl_test_0.obs
~#

use SDL2;
use SDL2.Game;

class PlatformDemo {
	SCREEN_WIDTH : static : Int;
	SCREEN_HEIGHT : static : Int;
	BLOCK_WIDTH : static : Int;
	BLOCK_HEIGHT : static : Int;

	@game : GameEngine;
	@game_map : Int[,];
	@game_frame : Int;

	@player : RectangleShape;
	
	@space : RectangleShape;
	@solid : RectangleShape;

	@player_x_direction : Int;
	@player_y_direction : Int;

	@player_x_position : Int;
	@player_y_position : Int;
	
	function : Main(args : String[]) ~ Nil {
		platform := PlatformDemo->New();
		platform->Run();
	}

	New() {
		SCREEN_WIDTH := 640;
		SCREEN_HEIGHT := 480;
		BLOCK_WIDTH := 32;
		BLOCK_HEIGHT := 32;

		@game := GameEngine->New(SCREEN_WIDTH, SCREEN_HEIGHT, "Engine Zero");
		@game->SetClearColor(Color->New());

		player := @game->AddRectangle(BLOCK_WIDTH, BLOCK_HEIGHT * 2);
		player->SetFill(true);
		player->SetColor(Color->New(12, 35, 64));
		@player := RectangleShape->New(player);
		
		@player_y_position := SCREEN_HEIGHT - BLOCK_WIDTH * 4;
		
		space := @game->AddRectangle(BLOCK_WIDTH, BLOCK_HEIGHT);
		space->SetColor(Color->New(0, 177, 64));
		@space := RectangleShape->New(space);

		solid := @game->AddRectangle(BLOCK_WIDTH, BLOCK_HEIGHT);
		solid->SetFill(true);
		solid->SetColor(Color->New(204, 0, 0));
		@solid := RectangleShape->New(solid);

		@game_map := CreateMap();
	}

	method : Run() ~ Nil {
		if(@game->IsOk()) {
			e := @game->GetEvent();
			quit := false;
			while(<>quit) {
				@game->FrameStart();
				
				# process input
				while(e->Poll() <> 0) {
					if(e->GetType() = EventType->SDL_QUIT) {
						quit := true;
					};
					ProcessInput(e);
				};

				UpdateEvents();
				Render();

				@game->FrameEnd();
			};
		}
		else {
			"--- Error Initializing Game Environment ---"->ErrorLine();
			return;
		};

		leaving {
			@game->Quit();
		};
	}
	
	method : public : ProcessInput(e : Event) ~ Nil {
		if(e->GetType() = EventType->SDL_KEYDOWN & e->GetKey()->GetRepeat() = 0) {
	        select(e->GetKey()->GetKeysym()->GetScancode()) {    	
	            label Scancode->SDL_SCANCODE_LEFT: {
	            	@player_x_direction := -1;
	            }

	            label Scancode->SDL_SCANCODE_RIGHT: {
	            	@player_x_direction := 1;
	            }

	            label Scancode->SDL_SCANCODE_UP: {
	            	@player_y_direction := -1;
	            }

	            label Scancode->SDL_SCANCODE_DOWN: {
	            	@player_y_direction := 1;
	            }
	        };
	    }
	    else if(e->GetType() = EventType->SDL_KEYUP & e->GetKey()->GetRepeat() = 0) {
	        select(e->GetKey()->GetKeysym()->GetScancode()) {
	        	label Scancode->SDL_SCANCODE_LEFT:
	            label Scancode->SDL_SCANCODE_RIGHT:
	            label Scancode->SDL_SCANCODE_UP:
	            label Scancode->SDL_SCANCODE_DOWN: {
	            	@player_x_direction := 0;
	            	@player_y_direction := 0;
	            }
	        };
	    };   
	}

	method : native : UpdateEvents() ~ Nil {		
		@game_frame += 1;

		if(@game_frame <= @game->GetFps()) {
			if(@game_frame % 2 = 0) {
				# move left
				if(@player_x_direction = -1) {
					@player_x_position -= BLOCK_WIDTH / 4;
				}
				# move right
				else if(@player_x_direction = 1) {
					@player_x_position += BLOCK_WIDTH / 4;
				};

				# move up
				if(@player_y_direction = -1) {
					@player_y_position -= BLOCK_WIDTH / 4;
				}
				# move down
				else if(@player_y_direction = 1) {
					@player_y_position += BLOCK_WIDTH / 4;
				};
			};	
		}
		else {
			@game_frame := 1;
		};
	}

	method : Render() ~ Nil {
		@game->Clear();

		RenderPlatform();
		
		@player->Set(BLOCK_WIDTH * 2, @player_y_position);
		@player->Render();
		
		@game->Show();
	}

	method : native : RenderPlatform() ~ Nil {
		dims := @game_map->Size();

		view_x_offset := @player_x_position / BLOCK_WIDTH;
		view_y_offset := @player_y_position / BLOCK_WIDTH;

		y_end := dims[0];
		x_end := view_x_offset + 21;
		if(x_end > dims[1]) {			
			x_end := dims[1];	
		};

		for(x := view_x_offset; x < x_end; x += 1;) {
			pixel_x := x * BLOCK_WIDTH - @player_x_position;

			for(y := 0; y < y_end; y += 1;) {
				pixel_y := y * BLOCK_HEIGHT;

				if(@game_map[y, x] = 0) {
					@space->Set(pixel_x, pixel_y);
					@space->Render();
				}
				else {
					@solid->Set(pixel_x, pixel_y);
					@solid->Render();
				};
			};
		};
	}

	method : native : CreateMap() ~ Int[,] {
		game_map := [
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
			[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]
			[0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1]
			[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
		];

		return game_map;
	}
}

class RectangleShape {
	@x : Int;
	@y : Int;
	@rect : Rectangle;

	New(rect : Rectangle) {
		@rect := rect;
	}

	method : public : Set(x : Int, y : Int) ~ Nil {
		@x := x;
		@y := y;
	}

	method : public : GetX() ~ Int {
		return @x;
	}

	method : public : GetX2() ~ Int {
		return @x + @rect->GetWidth();
	}

	method : public : GetY() ~ Int {
		return @y;
	}

	method : public : GetY2() ~ Int {
		return @x + @rect->GetHeight();
	}

	method : public : Render() ~ Nil {
		@rect->Render(@x, @y);
	}
}
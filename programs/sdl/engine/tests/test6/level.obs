use Game.SDL2;
use Game.Framework;
use Collection;

class Level {
	@player : Player;
	@platforms : Vector;
	@shift_x : Int;

	New(player : Player, framework : GameFramework) {
		@player := player;
		@platforms := Vector->New();

		black_color := Color->New(255, 255, 255);
		sprite_file := "../../../../programs/sdl/engine/tests/test6/media/tiles_spritesheet.png";

		sprite_sheet := framework->AddImageSprite(sprite_file, black_color);

		block_1 := Rect->New(3 * Game->BLOCK_WIDTH, 0 * Game->BLOCK_HEIGHT, Game->BLOCK_WIDTH, Game->BLOCK_HEIGHT);
		block_2 := Rect->New(3 * Game->BLOCK_WIDTH, 2 * Game->BLOCK_HEIGHT, Game->BLOCK_WIDTH, Game->BLOCK_HEIGHT);
		

#		@platforms->AddBack(MovingPlatform->New(200, 150, right_part, player, @self));
#		@platforms->AddBack(MovingPlatform->New(270, 150, left_part, player, @self));
		
		@platforms->AddBack(Platform->New(10, 500, block_1, sprite_sheet));
		@platforms->AddBack(Platform->New(80, 500, block_2, sprite_sheet));
		@platforms->AddBack(Platform->New(150, 550, block_1, sprite_sheet));
#~		
		@platforms->AddBack(Platform->New(70, 540, foo));	
		@platforms->AddBack(Platform->New(140, 540, middle_part));
		
		@platforms->AddBack(Platform->New(505, 400, framework->AddRectangle(100, 50)));
		@platforms->AddBack(Platform->New(850, 600, framework->AddRectangle(210, 70)));
		@platforms->AddBack(Platform->New(1025, 500, framework->AddRectangle(210, 70)));	
		@platforms->AddBack(Platform->New(1250, 300, framework->AddRectangle(210, 70)));
~#
		@player->SetLevel(@self);
	}

	function : Collides(player : Player, obstacles : Vector) ~ Bool {
		each(i : obstacles) {
        	obstacle := obstacles->Get(i)->As(Platform);
        	if(obstacle->Collides(player->GetRect())) {
        		return true;
        	};
        };

        return false;
	}

	function : Collisions(player : Player, obstacles : Vector) ~ Vector {
		collides := Vector->New();

		each(i : obstacles) {
        	obstacle := obstacles->Get(i)->As(Platform);
        	if(obstacle->Collides(player->GetRect())) {
        		collides->AddBack(obstacle);
        	};
        };

        return collides;
    }

	method : public : GetShift() ~ Int {
		return @shift_x;
	}

	method : public : ShiftWorld(shift_x : Int) ~ Nil {
		@shift_x += shift_x;

		each(i : @platforms) {
			platform := @platforms->Get(i)->As(Platform);
			platform->AddX(shift_x);
		};
	}

	method : public : GetPlatforms() ~ Vector {
		return @platforms;
	}

	method : public : Update()  ~ Nil {
		each(i : @platforms) {
			platform := @platforms->Get(i);
#~			
			if(platform->TypeOf(MovingPlatform)) {
				@platforms->Get(i)->As(MovingPlatform)->Update();
			};
~#			
		};
	}

	method : public : Draw()  ~ Nil {
		each(i : @platforms) {
			platform := @platforms->Get(i)->As(Platform);
			platform->Draw();
#~			
			if(platform->TypeOf(MovingPlatform)) {
				@platforms->Get(i)->As(MovingPlatform)->Draw();
			}
			else {
				@platforms->Get(i)->Draw();
			};
~#			
		};
	}
}
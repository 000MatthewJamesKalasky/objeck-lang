use Game.SDL2;
use Game.Framework;
use Collection;
use Data.CSV;

class Level {
	@player : Player;
	@blocks : Vector;
	@sprite_sheet : ImageSprite;
	@shift_x : Int;

	New(player : Player, framework : GameFramework, media_path : String) {
		@player := player;
		@blocks := Vector->New();

		sprite_path := String->New(media_path);
		sprite_path += "/media/tiles_spritesheet.png";
		@sprite_sheet := framework->AddImageSprite(sprite_path, Color->New(0, 0, 0));
				
		map_path := String->New(media_path);	
		map_path += "/media/map.csv";
		LoadLevel(map_path);

		@player->SetLevel(@self);
	}

	function : Collides(player : Player, blocks : Vector) ~ Bool {
		each(i : blocks) {
        	block := blocks->Get(i)->As(Block);
			
			if(block->Collides(player->GetRect())) {
				return true;
			};
		};

		return false;
	}

	function : Collisions(player : Player, blocks : Vector) ~ Vector {
		collides := Vector->New();

		each(i : blocks) {
			block := blocks->Get(i)->As(Block);
			if(block->Collides(player->GetRect())) {
				if(block->GetId() = 37) {
					block->SetHide(true);	
				}
				else {
					collides->AddBack(block);
				};
			};
    	};

		return collides;
    }

    method : public : LoadLevel(name : String) ~ Nil {
    	block_map := IntMap->New();

    	table := CsvTable->New(System.IO.File.FileReader->ReadFile(name));
    	if(table->IsParsed()) {
    		each(i : table) {
    			row := table->Get(i);
    			each(j : row) {
    				value := row->Get(j);
    				y := i * (Game->BLOCK_WIDTH - 2);
    				x := j * (Game->BLOCK_HEIGHT - 2);
    				
    				id := value->ToInt();
    				if(id > -1) {					
	    				rect := block_map->Find(id)->As(Rect);
	    				if(rect = Nil) { 
		    				y_pos := id / 12;
		    				x_pos := id % 12;
# "id={$id}: x_pos={$x_pos}, y_pos={$y_pos}"->PrintLine();
							
		    				rect := Rect->New(x_pos * Game->BLOCK_WIDTH, y_pos * Game->BLOCK_HEIGHT, Game->BLOCK_WIDTH, Game->BLOCK_HEIGHT);
		    				block_map->Insert(id, rect);
		    			};

		    			if(id = 6 | id = 124) {
		    				@blocks->AddBack(MovingBlock->New(id, x, y, rect, @sprite_sheet, @player, @self));	
		    			}
		    			else {
		    				@blocks->AddBack(Block->New(id, x, y, rect, @sprite_sheet));
		    			};
	    			};
	    		};
    		};
    	};
    }

	method : public : GetShift() ~ Int {
		return @shift_x;
	}

	method : public : ShiftWorld(shift_x : Int) ~ Nil {
		@shift_x += shift_x;

		each(i : @blocks) {
			block := @blocks->Get(i)->As(Block);
			block->AddX(shift_x);
		};
	}

	method : public : GetBlocks() ~ Vector {
		return @blocks;
	}

	method : public : Update()  ~ Nil {
		each(i : @blocks) {
			block := @blocks->Get(i);
			if(block->TypeOf(MovingBlock)) {
				@blocks->Get(i)->As(MovingBlock)->Update();
			};
		};
	}

	method : public : Draw()  ~ Nil {
		each(i : @blocks) {
			block := @blocks->Get(i)->As(Block);			
			if(block->TypeOf(MovingBlock)) {
				block->As(MovingBlock)->Draw();
			}
			else {
				block->Draw();
			};
		};
	}
}
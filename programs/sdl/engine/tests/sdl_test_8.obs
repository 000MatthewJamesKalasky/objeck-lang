use Game.SDL2;
use Game.Framework;
use Collection;

class Demo {
	@framework : GameFramework;
	@follower : Rectangle;
	@x_pos : IntHolder;
	@y_pos : IntHolder;

	function : Main(args : String[]) ~ Nil {
		Demo->New()->Run();
	}

	New() {
		@framework := GameFramework->New(Game->SCREEN_WIDTH, Game->SCREEN_HEIGHT, "Platformer Demo");
		@framework->SetClearColor(Color->New(0, 0, 255));

		@follower := @framework->AddRectangle(15, 15);
		@follower->SetFill(true);
		@follower->SetColor(Color->New(255, 0, 0));

		@x_pos := IntHolder->New();
		@y_pos := IntHolder->New();
	}

	method : Run() ~ Nil {
		if(@framework->IsOk()) {

			quit := false;
			e := @framework->GetEvent();
			while(<>quit) {
				@framework->FrameStart();
				@framework->Clear();
				
				# process input
				while(e->Poll() <> 0) {
					if(e->GetType() = EventType->SDL_QUIT) {
						quit := true;
					};

					ProcessInput(e);
				};

				# update
				@follower->SetCenter(@x_pos->Get(), @y_pos->Get());
							
				# draw
				@follower->Render();
			
				# show
				@framework->Show();
				@framework->FrameEnd();
			};
		}
		else {
			"--- Error Initializing Game Environment ---"->ErrorLine();
			return;
		};

		leaving {
			@framework->Quit();
		};
	}

	method : public : ProcessInput(e : Event) ~ Nil {
		if(e->GetType() = EventType->SDL_KEYDOWN) {
	        select(e->GetKey()->GetKeysym()->GetScancode()) {    	
	            label Scancode->SDL_SCANCODE_LEFT: {
	            }
	        };
	    }
	    else if(e->GetType() = EventType->SDL_KEYUP) {
	       	select(e->GetKey()->GetKeysym()->GetScancode()) {    	
	            label Scancode->SDL_SCANCODE_LEFT: {
	            }
	        };
	    }
	    else if(e->GetType() = EventType->SDL_MOUSEMOTION) {
			Cursor->GetMouseState(@x_pos, @y_pos);
		};
	}
}

consts Game {
	SCREEN_WIDTH := 800,
	SCREEN_HEIGHT := 600
}
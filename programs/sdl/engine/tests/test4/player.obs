use Game.SDL2;
use Game.Engine;

class Player {
	@platform : Platform;
	@game_map : Int[,];
	@player : AnimatedImageSprite;
	@frame : Int;
	@x_map_position : Int;
	@x_rel_position : Int;
	@y_rel_position : Int;
	@x_velocity : Int;
	@y_velocity : Int;

	@player_falling : Bool;
	@player_jumping : Bool;
	@player_jump_height : Int;
	
	@camera_shift : Int;
	@game_map_end : Int;
	@is_alive : Bool;

	@background : ImageSprite;
	@background_offset : Int;

	@state : Int;

	New(platform : Platform) {
		@platform := platform;
		@game_map := @platform->GetMap();
		@player := @platform->GetEngine()->AddAnimatedImageSprite("images/walk2.png", 10);
		@background := @platform->GetEngine()->AddImageSprite("images/hills.png");
		
		@y_rel_position := Values->SCREEN_HEIGHT - Values->BLOCK_WIDTH * 8;

		dims := @game_map->Size();
		@game_map_end := (dims[1] / Values->SCREEN_BLOCK_WIDTH - 1) * 
			Values->SCREEN_BLOCK_WIDTH * Values->BLOCK_WIDTH + Values->SCREEN_WIDTH / 4;

		@player_falling := true;
		@is_alive := true;
	}

	method : public : GetFacingRight() ~ Bool {
		return @player->GetFlip() = RendererFlip->SDL_FLIP_NONE;
	}

	method : public : GetMapX() ~ Int {
		return @x_map_position - @x_rel_position;
	}

	method : public : GetRelX() ~ Int {
		return @x_rel_position;
	}

	method : public : GetRelY() ~ Int {
		return @y_rel_position;
	}

	method : public : GetHeight() ~ Int {
		return @player->GetHeight();
	}

	method : public : GetWidth() ~ Int {
		return @player->GetWidth();
	}

	method : public : GetCameraShift() ~ Int {
		return @camera_shift;
	}

	method : public : IsAlive() ~ Bool {
		return @is_alive;
	}

	method : public : SetAlive(is_alive : Bool) ~ Nil {
		@is_alive := is_alive;
	}

	method : public : SetXVelocity(x_velocity : Int) ~ Nil {
		@x_velocity := x_velocity;

		if(@x_velocity = 1) {
			if(@player->GetFlip() = RendererFlip->SDL_FLIP_HORIZONTAL) {
				@player->SetFlip(RendererFlip->SDL_FLIP_NONE);
			};
		}
		else if(@x_velocity = -1) {
			@player->SetFlip(RendererFlip->SDL_FLIP_HORIZONTAL);
		};
	}

	method : public : GetFlip() ~ RendererFlip {
		return @player->GetFlip();
	}

	method : public : SetYVelocity(y_velocity : Int) ~ Nil {
		@y_velocity := y_velocity;
	}

	method : public : JumpHeight() ~ Int {
		return @player_jump_height;
	}

	method : public : Jump() ~ Nil {
		if(@player_jump_height = 0) {
			@player_jumping := true;
			@state := 1;
		};
	}

	method : public : native : HandleEvents() ~ Nil {
		frame_count := @platform->GetFrameCount();

		if(@is_alive) {
			# falling
			if(@player_falling) {
				@y_rel_position += GetSpeed();
				if(@player_jump_height > 0) {
					@player_jump_height -= GetSpeed();
				};
			}
			# jumping
			else if(@player_jumping) {
				@player_jump_height += GetSpeed();
				@y_rel_position -= GetSpeed();
				if(@player_jump_height > 1.25 * @player->GetHeight()) {
					@player_jumping := false;
					@player_falling := true;
					@state := 2;
				};
			};

			# left
			if(@x_velocity = -1) {
				@x_map_position -= GetSpeed();
			}
			# right
			else if(@x_velocity = 1) {
				@x_map_position += GetSpeed();
			};

			# check for collisions
			if(<>Collision()) {
				# camera right
				if(@x_velocity = 1) {
					@x_rel_position += GetSpeed();
					if(@x_map_position > @game_map_end) {
						@camera_shift := 0;
						if(@x_rel_position > 0.75 * Values->SCREEN_WIDTH) {
							@x_velocity := 0;
							@x_map_position -= GetSpeed();
							@x_rel_position -= GetSpeed();
						};
					}
					else if(@x_rel_position > Values->SCREEN_WIDTH / 4) {
						@camera_shift := 1;
						@x_rel_position := Values->SCREEN_WIDTH / 4;
						@background_offset -= GetSpeed() / 2;
						if(@background_offset < -1 * @background->GetWidth()) {
							@background_offset := 0;
						};
					}
					else {
						@camera_shift := 0;
					};
				}
				# camera left
				else if(@x_velocity = -1) {
					@x_rel_position -= GetSpeed();
					# check left bounds
					if(@x_rel_position < Values->BLOCK_WIDTH) {	
						@x_velocity := 0;
					}
					else {
						@camera_shift := 0;
					};
				}
				else {
					@camera_shift := 0;
				};
			};
		}
		else {
			@frame := @player->GetClipCount() - 1;
			@y_rel_position += GetSpeed() / 2;
			if(@y_rel_position > Values->SCREEN_HEIGHT) {
				@platform->EndGame();
			};
		};
	}

	method : GetSpeed() ~ Int {
		return Values->SPEED;
	}

	method : native : Collision() ~ Bool {
		dims := @game_map->Size();

		start_x := (@x_map_position - @x_rel_position) / Values->BLOCK_WIDTH;
		if(start_x < 0) {
			start_x := 0;
		};

		end_x := start_x + Values->SCREEN_BLOCK_WIDTH + 1;
		if(end_x >= dims[1]) {
			end_x := dims[1] - 1;
		};

		# determine if player is falling
		CheckFalling();

		# render blocks
		for(x := start_x; x < end_x; x += 1;) {
			block_rel_x := x * Values->BLOCK_WIDTH - (@x_map_position - @x_rel_position);
			for(y := 0; y < dims[0]; y += 1;) {
				block_rel_y := y * Values->BLOCK_HEIGHT;
				block_rel_x2 := block_rel_x + Values->BLOCK_WIDTH;
				block_rel_y2 := block_rel_y + Values->BLOCK_HEIGHT;

				rel_y := @y_rel_position;
				rel_y2 := rel_y + @player->GetHeight();
				rel_x := @x_rel_position;
				rel_x2 := rel_x + @player->GetWidth();

				if(<>(rel_y2 < block_rel_y | rel_y > block_rel_y2 | rel_x > block_rel_x2 | rel_x2 < block_rel_x)) {
					type := @game_map[y, x];
					if(type > 0) {

						# top
						hit_top := false;
						if(rel_y < block_rel_y2 & rel_y2 > block_rel_y2) {
							hit_top := true;
						};

						# bottom
						hit_bottom := false;
						if(rel_y2 > block_rel_y & rel_y < block_rel_y) {
							hit_bottom := true;
						};

						# left
						hit_left := false;
						if(rel_x <= block_rel_x2 & rel_x2 > block_rel_x2) {
							hit_left := true;
#~
							@x_map_position += GetSpeed();
							@x_velocity := 0;
							@player_jumping := false;
							@player_falling := true;
~#							
#							return true;
						};

						# right
						hit_right := false;
						if(rel_x2 >= block_rel_x & rel_x < block_rel_x) {
							hit_right := true;
#~
							@x_map_position -= GetSpeed();
							@x_velocity := 0;
							@player_jumping := false;
							@player_falling := true;
~#							
#							return true;
						};

@platform->GetEngine()->Debug("--- Hit: bottom={$hit_bottom}, top={$hit_top}, left={$hit_left}, right={$hit_right}, jumping={$@player_jumping}, falling={$@player_falling} ---");


						if(hit_bottom & <>hit_right & <>hit_left) {
@platform->GetEngine()->Debug("--- 0 ---");							
							@player_falling := false;
							@player_jumping := false;
							@player_jump_height := 0;
							@y_rel_position -= GetSpeed();
						}

						# falling to right
						else if(hit_bottom & hit_right & <>@player_jumping & @player_falling) {
@platform->GetEngine()->Debug("--- 1 ---");														
							@player_falling := false;
							@player_jumping := false;
							@player_jump_height := 0;
							@y_rel_position -= GetSpeed();	
							@x_map_position -= GetSpeed();
						}
						# falling to left
						else if(hit_bottom & hit_left & <>@player_jumping & @player_falling) {
@platform->GetEngine()->Debug("--- 2 ---");							
							@player_falling := false;
							@player_jumping := false;
							@player_jump_height := 0;
							@y_rel_position -= GetSpeed();	
							@x_map_position += GetSpeed();
						}

						# left hit in-air
						else if(hit_left & (@player_jumping | @player_falling)) {
@platform->GetEngine()->Debug("--- 3 ---");							
							@player_jumping := false;
							@player_falling := true;
							@player_jump_height := 0;
							@x_map_position += GetSpeed();
							@x_velocity := 0;
							return true;
						}

						# right hit in-air
						else if(hit_right & (@player_jumping | @player_falling)) {
@platform->GetEngine()->Debug("--- 2 ---");							
							@player_jumping := false;
							@player_falling := true;
							@player_jump_height := 0;
							@x_map_position -= GetSpeed();
							@x_velocity := 0;
							return true;
						}
						
						# ground to right
						else if(hit_bottom & hit_right & <>@player_jumping & <>@player_falling) {
							@x_map_position -= GetSpeed();
							return true;
						}
						# ground to left
						else if(hit_bottom & hit_left & <>@player_jumping & <>@player_falling) {
							@x_map_position += GetSpeed();
							return true;
						};


#~	
						if(@player_falling) {
@platform->GetEngine()->Debug("--- FALLING: falling={$@player_falling}, jumping={$@player_jumping}, height={$@player_jump_height}, state={$@state} ---");
							

							if(@state = 1 | @state = 2) {
								@state := 3;
							};
						};

						# left
						if(@x_velocity = -1) {
@platform->GetEngine()->Debug("--- LEFT: falling={$@player_falling}, jumping={$@player_jumping}, height={$@player_jump_height}, state={$@state} ---");
							@x_velocity := 0;
							@player_jumping := false;
							@player_falling := true;
							@x_map_position += GetSpeed();
							return true;
						}
						# right
						else if(@x_velocity = 1) {
@platform->GetEngine()->Debug("--- RIGHT: falling={$@player_falling}, jumping={$@player_jumping}, height={$@player_jump_height}, state={$@state} ---");
							if(@state < 3) {
								@x_map_position -= GetSpeed();
								@x_velocity := 0;
							}
							else if(state = 3) {
								@state := 0;
							};
							@player_jumping := false;
							@player_falling := true;
							return true;
						};
~#						
					};
				};
			};
		};

		return false;
	}

	method : public : native : CheckFalling() ~ Nil {
		x_player_pos := -1;
		y_player_pos := (@y_rel_position + @player->GetHeight() / 2) / Values->BLOCK_HEIGHT + 1;
		
		if(@x_velocity = 1) {
			x_player_pos := (@x_map_position + @player->GetWidth() + 4) / Values->BLOCK_WIDTH;
			x_player_pos -= 1;
		}
		else if(@x_velocity = -1) {
			x_player_pos := (@x_map_position - 4) / Values->BLOCK_WIDTH;
			x_player_pos += 1;
		};

		type_below := -1;
		if(x_player_pos > -1) {
			type_below := @game_map[y_player_pos, x_player_pos];
		};
		if(<>@player_jumping & type_below = 0) {
			@player_falling := true;
		};
	}

	method : public : RenderBackground() ~ Nil {
		@background->Render(@background_offset, 0);
		@background->Render(@background_offset + @background->GetWidth(), 0);
	}

	method : public : RenderPlayer() ~ Nil {
		@player->Render(@x_rel_position, @y_rel_position, @frame);
	}
}
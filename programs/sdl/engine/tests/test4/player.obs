use Game.SDL2;
use Game.Engine;

class Player {
	@platform : Platform;
	@game_map : Int[,];
	@player : AnimatedImageSprite;
	@frame : Int;
	@x_map_position : Int;
	@x_rel_position : Int;
	@y_rel_position : Int;
	@x_velocity : Int;
	@y_velocity : Int;

	@player_falling : Bool;
	@player_jumping : Bool;
	@player_jump_height : Int;
	
	@camera_shift : Int;
	@game_map_end : Int;
	@is_alive : Bool;

	@background : ImageSprite;
	@background_offset : Int;

	New(platform : Platform) {
		@platform := platform;
		@game_map := @platform->GetMap();
		@player := @platform->GetEngine()->AddAnimatedImageSprite("images/walk2.png", 10);
		@background := @platform->GetEngine()->AddImageSprite("images/hills.png");
		
		@y_rel_position := Values->SCREEN_HEIGHT - Values->BLOCK_WIDTH * 8;

		dims := @game_map->Size();
		@game_map_end := (dims[1] / Values->SCREEN_BLOCK_WIDTH - 1) * 
			Values->SCREEN_BLOCK_WIDTH * Values->BLOCK_WIDTH + Values->SCREEN_WIDTH / 4;

		@player_falling := true;
		@is_alive := true;
	}

	method : public : GetFacingRight() ~ Bool {
		return @player->GetFlip() = RendererFlip->SDL_FLIP_NONE;
	}

	method : public : GetMapX() ~ Int {
		return @x_map_position - @x_rel_position;
	}

	method : public : GetRelX() ~ Int {
		return @x_rel_position;
	}

	method : public : GetRelY() ~ Int {
		return @y_rel_position;
	}

	method : public : GetHeight() ~ Int {
		return @player->GetHeight();
	}

	method : public : GetWidth() ~ Int {
		return @player->GetWidth();
	}

	method : public : GetCameraShift() ~ Int {
		return @camera_shift;
	}

	method : public : IsAlive() ~ Bool {
		return @is_alive;
	}

	method : public : SetAlive(is_alive : Bool) ~ Nil {
		@is_alive := is_alive;
	}

	method : public : SetXVelocity(x_velocity : Int) ~ Nil {
		@x_velocity := x_velocity;

		if(@x_velocity = 1) {
			if(@player->GetFlip() = RendererFlip->SDL_FLIP_HORIZONTAL) {
				@player->SetFlip(RendererFlip->SDL_FLIP_NONE);
			};
		}
		else if(@x_velocity = -1) {
			@player->SetFlip(RendererFlip->SDL_FLIP_HORIZONTAL);
		};
	}

	method : public : GetFlip() ~ RendererFlip {
		return @player->GetFlip();
	}

	method : public : SetYVelocity(y_velocity : Int) ~ Nil {
		@y_velocity := y_velocity;
	}

	method : public : JumpHeight() ~ Int {
		return @player_jump_height;
	}

	method : public : SetJumping(jumping : Bool) ~ Nil {
		# TODO
	}

	method : public : native : HandleEvents() ~ Nil {
		frame_count := @platform->GetFrameCount();

		if(@is_alive) {
			if(@player_falling) {
				@y_rel_position += GetSpeed();
			};

			if(@x_velocity = -1) {
				@x_map_position -= GetSpeed();
			}
			else if(@x_velocity = 1) {
				@x_map_position += GetSpeed();
			};

			if(<>Collision()) {
				if(@x_velocity = 1) {
					@x_rel_position += GetSpeed();
					if(@x_map_position > @game_map_end) {
						@camera_shift := 0;
						if(@x_rel_position > 0.75 * Values->SCREEN_WIDTH) {
							@x_velocity := 0;
							@x_map_position -= GetSpeed();
							@x_rel_position -= GetSpeed();
						};
					}
					else if(@x_rel_position > Values->SCREEN_WIDTH / 4) {
						@camera_shift := 1;
						@x_rel_position := Values->SCREEN_WIDTH / 4;
						@background_offset -= GetSpeed() / 2;
						if(@background_offset < -1 * @background->GetWidth()) {
							@background_offset := 0;
						};
					}
					else {
						@camera_shift := 0;
					};
				}
				# move left
				else if(@x_velocity = -1) {
					@x_rel_position -= GetSpeed();
					# check left bounds
					if(@x_rel_position < Values->BLOCK_WIDTH) {	
						@x_velocity := 0;
					}
					else {
						@camera_shift := 0;
					};
				}
				else {
					@camera_shift := 0;
				};
			};
		}
		else {
			@frame := @player->GetClipCount() - 1;
			@y_rel_position += GetSpeed() / 2;
			if(@y_rel_position > Values->SCREEN_HEIGHT) {
				@platform->EndGame();
			};
		};
	}

	method : GetSpeed() ~ Int {
		return Values->SPEED;
	}

	method : native : Collision() ~ Bool {
		dims := @game_map->Size();

		start_x := (@x_map_position - @x_rel_position) / Values->BLOCK_WIDTH;
		if(start_x < 0) {
			start_x := 0;
		};

		end_x := start_x + Values->SCREEN_BLOCK_WIDTH + 1;
		if(end_x >= dims[1]) {
			end_x := dims[1] - 1;
		};

		# render blocks
		for(x := start_x; x < end_x; x += 1;) {
			block_rel_x := x * Values->BLOCK_WIDTH - (@x_map_position - @x_rel_position);
			for(y := 0; y < dims[0]; y += 1;) {
				block_rel_y := y * Values->BLOCK_HEIGHT;
				block_rel_x2 := block_rel_x + Values->BLOCK_WIDTH;
				block_rel_y2 := block_rel_y + Values->BLOCK_HEIGHT;

				rel_y := @y_rel_position;
				rel_y2 := rel_y + @player->GetHeight();
				rel_x := @x_rel_position;
				rel_x2 := rel_x + @player->GetWidth();

				type_below := -1;
				if(y + 1 < dims[0]) {
					type_below := @game_map[y + 1, x];
				};
				if(type_below > -1) {
					# y for space below player
					# y for block below
					if(<>(rel_x > block_rel_x2 | rel_x2 < block_rel_x)) {
@platform->GetEngine()->Debug("--- Type_below={$type_below} ---");						
					};
				};

				if(<>(rel_y2 < block_rel_y | rel_y > block_rel_y2 | rel_x > block_rel_x2 | rel_x2 < block_rel_x)) {
					type := @game_map[y, x];
					if(type > 0) {
@platform->GetEngine()->Debug("--- Hit: type={$type}; block={$block_rel_x},{$block_rel_y} ---");

						if(@player_falling) {
							@player_falling := false;
							@y_rel_position -= GetSpeed();
						};

						if(@x_velocity = -1) {
							@x_map_position += GetSpeed();
							return true;
						}
						else if(@x_velocity = 1) {
							@x_map_position -= GetSpeed();
							return true;
						};
					};
				};
			};
		};

		return false;
	}

	method : public : RenderBackground() ~ Nil {
		@background->Render(@background_offset, 0);
		@background->Render(@background_offset + @background->GetWidth(), 0);
	}

	method : public : RenderPlayer() ~ Nil {
		@player->Render(@x_rel_position, @y_rel_position, @frame);
	}
}
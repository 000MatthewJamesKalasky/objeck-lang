use Game.SDL2;
use Game.Framework;
use Collection;

# TODO: add joystick
# TODO: add music/effects
# TODO: add ending

class Game {
	@framework : GameFramework;
	@base_path : String;
	@player : Player;

	@background : ImageSprite;
	@fire : ImageSprite;
	@fire_clip1 : Rect;
	@fire_clip2 : Rect;

	@level : Level;
	@timer : Int;
	@timer_text : TextSprite;

	@score : Int;
	@score_text : TextSprite;

	@game_over : Bool;

	function : Main(args : String[]) ~ Nil {
		Game->New()->Run();
	}

	New() {
		@framework := GameFramework->New(GameConsts->SCREEN_WIDTH, GameConsts->SCREEN_HEIGHT, "Accel");
		@framework->SetClearColor(Color->New(0, 0, 255));
		@base_path := "C:\\Users\\objec\\Documents\\Code\\objeck-lang\\programs\\sdl\\engine\\tests\\media";

		background_path := String->New(@base_path);
		background_path += "/images/background.png";
		@background := @framework->AddImageSprite(background_path);

		fire_path := String->New(@base_path);
		fire_path += "/images/fire.png";
		@fire := @framework->AddImageSprite(fire_path);
		@fire_clip1 := Rect->New(0, 0, 800,	64);
		@fire_clip2 := Rect->New(10, 0, 800, 64);

		@timer := 45;
		buffer := "Time: ";
		buffer += @timer->ToString();
		@timer_text := @framework->AddTextSprite();
		@timer_text->RenderedText(buffer);	

		@score_text := @framework->AddTextSprite();
		buffer := "Score: ";
		buffer += @score->ToString();
		@score_text->RenderedText(buffer);
	}

	method : Run() ~ Nil {
		if(@framework->IsOk()) {
			@player := Player->New(@self);
			@level := Level->New(@self);
			
			quit := false;
			e := @framework->GetEvent();
			frame_count := 0;
			while(<>quit) {
				@framework->FrameStart();
				@framework->Clear();
				
				# process input
				while(e->Poll() <> 0) {
					if(e->GetType() = EventType->SDL_QUIT) {
						quit := true;
					};

					ProcessInput(e);
				};

				# update
				@player->Update();
				@level->Update();

				shift := @level->GetShift();
				if(@player->GetRight() >= GameConsts->PLAYER_BOX_MAX) {
					diff := @player->GetRight() - GameConsts->PLAYER_BOX_MAX;
					@player->SetRight(GameConsts->PLAYER_BOX_MAX);
					if(shift > GameConsts->WIDTH_MAX) {
						@level->ShiftWorld(-1 * diff);
					};
		        };

		        if(@player->GetLeft() <= GameConsts->PLAYER_BOX_MIN) {
					diff := GameConsts->PLAYER_BOX_MIN - @player->GetLeft();
					@player->SetLeft(GameConsts->PLAYER_BOX_MIN);
					if(shift < 0) {
						@level->ShiftWorld(diff);
					};
				};

				# draw
				Background();
				@player->Draw();
				@level->Draw(frame_count);
				Fire(frame_count);
				@timer_text->Render(640, 20);
				@score_text->Render(640, 48);
				
				# show
				@framework->Show();
				@framework->FrameEnd();
				
				frame_count += 1;
				if(frame_count >= @framework->GetFps()) {
					if(@game_over) {
						@timer_text->RenderedText("Game Over!");
					}
					else {
						@timer -= 1;
						if(@timer < 0) {
							Over();
						}
						else {
							buffer := "Time: ";
							buffer += @timer->ToString();
							@timer_text->RenderedText(buffer);
						};
					};

					frame_count := 0;
				};
			};
		}
		else {
			"--- Error Initializing GameConsts Environment ---"->ErrorLine();
			return;
		};

		leaving {
			@framework->Quit();
		};
	}

	method : public : GetFramework() ~ GameFramework {
		return @framework;
	}

	method : public : GetPlayer() ~ Player {
		return @player;
	}

	method : public : GetBasePath() ~ String {
		return @base_path;
	}

	method : public : AddScore(points : Int) ~ Nil {
		@score += points;
		buffer := "Score: ";
		buffer += @score->ToString();
		@score_text->RenderedText(buffer);
	}

	method : public : Over() ~ Nil {
		@game_over := true;
	}

	method : Background() ~ Nil {
		shift := @level->GetShift() / 2;
		@background->Render(shift, 0);
		@background->Render(shift + @background->GetWidth(), 0);	
	}

	method : Fire(frame_count : Int) ~ Nil {
		shift := @level->GetShift() / 3;
		y_pos := GameConsts->SCREEN_HEIGHT - 64;

		if(frame_count % 10 = 0) {
			@fire->Render(shift, y_pos, @fire_clip1);
			@fire->Render(shift + @fire->GetWidth(), y_pos, @fire_clip1);
		}
		else {
			@fire->Render(shift, y_pos, @fire_clip2);
			@fire->Render(shift + @fire->GetWidth(), y_pos, @fire_clip2);
		};	
	}

	method : ProcessInput(e : Event) ~ Nil {
		# Joystick
		if(e->GetType() = EventType->SDL_JOYHATMOTION) {
			if(e->GetJHat()->GetWhich() = 0 ) {
				select(e->GetJHat()->GetValue()) {
					# release pad
					label 0: {
#						@player->Stop();
					}

					# right pad
					label 2: {
		            	@player->GoRight();
					}

					# left pad
					label 8: {
						@player->GoLeft();
					}					
				};
			};
		}
		else if(e->GetType() = EventType->SDL_JOYBUTTONDOWN) {
			# 'a' button
			if(e->GetJButton()->GetButton() = 0) {
				@player->Jump(true);
			};
			# B button
			# else if(e->GetJButton()->GetButton() = 1) { ... };
		}
		else if(e->GetType() = EventType->SDL_JOYBUTTONUP) {
			# 'a' button
			if(e->GetJButton()->GetButton() = 0) {
				@player->Jump(false);
			};
			# B button
			# else if(e->GetJButton()->GetButton() = 1) { ... };
		}
		else if(e->GetType() = EventType->SDL_KEYDOWN) {
	        select(e->GetKey()->GetKeysym()->GetScancode()) {    	
	            label Scancode->SDL_SCANCODE_LEFT: {
	            	@player->GoLeft();
	            }

	            label Scancode->SDL_SCANCODE_RIGHT: {
	            	@player->GoRight();
	            }

	            label Scancode->SDL_SCANCODE_UP: {
	            	@player->Jump(true);
	            }
	        };
	    }
	    else if(e->GetType() = EventType->SDL_KEYUP) {
	       	select(e->GetKey()->GetKeysym()->GetScancode()) {
		       	label Scancode->SDL_SCANCODE_LEFT:
		        label Scancode->SDL_SCANCODE_RIGHT: {
		        	@player->Stop();
		        }

		        label Scancode->SDL_SCANCODE_UP: {
		        	@player->Jump(false);
		       	}
		    };
	    };
	}
}

class Player {
	@rect : AnimatedImageSprite;
	@game : Game;
	@loc : Vector2;
	@vel : Vector2;
	@acc : Vector2;
	@jumped : Bool;
	@jump_max : Int;
	@hit_top : Bool;
	@level : Level;
	
	New(game : Game) {
		@game := game;

		framework := game->GetFramework();
		base_path := game->GetBasePath();

		clips := Vector->New();
		clips->AddBack(Rect->New(0, 0, 32, 52));
		clips->AddBack(Rect->New(32, 0, 32, 52));
		clips->AddBack(Rect->New(64, 0, 32, 52));
		clips->AddBack(Rect->New(96, 0, 32, 52));
		clips->AddBack(Rect->New(128, 0, 32, 52));
		clips->AddBack(Rect->New(160, 0, 32, 52));

		player_path := String->New(base_path);
		player_path += "/images/player.png";
		@rect := framework->AddAnimatedImageSprite(player_path, clips);
		
		@loc := Vector2->New(GameConsts->PLAYER_BOX_MIN->As(Float), GameConsts->SCREEN_HEIGHT / 2);
		@vel := Vector2->New();
		@acc := Vector2->New();
	}

	method : public : SetLevel(level : Level) ~ Nil {
		@level := level;
	}

	method : public : GetRect() ~ AnimatedImageSprite {
		return @rect;
	}

	method : public : GetLeft() ~ Int {
		return @loc->GetX() - @rect->GetWidth() / 2;
	}

	method : public : GetRight() ~ Int {
		return @loc->GetX() + @rect->GetWidth() / 2;
	}

	method : public : SetLeft(x : Int) ~ Nil {
		@loc->SetX(x + @rect->GetWidth() / 2);
	}

	method : public : SetRight(x : Int) ~ Nil {
		@loc->SetX(x - @rect->GetWidth() / 2);
	}

	method : public : GoLeft()  ~ Nil {
		if(@rect->GetFlip() = RendererFlip->SDL_FLIP_NONE) {
			@rect->SetFlip(RendererFlip->SDL_FLIP_HORIZONTAL);
		};

		@acc->SetX(-0.75);
	}

	method : public : GoRight()  ~ Nil {
		if(@rect->GetFlip() = RendererFlip->SDL_FLIP_HORIZONTAL) {
			@rect->SetFlip(RendererFlip->SDL_FLIP_NONE);
		};

		@acc->SetX(0.75);
	}

	method : public : Stop()  ~ Nil {
	}
	
	method : public : Jump(jumped : Bool)  ~ Nil {
		@jumped := jumped;
	}

	method : public : Update()  ~ Nil {
		# movement logic
		if(@hit_top) {
			@acc->SetY(80);
			@hit_top := false;
		}
		else {
			if(@jumped & @jump_max < 3) {
				@acc->SetY(-5.3);
				@jump_max += 1;
			}
			else {
				@acc->SetY(0.65);
			};
		};

		@acc->Add(Vector2->Mul(@vel, -0.0625));
		@vel->Add(Vector2->Mul(@acc, 0.75));
		@loc->Add(@vel);
		@acc->Zero();
		
		# collisions
		CheckPlatforms();
		CheckGems();
		CheckFloorCeiling();
	}

	method : public : CheckPlatforms() ~ Nil {
		platforms := @level->GetPlatforms();

		# reposition 'x'
		@rect->SetCenterX(@loc->GetX());
		collides := @level->PlatformCollisions(@self, platforms);
        each(i : collides) {
        	platform := collides->Get(i)->As(Platform);
			if(@vel->GetX() > 0.01) {
    			@rect->SetRight(platform->GetLeft());
    			@loc->SetX(platform->GetLeft() - @rect->GetWidth() / 2);
    			@vel->MulX(0);
            }
    		else if(@vel->GetX() < -0.01) {
            	@rect->SetLeft(platform->GetRight());
            	@loc->SetX(platform->GetRight() + @rect->GetWidth() / 2);
            	@vel->MulX(0);
            };
        };

		# reposition 'y'
		@rect->SetBottom(@loc->GetY() - @rect->GetHeight() / 2);
		collides := @level->PlatformCollisions(@self, platforms);
        each(i : collides) {
        	platform := collides->Get(i)->As(Platform);
       		if(@vel->GetY() < 0.01) {
				@rect->SetTop(platform->GetBottom());
            	@loc->SetY(platform->GetBottom() + @rect->GetHeight() / 2);
				@jump_max := 3;
				@hit_top := true;
            }
            else if(@vel->GetY() > 0.01) {
    			@rect->SetBottom(platform->GetTop());
    			@loc->SetY(platform->GetTop() + @rect->GetHeight() / 2);
				@vel->SetY(0);
				@jump_max := 0;
            };
        };
	}

	method : public : CheckGems() ~ Nil {
		collides := Level->GemsCollisions(@self, @level->GetGems());
        each(i : collides) {
    		gem := collides->Get(i)->As(Gem);
    		gem->Hide();
    		@game->AddScore(15);
    	};
    }

    method : public : CheckFloorCeiling() ~ Nil {
    	if(@rect->GetBottom() > GameConsts->SCREEN_HEIGHT) {
			@rect->SetBottom(GameConsts->SCREEN_HEIGHT + @rect->GetHeight() / 2);
        	@loc->SetY(GameConsts->SCREEN_HEIGHT + @rect->GetHeight());
			@vel->SetY(0);
			@game->Over();
		}
		else if(@loc->GetY() < 0) {
			@loc->SetY(0);
			@vel->SetY(0);
		};
    }

	method : public : Draw()  ~ Nil {
		if(@jump_max > 0) {
			@rect->Render(5);
		}
		else if(@vel->GetX() > 0.075 | @vel->GetX() < -0.075) {
			offset := @level->GetShift() + @loc->GetX();
			index := Int->Abs((offset / 15)->As(Int) % 4);
			@rect->Render(index);
		}
		else {
			@rect->Render(4);
		};
	}
}

class Platform {
	@rect : Rectangle;

	New(x : Int, y : Int, rect : Rectangle) {
		@rect := rect;
		@rect->SetFill(true);
		@rect->SetColor(Color->New(50, 51, 52));
		@rect->Set(x, y);
	}

	method : public : AddX(x : Int)  ~ Nil {
		@rect->AddX(x);
	}

	method : public : GetLeft()  ~ Int {
		return @rect->GetLeft();
	}

	method : public : GetRight()  ~ Int {
		return @rect->GetRight();
	}

	method : public : GetTop()  ~ Int {
		return @rect->GetTop();
	}

	method : public : GetBottom()  ~ Int {
		return @rect->GetBottom();
	}

	method : public : GetWidth()  ~ Int {
		return @rect->GetWidth();
	}

	method : public : Draw()  ~ Nil {
		@rect->Render();
	}

	method : public : Collides(rect : AnimatedImageSprite) ~ Bool {
		return @rect->GetPosition()->Overlaps(rect->GetPosition());
	}
}

class MovingPlatform from Platform {
	@change_x : Int;
    @change_y : Int;
    @boundary_top : Int;
    @boundary_bottom : Int;
    @boundary_left : Int;
    @boundary_right : Int;
    @player : Player;
    @level : Level;

	New(x : Int, y : Int, rect : Rectangle, player : Player, level : Level) {
		Parent(x, y, rect);
		@rect->SetColor(Color->New(207, 181, 59));
		@player := player;
		@level := level;

		@boundary_top := y - 200;
		if(@boundary_top < 60) {
			@boundary_top := 80;
		};

    	@boundary_bottom := y + 200;
    	if(@boundary_bottom > 560) {
			@boundary_bottom := 560;
		};

    	@change_y := 1;
	}

	method : public : GetChangeLeft() ~ Int {
		return @change_x;
	}

	method : public : SetLevel(level : Level)  ~ Nil {
		@level := level;
	}

	method : public : native : Update()  ~ Nil {
		@rect->AddX(@change_x);

		if(Collides(@player->GetRect())) {
			if(@change_x < 0) {
                @player->GetRect()->SetRight(@rect->GetLeft());
            }
            else {
            	@player->GetRect()->SetLeft(@rect->GetRight());
 			};
		};

		@rect->AddY(@change_y);
		if(Collides(@player->GetRect())) { 
			if(@change_y < 0) {
                @player->GetRect()->SetBottom(@rect->GetTop());
			}
            else {
				@player->GetRect()->SetTop(@rect->GetBottom());
            };
		};

		if(@rect->GetBottom() > @boundary_bottom | @rect->GetTop() < @boundary_top) {
			@change_y *= -1;
		};

		cur_pos := @rect->GetLeft() - @level->GetShift();
        if(cur_pos < @boundary_left | cur_pos > @boundary_right) {
			@change_x *= -1;
        };
	}
}

class Gem {
	@rect : AnimatedImageSprite;
	@hide : Bool;

	New(x : Int, y : Int, rect : AnimatedImageSprite) {
		@rect := rect;
		@rect->Set(x, y);
	}

	method : public : Hide() ~ Nil {
		@hide := true;
	}

	method : public : AddX(x : Int)  ~ Nil {
		@rect->AddX(x);
	}

	method : public : GetLeft()  ~ Int {
		return @rect->GetLeft();
	}

	method : public : GetRight()  ~ Int {
		return @rect->GetRight();
	}

	method : public : GetTop()  ~ Int {
		return @rect->GetTop();
	}

	method : public : GetBottom()  ~ Int {
		return @rect->GetBottom();
	}

	method : public : Draw(frame_count : Int)  ~ Nil {
		if(<>@hide) {
			index := frame_count / 6 % @rect->GetClipCount();
			@rect->Render(index);
		};
	}

	method : public : Collides(rect : ImageSprite) ~ Bool {
		if(@hide) {
			return false;
		}
		else {
			return @rect->GetPosition()->Overlaps(rect->GetPosition());
		};
	}
}

class Level {
	@game : Game;
	@player : Player;
	@platforms : Vector;
	@gems : Vector;
	@shift_x : Int;

	New(game : Game) {
		@game := game;

		@player := game->GetPlayer();
		@player->SetLevel(@self);

		base_path := @game->GetBasePath();
		framework := game->GetFramework();
		@platforms := GeneratePlatforms(framework);
		@gems := GenerateGems(base_path, framework);
	}

	method : GeneratePlatforms(framework : GameFramework) ~ Vector {
		platforms := Vector->New();

		width := 110;
		height := 20;

		x_base_pos := GameConsts->PLAYER_BOX_MIN + GameConsts->PLAYER_BOX_MIN / 2;
		platforms->AddBack(Platform->New(x_base_pos, 525, framework->AddRectangle(width, height)));
		x_base_pos += 110 + Int->Random(10, 20);

		flip : Int;
		for(i := 0; i < 11; i += 1;) {
			prev_plat := platforms->Get(i)->As(Platform);
			height := Int->Random(10, 25);

			x_offset := Int->Random(10, 35);
			y_pos := GetYPos(prev_plat, 20, 40);

			flip := Int->Random(1);				
			if(flip = 0) {
				platforms->AddBack(Platform->New(x_base_pos + x_offset, y_pos, framework->AddRectangle(width, height)));					
			}
			else {
				platforms->AddBack(MovingPlatform->New(x_base_pos + x_offset, y_pos, framework->AddRectangle(width, height), @player, @self));
			};			

			x_base_pos += 110 + Int->Random(45, 60);
		};

		return platforms;
	}

	method : GetYPos(prev_plat : Platform, min : Int, max : Int) ~ Int {
		y_pos := prev_plat->GetTop() + Int->Random(min, max);
		if(y_pos < 60) {
			y_pos += Int->Random(60, 80);
		}
		else if(y_pos > 540) {
			y_pos -= Int->Random(60, 80);
		};

		return y_pos;
	}

	method : GenerateGems(base_path : String, framework : GameFramework) ~ Vector {
		gems := Vector->New();

		gems_path := String->New(base_path);
		gems_path += "/images/gems.png";

		clips := Vector->New();
		clips->AddBack(Rect->New(0, 0, 32, 32));
		clips->AddBack(Rect->New(32, 0, 32, 32));
		clips->AddBack(Rect->New(64, 0, 32, 32));
		clips->AddBack(Rect->New(96, 0, 32, 32));
		clips->AddBack(Rect->New(128, 0, 32, 32));
		clips->AddBack(Rect->New(160, 0, 32, 32));

		each(i : @platforms) {
			platform := @platforms->Get(i)->As(Platform);
			
			x_offset : Int;
			value := Int->Random(10, 30);
			if(i % 2 = 0) {
				x_offset := platform->GetWidth() / 2 + value;
			}
			else {
				x_offset := platform->GetWidth() / 2 - value;
			};

			y_offset := platform->GetTop() - 32 - Int->Random(10, 100);

			gems->AddBack(Gem->New(platform->GetLeft() + x_offset, y_offset, framework->AddAnimatedImageSprite(gems_path, clips)));		
		};

		return gems;
	}

	method : public : GetShift() ~ Int {
		return @shift_x;
	}

	method : public : ShiftWorld(shift_x : Int) ~ Nil {
		@shift_x += shift_x;

		each(i : @platforms) {
			platform := @platforms->Get(i)->As(Platform);
			platform->AddX(shift_x);
		};

		each(i : @gems) {
			platform := @gems->Get(i)->As(Gem);
			platform->AddX(shift_x);
		};
	}

	method : public : GetPlatforms() ~ Vector {
		return @platforms;
	}

	method : public : GetGems() ~ Vector {
		return @gems;
	}

	method : public : PlatformCollisions(player : Player, obstacles : Vector) ~ Vector {
		collides := Vector->New();

		each(i : obstacles) {
        	obstacle := obstacles->Get(i)->As(Platform);
        	if(obstacle->Collides(player->GetRect())) {
        		collides->AddBack(obstacle);
        	};
        };

        return collides;
    }

    method : public : GemsCollisions(player : Player, obstacles : Vector) ~ Vector {
		collides := Vector->New();

		each(i : obstacles) {
        	obstacle := obstacles->Get(i)->As(Gem);
        	if(obstacle->Collides(player->GetRect())) {
        		collides->AddBack(obstacle);
        	};
        };

        return collides;
    }

	method : public : Update()  ~ Nil {
		each(i : @platforms) {
			platform := @platforms->Get(i);
			if(platform->TypeOf(MovingPlatform)) {
				platform->As(MovingPlatform)->Update();
			};
		};
	}

	method : public : Draw(frame_count : Int)  ~ Nil {
		each(i : @gems) {
			@gems->Get(i)->As(Gem)->Draw(frame_count);
		};

		each(i : @platforms) {
			@platforms->Get(i)->As(Platform)->Draw();
		};
	}
}

consts GameConsts {
	PLAYER_BOX_MIN := 120,
	PLAYER_BOX_MAX := 500,
	SCREEN_WIDTH := 800,
	SCREEN_HEIGHT := 600,
	WIDTH_MAX := -1600
}
use Game.SDL2;
use Game.Framework;
use Collection;

class Demo {
	@framework : GameFramework;
	@player : Player;
	@platforms : Vector;

	function : Main(args : String[]) ~ Nil {
		Demo->New()->Run();
	}

	New() {
		@framework := GameFramework->New(Game->SCREEN_WIDTH, Game->SCREEN_HEIGHT, "Accel");
		@framework->SetClearColor(Color->New(0, 0, 255));
		@platforms := Vector->New();
	}

	method : Run() ~ Nil {
		if(@framework->IsOk()) {
			@player := Player->New(@framework->AddRectangle(40, 60), @platforms);
			@platforms->AddBack(Platform->New(120, 535, @framework->AddRectangle(110, 35)));

			quit := false;
			e := @framework->GetEvent();
			while(<>quit) {
				@framework->FrameStart();
				@framework->Clear();
				
				# process input
				while(e->Poll() <> 0) {
					if(e->GetType() = EventType->SDL_QUIT) {
						quit := true;
					};

					ProcessInput(e);
				};

				# update
				@player->Update();

				# draw
				@player->Draw();
				each(i : @platforms) {
					@platforms->Get(i)->As(Platform)->Draw();
				};
				
				# show
				@framework->Show();
				@framework->FrameEnd();
			};
		}
		else {
			"--- Error Initializing Game Environment ---"->ErrorLine();
			return;
		};

		leaving {
			@framework->Quit();
		};
	}

	method : public : ProcessInput(e : Event) ~ Nil {
		if(e->GetType() = EventType->SDL_KEYDOWN) {
	        select(e->GetKey()->GetKeysym()->GetScancode()) {    	
	            label Scancode->SDL_SCANCODE_LEFT: {
	            	@player->GoLeft();
	            }

	            label Scancode->SDL_SCANCODE_RIGHT: {
	            	@player->GoRight();
	            }

	            label Scancode->SDL_SCANCODE_UP: {
	            	@player->Jump(true);
	            }
	        };
	    }
	    else if(e->GetType() = EventType->SDL_KEYUP) {
	       	select(e->GetKey()->GetKeysym()->GetScancode()) {
		       	label Scancode->SDL_SCANCODE_LEFT:
		        label Scancode->SDL_SCANCODE_RIGHT: {
		        	@player->Stop();
		        }

		        label Scancode->SDL_SCANCODE_UP: {
		        	@player->Jump(false);
		       	}
		    };
	    };
	}

	function : Collisions(player : Player, obstacles : Vector) ~ Vector {
		collides := Vector->New();

		each(i : obstacles) {
        	obstacle := obstacles->Get(i)->As(Platform);
        	if(obstacle->Collides(player->GetRect())) {
        		collides->AddBack(obstacle);
        	};
        };

        return collides;
    }
}

class Player {
	@rect : Rectangle;
	@loc : Vector2;
	@vel : Vector2;
	@acc : Vector2;
	@jump : Bool;
	@jump_limit : Int;
	@on_surface : Bool;
	@platforms : Vector;
	
	New(rect : Rectangle, platforms : Vector) {
		@rect := rect;
		@rect->SetFill(true);
		@rect->SetColor(Color->New(255, 0, 0));

		@loc := Vector2->New(Game->SCREEN_WIDTH / 2, Game->SCREEN_HEIGHT / 2);
		@vel := Vector2->New();
		@acc := Vector2->New();
		@in_air := true;

		@platforms := platforms;
	}

	method : public : GetRect() ~ Rectangle {
		return @rect; 
	}

	method : public : GetLeft() ~ Int {
		return @rect->GetLeft();
	}

	method : public : GetRight() ~ Int {
		return @rect->GetRight();
	}

	method : public : ChangeLeft()  ~ Int {
		return @acc->GetX();
	}

	method : public : GoLeft()  ~ Nil {
		@acc->SetX(-0.5);
	}

	method : public : GoRight()  ~ Nil {
		@acc->SetX(0.5);
	}

	method : public : Stop()  ~ Nil {
	}

	method : public : Jump(state : Bool)  ~ Nil {
		@jump := state;
	}

	method : public : Update()  ~ Nil {
		if(@jump & @jump_limit < 13) {
			@acc->SetY(-1.3);
			@jump_limit += 1;
			@on_surface := false;
		}
		else {
			@acc->SetY(0.65);
		};

		# motion
		@acc->Add(Vector2->Mul(@vel, -0.03));
		@vel->Add(@acc);
		@loc->Add(@vel);
		@acc->Mul(0);
				
		# hit ceiling
		if(@loc->GetX() > Game->SCREEN_WIDTH) {
			@loc->SetX(0);
		}
		else if(@loc->GetX() < 0) {
			@loc->SetX(Game->SCREEN_WIDTH->As(Float));
		};

		# hit floor
		if(@loc->GetY() > Game->SCREEN_HEIGHT) {
			@loc->SetY(Game->SCREEN_HEIGHT->As(Float));
			@on_surface := true;
			@jump_limit := 0;			
		}
		else if(@loc->GetY() < 0) {
			@loc->SetY(0);
		};

		@rect->SetCenterX(@loc->GetX());
		collides := Demo->Collisions(@self, @platforms);
        each(i : collides) {
        	platform := collides->Get(i)->As(Platform);
			if(@vel->GetX() > 0.001) {
    			@rect->SetRight(platform->GetLeft());
    			@loc->SetX(platform->GetLeft() - @rect->GetWidth() / 2);
    			@vel->SetX(0);
            }
    		# moving left
            else if(@vel->GetX() < 0.001) {
            	@rect->SetLeft(platform->GetRight());
            	@loc->SetX(platform->GetRight() + @rect->GetWidth() / 2);
            	@vel->SetX(0);
            };
        };

		# set x and y
		@rect->SetBottom(@loc->GetY());


	}

	method : public : Draw()  ~ Nil {
		@rect->Render();
	}
}

class Platform {
	@rect : Rectangle;

	New(x : Int, y : Int, rect : Rectangle) {
		@rect := rect;
		@rect->SetFill(true);
		@rect->SetColor(Color->New(0, 255, 0));
		@rect->Set(x, y);
	}

	method : public : AddX(x : Int)  ~ Nil {
		@rect->AddX(x);
	}

	method : public : GetLeft()  ~ Int {
		return @rect->GetLeft();
	}

	method : public : GetRight()  ~ Int {
		return @rect->GetRight();
	}

	method : public : GetTop()  ~ Int {
		return @rect->GetTop();
	}

	method : public : GetBottom()  ~ Int {
		return @rect->GetBottom();
	}

	method : public : Draw()  ~ Nil {
		@rect->Render();
	}

	method : public : Collides(rect : Rectangle) ~ Bool {
		return @rect->GetPosition()->Overlaps(rect->GetPosition());
	}
}

consts Game {
	SCREEN_WIDTH := 800,
	SCREEN_HEIGHT := 600
}
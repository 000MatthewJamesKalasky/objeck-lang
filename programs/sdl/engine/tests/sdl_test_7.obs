use Game.SDL2;
use Game.Framework;
use Collection;

class Demo {
	@framework : GameFramework;
	@player : Player;

	function : Main(args : String[]) ~ Nil {
		Demo->New()->Run();
	}

	New() {
		@framework := GameFramework->New(Game->SCREEN_WIDTH, Game->SCREEN_HEIGHT, "Accel");
		@framework->SetClearColor(Color->New(0, 0, 255));
	}

	method : Run() ~ Nil {
		if(@framework->IsOk()) {
			@player := Player->New(@framework->AddRectangle(40, 60));

			quit := false;
			e := @framework->GetEvent();
			while(<>quit) {
				@framework->FrameStart();
				@framework->Clear();
				
				# process input
				while(e->Poll() <> 0) {
					if(e->GetType() = EventType->SDL_QUIT) {
						quit := true;
					};

					ProcessInput(e);
				};

				# update
				@player->Update();

				# draw
				@player->Draw();
				
				# show
				@framework->Show();
				@framework->FrameEnd();
			};
		}
		else {
			"--- Error Initializing Game Environment ---"->ErrorLine();
			return;
		};

		leaving {
			@framework->Quit();
		};
	}

	method : public : ProcessInput(e : Event) ~ Nil {
		if(e->GetType() = EventType->SDL_KEYDOWN) {
	        select(e->GetKey()->GetKeysym()->GetScancode()) {    	
	            label Scancode->SDL_SCANCODE_LEFT: {
	            	@player->GoLeft();
	            }

	            label Scancode->SDL_SCANCODE_RIGHT: {
	            	@player->GoRight();
	            }

	            label Scancode->SDL_SCANCODE_UP: {
	            	@player->Jump(true);
	            }
	        };
	    }
	    else if(e->GetType() = EventType->SDL_KEYUP) {
	       	select(e->GetKey()->GetKeysym()->GetScancode()) {
		       	label Scancode->SDL_SCANCODE_LEFT: {
		        }

		        label Scancode->SDL_SCANCODE_RIGHT: {
		        }

		        label Scancode->SDL_SCANCODE_UP: {
		        	@player->Jump(false);
		       	}
		    };
	    };
	}
}

class Player {
	@rect : Rectangle;
	@loc : Vector2;
	@vel : Vector2;
	@acc : Vector2;
	@jump : Bool;
	@on_surface : Bool;
	
	New(rect : Rectangle) {
		@rect := rect;
		@rect->SetFill(true);
		@rect->SetColor(Color->New(255, 0, 0));

		@loc := Vector2->New(Game->SCREEN_WIDTH / 2, Game->SCREEN_HEIGHT / 2);
		@vel := Vector2->New();
		@acc := Vector2->New();
		@in_air := true;
	}

	method : public : GetRect() ~ Rectangle {
		return @rect; 
	}

	method : public : GetLeft() ~ Int {
		return @rect->GetLeft();
	}

	method : public : GetRight() ~ Int {
		return @rect->GetRight();
	}

	method : public : ChangeLeft()  ~ Int {
		return @acc->GetX();
	}

	method : public : GoLeft()  ~ Nil {
		@acc->SetX(-0.5);
	}

	method : public : GoRight()  ~ Nil {
		@acc->SetX(0.5);
	}

	method : public : Jump(state : Bool)  ~ Nil {
		@jump := state;
	}

	method : public : Update()  ~ Nil {
		if(@jump) {
			@acc->SetY(-1.5);
			@on_surface := false;
		}
		else {
			@acc->SetY(0.65);
		};

		@acc->Add(Vector2->Mul(@vel, -0.035));

		# motion
		@vel->Add(@acc);
		@loc->Add(@vel);
		@acc->Mul(0);
		
		# ceiling
		if(@loc->GetX() > Game->SCREEN_WIDTH) {
			@loc->SetX(0);
		}
		else if(@loc->GetX() < 0) {
			@loc->SetX(Game->SCREEN_WIDTH->As(Float));
		};

		# floor
		if(@loc->GetY() > Game->SCREEN_HEIGHT) {
			@loc->SetY(Game->SCREEN_HEIGHT->As(Float));
			@on_surface := true;
		}
		else if(@loc->GetY() < 0) {
			@loc->SetY(0);
		};

		# set x and y
		@rect->SetBottom(@loc->GetY());
		@rect->SetCenterX(@loc->GetX());
	}

	method : public : Draw()  ~ Nil {
		@rect->Render();
	}
}

consts Game {
	SCREEN_WIDTH := 800,
	SCREEN_HEIGHT := 600
}
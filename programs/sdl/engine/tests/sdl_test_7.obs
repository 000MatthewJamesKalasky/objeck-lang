use Game.SDL2;
use Game.Framework;
use Collection;

class Demo {
	@framework : GameFramework;
	@player : Player;

	function : Main(args : String[]) ~ Nil {
		Demo->New()->Run();
	}

	New() {
		@framework := GameFramework->New(Game->SCREEN_WIDTH, Game->SCREEN_HEIGHT, "Accel");
		@framework->SetClearColor(Color->New(0, 0, 255));
	}

	method : Run() ~ Nil {
		if(@framework->IsOk()) {
			@player := Player->New(@framework->AddRectangle(40, 60));

			quit := false;
			e := @framework->GetEvent();
			while(<>quit) {
				@framework->FrameStart();
				@framework->Clear();
				
				# process input
				while(e->Poll() <> 0) {
					if(e->GetType() = EventType->SDL_QUIT) {
						quit := true;
					};

					ProcessInput(e);
				};

				# update
				@player->Update();

				# draw
				@player->Draw();
				
				# show
				@framework->Show();
				@framework->FrameEnd();
			};
		}
		else {
			"--- Error Initializing Game Environment ---"->ErrorLine();
			return;
		};

		leaving {
			@framework->Quit();
		};
	}

	method : public : ProcessInput(e : Event) ~ Nil {
		if(e->GetType() = EventType->SDL_KEYDOWN) {
	        select(e->GetKey()->GetKeysym()->GetScancode()) {    	
	            label Scancode->SDL_SCANCODE_LEFT: {
	            	@player->GoLeft();
	            }

	            label Scancode->SDL_SCANCODE_RIGHT: {
	            	@player->GoRight();
	            }
	        };
	    }
	    else if(e->GetType() = EventType->SDL_KEYUP) {
	       	code := e->GetKey()->GetKeysym()->GetScancode();
	       	if(code = Scancode->SDL_SCANCODE_LEFT) {
	       		@player->Stop();
	        };

	        if(code = Scancode->SDL_SCANCODE_RIGHT) {
	        	@player->Stop();
	        };
	    };
	}
}

class Player {
	@rect : Rectangle;
	@pos : Vector2;
	@vel : Vector2;
	@acc : Vector2;
	
	New(rect : Rectangle) {
		@rect := rect;
		@rect->SetFill(true);
		@rect->SetColor(Color->New(255, 0, 0));

		@pos := Vector2->New(Game->SCREEN_WIDTH / 2, Game->SCREEN_HEIGHT / 2);
		@vel := Vector2->New();
		@acc := Vector2->New();
	}

	method : public : GetRect() ~ Rectangle {
		return @rect; 
	}

	method : public : GetLeft() ~ Int {
		return @rect->GetLeft();
	}

	method : public : GetRight() ~ Int {
		return @rect->GetRight();
	}

	method : public : ChangeLeft()  ~ Int {
		return @acc->GetX();
	}

	method : public : GoLeft()  ~ Nil {
		@acc->SetX(-5.7);
	}

	method : public : GoRight()  ~ Nil {
		@acc->SetX(5.7);
	}

	method : public : Stop() ~ Nil {
		@vel->SetX(0.0);
	}

	method : public : Update()  ~ Nil {
#		Gravity();

		@vel->Mul(-0.12);
		@acc->Add(@vel);
		@vel->Add(@acc);
		@pos->Add(Vector2->Add(@vel, Vector2->Div(@acc, 2)));
		@rect->Set(@pos);
	}

	method : public : Draw()  ~ Nil {
		@rect->Render();
	}

	method : public : Gravity()  ~ Nil {
#~		
        if(@change_y = 0) {
            @change_y := 1;
        }
        else {
            @change_y += .35;
        };

        # See if we are on the ground.
        if(@rect->GetTop() >= Game->SCREEN_HEIGHT - @rect->GetHeight() & @change_y >= 0) {
            @change_y := 0;
            @rect->SetTop(Game->SCREEN_HEIGHT - @rect->GetHeight());
        };
~#        
	}
}

consts Game {
	SCREEN_WIDTH := 800,
	SCREEN_HEIGHT := 600
}
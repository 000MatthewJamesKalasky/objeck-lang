#~
Lesson 17
http://lazyfoo.net/tutorials/SDL/17_mouse_events/index.php
~#

use SDL;

class LButton {
	@position : Point;
	@current_sprite : LButtonSprite;

	enum LButtonSprite {
		BUTTON_SPRITE_MOUSE_OUT,
		BUTTON_SPRITE_MOUSE_OVER_MOTION,
		BUTTON_SPRITE_MOUSE_DOWN,
		BUTTON_SPRITE_MOUSE_UP,
		BUTTON_SPRITE_TOTAL
	}

	New() {
		@position := Point->New();
		@current_sprite := LButtonSprite->BUTTON_SPRITE_MOUSE_OUT;
	}

	# Sets top left position
	method : public : SetPosition(x : Int, y : Int) ~ Nil {
		@position->SetX(x);
		@position->SetY(y);
	}

	# Handles mouse event
	method : public : HandleEvent(e : Event) ~ Nil {

	}
	
	# Shows button sprite
	method : public : Render() ~ Nil {

	}
}

class LTexture {
	@renderer : Renderer;
	@font : Font;
	@texture : Texture;
	@width : Int;
	@height : Int;

	New(renderer : Renderer, font : Font) {
		@renderer := renderer;
		@font := font;
	}

	method : public : LoadFromRenderedText(textureText : String, textColor : Color) ~ Bool {
		Free();

		# Render text surface
		textSurface := @font->RenderTextSolid(textureText, textColor);
		if(textSurface->IsNull()) {
			"Unable to render text surface!"->ErrorLine();
			return false;
		};

		texture := textSurface->CreateTexture(@renderer);
		@width := textSurface->GetW();
		@height := textSurface->GetH();
		
		@texture := texture;
		return @texture <> Nil;
	}

	# Loads image at specified path
	method : public : LoadFromFile(path : String) ~ Bool {
		Free();

		# Load image at specified path
		loadedSurface := Image->Load(path);
		if(loadedSurface->IsNull()) {
			"Unable to load surface"->ErrorLine();
			return false;
		};

		loadedSurface->SetColorKey(true, loadedSurface->GetPixelFormat()->MapRGB(0, 0xFF, 0xFF));

		texture := loadedSurface->CreateTexture(@renderer);
		if(texture->IsNull()) {
			"Unable to create texture!"->ErrorLine();
			return false;
		};
		@width := loadedSurface->GetW();
		@height := loadedSurface->GetH();
		
		loadedSurface->Free();

		@texture := texture;
		return @texture <> Nil;
	}

	# Deallocates texture
	method : public : Free() ~ Nil {
		if(@texture <> Nil)	{
			@texture->Destroy();
		};
	}

	method : public : SetColor(red : Int, green : Int, blue : Int) ~ Nil {
		@texture->SetColorMod(red, green, blue);
	}

	method : public : SetBlendMode(blending : BlendMode) ~ Nil {
		# Set blending function
		@texture->SetBlendMode(blending);
	}
	
	method : public : SetAlpha(alpha : Int) ~ Nil {
		# Modulate texture alpha
		@texture->SetAlphaMod(alpha );
	}

	# Renders texture at given point
	method : public : Render(x : Int, y : Int, 
			clip : Rect := Nil, 
			angle : Float := 0.0, 
			center : Point := Nil, 
			flip : RendererFlip := RendererFlip->SDL_FLIP_NONE) ~ Nil {
		render_quad := Rect->New(x, y, @width, @height);

		if(clip <> Nil)	{
			render_quad->SetW(clip->GetW());
			render_quad->SetH(clip->GetH());
		};

		@renderer->CopyEx(@texture, clip, render_quad, angle, center, flip );
	}

	# Gets image dimensions
	method : public : GetWidth() ~ Int {
		return @width;
	}

	method : public : GetHeight() ~ Int {
		return @height;
	}
}

class Test {
	@window : static : Window;
	@renderer : static : Renderer;
	@text_texture : static : LTexture;
	@font : static : Font;

	SCREEN_WIDTH : static : Int;
	SCREEN_HEIGHT : static : Int;
	
	function : Main(args : String[]) ~ Nil {
		# Start up SDL and create window
		if( <>Init() ) {
			"Failed to initialize!"->ErrorLine();
			return;
		};
		
		# Load media
		if( <>LoadMedia() ) {
			"Failed to load media!"->ErrorLine();
			return;
		};
			
		# Main loop flag
		quit := false;

		# Event handler
		e := Event->New();

		# While application is running
		while(<>quit) {
			# Handle events on queue
			while( e->Poll() <> 0 ) {
				# User requests quit
				if(e->GetType() = Flags->SDL_QUIT->As(Int)) {
					quit := true;
				};
			};
			
			@renderer->SetDrawColor(0xFF, 0xFF, 0xFF, 0xFF);
			@renderer->Clear();

			@text_texture->Render( 
				(SCREEN_WIDTH - @text_texture->GetWidth() ) / 2, 
				(SCREEN_HEIGHT - @text_texture->GetHeight() ) / 2);
			
			# Update screen
			@renderer->Present();
		};

		e->Free();
		Close();
	}
	
	function : Init() ~ Bool {
		# Initialization flag
		success := true;

		SCREEN_WIDTH := 640;
		SCREEN_HEIGHT := 480;

		# Initialize SDL
		if(Core->Init(Flags->SDL_INIT_VIDEO->As(Int)) < 0) {
			"SDL could not initialize!"->ErrorLine();
			return false;
		};
		
		if(<>Hints->Set("SDL_RENDER_SCALE_QUALITY", "1")) {
			"Warning: Linear texture filtering not enabled!"->ErrorLine();
			return false;
		};

		# Create window
		@window := Window->New("SDL Tutorial", 
			Flags->SDL_WINDOW_POS_UNDEFINED->As(Int), 
			Flags->SDL_WINDOW_POS_UNDEFINED->As(Int), 
			640, 480, Flags->SDL_WINDOW_SHOWN->As(Int));
		if(@window->IsNull()) {
			"Cannot create window!"->ErrorLine();
			return false;
		};

		# Get window surface
		@renderer := Renderer->New(@window, -1, 
			(RendererFlags->SDL_RENDERER_ACCELERATED and RendererFlags->SDL_RENDERER_PRESENTVSYNC)->As(Int));
		if(@renderer->IsNull()) {
			"Cannot create renderer!"->ErrorLine();
			return false;
		};
		@renderer->SetDrawColor(0xFF, 0xFF, 0xFF, 0xFF);

		img_flags := ImageFlags->IMG_INIT_PNG->As(Int);
		if((Image->Init(img_flags) and img_flags) = 0) {
			"SDL image could not initialize!"->ErrorLine();
			return false;
		};

		if(Font->Init() < 0) {
			"SDL_ttf could not initialize!"->ErrorLine();
			return false;
		};

		@font := Font->New("images/lazy.ttf", 28);
		if(@font->IsNull()) {
			"Failed to load lazy font!"->ErrorLine();
			return false;
		};

		@text_texture := LTexture->New(@renderer, @font);
		
		return true;
	}
	
	function : LoadMedia() ~ Bool {
		color := Color->New(35, 60, 30);
		if(<>@text_texture->LoadFromRenderedText( "The quick brown fox jumps over the lazy dog", color)) {
			"Failed to render text texture!"->ErrorLine();
			return false;
		};

		return true;
	}
	
	function : LoadTexture(path : String) ~ Texture {
		# Load image at specified path
		loadedSurface := Image->Load(path);
		if(loadedSurface->IsNull()) {
			"Unable to load surface"->ErrorLine();
			return Nil;
		};

		texture := loadedSurface->CreateTexture(@renderer);
		if(texture->IsNull()) {
			"Unable to create texture!"->ErrorLine();
			return Nil;
		};

		loadedSurface->Free();
		
		return texture;
	}
	
	function : Close() ~ Nil {
		@text_texture->Free();
		@renderer->Destroy();
		@window->Destroy();

		# Quit SDL subsystems
		Image->Quit();
		Font->Quit();
		Core->Quit();
	}
}

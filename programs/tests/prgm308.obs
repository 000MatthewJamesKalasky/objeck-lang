use Collection;

class Test {
	function : Main(args : String[]) ~ Nil {
		values := CompareVector->New()<IntRef>;
		each(i : 10) {
			values->AddBack(i);
		};
		"values set..."->PrintLine();

		filtered := Foo(values, Filter(IntRef) ~ Bool);
		each(value in filtered) {
			value->PrintLine();
		};
		"test 1..."->PrintLine();

		filtered := Bar(values, Filter(IntRef) ~ Bool);
		each(value in filtered) {
			value->PrintLine();
		};
		"test 2..."->PrintLine();

		reduced := Baz(values, Reduce(IntRef, IntRef) ~ IntRef);
		reduced->PrintLine();
		"test 3..."->PrintLine();

		filtered := values->Filter(Filter(IntRef) ~ Bool);
		each(value in filtered) {
			value->PrintLine();
		};
		"test 4..."->PrintLine();
	}

	function : Foo(values : CompareVector<IntRef>, func : (IntRef) ~ Bool) ~ CompareVector<IntRef> {
		filtered := CompareVector->New()<IntRef>;

		each(value in values) {
			result := func(value);
			if(result) {
				filtered->AddBack(value);
			};
		};

		return filtered;
	}

	function : Bar(values : CompareVector<IntRef>, func : (IntRef) ~ Bool) ~ CompareVector<IntRef> {
		filtered := CompareVector->New()<IntRef>;

		each(value in values) {
			if(func(value)) {
				filtered->AddBack(value);
			};
		};

		return filtered;
	}

	function : Baz(values : CompareVector<IntRef>, func : (IntRef, IntRef) ~ IntRef) ~ IntRef {
		accum := IntRef->New(0);

		each(value in values) {
			accum := func(accum, value);
		};

		return accum;
	}

	function : Reduce(left : IntRef, right : IntRef) ~ IntRef {
		return left + right;
	}

	function : Filter(value : IntRef) ~ Bool {
		if(value->Get() < 4) {
			return true;
		};

		return false;
	}
}
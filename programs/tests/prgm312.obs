class Test {
	function : Main(args : System.String[]) ~ Nil {
		t := Trie->New();
		
		t->Insert("hello")->PrintLine();
		t->Insert("hella")->PrintLine();
		t->Insert("hey")->PrintLine();

		t->Has("hella")->PrintLine();
		t->Has("hey")->PrintLine();
		t->Has("hella")->PrintLine();
	}
}

class Trie {
	@root : Node;

	New() {
		@root := Node->New();
	}

	method : public : Has(word : String) ~ Bool {
		node := @root;

		each(char in word) {
			next := node->GetChild(char);
			if(next <> Nil) {
				node := next;
			}
			else {
				return false;
			}
		};

		return node->IsTerminal();
	}

	method : public : Insert(word : String) ~ Int {
		node := @root;
		level := 0;
		
		each(char in word) {
			next := node->GetChild(char);
			if(next = Nil) {
				level += 1;
				node := node->SetChild(char, level);
			}
			else {
				node := next;
			};
		};

		if(node <> @root) {
			node->SetTerminal();
		};
		
		return level;
	}
}

class Node {
	@value : Char;
	@children : Node[];
	@level : Int;
	@is_term : Bool;

	New() {
		@value := '\0';
		@level := 0;
		@is_term := false;

		@children := Node->New[0x100];
	}

	New(value : Char, level : Int) {
		@value := value;
		@level := level;
		@is_term := false;

		@children := Node->New[0x100];
	}

	method : public : IsTerminal() ~ Bool {
		return @is_term;
	}

	method : public : SetTerminal() ~ Nil {
		@is_term := true;
	}

	method : public : GetValue() ~ Char {
		return @value;
	}

	method : public : GetChild(value : Char) ~ Node {
		index := value->As(Int);
value->PrintLine();		
index->PrintLine();		
		return @children[index];
	}

	method : public : SetChild(value : Char, level : Int) ~ Node {
		index := value->As(Int);
value->PrintLine();		
index->PrintLine();		
		node := Node->New(value, level);
		@children[index] := node;

		return node;
	}
}
class Test {
	function : Main(args : System.String[]) ~ Nil {
		t := Trie->New();
		
		t->Insert("hello")->PrintLine();
		t->Insert("hella")->PrintLine();
		t->Insert("hey")->PrintLine();
		t->Insert("neo soul")->PrintLine();
		t->Insert("neo")->PrintLine();
		t->Insert("neo punk")->PrintLine();
		t->Insert("beebop")->PrintLine();
		t->Insert("hi")->PrintLine();
		t->Insert("dog")->PrintLine();
		t->Insert("heha")->PrintLine();

#		t->Has("hella")->PrintLine();
		t->Has("hey")->PrintLine();
		t->Has("neo")->PrintLine();
		t->Has("neo soul")->PrintLine();
		t->Has("he ")->PrintLine();
#		t->Has("dog")->PrintLine();
#		t->Has("cat")->PrintLine();
#		t->Has("hella")->PrintLine();

		t->Match("neo")->Size()->PrintLine();
		t->Insert("he")->PrintLine();

		t->Has("hello")->PrintLine();
		t->Has("hella")->PrintLine();
		t->Has("he")->PrintLine();
	}
}

class Trie {
	@root : Node;

	New() {
		@root := Node->New();
	}

	method : public : Has(word : String) ~ Bool {
		match := Get(word);
		if(match <> Nil) {
			return match->HasWord();
		};

		return false;
	}

	method : public : Delete(word : String) ~ Bool {
		match := Get(word);
		if(match <> Nil & match->HasWord()) {
			parent := match->GetParent();
			if(parent <> Nil) {
				parent->Delete(match->GetParentIndex());
				return true;
			}
		};

		return false;
	}

	method : public : Match(word : String) ~ Collection.Vector<String> {
		matches := Collection.Vector->New()<String>;

		Match(word, @root, matches);

		return matches;
	}

	method : native : Match(word : String, node : Node, matches : Collection.Vector<String>) ~ Nil {
		if(node <> Nil) {
			children := node->GetChildren();
			each(child in children) {
				if(child <> Nil & child->HasWord()) {
					check := child->GetWord();
					if(check->StartsWith(word)) {
						matches->AddBack(check);
					};
				};

				Match(word, child, matches);
			};
		};
	}

	method : Get(word : String) ~ Node {
		node := @root;

		each(char in word) {
			next := node->GetChild(char);
			if(next <> Nil) {
				node := next;
			}
			else {
				return Nil;
			};
		};

		return node;
	}

	method : public : Insert(word : String) ~ Int {
		node := @root;
		level := 0;
		
		each(char in word) {
			next := node->GetChild(char);
			if(next = Nil) {
				level += 1;
				node := node->SetChild(char, level);
			}
			else {
				node := next;
			};
		};

		if(node <> @root) {
			node->SetWord(word);
		};
		
		return level;
	}
}

class Node {
	@value : Char;
	@children : Node[];
	@parent : Node;
	@parent_index : Int;
	@level : Int;
	@word : String;

	New() {
		@value := '\0';
		@level := 0;
		@parent_index := -1;

		@children := Node->New[0x100];
	}

	New(value : Char, level : Int, parent : Node, parent_index : Int) {
		@value := value;
		@level := level;
		@parent := parent;
		@parent_index := parent_index;

		@children := Node->New[0x100];
	}

	method : public : GetParent() ~ Node {
		return @parent;
	}

	method : public : GetParentIndex() ~ Int {
		return @parent_index;
	}

	method : public : HasWord() ~ Bool {
		return @word <> Nil;
	}

	method : public : Delete(index : Int) ~ Nil {
		# TODO: to save memory delete upwards
		@children[index] := Nil;
	}

	method : public : SetWord(word : String) ~ Nil {
		@word := word;
	}

	method : public : GetWord() ~ String {
		return @word;
	}

	method : public : GetValue() ~ Char {
		return @value;
	}

	method : public : GetChildren() ~ Node[] {
		return @children;
	}

	method : public : GetChild(value : Char) ~ Node {
		return @children[value->ToInt()];
	}

	method : public : SetChild(value : Char, level : Int) ~ Node {
		index := value->ToInt();
		node := Node->New(value, level, @self, index);
		@children[index] := node;
		
		return node;
	}
}
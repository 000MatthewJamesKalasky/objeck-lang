use Collection, System.ML;

class Test {
	function : Main(args : String[]) ~ Nil {
		records := Collection.Vector->New()<FloatArrayRef>;

		records->AddBack(FloatArrayRef->New([4.630661091, 0.273172151]));
		records->AddBack(FloatArrayRef->New([3.294183889, 0.238657466]));
		records->AddBack(FloatArrayRef->New([3.259868339, 2.70686245]));
		records->AddBack(FloatArrayRef->New([0.599600086, 1.574186244]));
		records->AddBack(FloatArrayRef->New([2.57661993, 2.439620108]));
		records->AddBack(FloatArrayRef->New([0.617859349, 1.293604038]));
		records->AddBack(FloatArrayRef->New([0.017058331, 1.299019123]));
		records->AddBack(FloatArrayRef->New([0.707845726, 0.779982614]));
		records->AddBack(FloatArrayRef->New([2.976880625, 0.711539453]));
		records->AddBack(FloatArrayRef->New([1.833944917, 2.21770335]));
		records->AddBack(FloatArrayRef->New([2.248704042, 1.959432065]));
		records->AddBack(FloatArrayRef->New([0.989428986, 2.292917219]));
		records->AddBack(FloatArrayRef->New([0.526729622, 1.035778874]));
		records->AddBack(FloatArrayRef->New([3.106092447, 0.979084554]));
		records->AddBack(FloatArrayRef->New([4.146445763, 2.203953231]));
		records->AddBack(FloatArrayRef->New([4.970028276, 2.792718356]));
		records->AddBack(FloatArrayRef->New([0.75979761, 0.576588085]));
		records->AddBack(FloatArrayRef->New([3.986996554, 0.174550933]));
		records->AddBack(FloatArrayRef->New([2.529559856, 0.768782609]));
		records->AddBack(FloatArrayRef->New([2.242700362, 0.803561644]));
		records->AddBack(FloatArrayRef->New([6.828415664, 7.122137509]));
		records->AddBack(FloatArrayRef->New([9.641653211, 6.777776882]));
		records->AddBack(FloatArrayRef->New([6.739542308, 5.227940211]));
		records->AddBack(FloatArrayRef->New([8.765799788, 5.357179854]));
		records->AddBack(FloatArrayRef->New([7.344778338, 7.679642019]));
		records->AddBack(FloatArrayRef->New([8.320359624, 8.333819582]));
		records->AddBack(FloatArrayRef->New([8.619400489, 7.600154227]));
		records->AddBack(FloatArrayRef->New([9.283633476, 7.356470374]));
		records->AddBack(FloatArrayRef->New([6.613253092, 9.031024117]));
		records->AddBack(FloatArrayRef->New([9.721939752, 5.795700347]));
		records->AddBack(FloatArrayRef->New([9.695510139, 6.243181968]));
		records->AddBack(FloatArrayRef->New([9.315212392, 9.426574803]));
		records->AddBack(FloatArrayRef->New([7.376610876, 5.54214729]));
		records->AddBack(FloatArrayRef->New([8.104322655, 5.267025815]));
		records->AddBack(FloatArrayRef->New([6.673115267, 6.431542824]));
		records->AddBack(FloatArrayRef->New([9.15156289, 7.370649015]));
		records->AddBack(FloatArrayRef->New([9.028129333, 6.688342884]));
		records->AddBack(FloatArrayRef->New([7.076742431, 9.004565651]));
		records->AddBack(FloatArrayRef->New([6.895484372, 8.180143623]));
		records->AddBack(FloatArrayRef->New([6.854075736, 9.773896096]));
		records->AddBack(FloatArrayRef->New([3.876898572, 5.650388035]));
		records->AddBack(FloatArrayRef->New([3.840314646, 5.519829309]));
		records->AddBack(FloatArrayRef->New([2.166367561, 6.582947249]));
		records->AddBack(FloatArrayRef->New([4.169917903, 7.472864807]));
		records->AddBack(FloatArrayRef->New([4.076942974, 5.522013065]));
		records->AddBack(FloatArrayRef->New([3.059321866, 7.046428256]));
		records->AddBack(FloatArrayRef->New([5.342253002, 5.636332869]));
		records->AddBack(FloatArrayRef->New([4.992958579, 7.66839103]));
		records->AddBack(FloatArrayRef->New([4.578520424, 7.862373286]));
		records->AddBack(FloatArrayRef->New([2.600951159, 7.585005281]));
		records->AddBack(FloatArrayRef->New([3.880449192, 6.432683454]));
		records->AddBack(FloatArrayRef->New([3.095579248, 6.422594137]));
		records->AddBack(FloatArrayRef->New([5.143013689, 7.708963529]));
		records->AddBack(FloatArrayRef->New([2.521697712, 7.720467248]));
		records->AddBack(FloatArrayRef->New([3.119224407, 5.851893291]));
		records->AddBack(FloatArrayRef->New([2.935516403, 6.519488777]));
		records->AddBack(FloatArrayRef->New([4.811301301, 6.661315666]));
		records->AddBack(FloatArrayRef->New([2.628996713, 7.978085798]));
		records->AddBack(FloatArrayRef->New([2.775561022, 6.994395265]));
		
		records->AddBack(FloatArrayRef->New([2.726237503, 5.639834107]));
		
		labels := ["group-a","group-b", "group-c"];
		groups := KMeans->Group(labels, records, 2, 0.0, 10.0);
		groups->GetGroupNames()->ToString()->PrintLine();
		
		groups->GetDunnIndex()->PrintLine();

		each(group in groups) {
			group->GetName()->PrintLine();
			group->GetArrayValue(0)->PrintLine();
		}

#		group := groups->GetGroup("group-a");
#		group->ToString()->PrintLine();

		groups->ToString()->PrintLine();
		groups->GetDunnIndex()->PrintLine();

#~		
		num_groups := groups->Size();
		"number of groups: {$num_groups}\n---"->PrintLine();
		KMeans->DunnIndex(groups)->PrintLine();
~#		
	}
}
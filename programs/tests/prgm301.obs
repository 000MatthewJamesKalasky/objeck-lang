use Collection, System.ML;

class Test {
	function : Main(args : String[]) ~ Nil {
		records := Collection.Vector->New()<FloatArrayRef>;

		records->AddBack(FloatArrayRef->New([2.695210883,2.787840738]));
		records->AddBack(FloatArrayRef->New([3.428285798,2.950863431]));
		records->AddBack(FloatArrayRef->New([0.008369139,0.173793786]));
		records->AddBack(FloatArrayRef->New([3.802464, 2.576045693]));
		records->AddBack(FloatArrayRef->New([0.328642653, 0.303997614]));
		records->AddBack(FloatArrayRef->New([2.555114361, 1.64957485]));
		records->AddBack(FloatArrayRef->New([1.408538124, 1.613664038]));
		records->AddBack(FloatArrayRef->New([3.598549049, 2.08520789]));
		records->AddBack(FloatArrayRef->New([4.044115955, 0.022075234]));
		records->AddBack(FloatArrayRef->New([0.227628922, 2.930715128]));
		records->AddBack(FloatArrayRef->New([3.931034446, 2.959522452]));
		records->AddBack(FloatArrayRef->New([4.432318789, 0.909678666]));
		records->AddBack(FloatArrayRef->New([1.29642229, 2.600934813]));
		records->AddBack(FloatArrayRef->New([3.193039417, 2.674916569]));
		records->AddBack(FloatArrayRef->New([0.980654809, 2.965520682]));
		records->AddBack(FloatArrayRef->New([4.097314045, 0.252016081]));
		records->AddBack(FloatArrayRef->New([3.879501235, 2.491052652]));
		records->AddBack(FloatArrayRef->New([1.148439308, 0.901703764]));
		records->AddBack(FloatArrayRef->New([0.597675325, 2.015852277]));
		records->AddBack(FloatArrayRef->New([1.859574357, 2.437068978]));
		records->AddBack(FloatArrayRef->New([8.364845419, 8.93405213]));
		records->AddBack(FloatArrayRef->New([8.205696075, 9.399332374]));
		records->AddBack(FloatArrayRef->New([9.621137316, 9.708412843]));
		records->AddBack(FloatArrayRef->New([9.42342495, 6.514393314]));
		records->AddBack(FloatArrayRef->New([8.63828035, 8.412824267]));
		records->AddBack(FloatArrayRef->New([9.523457385, 5.61187466]));
		records->AddBack(FloatArrayRef->New([6.685731544, 8.693414753]));
		records->AddBack(FloatArrayRef->New([9.533431054, 7.72079605]));
		records->AddBack(FloatArrayRef->New([9.364553255, 5.566762061]));
		records->AddBack(FloatArrayRef->New([7.852161968, 7.363363454]));
		records->AddBack(FloatArrayRef->New([6.665143351, 8.007187254]));
		records->AddBack(FloatArrayRef->New([7.073377504, 5.810392688]));
		records->AddBack(FloatArrayRef->New([8.803453501, 7.464624012]));
		records->AddBack(FloatArrayRef->New([8.822184142, 8.088973221]));
		records->AddBack(FloatArrayRef->New([6.741415307, 6.576843637]));
		records->AddBack(FloatArrayRef->New([7.794584577, 9.116905195]));
		records->AddBack(FloatArrayRef->New([8.356509732, 7.56304879]));
		records->AddBack(FloatArrayRef->New([8.554218765, 6.023239265]));
		records->AddBack(FloatArrayRef->New([7.904391858, 7.324224127]));
		records->AddBack(FloatArrayRef->New([8.314547457, 7.299442579]));
		records->AddBack(FloatArrayRef->New([4.669243976, 7.26565424]));
		records->AddBack(FloatArrayRef->New([4.015789134, 5.667390665]));
		records->AddBack(FloatArrayRef->New([4.813263144, 5.624882161]));
		records->AddBack(FloatArrayRef->New([2.776847891, 7.898379951]));
		records->AddBack(FloatArrayRef->New([5.487965446, 6.65114796]));
		records->AddBack(FloatArrayRef->New([3.947041401, 7.011743439]));
		records->AddBack(FloatArrayRef->New([4.085820524, 7.071774192]));
		records->AddBack(FloatArrayRef->New([4.896652474, 7.388370893]));
		records->AddBack(FloatArrayRef->New([2.647279978, 6.531884833]));
		records->AddBack(FloatArrayRef->New([4.999567353, 6.030278357]));
		records->AddBack(FloatArrayRef->New([2.70166696, 7.594188638]));
		records->AddBack(FloatArrayRef->New([4.26683883, 7.789487557]));
		records->AddBack(FloatArrayRef->New([2.011146896, 6.465427039]));
		records->AddBack(FloatArrayRef->New([2.615213199, 7.730712183]));
		records->AddBack(FloatArrayRef->New([5.063821411, 6.751736872]));
		records->AddBack(FloatArrayRef->New([3.890032567, 7.512985646]));
		records->AddBack(FloatArrayRef->New([3.825663397, 7.968315188]));
		records->AddBack(FloatArrayRef->New([4.397583514, 6.900391011]));
		records->AddBack(FloatArrayRef->New([2.195769351, 5.652303793]));
		records->AddBack(FloatArrayRef->New([4.099397644, 6.081013545]));
		
		labels := ["group-a","group-b", "group-c"];
		groups := KMeans->Group(labels, records, 2, 0.0, 10.0);
		groups->GetGroupNames()->ToString()->PrintLine();
		
		each(group in groups) {
			group->GetName()->PrintLine();
			group->GetArrayValue(0)->PrintLine();
		};

		groups->ToString()->PrintLine();
		groups->GetDunnIndex()->PrintLine();

#~		
		num_groups := groups->Size();
		"number of groups: {$num_groups}\n---"->PrintLine();
		KMeans->DunnIndex(groups)->PrintLine();
~#		
	}
}
#~~
Credit: Learner1067, https://medium.com/@nirmal1067/java-k-mean-clustering-with-math-4077a6e2b6c0
~~#

use Collection;

class KMeans {
	@debug : static : Bool;

	function : Main(args : String[]) ~ Nil {
		data := Vector->New()<FloatArrayRef>;

		data->AddBack(FloatArrayRef->New([0.38615586, 1.214427208]));
		data->AddBack(FloatArrayRef->New([1.718464173, 3.372883202]));
		data->AddBack(FloatArrayRef->New([1.584066635, 9.475994705]));
		data->AddBack(FloatArrayRef->New([7.163115086, 3.790681535]));
		data->AddBack(FloatArrayRef->New([3.442126649, 1.697612421]));
		data->AddBack(FloatArrayRef->New([2.284682944, 1.737259037]));
		data->AddBack(FloatArrayRef->New([4.421239156, 7.947645822]));
		data->AddBack(FloatArrayRef->New([0.412965248, 9.610534599]));
		data->AddBack(FloatArrayRef->New([7.833552317, 7.483994114]));
		data->AddBack(FloatArrayRef->New([1.513004878, 7.382620369]));
		data->AddBack(FloatArrayRef->New([3.607487753, 5.005536167]));
		data->AddBack(FloatArrayRef->New([3.384052126, 3.064628698]));
		data->AddBack(FloatArrayRef->New([2.13966849, 8.265686125]));
		data->AddBack(FloatArrayRef->New([4.996348732, 4.698026935]));
		data->AddBack(FloatArrayRef->New([4.018244149, 4.710124032]));
		data->AddBack(FloatArrayRef->New([2.125462682, 3.958296964]));
		data->AddBack(FloatArrayRef->New([5.51003858, 4.950951249]));
		data->AddBack(FloatArrayRef->New([3.148218579, 5.412938048]));
		data->AddBack(FloatArrayRef->New([5.809705114, 5.95242922]));
		data->AddBack(FloatArrayRef->New([6.690433556, 7.809409341]));
		data->AddBack(FloatArrayRef->New([3.510805088, 0.737320193]));
		data->AddBack(FloatArrayRef->New([3.973897423, 8.047290782]));
		data->AddBack(FloatArrayRef->New([7.377464414, 3.034343973]));
		data->AddBack(FloatArrayRef->New([3.403090072, 6.541184122]));
		data->AddBack(FloatArrayRef->New([7.991916152, 1.474549104]));
		data->AddBack(FloatArrayRef->New([2.927025216, 9.045466629]));
		data->AddBack(FloatArrayRef->New([9.677901811, 3.044481052]));
		data->AddBack(FloatArrayRef->New([2.103293937, 2.446154204]));
		data->AddBack(FloatArrayRef->New([9.340432657, 2.896683906]));
		data->AddBack(FloatArrayRef->New([7.674354483, 4.765027229]));
		data->AddBack(FloatArrayRef->New([8.656404515, 0.481807722]));

		
		group_labels := ["group-a","group-b"];

		@debug := true;
		Group(group_labels, data, 2, 0.0, 10.0);
	}

	function : native : Group(group_labels : String[], data : Vector<FloatArrayRef>, length : Int, min_value : Float, max_value : Float) ~ Nil {
		# https://www.ibm.com/support/pages/how-does-k-mean-cluster-node-select-initial-records-clustering
		centroids := InitalCentroids(group_labels, data, length, min_value, max_value);
		updated_centroids := FloatArrayRef->New[group_labels->Size()];
		
		groups := Hash->New()<String, Vector<FloatArrayRef>>;
		each(centroid_label in group_labels) {
			groups->Insert(centroid_label, Vector->New()<FloatArrayRef>);
		};

		iter := 0;
		has_changed := true;
		while(has_changed) {
#		each(z : 100) {
			if(@debug) {
				"=== {$iter} ==="->PrintLine();
				iter += 1;
			}

			each(datum in data) {
				shortest_index := -1;
				shortest_distance := Float->Inf();
				
				each(i : centroids) {
					centroid := centroids[i];

					distance := Distance(datum, centroid);
					if(distance <= shortest_distance) {
						shortest_distance := distance;
						shortest_index := i;
					}
				};

				nearest_centroid_label := group_labels[shortest_index];
				group := groups->Find(nearest_centroid_label)<FloatArrayRef>;
				group->AddBack(datum);
			};

			group_key_values := groups->GetKeyValues()<Pair<String, Vector<FloatArrayRef>>>;
			each(i : group_key_values) {
				group_key_value := group_key_values->Get(i);

				group_label := group_key_value->GetFirst();
				group := group_key_value->GetSecond();

				if(@debug) {
					group_size := group->Size();
					"label='{$group_label}', size={$group_size}: {$group}"->PrintLine();
				};

				updated_centroids[i] := Average(group, length);
			};

			has_changed := HasChanged(centroids, updated_centroids);
			if(has_changed) {
				# update
				centroids := updated_centroids;
				updated_centroids := FloatArrayRef->New[group_labels->Size()];

				each(centroid_label in group_labels) {
					if(groups->Remove(centroid_label)) {
						groups->Insert(centroid_label, Vector->New()<FloatArrayRef>);
					};
				};
			};
		};
	}

	function : InitalCentroids(group_labels : String[], data : Vector<FloatArrayRef>, length : Int, min_value : Float, max_value : Float) ~ FloatArrayRef[] {
		centroids := FloatArrayRef->New[group_labels->Size()];

		each(i : centroids) {
			random_values := Float->New[length];
			each(j : random_values) {
				random_values[j] := Float->Random(min_value + 0.001, max_value - 0.001);
			};
			centroids[i] := FloatArrayRef->New(random_values);
		};

		return centroids;
	}

	function : native : HasChanged(old_centroids : FloatArrayRef[], new_centroids : FloatArrayRef[]) ~ Bool {
		ok := false;
		each(i : old_centroids) {


			old_centroid_values := old_centroids[i]->Get();
			new_centroid_values := new_centroids[i]->Get();
			
			each(j : old_centroid_values) {
				old_centroid_value := old_centroid_values[j];
				new_centroid_value := new_centroid_values[j];

				ok := Float->Abs(old_centroid_value - new_centroid_value) = 0.0;
				if(<>ok) {
					return true;
				}
"{$old_centroid_value}, {$new_centroid_value}: unchanged={$ok}"->PrintLine();
			};
"---"->PrintLine();			
		};

"==="->PrintLine();			
		return false;
	}

	function : native : Average(group : Vector<FloatArrayRef>, length : Int) ~FloatArrayRef {
		average_values := Float->New[length];
		each(i : average_values) {
			sum := 0.0;
			each(array in group) {
				array_values := array->Get();
				sum += array_values[i];
			};
			avg := sum / group->Size()->As(Float);
			average_values[i] := avg;
		}

		return FloatArrayRef->New(average_values);
	}

	function : native : Distance(left : FloatArrayRef, right : FloatArrayRef) ~ Float {
		if(left = Nil | right = Nil) {
			return 0.0;
		};

		left_values := left->Get(); right_values := right->Get();
		if(left_values->Size() <> right_values->Size()) {
			return 0.0;
		};

		distance := 0.0;
        each(i : left_values) {
            distance += Float->Pow(left_values[i] - right_values[i], 2.0);
        };

        return distance->Sqrt();
	}

}
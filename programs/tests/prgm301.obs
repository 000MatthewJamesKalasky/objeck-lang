#~~
Credit: Learner1067, https://medium.com/@nirmal1067/java-k-mean-clustering-with-math-4077a6e2b6c0
~~#

use Collection;

class KMeans {
	@debug : static : Bool;

	function : Main(args : String[]) ~ Nil {
		data := Vector->New()<FloatArrayRef>;
		data->AddBack(FloatArrayRef->New([2.541629, 2.574507]));
		data->AddBack(FloatArrayRef->New([7.616112, 6.131947]));
		data->AddBack(FloatArrayRef->New([8.020559, 4.51573]));
		data->AddBack(FloatArrayRef->New([7.190278, 9.831064]));
		data->AddBack(FloatArrayRef->New([2.40224, 3.81235]));
		data->AddBack(FloatArrayRef->New([6.603512, 7.846965]));
		data->AddBack(FloatArrayRef->New([3.971004, 8.486739]));
		data->AddBack(FloatArrayRef->New([1.864852, 4.898962]));
		data->AddBack(FloatArrayRef->New([5.263243, 0.096651]));
		data->AddBack(FloatArrayRef->New([5.428364, 5.170225]));
		data->AddBack(FloatArrayRef->New([0.090172, 6.369015]));
		data->AddBack(FloatArrayRef->New([0.6716, 1.170027]));
		data->AddBack(FloatArrayRef->New([1.519242, 4.482188]));
		data->AddBack(FloatArrayRef->New([5.263285, 0.684887]));
		data->AddBack(FloatArrayRef->New([8.8238, 0.295231]));
		
		group_labels := ["group-a","group-b"];

		@debug := true;
		Group(group_labels, data, 2, 0.0, 10.0);
	}

	function : native : Group(group_labels : String[], data : Vector<FloatArrayRef>, length : Int, min_value : Float, max_value : Float) ~ Nil {
		# https://www.ibm.com/support/pages/how-does-k-mean-cluster-node-select-initial-records-clustering
		centroids := FloatArrayRef->New[group_labels->Size()];
		centroids[0] := FloatArrayRef->New([0.5, 5.0]);
		centroids[1] := FloatArrayRef->New([9.5, 5.0]);
#~		
		each(i : centroids) {
			random_values := Float->New[length];
			each(j : random_values) {
				random_values[j] := Float->Random(min_value, max_value);
			};
			centroids[i] := FloatArrayRef->New(random_values);
		};
~#		
		updated_centroids := FloatArrayRef->New[group_labels->Size()];
		
		groups := Hash->New()<String, Vector<FloatArrayRef>>;
		each(centroid_label in group_labels) {
			groups->Insert(centroid_label, Vector->New()<FloatArrayRef>);
		};

		iter := 0;
		has_changed := true;
		while(has_changed) {
			if(@debug) {
				"=== {$iter} ==="->PrintLine();
				iter += 1;
			}

			each(datum in data) {
				shortest_index := -1;
				shortest_distance := Float->Inf();
				
				each(i : centroids) {
					centroid := centroids[i];

					distance := Distance(datum, centroid);
					if(distance <= shortest_distance) {
						shortest_distance := distance;
						shortest_index := i;
					}
				};

				nearest_centroid_label := group_labels[shortest_index];
				group := groups->Find(nearest_centroid_label)<FloatArrayRef>;
				group->AddBack(datum);
			};

			group_key_values := groups->GetKeyValues()<Pair<String, Vector<FloatArrayRef>>>;
			each(i : group_key_values) {
				group_key_value := group_key_values->Get(i);

				group_label := group_key_value->GetFirst();
				group := group_key_value->GetSecond();

				if(@debug) {
					group_size := group->Size();
					"label='{$group_label}', size={$group_size}: {$group}"->PrintLine();
				};

				updated_centroids[i] := Average(group, length);
			};

			has_changed := HasChanged(centroids, updated_centroids);
			if(has_changed) {
				# update
				centroids := updated_centroids;
				updated_centroids := FloatArrayRef->New[group_labels->Size()];

				each(centroid_label in group_labels) {
					if(groups->Remove(centroid_label)) {
						groups->Insert(centroid_label, Vector->New()<FloatArrayRef>);
					};
				};
			};
		};
	}

	function : native : HasChanged(old_centroids : FloatArrayRef[], new_centroids : FloatArrayRef[]) ~ Bool {
		ok := false;
		each(i : old_centroids) {


			old_centroid_values := old_centroids[i]->Get();
			new_centroid_values := new_centroids[i]->Get();
			
			each(j : old_centroid_values) {
				old_centroid_value := old_centroid_values[j];
				new_centroid_value := new_centroid_values[j];

				ok := Float->Abs(old_centroid_value - new_centroid_value) < 0.001;
				if(<>ok) {
					return true;
				}
"{$old_centroid_value}, {$new_centroid_value}: unchanged={$ok}"->PrintLine();
			};
"---"->PrintLine();			
		};

"==="->PrintLine();			
		return false;
	}

	function : native : Average(group : Vector<FloatArrayRef>, length : Int) ~FloatArrayRef {
		average_values := Float->New[length];
		each(i : average_values) {
			sum := 0.0;
			each(array in group) {
				array_values := array->Get();
				sum += array_values[i];
			};
			avg := sum / group->Size()->As(Float);
			average_values[i] := avg;
		}

		return FloatArrayRef->New(average_values);
	}

	function : native : Distance(left : FloatArrayRef, right : FloatArrayRef) ~ Float {
		if(left = Nil | right = Nil) {
			return 0.0;
		};

		left_values := left->Get(); right_values := right->Get();
		if(left_values->Size() <> right_values->Size()) {
			return 0.0;
		};

		distance := 0.0;
        each(i : left_values) {
            distance += Float->Pow(left_values[i] - right_values[i], 2.0);
        };

        return distance->Sqrt();
	}

}
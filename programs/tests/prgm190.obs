use Collection.Generic;
use System.IO.Filesystem;

class Test {
    function : Main(args : String[]) ~ Nil {
        ParseMultipartEncoding(FileReader->ReadBinaryFile("data/mime.dat"));
    }

    function : ParseMultipartEncoding(encoded : Byte[]) ~ Nil {
        marker := ReadLine(0, encoded);
        if(marker <> Nil) {
marker->ToString()->PrintLine();
            
            boundry_indexes := Byte->FindAll(encoded, marker);
            each(i : boundry_indexes) {
                boundry_index := boundry_indexes[i];
                match_space := MatchSpace(boundry_index + marker->Size(), encoded);
                match_closing := MatchClosing(boundry_index + marker->Size(), encoded);
"{$i}: match_space={$match_space}, match_closing={$match_closing}"->PrintLine();
                "---"->PrintLine();
            };
        };
    }

    function : ReadLine(offset : Int, encoded : Byte[]) ~ Byte[] {
        pos := -1;
        i := offset;
        while(pos < 0 & i < encoded->Size()) {
            byte := encoded[i++];
            if(byte = '\r' | byte = '\n') {
                pos := i - 1;
            };
        };

        line := Byte->New[pos];
        if(Runtime->Copy(line, 0, encoded, 0, pos)) {
            return line;
        };

        return Nil;
    }


    function : MatchSpace(offset : Int, encoded : Byte[]) ~ Bool {
        if(offset + 1 < encoded->Size()) {
            return encoded[offset] = '\r' & encoded[offset + 1] = '\n';
        };

        return false;
    }

    function : MatchClosing(offset : Int, encoded : Byte[]) ~ Bool {
        if(offset + 1 < encoded->Size()) {
            return encoded[offset] = '-' & encoded[offset + 1] = '-';
        };

        return false;
    }

    function : ParseUrlEncoding(encoded : String) ~ Map<String, String> {
        decodings := Map->New()<String, String>;

        pairs :=  encoded->Split('&');
        if(pairs <> Nil) {
            each(i : pairs) {
                key_value := pairs[i]->Split('=');
                if(key_value <> Nil & key_value->Size() = 2) {
                    marker := Web.HTTP.Url->Decode(key_value[0])->ReplaceAll('+', ' ');
                    value := Web.HTTP.Url->Decode(key_value[1])->ReplaceAll('+', ' ');
                    decodings->Insert(marker, value);
                };
            };
        };

        return decodings;
    }
}
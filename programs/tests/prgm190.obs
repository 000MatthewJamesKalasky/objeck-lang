use Collection.Generic;
use System.IO.Filesystem;

class Test {
    function : Main(args : String[]) ~ Nil {
        ParseMultipartEncoding(FileReader->ReadBinaryFile("data/mime.dat"));
    }

    function : ParseMultipartEncoding(encoded : Byte[]) ~ Nil {
        offset := -1;
        i := 0;
        while(offset < 0 & i < encoded->Size()) {
            byte := encoded[i++];
            if(byte = '\r' | byte = '\n') {
                offset := i - 1;
            };
        };

        boundary_marker := Byte->New[offset];
        if(Runtime->Copy(boundary_marker, 0, encoded, 0, offset)) {
            boundaries := Byte->FindAll(encoded, boundary_marker);
            each(i : boundaries) {
                boundaries[i]->PrintLine();
            };
        };
    }

    function : ParseUrlEncoding(encoded : String) ~ Map<String, String> {
        decodings := Map->New()<String, String>;

        pairs :=  encoded->Split('&');
        if(pairs <> Nil) {
            each(i : pairs) {
                key_value := pairs[i]->Split('=');
                if(key_value <> Nil & key_value->Size() = 2) {
                    marker := Web.HTTP.Url->Decode(key_value[0])->ReplaceAll('+', ' ');
                    value := Web.HTTP.Url->Decode(key_value[1])->ReplaceAll('+', ' ');
                    decodings->Insert(marker, value);
                };
            };
        };

        return decodings;
    }
}
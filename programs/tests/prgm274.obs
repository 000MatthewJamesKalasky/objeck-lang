#TODO: optimize

class StreamParser {
    enum Type {
        NUMBER,
        STRING,
        BOOLEAN,
        ARRAY,
        OBJECT,
        NULL,
        UNKNOWN
    }

    function : Main(args : String[]) ~ Nil {
        if(args->Size() = 1) {
#            stream := System.IO.Filesystem.FileReader->ReadFile(args[0]);

            stream := "{\"count\": 3, \"results\": [\"a\", \"b\", \"c\"]}"
            ParseType(stream);
        }
    }

    function : native : ParseType(stream : String) ~ StreamParser->Type {
        start_pos := 0;
        end_pos := stream->Size() - 1;

        # TODO
        # 1. rework to capture indices/offsets, first
        # 2. parse values, looking for match
        # 3. if a match is found continue to parse the next element
        
        while(start_pos <= end_pos) {
            # ignore white space
            while(stream->Get(start_pos) = ' ' | stream->Get(start_pos) = '\t') {
                start_pos += 1;
            }
            start_char := stream->Get(start_pos);
            
            while(stream->Get(end_pos) = ' ' | stream->Get(end_pos) = '\t') {
                end_pos -= 1;
            }
            end_char := stream->Get(end_pos);

            if(start_char = '{' & end_char = '}') {
                # TODO
                # 1.  parse this level
                # 2. go in with index offsets
                "'{$start_char}' => '{$end_char}'"->PrintLine();
            };
        }
            

        return StreamParser->Type->UNKNOWN;
    }
}
use Query.RegEx;
use Collection;

class StreamParser {
    enum Type {
        NUMBER,
        STRING,
        BOOLEAN,
        ARRAY,
        OBJECT,
        NULL,
        UNKNOWN
    }

    function : Main(args : String[]) ~ Nil {
        if(args->Size() = 1) {
#            stream := System.IO.Filesystem.FileReader->ReadFile(args[0]);

            stream := "{\"count\": 3, \"results\": [\"a\", \"b\", \"c\"]}"
            ParseType(stream);
        }
    }

    function : native : ParseType(stream : String) ~ StreamParser->Type {
        start_pos := 0;
        last_pos := stream->Size() - 1;
        
        while(start_pos < last_pos) {
            if(stream->Get(start_pos) = '{' | stream->Get(start_pos) = '[') {
                start_pos += 1;
# start_pos->PrintLine();                
            };

            if(stream->Get(last_pos) = '}' | stream->Get(last_pos) = ']') {
# last_pos->PrintLine();                
                last_pos -= 1;
            };

            if(stream->Get(start_pos + 1) <> '"') {
                end := start_pos + 1;
                while(stream->Get(end) <> '"') {
                    end += 1;
                };
stream->SubString(start_pos, end - start_pos + 1)->PrintLine();
                start_pos += end + 1;
            };

            # substring... tbd

stream->SubString(start_pos, last_pos - start_pos + 1)->PrintLine();
# ParseType(stream->SubString(start_pos, last_pos - start_pos + 1));
        };

        return StreamParser->Type->UNKNOWN;
    }
}
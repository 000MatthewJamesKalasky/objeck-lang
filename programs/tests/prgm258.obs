class Test {
	function : Main(args : String[]) ~ Nil {
		matrix := [
			[51.0,  167.0]
			[62.0, 182.0]
			[69.0, 176.0]
			[64.0, 173.0]
			[65.0, 172.0]
			[56.0, 174.0]
			[58.0, 169.0]
			[57.0, 173.0]
			[55.0, 170.0]];
		test := [57.0, 170.0];
		k := 3;

		"--- Test ---"->PrintLine();
		test_str := test->ToString();
		"k={$k}, query={$test_str}"->PrintLine()
		
		"\n--- Data ---"->PrintLine();
		dims := matrix->Size();
		rows := dims[0];
		cols := dims[1];

		results := Collection.CompareVector->New()<Result>;
		row := Float->New[cols];	
		each(i : rows) {
			each(j : cols) {
				row[j] := matrix[i,j];
			};
			row_str := row->ToString();
			dist := EuclideanDistance(row, test);
			results->AddBack(Result->New(dist, i));
			"{$row_str}: {$dist}"->PrintLine();
		};

		"\n--- K-Results ---"->PrintLine();

		results->Sort();
		each(i : k) {
			result := results->Get(i);
			"{$result}"->PrintLine();
		};
	}

	function : native : EuclideanDistance(a : Float[], b : Float[]) ~ Float {
		if(a->Size() <> b->Size()) {
			return 0.0;
		};

		total := 0.0;
		
		each(i : a) {
			diff := b[i] - a[i];
			total += diff * diff;
		};

		return total->Sqrt();
	}
}

class Result implements Compare {
	@dist : Float;
	@row : Int;
#	@category : String;

	New(dist : Float, row : Int) {
		@dist := dist;
		@row := row;
	}

	method : public : Compare(rhs:System.Compare) ~ Int {
		if(@self->GetClassID() <> rhs->GetClassID()) {
			return -1;
		};
		
		right : Result := rhs->As(Result);
		return Float->Compare(right->GetDistance(), @dist)
	}

	method : public : HashID() ~ Int {
		return 0;
	}

	method : public : GetDistance() ~ Int {
		return @dist;
	}

	method : public : GetRow() ~ Int {
		return @row;
	}

	method : public : ToString() ~ String {
		return "{$@row}={$@dist}";
	}
}
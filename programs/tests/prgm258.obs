class Test {
	function : Main(args : String[]) ~ Nil {
		Float->Compare(0.50, 0.45)->PrintLine();
		Float->Compare(0.45, 0.50)->PrintLine();
		Float->Compare(0.45, 0.45)->PrintLine();

		Int->Compare(45, 45)->PrintLine();


		k := 3;

		matrix := [
			[51.0,  167.0]
			[58.0, 169.0]
			[62.0, 182.0]
			[69.0, 176.0]
			[64.0, 173.0]
			[65.0, 172.0]
			[56.0, 174.0]
			[57.0, 173.0]
			[55.0, 170.0]];

		categories := [
			"underweight", 
			"normal", 
			"normal", 
			"normal", 
			"normal", 
			"underweight", 
			"normal", 
			"normal", 
			"normal"];

		query := [57.0, 170.0];

		"--- Query ---"->PrintLine();
		query_str := query->ToString();
		"k={$k}, query={$query_str}"->PrintLine()
		
		"\n--- Data ---"->PrintLine();
		dims := matrix->Size();
		rows := dims[0];
		cols := dims[1];

		results := Collection.CompareVector->New()<Result>;
		row := Float->New[cols];	
		each(i : rows) {
			each(j : cols) {
				row[j] := matrix[i,j];
			};
			row_str := row->ToString();
			dist := EuclideanDistance(row, query);
			results->AddBack(Result->New(dist, i, categories[i]));
			"{$row_str}: {$dist}"->PrintLine();
		};

		"\n--- K-Results ---"->PrintLine();

		results->Sort();
		each(i : results) {
			result := results->Get(i);
			"{$result}"->PrintLine();
		};
	}

	function : native : EuclideanDistance(a : Float[], b : Float[]) ~ Float {
		if(a->Size() <> b->Size()) {
			return 0.0;
		};

		total := 0.0;
		
		each(i : a) {
			diff := b[i] - a[i];
			total += diff * diff;
		};

		return total->Sqrt();
	}
}

class Result implements Compare {
	@dist : Float;
	@row : Int;
	@cat : String;

	New(dist : Float, row : Int, cat : String) {
		@dist := dist;
		@row := row;
		@cat := cat;
	}

	method : public : Compare(rhs:System.Compare) ~ Int {
		if(@self->GetClassID() <> rhs->GetClassID()) {
			return -1;
		};
		right : Result := rhs->As(Result);
		bar := right->GetDistance();
		# foo := Float->Compare(bar, @dist);

		if(bar < @dist) {
			return -1;
		}
		else if(bar > @dist) {
			return 1;
		};

		return 0;
	}

	method : public : HashID() ~ Int {
		return 0;
	}

	method : public : GetDistance() ~ Float {
		return @dist;
	}

	method : public : GetRow() ~ Int {
		return @row;
	}

	method : public : GetCategory() ~ String {
		return @cat;
	}

	method : public : ToString() ~ String {
		return "{$@row}: knn={$@dist}, category={$@cat}";
	}
}
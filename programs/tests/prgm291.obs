class HeapTest { 
    function : Main(args : String[]) ~ Nil {
        (Int->NaN() + 1)->PrintLine();
        (Int->NaN() - 1)->PrintLine();
        # assume not objects will allocted pointers with pointers to 1 or -1

        h := Heap->New(11, Heap->Order->MAX);
        h->Insert(13);
        h->Insert(2);
        h->Insert(1);
        h->Insert(5);
        h->Insert(33);
        h->Insert(3);
        
        Standard->Print(h->Pop())->PrintLine();
        Standard->Print(h->Pop())->PrintLine();
        Standard->Print(h->Pop())->PrintLine();
        Standard->Print(h->Pop())->PrintLine();
    } 
} 

#~
Min/Max Heap
~#
class Heap { 
    @heap : Int[];
    @max : Int;
    @size : Int;
    @order : Heap->Order;
    
    #~
    Sort order
    ~#
    enum Order {
        MIN,
        MAX
    }

    #~
    Constructor
    @param max maximum size of the heap
    @param order sort order
    ~#
    New(max : Int, order : Heap->Order) { 
        @max := max;
        @order := order;
        @heap := Int->New[@max];
    } 
      
    #~
    Add a new key the heap
    @param key key to insert
    @return true if successful, false otherwise
    ~#
    method : public : Insert(key : Int) ~ Bool { 
        if(@size = @max) { 
            return false;
        } 
      
        # First insert the new key at the end  
        i := @size;
        @heap[i] := key;
        @size++;
          
        if(@order = Heap->Order->MIN) {
            while(i <> 0 & @heap[i] < @heap[GetParent(i)]) { 
                Swap(@heap, i, GetParent(i));
                i := GetParent(i);
            }
        }
        else {
            while(i <> 0 & @heap[i] > @heap[GetParent(i)]) { 
                Swap(@heap, i, GetParent(i));
                i := GetParent(i);
            }
        }

        return true;
    } 
    
    #~
    Shows the minimum value if sort order is MIN, other the maximum value
    @return minimum or maximum value
    ~#
    method : public : Peek() ~ Int { 
        return @heap[0];
    } 
     
    #~
    Pops the minimum value if sort order is MIN, other the maximum value
    @return minimum or maximum value
    ~#
    method : public : Pop() ~ Int { 
        if(@size <= 0) { 
            if(@order = Heap->Order->MIN) {
                return Int->MaxSize();
            }
            else {
                return Int->MaxSize();
            };
        };
  
        if(@size = 1) { 
            @size--;
            return @heap[0];
        };

        root := @heap[0];
        @heap[0] := @heap[@size - 1];
        @size--;
        Heapify(0);
  
        return root;
    } 

    #~
    Current size of the heap
    @return current heap size
    ~#
    method : public : Size() ~ Int {
        return @size;
    }

    #~
    Maximum size of the heap
    @return maximum heap size
    ~#
    method : public : Capacity() ~ Int {
        return @max;
    }

    #~
    Removes the given key value from the heap
    ~#
    method : public : Remove(key : Int) ~ Nil { 
        Decrease(key, Int->MinSize());
        Pop();
    }

    #~
    Update the heap value for a given array position
    @param key heap index
    @param value value to update
    ~#
    method : Update(key : Int, value : Int) ~ Nil { 
        if(@heap[key] = value) { 
            return;
        }

        if(@order = Heap->Order->MIN) {
            if(@heap[key] < value) { 
                Increase(key, value);
            } 
            else { 
                Decrease(key, value);
            };
        }
        else {
            if(@heap[key] > value) { 
                Decrease(key, value);
            } 
            else { 
                Increase(key, value);
            };
        };
    } 

    method : Swap(array : Int[], a : Int, b : Int) ~ Nil { 
        temp := array[a];
        array[a] := array[b];
        array[b] := temp;
    } 
          
    method : GetParent(key : Int) ~ Int { 
        return (key - 1) / 2;
    } 
      
    method : GetLeft(key : Int) ~ Int { 
        return 2 * key + 1;
    } 
      
    method : GetRight(key : Int) ~ Int { 
        return 2 * key + 2;
    } 
          
    method : Heapify(key : Int) ~ Nil { 
        left := GetLeft(key);
        right := GetRight(key);
  
        value := key;
        if(@order = Heap->Order->MIN) {
            if(left < @size & @heap[left] < @heap[value]) { 
                value := left;
            } 

            if(right < @size & @heap[right] < @heap[value]) { 
                value := right;
            } 
        }
        else {
            if(left < @size & @heap[left] > @heap[value]) { 
                value := left;
            } 

            if(right < @size & @heap[right] > @heap[value]) { 
                value := right;
            } 
        }
        
        if(value <> key) { 
            Swap(@heap, key, value);
            Heapify(value);
        } 
    } 
      
    method : Increase(key : Int, value : Int) ~ Nil { 
        @heap[key] := value;
        Heapify(key);
    }

    method : Decrease(key : Int, value : Int) ~ Nil { 
        @heap[key] := value;
  
        if(@order = Heap->Order->MIN) {
            while(key <> 0 & @heap[key] < @heap[GetParent(key)]) { 
                Swap(@heap, key, GetParent(key));
                key := GetParent(key);
            } 
        }
        else {
            while(key <> 0 & @heap[key] > @heap[GetParent(key)]) { 
                Swap(@heap, key, GetParent(key));
                key := GetParent(key);
            } 
        }
    }
}
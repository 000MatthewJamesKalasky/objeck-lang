use Data.JSON;
use Collection;

bundle JsonRpc { 
	class Server {
		@funcs : Map<String, Func2Ref<JsonElement, JsonElement>>;

		New(funcs : Map<String, Func2Ref<JsonElement, JsonElement>>) {
			@funcs := funcs;			
		}

		function : Main(args : String[]) ~ Nil {
			# initialize server
			funcs := Map->New()<String, Func2Ref<JsonElement, JsonElement>>;

			func_ref := Func2Ref->New(ServerImpl->Bear(JsonElement) ~ JsonElement)<JsonElement, JsonElement>;
			funcs->Insert("bear", func_ref);

			func_ref := Func2Ref->New(ServerImpl->Rabbit(JsonElement) ~ JsonElement)<JsonElement, JsonElement>;
			funcs->Insert("rabbit", func_ref);

			func_ref := Func2Ref->New(ServerImpl->Squirrel(JsonElement) ~ JsonElement)<JsonElement, JsonElement>;
			funcs->Insert("squirrel", Nil);

			# decode client call
			server := Server->New(funcs);
			response := server->Unmarshal("rabbit", "[3,2,1]");
			if(response <> Nil & response->IsOk()) {
				response->ToString()->PrintLine();
			};
		}

		method : Unmarshal(func_name : String,  str_params: String) ~ Result {
			params := JsonParser->TextToElement(str_params);
			if(params = Nil) {
				# parse error
				return Result->New(-32700, "Parse error", Nil);
			};

			return Unmarshal(func_name, params)
		}

		method : Unmarshal(func_name : String,  json_params: JsonElement) ~ Result {
			if(func_name = Nil) {
				# method not found
				return Result->New(-32601, "Method not found", Nil);
			};

			if(json_params = Nil) {
				# method not found
				return Result->New(-32602, "Invalid params", Nil);
			};

			func_ref := @funcs->Find(func_name)<JsonElement, JsonElement>;
			if(func_ref = Nil) {
				# method not found
				return Result->New(-32601, "Method not found", Nil);
			};

			func := func_ref->Get();
			return Result->New(0, func(json_params));
		}
	}

	class Result {
		@code : Int;
		@err_msg : String;
		@result : JsonElement;

		New(code : Int, result : JsonElement) {
			@code := code;
			@result := result;
		}

		New(code : Int, err_msg : String, result : JsonElement) {
			@code := code;
			@err_msg := err_msg;
			@result := result;
		}

		method : public : GetCode() ~ Int {
			return @code;
		}

		method : public : GetErrorMessage() ~ String {
			return @err_msg;
		}

		method : public : SetErrorMessage(err_msg : String) ~ Nil {
			@err_msg := err_msg;
		}

		method : public : IsOk() ~ Bool {
			return @code = 0 & @err_msg = Nil;
		}

		method : public : GetResult() ~ JsonElement {
			return @result;
		}

		method : public : ToString() ~ String {
			buffer := "";

			buffer += "code=";
			buffer += @code;
			buffer += ", result=";
			buffer += @result->ToString();

			return buffer;
		}
	}
}

class ServerImpl {
	function : Bear(params: JsonElement) ~ JsonElement {
		"bear"->PrintLine();
		return Nil;
	}

	function : Rabbit(params: JsonElement) ~ JsonElement {
		params->ToString()->PrintLine();
		return JsonParser->TextToElement("[6, 5, 4]");
	}

	function : Squirrel(params: JsonElement) ~ JsonElement {
		"squirrel"->PrintLine();
		return Nil;
	}
}
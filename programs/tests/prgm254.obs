use System.ML;

class Test {
	function : Main(args : String[]) ~ Nil {
		data := BoolMatrixRef->New([
			[true, false, true]
			[true, false, true]
			[true, true, true]
			[true, true, true]
			[true, true, true]
			[true, true, true]
			[true, true, true]
			[true, true, true]
			[false, true, true]
			[false, true, true]
			[true, true, false]
			[true, true, false]
			[false, true, false]
			[false, true, false]
			[false, true, false]
			[false, true, false]
			[true, false, true]
			[true, false, true]
			[true, true, true]
			[true, true, true]
			[true, true, true]
			[true, true, true]
			[true, true, true]
			[true, true, true]
			[false, true, true]
			[false, true, true]
			[true, true, false]
			[true, true, false]
			[false, true, false]
			[false, true, false]
			[false, true, false]
			[false, true, false]
			[false, false, false]
			[false, false, false]
			[false, false, false]
			[false, false, false]
			[true, true, true]
			[true, true, true]
			[true, true, true]
			[false, true, true]
			[false, true, true]
			[true, true, false]
			[true, true, false]
			[false, true, false]
			[false, true, false]
			[true, false, true]
			[true, false, true]
			[true, true, true]
			[true, true, true]
			[true, true, true]
			[false, false, false]
			[false, false, false]
			[false, false, false]
			[false, false, false]
			[true, true, true]
			[true, true, true]
			[true, true, true]
			[false, true, true]
			[false, true, true]
			[true, true, false]
			[true, true, false]
			[false, true, false]
			[false, true, false]
			[true, false, true]
			[true, false, true]
			[true, true, true]
			[true, true, true]
			[true, true, true]
		]);


		forest := RandomForest->New(5);
		forest->Train(data);
		result := forest->Query(data);

		data->Rows()->PrintLine();
		Bool->Rows(result)->PrintLine();
#~
		data := data->Bootstrap();

		split_data := data->Split(0.3);
		training_data := split_data[0];
		test_data := split_data[1];

		splits := DecisionTree->Train(training_data->Get());
		result := DecisionTree->Query(splits, test_data->Get());

		possible := result->Rows()->As(Float);
		acheived := DecisionTree->Matches(2, result)->As(Float);
		(acheived / possible)->PrintLine();
~#		
	}
}
use System.ML;

class Foo {
	function : Main(argv : String[]) ~ Nil {
		data := Bool->New[8,48]

		dims := data->Size();
		rows := dims[0];
		cols := dims[1];

		foo := 0.65; # same

		bar := 3;

		each(i : rows) {
			each(j : cols) {
				if(j = bar) {
					data[i, j] := true
				}
				else {
					data[i, j] := Float->Random() < foo;	
				}
			}
		}

		matrix := BoolMatrixRef->New(data)

		"---"->PrintLine()
		trials := 8;
		results := 0.0;
		each(i : trials) {
			bag := matrix->RandomBag()->Get()
			goal := bag->Columns()
			acheived := DecisionTree->Matches(bar, bag)
			results += DecisionTree->Gini(acheived, goal)->As(Float)
		}
		(trials / results)->PrintLine()

		"---"->PrintLine()
		trials := 8;
		results := 0.0;
		each(i : trials) {
			bag := matrix->RandomBag()->Get()
			goal := bag->Columns()
			acheived := DecisionTree->Matches(7, bag)
			results += DecisionTree->Gini(acheived, goal)->As(Float)
		}
		(trials / results)->PrintLine()
	}
}
use Collection;

class Test {
	function : Main(args : String[]) ~ Nil {
		"--- Positive ---"->PrintLine();
		positive := Map->New()<String, FloatRef>;
		positive->Insert("Dear", 8);
		positive->Insert("Friend", 5);
		positive->Insert("Lunch", 3);
		positive->Insert("Monday", 1);
		Foo(positive)->ToString()->PrintLine();

		"\n--- Negative ---"->PrintLine();
		positive := Map->New()<String, FloatRef>;
		positive->Insert("Dear", 2);
		positive->Insert("Friend", 1);
		positive->Insert("Lunch", 0);
		positive->Insert("Monday", 4);
		Foo(positive)->ToString()->PrintLine();
	}

	function : Foo(input : Map<String, FloatRef>) ~ Float[] {
		sum := 0.0;
		values := input->GetValues()<FloatRef>;
		each(value := values) {
			sum += value->Get();
		}

		out := Float->New[input->Size()];
		each(i : values) {
			value := values->Get(i);
			out[i] := value / sum;
		}

		return out;
	}
}
use Collection;

class JsonStreamParser {
	@parse_stack : Stack<Pair<IntRef, Base>>;
	@document : Char[];
	@is_debug : Bool;

	enum Type {
		OBJECT,
		ARRAY,
		NUMBER
	}

	function : Main(args : String[]) ~ Nil {
		parser := JsonStreamParser->New(System.IO.Filesystem.FileReader->ReadFile(args[0]));
		success := parser->GetMatch("Mary");
		"Success? {$success}."->PrintLine();
	}

	New(document : String) {
		@document := document->ToCharArray();
		@is_debug := true;
		@parse_stack := Stack->New()<Pair<IntRef, Base>>;
	}

	method : public : native : GetNextMatch(value : String) ~ Bool {
		return false; # TODO: return an object
	}

	# 1 pass parsing; 
	# while element searching; 
	# if the element is found;
	# parsing stops; 
	# lazy @documentument is done
	method : public : native : GetMatch(value : String) ~ Bool {
		# TODO: return an object
		
		each(char_pos : @document) {
			char := @document[char_pos];

			# white space
			while(char->IsWhitespace()) {
				char := @document[++char_pos]
			}

			# number
			if(char->IsDigit()) {
				start_pos := char_pos;
				while(char->IsDigit()) {
					char := @document[++char_pos]
				}

				if(@is_debug) {
					num := String->New(@document, start_pos, char_pos - start_pos);
					"NUMBER: num='{$num}'"->PrintLine();
				}
			}
			else {
				select(char) {
					# string
					label '"' {
						char := @document[++char_pos]
						start_pos := char_pos;
						while(char->IsChar()) {
							char := @document[++char_pos]
						}

						if(char <> '"') {
							"\texpected: '\""->ErrorLine();
							return false;
						}

						string := String->New(@document, start_pos, char_pos - start_pos);
						if(@is_debug) {
							"QUOTE: string='{$string}'"->PrintLine();
						}

						if(value->Equals(string)) {
							"*** Found at pos={$char_pos} ***"->PrintLine();
							return true;
						}
					}

					label '{' {
						if(@is_debug) {
							stack_size := @parse_stack->Size();
							"OBJECT_START: level={$stack_size}"->PrintLine();
						}
						@parse_stack->Push(Pair->New(IntRef->New(Type->OBJECT), Nil)<IntRef, Base>);
					}

					label '}' {
						type := @parse_stack->Pop()<Pair<IntRef, Base>>;
						if(@is_debug) {
							stack_size := @parse_stack->Size();
							"OBJECT_END: level={$stack_size}"->PrintLine();
						}

						if(type = Nil | type->GetFirst()->Get() <> Type->OBJECT) {
							"\texpected: '}'"->ErrorLine();
							return false;
						}
					}

					label '[' {
						if(@is_debug) {
						stack_size := @parse_stack->Size();
							"ARRAY_START: level={$stack_size}"->PrintLine();
						}
						@parse_stack->Push(Pair->New(IntRef->New(Type->ARRAY), Nil)<IntRef, Base>);						
					}

					label ']' {
						type := @parse_stack->Pop()<Pair<IntRef, Base>>;
						if(@is_debug) {
							stack_size := @parse_stack->Size();
							"ARRAY_END: level={$stack_size}"->PrintLine();
						}

						if(type = Nil | type->GetFirst()->Get() <> Type->ARRAY) {
							"\texpected: ']'"->ErrorLine();
							return false;
						}
					}

					label ':' {
						if(@is_debug) {
							stack_size := @parse_stack->Size();
							"COLON: level={$stack_size}"->PrintLine();
						}
					}

					label ',' {
						if(@is_debug) {
							stack_size := @parse_stack->Size();
							"COMMA: level={$stack_size}"->PrintLine();
						}
					}

					other {
						if(char <> ':' | char <> ',') {
							stack_size := @parse_stack->Size();
							"\tunexpected token: level={$stack_size}: value='{$char}'"->ErrorLine();
							return false;
						}
					}
				}
			}
		}

		if(<>@parse_stack->IsEmpty()) {
			"\texpected: '}' or ']'"->ErrorLine();
			return false;
		}

		return true;
	}
}
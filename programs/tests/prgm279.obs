use Collection;

class JsonStreamParser {
	is_debug : static : Bool;

	enum Type {
		OBJECT,
		ARRAY,
		NUM
	}

	function : Main(args : String[]) ~ Nil {
		is_debug := false;

		success := ParseSearch(System.IO.Filesystem.FileReader->ReadFile(args[0]), "Mary");
		"Success={$success}."->PrintLine();
	}

	# 1 pass parsing; 
	# while element searching; 
	# if the element is found;
	# parsing stops; 
	# lazy document is done
	function : native : ParseSearch(doc : String, value : String) ~ Bool {
		doc->PrintLine();

		# TODO: store values
		parse_stack := Stack->New()<Pair<IntRef, Base>>;
		
		each(char_pos : doc) {
			char := doc->Get(char_pos);
			
			# white space
			while(char->IsWhitespace()) {
				char := doc->Get(++char_pos);
			}

			# number
			if(char->IsDigit()) {
				start_pos := char_pos;
				while(char->IsDigit()) {
					char := doc->Get(++char_pos);
				}

				if(is_debug) {
					num := doc->SubString(start_pos, char_pos - start_pos);
					"NUM: num='{$num}'"->PrintLine();
				}
			}
			else {
				select(char) {
					# string
					label '"' {
						char := doc->Get(++char_pos);
						start_pos := char_pos;
						while(char->IsChar()) {
							char := doc->Get(++char_pos);
						}

						if(char <> '"') {
							"\texpected: STRING_END"->ErrorLine();
							return false;
						}

						string := doc->SubString(start_pos, char_pos - start_pos);
						if(is_debug) {
							"QUOTE: string='{$string}'"->PrintLine();
						}

						if(value->Equals(string)) {
							"*** Found! ***"->PrintLine();
							return true;
						}
					}

					label '{' {
						if(is_debug) {
							stack_size := parse_stack->Size();
							"OBJECT_START: level={$stack_size}"->PrintLine();
						}
						parse_stack->Push(Pair->New(IntRef->New(Type->OBJECT), Nil)<IntRef, Base>);
					}

					label '}' {
						type := parse_stack->Pop()<Pair<IntRef, Base>>;
						if(is_debug) {
							stack_size := parse_stack->Size();
							"OBJECT_END: level={$stack_size}"->PrintLine();
						}

						if(type = Nil | type->GetFirst()->Get() <> Type->OBJECT) {
							"\texpected: OBJECT_END"->ErrorLine();
							return false;
						}
					}

					label '[' {
						if(is_debug) {
						stack_size := parse_stack->Size();
							"ARRAY_START: level={$stack_size}"->PrintLine();
						}
						parse_stack->Push(Pair->New(IntRef->New(Type->ARRAY), Nil)<IntRef, Base>);						
					}

					label ']' {
						type := parse_stack->Pop()<Pair<IntRef, Base>>;
						if(is_debug) {
							stack_size := parse_stack->Size();
							"ARRAY_END: level={$stack_size}"->PrintLine();
						}

						if(type = Nil | type->GetFirst()->Get() <> Type->ARRAY) {
							"\texpected: ARRAY_END"->ErrorLine();
							return false;
						}
					}

					other {
						"\tunexpected: token={$char}"->ErrorLine();
						return false;
					}
				}
			}
		}

		if(<>parse_stack->IsEmpty()) {
			"\texpected: OBJECT_END or ARRAY_END"->ErrorLine();
			return false;
		}

		return true;
	}
}
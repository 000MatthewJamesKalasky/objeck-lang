use Collection;

class JsonStreamParser {
	@elem_stack : Stack<Pair<IntRef, Base>>;
	@doc : Char[];
	@doc_pos : Int;
	@is_debug : Bool;
	
	enum ComplexType {
		OBJECT,
		ARRAY
	}

	enum StreamStatus {
		OK_NEXT,
		FOUND,
		ERROR
	}

	function : Main(args : String[]) ~ Nil {
		if(args->Size() = 2) {
			file := args[0];
			search := args[1]

			parser := JsonStreamParser->New(System.IO.Filesystem.FileReader->ReadFile(file));
			result := parser->FindMatch(search);
			"Element search for '{$search}', found={$result}"->PrintLine();
		}
	}

	New(document : String) {
		@doc := document->ToCharArray();
		@elem_stack := Stack->New()<Pair<IntRef, Base>>;

		@is_debug := true;
	}

	# TODO: 
	method : public : native : NextMatch(index : Int) ~ Bool {
		return false; # TODO: return an object
	}

	# TODO: 
	method : public : native : FindMatch(index : Int) ~ Bool {
		return false; # TODO: return an object
	}

	# TODO: return object
	method : public : native : FindMatch(match_key : String) ~ Bool {
		# TODO: look at bottom up, along side t<<p>p</p>></p>op down parsing
		while(@doc_pos < @doc->Size()) {
			status := NextMatch(match_key);
			if(status = JsonStreamParser->StreamStatus->FOUND) {
				GetElement();
				return true;
			}
			else if(status = JsonStreamParser->StreamStatus->ERROR) {
				return false;
			};
		}

		return false;
	}

	# TODO: all types and package up
	method : GetElement() ~ Nil {
		if(@is_debug) {
			"--- Found Key Element ---"->PrintLine();
		}

		level := @elem_stack->Size()
		do {
			NextMatch(Nil);
		}
		while(level <> @elem_stack->Size());
	}

	# TODO: return object
	method : public : native : NextMatch(match_key : String) ~ JsonStreamParser->StreamStatus {
		# TODO: return an object
		if(@doc_pos < @doc->Size()) {
			doc_char := @doc[@doc_pos];

			# ignore white space
			while(@doc_pos < @doc->Size() & doc_char->IsWhitespace()) {
				doc_char := @doc[++@doc_pos]
			}

			# parse token
			select(doc_char) {
				# null
				label 'n' {
					doc_char := @doc[++@doc_pos]
					if(doc_char <> 'u') {
						"\texpected: null"->ErrorLine();
						return JsonStreamParser->StreamStatus->ERROR;
					}

					doc_char := @doc[++@doc_pos]
					if(doc_char <> 'l') {
						"\texpected: null"->ErrorLine();
						return JsonStreamParser->StreamStatus->ERROR;
					}

					doc_char := @doc[++@doc_pos]
					if(doc_char <> 'l') {
						"\texpected: null"->ErrorLine();
						return JsonStreamParser->StreamStatus->ERROR;
					}

					if(@is_debug) {
						stack_size := @elem_stack->Size();
						each(i : stack_size) {
							"..|"->Print();
						}
						"NULL => level={$stack_size}"->PrintLine();
					}
				}

				# true
				label 't' {
					doc_char := @doc[++@doc_pos]
					if(doc_char <> 'r') {
						"\texpected: null"->ErrorLine();
						return JsonStreamParser->StreamStatus->ERROR;
					}

					doc_char := @doc[++@doc_pos]
					if(doc_char <> 'u') {
						"\texpected: null"->ErrorLine();
						return JsonStreamParser->StreamStatus->ERROR;
					}

					doc_char := @doc[++@doc_pos]
					if(doc_char <> 'e') {
						"\texpected: null"->ErrorLine();
						return JsonStreamParser->StreamStatus->ERROR;
					}

					if(@is_debug) {
						stack_size := @elem_stack->Size();
						each(i : stack_size) {
							"..|"->Print();
						}
						"TRUE => level={$stack_size}"->PrintLine();
					}
				}

				# false
				label 'f' {
					doc_char := @doc[++@doc_pos]
					if(doc_char <> 'a') {
						"\texpected: null"->ErrorLine();
						return JsonStreamParser->StreamStatus->ERROR;
					}

					doc_char := @doc[++@doc_pos]
					if(doc_char <> 'l') {
						"\texpected: null"->ErrorLine();
						return JsonStreamParser->StreamStatus->ERROR;
					}

					doc_char := @doc[++@doc_pos]
					if(doc_char <> 's') {
						"\texpected: null"->ErrorLine();
						return JsonStreamParser->StreamStatus->ERROR;
					}

					doc_char := @doc[++@doc_pos]
					if(doc_char <> 'e') {
						"\texpected: null"->ErrorLine();
						return JsonStreamParser->StreamStatus->ERROR;
					}

					if(@is_debug) {
						stack_size := @elem_stack->Size();
						each(i : stack_size) {
							"..|"->Print();
						}
						"FALSE => level={$stack_size}"->PrintLine();
					}
				}

				# string
				label '"' {
					doc_char := @doc[++@doc_pos]
					start_pos := @doc_pos;
					while(@doc_pos < @doc->Size() & doc_char <> '"') {
						doc_char := @doc[++@doc_pos]
					}

					if(doc_char <> '"') {
						"\texpected: '\""->ErrorLine();
						return JsonStreamParser->StreamStatus->ERROR;
					}

					value := String->New(@doc, start_pos, @doc_pos - start_pos);
					found_key := match_key <> Nil & @doc_pos + 1 < @doc->Size() & @doc[@doc_pos + 1] = ':';
					if(@is_debug) {
						stack_size := @elem_stack->Size();
						each(i : stack_size) {
							"..|"->Print();
						}
					
						if(found_key) {
							"KEY => level={$stack_size}, value='{$value}'"->PrintLine();
						}
						else {
							"VALUE => level={$stack_size}, value='{$value}'"->PrintLine();							
						}
					}

					if(found_key & match_key->Equals(value)) {
						# note, notice posisiton check above
						@doc_pos += 2;
						return JsonStreamParser->StreamStatus->FOUND;
					}
				}

				label '{' {
					if(@is_debug) {
						stack_size := @elem_stack->Size();
						each(i : stack_size) {
							"..|"->Print();
						}
						"OBJECT => level={$stack_size}"->PrintLine();
					}
					@elem_stack->Push(Pair->New(IntRef->New(ComplexType->OBJECT), Nil)<IntRef, Base>);
				}

				label '}' {
					type := @elem_stack->Pop()<Pair<IntRef, Base>>;
					if(type = Nil | (type->GetFirst()->Get() <> ComplexType->OBJECT & type->GetFirst()->Get() <> ComplexType->ARRAY)) {
						"\texpected: '}'"->ErrorLine();
						return JsonStreamParser->StreamStatus->ERROR;
					}
				}

				label '[' {
					if(@is_debug) {
						stack_size := @elem_stack->Size();
						each(i : stack_size) {
							"..|"->Print();
						}
						"ARRAY => level={$stack_size}"->PrintLine();
					}
					@elem_stack->Push(Pair->New(IntRef->New(ComplexType->ARRAY), Nil)<IntRef, Base>);						
				}

				label ']' {
					type := @elem_stack->Pop()<Pair<IntRef, Base>>;
					if(type = Nil | (type->GetFirst()->Get() <> ComplexType->OBJECT & type->GetFirst()->Get() <> ComplexType->ARRAY)) {
						"\texpected: ']'"->ErrorLine();
						return JsonStreamParser->StreamStatus->ERROR;
					}
				}

				other {
					# number
					if(doc_char->IsDigit()) {
						start_pos := @doc_pos;
						while(@doc_pos < @doc->Size() & (doc_char->IsDigit() | doc_char = '.')) {
							doc_char := @doc[++@doc_pos]
						}

						if(@is_debug) {
							stack_size := @elem_stack->Size();
							num := String->New(@doc, start_pos, @doc_pos - start_pos);
								each(i : stack_size) {
								"..|"->Print();
							}
							"NUMBER => level={$stack_size}, value={$num}"->PrintLine();
						}

						@doc_pos -= 1;
					}
					# error
					else if(doc_char <> ':' & doc_char <> ',') {
						stack_size := @elem_stack->Size();
						"\tunexpected token => level={$stack_size}, value='{$doc_char}'"->ErrorLine();
						return JsonStreamParser->StreamStatus->ERROR;
					}
				}
			}

			# update
			@doc_pos += 1;
		}

		return JsonStreamParser->StreamStatus->OK_NEXT;
	}
}
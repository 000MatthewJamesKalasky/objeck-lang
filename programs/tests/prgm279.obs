use Collection;

class JsonStreamParser {
	@parse_stack : Stack<Pair<IntRef, Base>>;
	@document : Char[];
	@doc_pos : Int;
	@is_debug : Bool;

	enum Type {
		OBJECT,
		ARRAY,
		NUMBER,
		NULL
	}

	function : Main(args : String[]) ~ Nil {
		parser := JsonStreamParser->New(System.IO.Filesystem.FileReader->ReadFile(args[0]));
		result := parser->FindMatch("Luke");
		"Parsed? {$result}"->PrintLine();
	}

	New(document : String) {
		@document := document->ToCharArray();
		@parse_stack := Stack->New()<Pair<IntRef, Base>>;

		@is_debug := true;
	}

	# TODO: 
	method : public : native : NextMatch(index : Int) ~ Bool {
		return false; # TODO: return an object
	}

	# TODO: 
	method : public : native : FindMatch(index : Int) ~ Bool {
		return false; # TODO: return an object
	}

	# TODO: return object
	method : public : native : FindMatch(key : String) ~ Bool {
		while(@doc_pos < @document->Size()) {
			if(<>NextMatch(key)) {
				return false;
			}
		}

		return true;
	}

	# TODO: return object
	method : public : native : NextMatch(key : String) ~ Bool {
		# TODO: return an object
		if(@doc_pos < @document->Size()) {
			doc_char := @document[@doc_pos];

			# ignore white space
			while(doc_char->IsWhitespace()) {
				doc_char := @document[++@doc_pos]
			}

			if(@is_debug) {
				stack_size := @parse_stack->Size();
				each(i : stack_size) {
					"..|"->Print();
				}
			}
			
			# parse token
			select(doc_char) {
				# null
				label 'n' {
					doc_char := @document[++@doc_pos]
					if(doc_char <> 'u') {
						"\texpected: null"->ErrorLine();
						return false;
					}

					doc_char := @document[++@doc_pos]
					if(doc_char <> 'l') {
						"\texpected: null"->ErrorLine();
						return false;
					}

					doc_char := @document[++@doc_pos]
					if(doc_char <> 'l') {
						"\texpected: null"->ErrorLine();
						return false;
					}

					if(@is_debug) {
						stack_size := @parse_stack->Size();
						"NULL => level={$stack_size}"->PrintLine();
					}
				}

				# true
				label 't' {
					doc_char := @document[++@doc_pos]
					if(doc_char <> 'r') {
						"\texpected: null"->ErrorLine();
						return false;
					}

					doc_char := @document[++@doc_pos]
					if(doc_char <> 'u') {
						"\texpected: null"->ErrorLine();
						return false;
					}

					doc_char := @document[++@doc_pos]
					if(doc_char <> 'e') {
						"\texpected: null"->ErrorLine();
						return false;
					}

					if(@is_debug) {
						stack_size := @parse_stack->Size();
						"TRUE => level={$stack_size}"->PrintLine();
					}
				}

				# false
				label 'f' {
					doc_char := @document[++@doc_pos]
					if(doc_char <> 'a') {
						"\texpected: null"->ErrorLine();
						return false;
					}

					doc_char := @document[++@doc_pos]
					if(doc_char <> 'l') {
						"\texpected: null"->ErrorLine();
						return false;
					}

					doc_char := @document[++@doc_pos]
					if(doc_char <> 's') {
						"\texpected: null"->ErrorLine();
						return false;
					}

					doc_char := @document[++@doc_pos]
					if(doc_char <> 'e') {
						"\texpected: null"->ErrorLine();
						return false;
					}

					if(@is_debug) {
						stack_size := @parse_stack->Size();
						"FALSE => level={$stack_size}"->PrintLine();
					}
				}

				# string
				label '"' {
					doc_char := @document[++@doc_pos]
					start_pos := @doc_pos;
					while(doc_char->IsChar()) {
						doc_char := @document[++@doc_pos]
					}

					if(doc_char <> '"') {
						"\texpected: '\""->ErrorLine();
						return false;
					}

					value := String->New(@document, start_pos, @doc_pos - start_pos);
					if(@is_debug) {
						stack_size := @parse_stack->Size();
						"STRING => level={$stack_size}, value='{$value}'"->PrintLine();
					}

					if(key->Equals(value)) {
						"*** Found at pos={$@doc_pos} ***"->PrintLine();
						return true;
					}
				}

				label '{' {
					if(@is_debug) {
						stack_size := @parse_stack->Size();
						"OBJ_ST => level={$stack_size}"->PrintLine();
					}
					@parse_stack->Push(Pair->New(IntRef->New(Type->OBJECT), Nil)<IntRef, Base>);
				}

				label '}' {
					type := @parse_stack->Pop()<Pair<IntRef, Base>>;
					if(@is_debug) {
						stack_size := @parse_stack->Size();
						"OBJ_ED => level={$stack_size}"->PrintLine();
					}

					if(type = Nil | type->GetFirst()->Get() <> Type->OBJECT) {
						"\texpected: '}'"->ErrorLine();
						return false;
					}
				}

				label '[' {
					if(@is_debug) {
					stack_size := @parse_stack->Size();
						"ARY_ST => level={$stack_size}"->PrintLine();
					}
					@parse_stack->Push(Pair->New(IntRef->New(Type->ARRAY), Nil)<IntRef, Base>);						
				}

				label ']' {
					type := @parse_stack->Pop()<Pair<IntRef, Base>>;
					if(@is_debug) {
						stack_size := @parse_stack->Size();
						"ARY_ED => level={$stack_size}"->PrintLine();
					}

					if(type = Nil | type->GetFirst()->Get() <> Type->ARRAY) {
						"\texpected: ']'"->ErrorLine();
						return false;
					}
				}

				label ':' {
					if(@is_debug) {
						stack_size := @parse_stack->Size();
						"COLON => level={$stack_size}"->PrintLine();
					}
				}

				label ',' {
					if(@is_debug) {
						stack_size := @parse_stack->Size();
						"COMMA => level={$stack_size}"->PrintLine();
					}
				}

				other {
					# number
					if(doc_char->IsDigit()) {
						start_pos := @doc_pos;
						while(doc_char->IsDigit()) {
							doc_char := @document[++@doc_pos]
						}

						if(@is_debug) {
							stack_size := @parse_stack->Size();
							num := String->New(@document, start_pos, @doc_pos - start_pos);
							"NUMBER => level={$stack_size}, value={$num}"->PrintLine();
						}
					}
					# error
					else if(doc_char <> ':' | doc_char <> ',') {
						stack_size := @parse_stack->Size();
						"\tunexpected token => level={$stack_size}, value='{$doc_char}'"->ErrorLine();
						return false;
					}
				}
			}



			# update
			@doc_pos += 1;
		}

		return true;
	}
}
use Collection, Data.JSON;

class Test {
	function : Main(args : String[]) ~ Nil {
		p := Parameter->New("names", Parameter->Type->INTEGER, "person first, middle, last names");
		p->SetArray(true);
		p->ToString()->PrintLine();
	}
}

class Function {


	New() {}

	method : public : ToString() ~ String {
		buffer := "";

		return buffer;
	}
}

class Parameter {
	@name : String;
	@type : Parameter->Type;
	@description : String;
	@props : Map<String, Parameter>;
	@is_array : Bool;

	enum Type {
		STRING,
		NUMBER,
		INTEGER,
		OBJECT,
#		ARRAY,
#		NULL,
		BOOLEAN
	}

	New(name : String, type : Parameter->Type) {
		@name := name;
		@type := type;
	}

	New(name : String, type : Parameter->Type, description : String) {
		@name := name;
		@type := type;
		@description := description;
	}

	New(name : String, props : Map<String, Parameter>) {
		@name := name;
		@type := Parameter->Type->OBJECT;
		@props := props;
	}

	New(name : String, props : Map<String, Parameter>, description : String) {
		@name := name;
		@type := Parameter->Type->OBJECT;
		@props := props;
		@description := description;
	}


	method : public : SetArray(is_array : Bool) ~ Nil {
		@is_array := is_array;
	}

	method : public : AddParameter(param : Parameter) ~ Bool {
		if(@props = Nil) {
			@props := Map->New()<String, Parameter>;
		};

		name := param->GetName();
		if(<>@props->Has(name)) {
			@props->Insert(name, param);
			return true;
		};

		return false;
	}

	method : public : GetName() ~ String {
		return @name;
	}

	method : public : GetType() ~ Parameter->Type {
		return @type;
	}

	method : public : ToString() ~ String {
		buffer := "{\"";
		buffer->Append(@name);
		buffer->Append("\": {\"type\": \"");

		if(@props <> Nil) {
			buffer->Append("object\", \"properties\":");
			# TOOD: format properties 
		}
		else {
			if(@is_array) {
				buffer->Append("array\", \"items\": {\"type\": \"");
			};

			select(@type) {
				label Parameter->Type->STRING {
					buffer->Append("string");
				}

				label Parameter->Type->NUMBER {
					buffer->Append("number");
				}

				label Parameter->Type->INTEGER {
					buffer->Append("integer");
				}

				label Parameter->Type->BOOLEAN {
					buffer->Append("boolean");
				}
			};
		};

		if(@description <> Nil) {
			buffer->Append("\", \"description\": \"");
			buffer->Append(Data.JSON.JsonElement->Encode(@description));
		};

		buffer->Append("\"}}");
		if(@is_array) {
			buffer->Append('}');
		};

		return buffer;
	}
}
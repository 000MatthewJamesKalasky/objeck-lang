use Collection, Data.JSON;

class Test {
	function : Main(args : String[]) ~ Nil {
#		params := Set->New()<Parameter>;
		
#		params->Insert(Parameter->New("name", Parameter->Type->STRING, "name of person"));
#		params->Insert(Parameter->New("age", Parameter->Type->INTEGER, "age of person"));
#		params->Insert(Parameter->New("address", Parameter->Type->STRING, "age of person"));

#		foo := Parameter->New("name_age", params);
#		foo->ToString()->PrintLine();		


		Parameter->New("age", Parameter->Type->INTEGER, "age of person")->ToString()->PrintLine();
	}
}

class Function {


	New() {}

	method : public : ToString() ~ String {
		buffer := "";

		return buffer;
	}
}

class Parameter implements Compare {
	@name : String;
	@type : Parameter->Type;
	@description : String;
	@props : Set<Parameter>;
	@is_array : Bool;

	enum Type {
		STRING,
		NUMBER,
		INTEGER,
		OBJECT,
#		ARRAY,
#		NULL,
		BOOLEAN
	}

	New(name : String, type : Parameter->Type) {
		@name := name;
		@type := type;
	}

	New(name : String, type : Parameter->Type, description : String) {
		@name := name;
		@type := type;
		@description := description;
	}

	New(name : String, props : Set<Parameter>) {
		@name := name;
		@type := Parameter->Type->OBJECT;
		@props := props;
	}

	New(name : String, props : Set<Parameter>, description : String) {
		@name := name;
		@type := Parameter->Type->OBJECT;
		@props := props;
		@description := description;
	}

	method : public : SetArray(is_array : Bool) ~ Nil {
		@is_array := is_array;
	}

	method : public : GetName() ~ String {
		return @name;
	}

	method : public : GetType() ~ Parameter->Type {
		return @type;
	}

	#~
	Compares two objects
	@param rhs compare object
	@return 0 if equal, -1 if right-hand side i greater, 1 if left-hand side is greater
	~#
	method : public : Compare(rhs : System.Compare) ~ Int {
		return @name->Compare(rhs);
	}

	#~
	Returns a hash ID for the given class
	@return hash ID
	~#
	method : public : HashID() ~ Int {
		return @name->HashID();
	}

	method : public : ToString() ~ String {
		buffer := "{\"";
		buffer->Append(@name);
		buffer->Append("\": {\"type\": \"");

		if(@props <> Nil) {
			if(@props->IsEmpty()) {
				buffer->Append("object\", \"properties\": null}");
			}
			else {
				buffer->Append("object\", \"properties\":");			
				prop_keys := @props->GetKeys()<Parameter>;
				each(i : prop_keys) {
					prop_key := prop_keys->Get(i);
					temp := prop_key->ToString();
					
					if(i > 0) {
						buffer->Append(temp->SubString(1, temp->Size() - 1));
					}
					else {
						buffer->Append(temp);
					};
					
					if(i + 1 < prop_keys->Size()) {
						buffer->Pop();
						buffer->Append(',');
					}
					else {
						buffer->Append('}');
					}
				};
			};
		}
		else {
			if(@is_array) {
				buffer->Append("array\", \"items\": {\"type\": \"");
			};

			select(@type) {
				label Parameter->Type->STRING {
					buffer->Append("string");
				}

				label Parameter->Type->NUMBER {
					buffer->Append("number");
				}

				label Parameter->Type->INTEGER {
					buffer->Append("integer");
				}

				label Parameter->Type->BOOLEAN {
					buffer->Append("boolean");
				}
			};
		};

		if(@description <> Nil) {
			buffer->Append("\", \"description\": \"");
			buffer->Append(Data.JSON.JsonElement->Encode(@description));
		};

		if(@props <> Nil) {
			buffer->Append('}');
		}
		else {
			buffer->Append("\"}}");
			if(@is_array) {
				buffer->Append('}');
			};
		};

		return buffer;
	}
}
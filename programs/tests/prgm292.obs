class HeapTest {
    function : Main(args : String[]) ~ Nil {
        h := Heap->New(11, Heap->Order->MAX)<IntRef>;
        h->Insert(IntRef->New(13));
        h->Insert(IntRef->New(2));
        h->Insert(IntRef->New(1));
        h->Insert(IntRef->New(5));
        h->Insert(IntRef->New(33));
        h->Insert(IntRef->New(3));
        
        h->Pop()->As(IntRef)->Get()->PrintLine();
        h->Pop()->As(IntRef)->Get()->PrintLine();
        h->Pop()->As(IntRef)->Get()->PrintLine();
        h->Pop()->As(IntRef)->Get()->PrintLine();
        h->Pop()->As(IntRef)->Get()->PrintLine();
        h->Pop()->As(IntRef)->Get()->PrintLine();
    }
}

#~
Min/Max Heap
~#
class Heap<H : Compare> {
    @heap : H[];
    @max : Int;
    @size : Int;
    @order : Heap->Order;
    
    #~
    Sort order
    ~#
    enum Order {
        MIN,
        MAX
    }

    #~
    Constructor
    @param max maximum size of the heap
    @param order sort order
    ~#
    New(max : Int, order : Heap->Order) {
        @max := max;
        @order := order;
        @heap := H->New[@max];
    }
      
    #~
    Add a new key the heap
    @param key key to insert
    @return true if successful, false otherwise
    ~#
    method : public : Insert(key : H) ~ Bool {
        if(@size = @max) {
            return false;
        }
      
        # First insert the new key at the end  
        i := @size;
        @heap[i] := key;
        @size++;
          
        if(@order = Heap->Order->MIN) {
            while(i <> 0 & @heap[i]->Compare(@heap[GetParent(i)]) < 0) {
                Swap(@heap, i, GetParent(i));
                i := GetParent(i);
            }
        }
        else {
            while(i <> 0 & @heap[i]->Compare(@heap[GetParent(i)]) > 0) {
                Swap(@heap, i, GetParent(i));
                i := GetParent(i);
            }
        }

        return true;
    }
    
    #~
    Shows the minimum value if sort order is MIN, other the maximum value
    @return minimum or maximum value
    ~#
    method : public : Peek() ~ H {
        return @heap[0];
    }
     
    #~
    Pops the minimum value if sort order is MIN, other the maximum value
    @return minimum or maximum value
    ~#
    method : public : Pop() ~ H {
        if(@size <= 0) {
            return Nil;
        };
  
        if(@size = 1) {
            @size--;
            return @heap[0];
        };

        root := @heap[0];
        @heap[0] := @heap[@size - 1];
        @size--;
        Heapify(0);
  
        return root;
    }

    #~
    Current size of the heap
    @return current heap size
    ~#
    method : public : Size() ~ Int {
        return @size;
    }

    #~
    Maximum size of the heap
    @return maximum heap size
    ~#
    method : public : Capacity() ~ Int {
        return @max;
    }

    #~
    Removes the given key value from the heap
    ~#
    method : public : Remove(key : Int) ~ Nil {
        # TODO: pass Nil
        Decrease(key, Nil);
        Pop();
    }

    #~
    Update the heap value for a given array position
    @param key heap index
    @param value value to update
    ~#
    method : Update(key : Int, value : H) ~ Nil {
        if(@heap[key] = value) {
            return;
        }

        if(@order = Heap->Order->MIN) {
            if(@heap[key]->Compare(value) < 0) {
                Increase(key, value);
            }
            else {
                Decrease(key, value);
            };
        }
        else {
            if(@heap[key]->Compare(value) > 0) {
                Decrease(key, value);
            }
            else {
                Increase(key, value);
            };
        };
    }

    method : Swap(array : H[], a : Int, b : Int) ~ Nil {
        temp := array[a];
        array[a] := array[b];
        array[b] := temp;
    }
          
    method : GetParent(key : Int) ~ Int {
        return (key - 1) / 2;
    }
      
    method : GetLeft(key : Int) ~ Int {
        return 2 * key + 1;
    }
      
    method : GetRight(key : Int) ~ Int {
        return 2 * key + 2;
    }
          
    method : Heapify(key : Int) ~ Nil {
        left := GetLeft(key);
        right := GetRight(key);
  
        value := key;
        if(@order = Heap->Order->MIN) {
            if(left < @size & @heap[left]->Compare(@heap[value]) < 0) {
                value := left;
            }

            if(right < @size & @heap[right]->Compare(@heap[value]) < 0) {
                value := right;
            }
        }
        else {
            if(left < @size & @heap[left]->Compare(@heap[value])  > 0) {
                value := left;
            }

            if(right < @size & @heap[right]->Compare(@heap[value]) > 0) {
                value := right;
            }
        }
        
        if(value <> key) {
            Swap(@heap, key, value);
            Heapify(value);
        }
    }
      
    method : Increase(key : Int, value : H) ~ Nil {
        @heap[key] := value;
        Heapify(key);
    }

    method : Decrease(key : Int, value : H) ~ Nil {
        @heap[key] := value;
  
        if(@order = Heap->Order->MIN) {
            while(key <> 0 & @heap[key]->Compare(@heap[GetParent(key)]) < 0) {
                Swap(@heap, key, GetParent(key));
                key := GetParent(key);
            }
        }
        else {
            while(key <> 0 & @heap[key]->Compare(@heap[GetParent(key)]) > 0) {
                Swap(@heap, key, GetParent(key));
                key := GetParent(key);
            }
        }
    }
}
use Data.JSON;
use Collection;
use System.IO.Net;

bundle JsonRpc { 
	class Test {
		function : Main(args : String[]) ~ Nil {
			if(args->Size() = 1) {
				if(args[0]->Equals("server")) {
					# initialize server
					funcs := Map->New()<String, Func2Ref<JsonElement, JsonElement>>;

					func_ref := Func2Ref->New(ServerFuncs->Bear(JsonElement) ~ JsonElement)<JsonElement, JsonElement>;
					funcs->Insert("bear", func_ref);

					func_ref := Func2Ref->New(ServerFuncs->Rabbit(JsonElement) ~ JsonElement)<JsonElement, JsonElement>;
					funcs->Insert("rabbit", func_ref);

					func_ref := Func2Ref->New(ServerFuncs->Squirrel(JsonElement) ~ JsonElement)<JsonElement, JsonElement>;
					funcs->Insert("squirrel", Nil);

					# create server
					server := Server->New(funcs, 7231);
					server->Process();
				}
				else if(args[0]->Equals("client")) {
					client := Client->New("localhost", 7231);
					client->Call("rabbit", "[13,17,33]");
				}
				else {
					">>> Usage <<<"->ErrorLine();
				}			
			}
			else {
				">>> Usage <<<"->ErrorLine();
			};
		}
	}

	class Server {
		@funcs : Map<String, Func2Ref<JsonElement, JsonElement>>;
		@port : Int;

		New(funcs : Map<String, Func2Ref<JsonElement, JsonElement>>, port : Int) {
			@funcs := funcs;
			@port := port;

			@server := TCPSocketServer->New(@port);
			while(@server->Listen(16)) {
				client := @server->Accept();

				# TODO: map to response codes
				response_str := client->ReadLine();
				if(response_str <> Nil) {
					response_json := JsonParser->TextToElement(response_str);
					if(response_json <> Nil) {
						method_json := response_json->Get("method");
						if(method_json <> Nil) {
							 method_str := method_json->GetString();
							 func_ref := @funcs->Find(method_str);
							 if(func_ref <> Nil) {
							 	func := func_ref->Get();
							 	
							 	# TODO: {"jsonrpc": "2.0", "result": -19, "id": 2}
							 	# TODO: {"jsonrpc": "2.0", "error": {"code": -32700, "message": "Parse error"}, "id": null}
							 	result_json := func(response_json->Get("params"));
							 	if(result_json = Nil) {
									client->WriteString("null\r\n");
							 	}
							 	else {
									client->WriteString(result_json->ToString() + "\r\n");
								};

								client->Close();
							 }
							 else {
								">>> Error JSON message goes here! <<<"->ErrorLine();
								client->Close();
								Runtime->Exit(1); 	
							 };
						}
						else {
							">>> Error JSON message goes here! <<<"->ErrorLine();
							client->Close();
							Runtime->Exit(1);
						};
					}
					else {
						">>> Error JSON message goes here! <<<"->ErrorLine();
						client->Close();
						Runtime->Exit(1);
					};
				}
				else {
					">>> Error JSON message goes here! <<<"->ErrorLine();
					client->Close();
					Runtime->Exit(1);
				};
			}
		}

		method : public : Process() ~ Nil {
		}
	}

	class Client {
		@address : String;
		@port : Int;
		@id : static : Int;

		New(address : String, port : Int) {
			@address := address;
			@port := port;
			@id := 1;
		}

		method : public : Call(func_name : String,  str_params: String) ~ String {
			@server := TCPSocket->New(@address, @port);
			if(@server->IsOpen()) {
				buffer := "{\"jsonrpc\": \"2.0\", \"method\": \"";
				buffer += func_name;
				buffer += "\", \"params\": ";
				buffer += str_params;
				buffer += ", \"id\": ";
				buffer += @id;
				buffer += "}\r\n";
				@server->WriteString(buffer);

				if(@id > 4096) {
					@id := 1;
				};

				response_str := @server->ReadLine();

				# TODO: look for "result" or "error" element
response_str->PrintLine();			
			};

			return Nil;
		}
	}
}

class ServerFuncs {
	function : Bear(params: JsonElement) ~ JsonElement {
		"bear"->PrintLine();
		return Nil;
	}

	function : Rabbit(params: JsonElement) ~ JsonElement {
		params->ToString()->PrintLine();
		return Nil; # JsonParser->TextToElement("[6, 5, 4]");
	}

	function : Squirrel(params: JsonElement) ~ JsonElement {
		"squirrel"->PrintLine();
		return Nil;
	}
}
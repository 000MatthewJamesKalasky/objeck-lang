use Data.JSON;
use Collection;
use System.IO.Net;

bundle JsonRpc { 
	class Service {
		function : Main(args : String[]) ~ Nil {
			if(args->Size() = 1) {
				if(args[0]->Equals("server")) {
					# initialize server
					funcs := Map->New()<String, Func2Ref<JsonElement, JsonElement>>;

					func_ref := Func2Ref->New(ServerFuncs->Bear(JsonElement) ~ JsonElement)<JsonElement, JsonElement>;
					funcs->Insert("bear", func_ref);

					func_ref := Func2Ref->New(ServerFuncs->Rabbit(JsonElement) ~ JsonElement)<JsonElement, JsonElement>;
					funcs->Insert("rabbit", func_ref);

					func_ref := Func2Ref->New(ServerFuncs->Squirrel(JsonElement) ~ JsonElement)<JsonElement, JsonElement>;
					funcs->Insert("squirrel", Nil);

					# create server
					server := Server->New(funcs, 7231);
					server->Process();
				}
				else if(args[0]->Equals("client")) {
					client := Client->New("localhost", 7231);
					client->Call("rabbit", "[13,17,33]");
				}
				else {
					">>> Usage <<<"->ErrorLine();
				}			
			}
			else {
				">>> Usage <<<"->ErrorLine();
			};
		}
	}

	class Server {
		@funcs : Map<String, Func2Ref<JsonElement, JsonElement>>;
		@port : Int;

		New(funcs : Map<String, Func2Ref<JsonElement, JsonElement>>, port : Int) {
			@funcs := funcs;
			@port := port;

			@server := TCPSocketServer->New(@port);
			while(@server->Listen(16)) {
				client := @server->Accept();

				response_str := client->ReadLine();
				if(response_str <> Nil) {
					response_json := JsonParser->TextToElement(response_str);
					if(response_json <> Nil) {
						method_json := response_json->Get("method");
						if(method_json <> Nil) {
"--- 0 ---"->PrintLine();							
							 method_str := method_json->GetString();
							 func_ref := @funcs->Find(method_str);
							 if(func_ref <> Nil) {
							 	func := func_ref->Get();
							 	result_json := func(response_json->Get("params"));
							 }
							 else {
								">>> Error message goes here! <<<"->ErrorLine();
								Runtime->Exit(1); 	
							 };
						}
						else {
							">>> Error message goes here! <<<"->ErrorLine();
							Runtime->Exit(1);
						};
					}
					else {
						">>> Error message goes here! <<<"->ErrorLine();
						Runtime->Exit(1);
					};
				}
				else {
					">>> Error message goes here! <<<"->ErrorLine();
					Runtime->Exit(1);
				};
			}
		}

		method : public : Process() ~ Nil {
		}

		method : Unmarshal(func_name : String,  str_params: String) ~ RpcResult {
			params := JsonParser->TextToElement(str_params);
			if(params = Nil) {
				# parse error
				return RpcResult->New(-32700, "Parse error", Nil);
			};

			return Unmarshal(func_name, params)
		}

		method : Unmarshal(func_name : String,  json_params: JsonElement) ~ RpcResult {
			if(func_name = Nil) {
				# method not found
				return RpcResult->New(-32601, "Method not found", Nil);
			};

			if(json_params = Nil) {
				# method not found
				return RpcResult->New(-32602, "Invalid params", Nil);
			};

			func_ref := @funcs->Find(func_name)<JsonElement, JsonElement>;
			if(func_ref = Nil) {
				# method not found
				return RpcResult->New(-32601, "Method not found", Nil);
			};

			func := func_ref->Get();
			return RpcResult->New(0, func(json_params));
		}
	}

	class Client {
		@address : String;
		@port : Int;
		@id : static : Int;

		New(address : String, port : Int) {
			@address := address;
			@port := port;
			@id := 1;
		}

		method : public : Call(func_name : String,  str_params: String) ~ RpcResult {
			@server := TCPSocket->New(@address, @port);
			if(@server->IsOpen()) {
				buffer := "{\"jsonrpc\": \"2.0\", \"method\": \"";
				buffer += func_name;
				buffer += "\", \"params\": ";
				buffer += str_params;
				buffer += ", \"id\": ";
				buffer += @id;
				buffer += "}";
				@server->WriteString(buffer);

				if(@id > 4096) {
					@id := 1;
				};

				@server->Close();
			};

			return Nil;
		}
	}

	class RpcResult {
		@code : Int;
		@err_msg : String;
		@result : JsonElement;

		New(code : Int, result : JsonElement) {
			@code := code;
			@result := result;
		}

		New(code : Int, err_msg : String, result : JsonElement) {
			@code := code;
			@err_msg := err_msg;
			@result := result;
		}

		method : public : GetCode() ~ Int {
			return @code;
		}

		method : public : GetErrorMessage() ~ String {
			return @err_msg;
		}

		method : public : SetErrorMessage(err_msg : String) ~ Nil {
			@err_msg := err_msg;
		}

		method : public : IsOk() ~ Bool {
			return @code = 0 & @err_msg = Nil;
		}

		method : public : GetResult() ~ JsonElement {
			return @result;
		}

		method : public : ToString() ~ String {
			buffer := "";

			buffer += "code=";
			buffer += @code;
			buffer += ", result=";
			buffer += @result->ToString();

			return buffer;
		}
	}
}

class ServerFuncs {
	function : Bear(params: JsonElement) ~ JsonElement {
		"bear"->PrintLine();
		return Nil;
	}

	function : Rabbit(params: JsonElement) ~ JsonElement {
		params->ToString()->PrintLine();
		return JsonParser->TextToElement("[6, 5, 4]");
	}

	function : Squirrel(params: JsonElement) ~ JsonElement {
		"squirrel"->PrintLine();
		return Nil;
	}
}
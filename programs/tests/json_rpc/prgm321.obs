use Data.JSON;
use Collection;
use System.IO.Net;

bundle JsonRpc { 
	class Test {
		function : Main(args : String[]) ~ Nil {
			if(args->Size() = 1) {
				if(args[0]->Equals("server")) {
					# create server
					funcs := Hash->New()<String, Func2Ref<JsonElement, JsonElement>>;

					func_ref := Func2Ref->New(ServerFuncs->Bear(JsonElement) ~ JsonElement)<JsonElement, JsonElement>;
					funcs->Insert("bear", func_ref);

					func_ref := Func2Ref->New(ServerFuncs->Rabbit(JsonElement) ~ JsonElement)<JsonElement, JsonElement>;
					funcs->Insert("rabbit", func_ref);

					func_ref := Func2Ref->New(ServerFuncs->Squirrel(JsonElement) ~ JsonElement)<JsonElement, JsonElement>;
					funcs->Insert("squirrel", Nil);

					# start server
					server := Server->New(funcs, 7231);
					server->Process();
				}
				else if(args[0]->Equals("client")) {
					# create client
					client := Client->New("localhost", 7231);

					# call server
					response_json := client->Call("rabbit", JsonParser->TextToElement("[13,17,33]"));
					if(client <> Nil) {
						response_json->ToString()->PrintLine();
					};
				}
				else {
					">>> Usage params [client, server] <<<"->ErrorLine();
				}			
			}
			else {
				">>> Usage params [client, server] <<<"->ErrorLine();
			};
		}
	}

	class Server {
		@funcs : Hash<String, Func2Ref<JsonElement, JsonElement>>;
		@port : Int;

		New(funcs : Hash<String, Func2Ref<JsonElement, JsonElement>>, port : Int) {
			@funcs := funcs;
			@port := port;

			@server := TCPSocketServer->New(@port);
			while(@server->Listen(16)) {
				client := @server->Accept();

				# TODO: map to response codes
				response_str := client->ReadLine();
				if(response_str <> Nil) {
					response_json := JsonParser->TextToElement(response_str);
					if(response_json <> Nil) {
						method_json := response_json->Get("method");
						if(method_json <> Nil) {
							method_str := method_json->GetString();
							func_ref := @funcs->Find(method_str);
							if(func_ref <> Nil) {
								func := func_ref->Get();
							 	
							 	# TODO: {"jsonrpc": "2.0", "result": -19, "id": 2}
							 	# TODO: {"jsonrpc": "2.0", "error": {"code": -32700, "message": "Parse error"}, "id": null}
								result_params_json := func(response_json->Get("params"));
							 	result_id_json := response_json->Get("id");
							 	if(result_params_json = Nil | result_id_json = Nil) {
									client->WriteString("null\r\n");
							 	}
							 	else {
							 		buffer := "{\"jsonrpc\": \"2.0\", \"result\": ";
							 		buffer += result_params_json->ToString()
							 		buffer += ", \"id\": ";
							 		buffer += result_id_json->GetInt() + 1;
							 		buffer += "}\r\n";

									client->WriteString(buffer);
								};

							 }
							 else {
								err_msg := "{\"jsonrpc\": \"2.0\", \"error\": {\"code\": -32601, \"message\": \"Method not found\"}, \"id\": \"1\"}";
								client->WriteString(err_msg);
							 };
						}
						else {
							err_msg := "{\"jsonrpc\": \"2.0\", \"error\": {\"code\": -32600, \"message\": \"Invalid Request\"}, \"id\": \"1\"}";
							client->WriteString(err_msg);
						};
					}
					else {
						err_msg := "{\"jsonrpc\": \"2.0\", \"error\": {\"code\": -32700, \"message\": \"Parse error\"}, \"id\": \"1\"}";
						client->WriteString(err_msg);
					};
				}
				else {
					err_msg := "{\"jsonrpc\": \"2.0\", \"error\": {\"code\": -32600, \"message\": \"Invalid Request\"}, \"id\": \"1\"}";
					client->WriteString(err_msg);
				};

				client->Close();
			}
		}

		method : public : Process() ~ Nil {
		}
	}

	class Client {
		@address : String;
		@port : Int;
		@last_error : Pair<IntRef, String>;
		@id : static : Int;

		New(address : String, port : Int) {
			@address := address;
			@port := port;
			@id := 1;
		}

		# TODO: str_params and return as JsonElement
		method : public : Call(func_name : String,  func_params: JsonElement) ~ JsonElement {
			@server := TCPSocket->New(@address, @port);
			if(@server->IsOpen()) {
				buffer := "{\"jsonrpc\": \"2.0\", \"method\": \"";
				buffer += func_name;
				buffer += "\", \"params\": ";
				buffer += func_params->ToString();
				buffer += ", \"id\": ";
				buffer += @id;
				buffer += "}\r\n";
				@server->WriteString(buffer);

				if(@id > 4096) {
					@id := 1;
				};

				response_str := @server->ReadLine();
				if(response_str <> Nil) {
					response_json := JsonParser->TextToElement(response_str);
					if(response_json <> Nil) {
						result_json := response_json->Get("result");
						if(result_json <> Nil) {
							return result_json;
						};

						error_json := response_json->Get("error");
						if(error_json <> Nil) {
							err_id := error_json->Get("code")->GetInt();
							err_msg := error_json->Get("message")->GetString();
							@last_error := Pair->New(err_id, err_msg)<IntRef, String>;
						};
					}
					else {
						@last_error := Pair->New(IntRef->New(-32700), "Parse error")<IntRef, String>;
						return Nil;
					};
				}
				else {
					@last_error := Pair->New(IntRef->New(-32600), "Invalid Request")<IntRef, String>;
					return Nil;
				};
			};

			@last_error := Pair->New(IntRef->New(-32000), "Server error")<IntRef, String>;
			return Nil;
		}

		method : public : GetLastError() ~ Pair<IntRef, String> {
			return @last_error;
		}
	}
}

class ServerFuncs {
	function : Bear(params: JsonElement) ~ JsonElement {
		"bear"->PrintLine();
		return Nil;
	}

	function : Rabbit(params: JsonElement) ~ JsonElement {
		params->ToString()->PrintLine();
		return JsonParser->TextToElement("[6, 5, 4]");
	}

	function : Squirrel(params: JsonElement) ~ JsonElement {
		"squirrel"->PrintLine();
		return Nil;
	}
}
class AoC {
	@file : String;
	@forest : Int[,];
	@debug : Bool;

	function : Main(args : String[]) ~ Nil {
		if(args->Size() = 1) {
			AoC->New(args[0])->Brun();
		};
	}

	New(file : String) {
		@file := file;
		@debug := false;
	}

	method : public : Brun() ~ Nil {
		inputs := ReadInput(@file)<String>;
		if(MakeForest(inputs)) {
			dims := @forest->Size();
			x := dims[0]; y := dims[1];

			dist := ViewableDistances();
			"Forest is {$x}x{$y}\n---\nLargest distance={$dist}"->PrintLine();
		}
		else {
			">>> Error executing program <<<"->ErrorLine();
		};
	}

	method : native : ViewableDistances() ~ Int {
		dims := @forest->Size();
		x := dims[0]; y := dims[1];

		largest_dist := 0;

		each(i : x) {
			each(j : y) {
				dist := ViewableDistance(@forest[i,j], i, j);
				if(@debug) {
					"({$i},{$j}):"->Print();
					System.IO.Standard->Print(@forest[i,j])->Print('=')->PrintLine(dist);
				};
				if(dist > largest_dist) {
					largest_dist := dist;
				};
			};
		};

		return largest_dist;
	}

	method : native : ViewableDistance(check : Int, x : Int, y : Int) ~ Int {
		dims := @forest->Size();
		max := dims[0];

		# down
		down_count := 0;
		dx := x + 1;
		result := true;
		while(result & dx < max) {
			result := @forest[dx,y] < check;
			if(result) {
				down_count += 1;
			};
			dx += 1;
		};
		if(<>result) {
			down_count += 1;
		};
		if(@debug) {
			"### Down: {$down_count} ###"->PrintLine();
		};

		# right
		right_count := 0;
		dy := y + 1;
		result := true;
		while(result & dy < max) {
			result := @forest[x,dy] < check;
			if(result) {
				right_count += 1;
			};
			dy += 1;
		};
		if(<>result) {
			right_count += 1;
		};
		if(@debug) {
			"### Right: {$right_count} ###"->PrintLine();
		};


		# up
		up_count := 0;
		dx := x - 1;
		result := true;
		while(result & dx >= 0) {
			result := @forest[dx, y] < check;
			if(result) {
				up_count += 1;
			};
			dx -= 1;
		};
		if(<>result) {
			up_count += 1;
		};
		if(@debug) {
			"### Up: {$up_count} ###"->PrintLine();
		};

		# left
		left_count := 0;
		dy := y - 1;
		result := true;
		while(result & dy >= 0) {
			result := @forest[x, dy] < check;
			if(result) {
				left_count += 1;
			};
			dy -= 1;
		};
		if(<>result) {
			left_count += 1;
		};
		if(@debug) {
			"### Left: {$left_count} ###"->PrintLine();
		};

		return down_count * right_count * up_count * left_count;
	}

	method : MakeForest(inputs : Collection.Vector<String>) ~ Bool {
		if(<>inputs->IsEmpty()) {
			row := inputs->Get(0);
			if(row->Size() = inputs->Size()) {
				size := inputs->Size();
				@forest := Int->New[size, size];
				each(i : size) {
					row := inputs->Get(i);
					each(j : row) {
						@forest[i,j] := row->Get(j) - '0';
					};
				};				
			};

			return true;
		};

		return false;
	}

	function : ReadInput(file : String) ~ Collection.Vector<String> {
		inputs := Collection.Vector->New()<String>;

		reader := System.IO.Filesystem.FileReader->New(file);
		leaving {
			reader->Close();
		};

		line := reader->ReadLine();
		while(line <> Nil) {
			if(<>line->IsEmpty()) {
				inputs->AddBack(line);
			};
			line := reader->ReadLine();
		};

		return inputs;
	}
}
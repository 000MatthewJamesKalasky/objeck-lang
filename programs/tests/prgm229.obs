class Test {
	function : Main(args : String[]) ~ Nil {
		tree := Tree->Node(42, Tree->Empty(), Tree->Empty());  
		tree->ToString()->PrintLine();
	}
}

interface TreeInf {
	function : virtual : Empty() ~ TreeInf;
	function : virtual : Node(value : Int, left : TreeInf, right : TreeInf) ~ TreeInf;
	method : virtual : public : ToString() ~ String;
}

class Tree implements TreeInf {
	@value : Int;
	@left : TreeInf;
	@right : TreeInf;

	New : private(value : Int, left : TreeInf, right : TreeInf) {
		@value := value;
		@left := left;
		@right := right;
	}

	function : Empty() ~ TreeInf {
		return Nil;
	}

	function : Node(value : Int, left : TreeInf, right : TreeInf) ~ TreeInf {
		return Tree->New(value, left, right);
	}

	method : public : ToString() ~ String {
		return @value->ToString();
	}
}

use Collection;

class Test {
	function : Main(args : String[]) ~ Nil {
		v := CreateRefs(["Here", "are", "some", "sample", "strings", "to", "be", "sorted"]);
		"unsorted: "->Print(); Show(v);
		v->Sort();
		"sorted: "->Print(); Show(v);
	}
	
	function : CreateRefs(strings : String[]) ~ CompareVector {
		vector := CompareVector->New();
		each(i : strings) {
			vector->AddBack(StringRef->New(strings[i]));
		};
		
		return vector;
	}
	
	function : Show(v : CompareVector) ~ Nil {
		each(i : v) {
			s := v->Get(i)->As(StringRef);
			s->ToString()->Print();
			if(i + 1 < v->Size()) {
				','->Print();
			};
		};
		'\n'->Print();
	}
}

class StringRef implements Compare {
	@s : String;
	
	New(s : String) {
		@s := s;
	}
	
	method : public : Compare(c : Compare) ~ Int {
		h := c->As(StringRef);
		r := h->ToString();
		size := r->Size() - @s->Size();
		if(size = 0) {
			size := @s->ToUpper()->Compare(r->ToUpper());
		};
		
		return size;
	}
	
	method : public : HashID() ~ Int {
		return @s->HashID();
	}
	
	method : public : ToString() ~ String {
		return @s;
	}
}
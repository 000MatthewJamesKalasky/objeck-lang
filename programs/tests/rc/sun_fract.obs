use Game.SDL2;
use Game.Framework;

class Test {
	@framework : GameFramework;
	@colors : Color[];
	
	function : Main(args : String[]) ~ Nil {
		Test->New()->Run();
	}
	
	New() {
		@framework := GameFramework->New(GameConsts->SCREEN_WIDTH, GameConsts->SCREEN_HEIGHT, "Test");
		@framework->SetClearColor(Color->New(0, 0, 0));
		@colors := Color->New[2];
		@colors[0] := Color->New(255,128,0); 
		@colors[1] := Color->New(255,255,25); 
	}
	
	method : Run() ~ Nil {
		if(@framework->IsOk()) {
			e := @framework->GetEvent();
			
			quit := false;
			while(<>quit) {
				# process input
				while(e->Poll() <> 0) {
					if(e->GetType() = EventType->SDL_QUIT) {
						quit := true;
					};
				};

				@framework->FrameStart();
				Render(525,525,0.50,3000);
				@framework->FrameEnd();
			};
		}
		else {
			"--- Error Initializing Environment ---"->ErrorLine();
			return;
		};

		leaving {
			@framework->Quit();
		};
	}

	method : Render(winWidth : Int, winHeight : Int, diskRatio : Float, iter : Int) ~ Nil {
		renderer := @framework->GetRenderer();

		@framework->Clear();

		factor := 0.5 + 1.25->Sqrt();
		x := winWidth / 2.0;
		y := winHeight / 2.0;
		maxRad := Float->Power(iter, factor) / iter;

		for(i:=0;i<=iter;i+=1;) {
			r := Float->Power(i,factor)/iter;
			color := r/maxRad < diskRatio ? @colors[0] : @colors[1];
			theta := 2*Float->Pi()*factor*i;
			renderer->CircleColor(x + r*theta->Sin(), y + r*theta->Cos(), 10 * i/(1.0*iter), color);
		};
				
		@framework->Show();
	}
}

consts GameConsts {
	SCREEN_WIDTH := 640,
	SCREEN_HEIGHT := 480
}
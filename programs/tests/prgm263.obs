use Web.HTTP, Collection;

class Test {
	function : Main(args : String[]) ~ Nil {

		m1 := [
			[7.]
			[11.]
			[18.]
			[18.]
			[17.]
			[21.]
			[35.]
			[57.]];

		m2 := [
			[5.]
			[6.]
			[7.]
			[8.]
			[8.]
			[8.]
			[8.]
			[9.]];
	

#~
		# linear regression

		m1 := [
			[1., 1.]
			[1., 2.]
			[1., 3.]
			[1., 4.]
			[1., 5.]];
			
		m2 := [
			[2.]
			[4.]
			[5.]
			[4.]
			[5.]];
~#
		
		GetCoefficients(m1, m2)->PrintLine();
		GetRSquared(m1, m2)->PrintLine();
	}

	function : GetRSquared(m1 : Float[,], m2 : Float[,]) ~ Float {
		x1_std_dev := GetStdDev(0,m1);
		x1_mean := System.ML.Matrix2D->AverageColumn(0,m1);
		m1_dim := m1->Size();
		m1_rows := m1_dim[0];
		m1_cols := m1_dim[1];

		results := Float->New[m1_rows];

		each(i : m1_cols) {
			each(j : m1_rows) {
				term := (m1[j,i] - x1_mean) / x1_std_dev;
				if(i = 0) {
					results[j] := term;
				}
				else {
					results[j] *= term;
				};
			};
		};

		y_std_dev := GetStdDev(0,m2);
		y_dim := m2->Size();
		y_rows := y_dim[0];
		y_mean := System.ML.Matrix2D->AverageColumn(0,m2);

		total := 0.0;

		each(i : y_rows) {
			term := (m2[i,0] - y_mean) / y_std_dev;
			results[i] *= term;
			total += results[i];
		};

		return (1. / (m1_rows - 1)->ToFloat()) * total;
	}

	function : TotalVar(m : Float[,], m_mean : Float) ~ Float {
		m_dim := m->Size();
		m_rows := m_dim[0];

		m_sum := 0.0;

		each(i : m_rows) {
			term := m[i,0] - m_mean;
			m_sum += term * term;
		}

		return m_sum;
	}


	function : GetStdDev(col : Int, m : Float[,]) ~ Float {
		m_dim := m->Size();
		m_rows := m_dim[0];

		total_sum := 0.0;
		each(i : m_rows) {
			total_sum += m[i,0];
		};
		m_avg := total_sum / m_rows->Size()->As(Float);

		total_sum := 0.0;
		each(i : m_rows) {
			term := m[i,0] - m_avg;
			total_sum += term * term;
		};

		return Float->Sqrt(total_sum / (m_rows->As(Float) - 1.));
	}

	function : GetCoefficients(m1 : Float[,], m2 : Float[,]) ~ Float[,] {
		m1_trans := System.ML.Matrix2D->Transpose(m1);
		lhs_coeffs := System.ML.Matrix2D->Inverse(System.ML.Matrix2D->DotProduct(m1_trans, m1));
		rhs_coeffs := System.ML.Matrix2D->DotProduct(m1_trans, m2);
		
		return System.ML.Matrix2D->DotProduct(lhs_coeffs, rhs_coeffs);
	}
}
use Web.HTTP, Collection;

class Test {
	function : Main(args : String[]) ~ Nil {

		m1 := [
			[1., 1.]
			[1., 3.]
			[1., 4.]
			[1., 6.]
			[1., 7.]];
		m2 := [
			[9.]
			[10.]
			[13.]
			[14.]
			[16.]];
	

#~
		# linear regression

		m1 := [
			[1., 1.]
			[1., 2.]
			[1., 3.]
			[1., 4.]
			[1., 5.]];
			
		m2 := [
			[2.]
			[4.]
			[5.]
			[4.]
			[5.]];
~#
		coeffs := GetCoefficients(m1, m2);
		coeffs->PrintLine();

		GetRSquared(m1, m2, coeffs)->PrintLine();
	}

	function : GetRSquared(m1 : Float[,], m2 : Float[,], coeffs : Float[,]) ~ Float {
		m2_mean := System.ML.Matrix2D->AverageColumn(0, m2);

		pred_var := PredVar(m1,coeffs,m2_mean);
		total_var := TotalVar(m2, m2_mean);

		return pred_var / total_var;
	}

	function : PredVar(m : Float[,], coeffs : Float[,], mean : Float) ~ Float {
		m_dim := m->Size();
		m_rows := m_dim[0];

		total := 0.0;

		each(i : m_rows) {
			coeff_dim := coeffs->Size();
			coeff_rows := coeff_dim[0];

			value := m[i,1];
			inner_total := 0.0;
			each(j : coeff_rows) {
				if(j = 0) {
					inner_total += coeffs[j,0];
				}
				else {
					inner_total += coeffs[j,0] * value;
				};
			};

			inner_total -= mean;
			total += inner_total * inner_total;
		};

		return total;
	}

	function : TotalVar(m : Float[,], m_mean : Float) ~ Float {
		m_dim := m->Size();
		m_rows := m_dim[0];

		m_sum := 0.0;

		each(i : m_rows) {
			term := m[i,0] - m_mean;
			m_sum += term * term;
		}

		return m_sum;
	}


	function : GetStdDev(col : Int, m : Float[,]) ~ Float {
		m_dim := m->Size();
		m_rows := m_dim[0];

		total_sum := 0.0;
		each(i : m_rows) {
			total_sum += m[i,0];
		};
		m_avg := total_sum / m_rows->Size()->As(Float);

		total_sum := 0.0;
		each(i : m_rows) {
			term := m[i,0] - m_avg;
			total_sum += term * term;
		};

		return Float->Sqrt(total_sum / (m_rows->As(Float) - 1.));
	}

	function : GetCoefficients(m1 : Float[,], m2 : Float[,]) ~ Float[,] {
		m1_trans := System.ML.Matrix2D->Transpose(m1);
		lhs_coeffs := System.ML.Matrix2D->Inverse(System.ML.Matrix2D->DotProduct(m1_trans, m1));
		rhs_coeffs := System.ML.Matrix2D->DotProduct(m1_trans, m2);
		
		return System.ML.Matrix2D->DotProduct(lhs_coeffs, rhs_coeffs);
	}
}
use Web.HTTP, Collection;

class Test {
	function : Main(args : String[]) ~ Nil {
		
		m1 := [
			[1.,  4.,  3.]
			[4.,  25.,  6.]
			[7.,  64.,  9.]
			[10., 121., 12.]];

		m2 := [
			[8.]
			[35.]
			[80.]
			[143.]];

#~	
		# linear regression
		m1 := [
			[1., 1.]
			[1., 2.]
			[1., 3.]
			[1., 4.]
			[1., 5.]];
			
		m2 := [
			[2.]
			[4.]
			[5.]
			[4.]
			[5.]];
~#
		
		Calculate(m1, m2, 0)->ToString()->PrintLine();
	}

	function : Calculate(m1 : Float[,], m2 : Float[,], offset : Int) ~ LinearResult {
		coeff := System.ML.Matrix2D->Solve(m1, m2);
		r_sqrd := GetRSquared(m1, m2, coeff, offset);
		return LinearResult->New(coeff, r_sqrd);
	}

	function : GetRSquared(m1 : Float[,], m2 : Float[,], c : Float[], offset : Int) ~ Float {
		avg := System.ML.Matrix2D->AverageColumn(0, m2);

		m_dim := m2->Size();
		m_rows := m_dim[0];
		m_cols := m_dim[1];

		dom := 0.;
		each(i : m_rows) {
			term := m2[i,0] - avg;
			dom += term * term;
		};

		c_rows := c->Size();

		num := 0.;
		each(i : m_rows) {
			equ_sum := 0.0;

			# TODO: replace 1 with cols (i.e. n+1 from offset)
			each(j : c_rows) {
				if(j = 0) {
					equ_sum := c[j];
				}
				else {
					for(k := offset; k < m_cols; k += 1;) {
						equ_sum += c[j] * m1[i,k]; # replace 1 with offset
					};
				};
			};

			term := equ_sum - avg;
			num += term * term;
		};

		return num/dom;
	}
}

class LinearResult {
	@coeffs : Float[];
	@r_sqrd : Float;

	New(coeffs : Float[], r_sqrd : Float) {
		@coeffs := coeffs;
		@r_sqrd := r_sqrd;
	}

	method : public : GetCoefficients() ~ Float[] {
		return @coeffs;
	}

	method : public : GetRSquared() ~ Float {
		return @r_sqrd;
	}

	method : public : ToString() ~ String {
		buffer := "";

		count := 0;
		coeff_num := @coeffs->Size();
		buffer += "r^2={$@r_sqrd}, coeffs={$coeff_num}\n";
		each(coeff := @coeffs) {
			if(count = 0) {
				buffer += "  slope={$coeff}\n";
			}
			else {
				buffer += "  x{$count}={$coeff}\n";
			};
			count += 1;
		};

		return buffer;
	}
}
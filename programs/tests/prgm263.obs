use Web.HTTP, Collection;

class Test {
	function : Main(args : String[]) ~ Nil {
		m1 := [
			[1., 4.0]
			[1., 4.5]
			[1., 5.0]
			[1., 5.5]
			[1., 6.0]
			[1., 6.5]
			[1., 7.0]];

		m2 := [
			[33.]
			[42.]
			[45.]
			[51.]
			[53.]
			[61.]
			[62.]];

#~
		# linear regression

		m1 := [
			[1., 1.]
			[1., 2.]
			[1., 3.]
			[1., 4.]
			[1., 5.]];
			
		m2 := [
			[2.]
			[4.]
			[5.]
			[4.]
			[5.]];
~#
		Calculate(m1, m2)->ToString()->PrintLine();
	}

	function : Calculate(m1 : Float[,], m2 : Float[,]) ~ LinearResult {
		coeff := GetCoefficients(m1, m2);
		r_sqrd := GetRSquared(m1, m2, coeff);
		
		return LinearResult->New(coeff, r_sqrd);
	}

	function : GetCoefficients(m1 : Float[,], m2 : Float[,]) ~ Float[,] {
		m1_trans := System.ML.Matrix2D->Transpose(m1);
		lhs_coeffs := System.ML.Matrix2D->Inverse(System.ML.Matrix2D->DotProduct(m1_trans, m1));
		rhs_coeffs := System.ML.Matrix2D->DotProduct(m1_trans, m2);
		
		return System.ML.Matrix2D->DotProduct(lhs_coeffs, rhs_coeffs);
	}

	function : GetRSquared(m1 : Float[,], m2 : Float[,], c : Float[,]) ~ Float {
		avg := System.ML.Matrix2D->AverageColumn(0, m2);

		m_dim := m2->Size();
		m_rows := m_dim[0];

		dom := 0.;
		each(i : m_rows) {
			term := m2[i,0] - avg;
			dom += term * term;
		};

		c_dim := c->Size();
		c_rows := c_dim[0];

		num := 0.;
		each(i : m_rows) {
			equ_sum := 0.0;

			# TODO: replace 1 with cols (i.e. n+1 from offset)
			each(j : c_rows) {
				if(j = 0) {
					equ_sum := c[j,0];
				}
				else {
					equ_sum += c[j,0] * m1[i,1]; # replace 1 with offset
				};
			};

			term := equ_sum - avg;
			num += term * term;
		};

		return num/dom;
	}
}

class LinearResult {
	@coeffs : Float[];
	@r_sqrd : Float;

	New(coeff : Float[,], r_sqrd : Float) {
		coeff_dim := coeff->Size();
		coeff_rows := coeff_dim[0];

		@coeffs := Float->New[coeff_rows];
		each(i : coeff_rows) {
			@coeffs[i] := coeff[i,0];
		};		

		@r_sqrd := r_sqrd;
	}

	method : public : GetCoefficients() ~ Float[] {
		return @coeffs;
	}

	method : public : GetRSquared() ~ Float {
		return @r_sqrd;
	}

	method : public : ToString() ~ String {
		buffer := "";

		count := 0;
		coeff_num := @coeffs->Size();
		buffer += "r^2={$@r_sqrd}, coeffs={$coeff_num}\n";
		each(coeff := @coeffs) {
			if(count = 0) {
				buffer += "  slope={$coeff}\n";
			}
			else {
				buffer += "  x{$count}={$coeff}\n";
			};
			count += 1;
		};

		return buffer;
	}
}
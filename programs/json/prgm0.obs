use Data.JSON;
use Collection.Generic;

class Test {
	function : Main(args : String[]) ~ Nil {
		builder := JSONBuilder->New();
		builder->PushArray();
		each(i : 3) {
			builder->PushObject();
			builder->Insert("name", i + 1)->PrintLine();
			builder->Pop();
		};
		builder->Pop()->ToString()->PrintLine();
	}
}

class JSONBuilder {
	@stack : Stack<JSONElement>;

	New() {
		@stack := Stack->New()<JSONElement>;
	}

	method : public : Size() ~ Int {
		return @stack->Size();
	}

	method : public : PushObject() ~ Nil {
		if(@stack->IsEmpty()) {
			@stack->Push(JSONElement->New(JSONType->OBJECT));
		}
		else if(@stack->Top()->GetType() = JSONType->ARRAY) {
			elem := JSONElement->New(JSONType->OBJECT);
			@stack->Top()->Add(elem);
			@stack->Push(elem);
		};
	}

	method : public : PushObject(name : String) ~ Nil {
		if(@stack->IsEmpty()) {
			@stack->Push(JSONElement->New(JSONType->OBJECT, name));
		}
		else if(@stack->Top()->GetType() = JSONType->ARRAY) {
			elem := JSONElement->New(JSONType->OBJECT);
			@stack->Top()->Add(elem);
			@stack->Push(elem);
		}
		else if(@stack->Top()->GetType() = JSONType->OBJECT) {
			elem := @stack->Top()->AddChild(name);
			@stack->Top()->Add(elem);
			@stack->Push(elem);
		};
	}

	method : public : PushArray() ~ Nil {
		if(@stack->IsEmpty()) {
			@stack->Push(JSONElement->New(JSONType->ARRAY));
		}
		else {
			elem := JSONElement->New(JSONType->ARRAY);
			@stack->Top()->Add(elem);
			@stack->Push(elem);
		};
	}

	method : public : Pop() ~ JSONElement {
		elem := @stack->Top();
		@stack->Pop();
		return elem;
	}

	method : public : Add(value : String) ~ Bool {
		if(@stack->IsEmpty() | @stack->Top()->GetType() <> JSONType->ARRAY) {
			return false;
		};

		@stack->Top()->Add(value);
		return true;
	}

	method : public : Add(value : Int) ~ Bool {
		if(@stack->IsEmpty() | @stack->Top()->GetType() <> JSONType->ARRAY) {
			return false;
		};

		@stack->Top()->Add(value);
		return true;
	}

	method : public : Add(value : Float) ~ Bool {
		if(@stack->IsEmpty() | @stack->Top()->GetType() <> JSONType->ARRAY) {
			return false;
		};

		@stack->Top()->Add(value);
		return true;
	}

	method : public : Add(value : Bool) ~ Bool {
		if(@stack->IsEmpty() | @stack->Top()->GetType() <> JSONType->ARRAY) {
			return false;
		};

		@stack->Top()->Add(value);
		return true;
	}

	method : public : Add(value : JSONElement) ~ Bool {
		if(@stack->IsEmpty() | @stack->Top()->GetType() <> JSONType->ARRAY) {
			return false;
		};

		@stack->Top()->Add(value);
		return true;
	}

	method : public : Insert(name : String, value : Int) ~ Bool {
		if(@stack->IsEmpty() | @stack->Top()->GetType() <> JSONType->OBJECT) {
			return false;
		};

		@stack->Top()->Insert(name, value);
		return true;
	}

	method : public : Insert(name : String, value : Float) ~ Bool {
		if(@stack->IsEmpty() | @stack->Top()->GetType() <> JSONType->OBJECT) {
			return false;
		};
		
		@stack->Top()->Insert(name, value);
		return true;
	}

	method : public : Insert(name : String, value : String) ~ Bool {
		if(@stack->IsEmpty() | @stack->Top()->GetType() <> JSONType->OBJECT) {
			return false;
		};
		
		@stack->Top()->Insert(name, value);
		return true;
	}

	method : public : Insert(name : String, value : Bool) ~ Bool {
		if(@stack->IsEmpty() | @stack->Top()->GetType() <> JSONType->OBJECT) {
			return false;
		};
		
		@stack->Top()->Insert(name, value);
		return true;
	}

	method : public : Insert(name : String, value : JSONElement) ~ Bool {
		if(@stack->IsEmpty() | @stack->Top()->GetType() <> JSONType->OBJECT) {
			return false;
		};
		
		@stack->Top()->Insert(name, value);
		return true;
	}
}

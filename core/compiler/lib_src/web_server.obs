#~
Support for web servers. Note, shared library implementations (.so, .dll) specified in the 'config.ini' file using the 'lib_name' parameter.
~#
bundle Web.Server {
	class Proxy {
		@lib_proxy : static : System.API.DllProxy;
		
		function : GetDllProxy() ~ System.API.DllProxy {
			if(@lib_proxy = Nil) {
				# shared library implementation fetched from configuration
				@lib_proxy := System.API.DllProxy->New(Runtime->GetProperty("OBJECK_LIB_WEB_SERVER"));
			};

			return @lib_proxy;
		}
	}

	#~
	Web request
	~#
	class Request {
		@request : Int;
		@response : Int;

		#~
		Web request method
		~#
		enum Method {
			GET,
			HEAD,
			POST,
			PUT,
			DELETE,
			CONNECT,
			OPTIONS,
			TRACE,
			PATCH
		}

		#~
		Gets the request method
		@return request method
		~#
		method : public : GetMethod() ~ Request->Method {
			array_args := Base->New[2];
			array_args[0] := Nil;
			array_args[1] := IntHolder->New(@request);

			Proxy->GetDllProxy()->CallFunction("web_request_get_method", array_args);
			req_method := array_args[0]->As(String);

			# TODO: faster way put into a hash, Nginx uses a integer value
			if(req_method->Equals("GET")) {
				return Request->Method->GET;
			}
			else if(req_method->Equals("HEAD")) {
				return Request->Method->HEAD;
			}
			else if(req_method->Equals("POST")) {
				return Request->Method->POST;
			}
			else if(req_method->Equals("PUT")) {
				return Request->Method->PUT;
			}
			else if(req_method->Equals("DELETE")) {
				return Request->Method->DELETE;
			}
			else if(req_method->Equals("CONNECT")) {
				return Request->Method->CONNECT;
			}
			else if(req_method->Equals("OPTIONS")) {
				return Request->Method->OPTIONS;
			}
			else if(req_method->Equals("TRACE")) {
				return Request->Method->TRACE;
			}
			else {
				return Request->Method->PATCH;
			};
		}

		# TODO: 
		method : public : GetRemoteAddress() ~ String {
			return Nil;	
		}

		#~
		Gets a HTTP header
		@param name header name
		@return header value
		~#
		method : public : GetHeader(name : String) ~ String {
			array_args := Base->New[3];
			array_args[0] := Nil;
			array_args[1] := IntHolder->New(@request);
			array_args[2] := name;

			Proxy->GetDllProxy()->CallFunction("web_request_get_header", array_args);

			return array_args[0]->As(String);
		}

		#~
		Reads the request body (i.e. POST)
		@return request body
		~#
		method : public : ReadBody() ~ Byte[] {
			array_args := Base->New[3];
			array_args[0] := Nil;
			array_args[1] := IntHolder->New(@request);
			array_args[2] := IntHolder->New(@response);

			Proxy->GetDllProxy()->CallFunction("web_request_read_body", array_args);

			value := array_args[0]->As(ByteArrayHolder);
			return value->Get();
		}
	}

	#~
	Web Response 
	~#
	class Response {
		@response : Int;
		
		#~
		Set the content type
		@param type content type
		~#
		method : public : SetContentType(type : String) ~ Nil {
			array_args := Base->New[2];
			array_args[0] := IntHolder->New(@response);
			array_args[1] := type;

			Proxy->GetDllProxy()->CallFunction("web_response_set_content_type", array_args);
		}

		#~
		Writes a string response to the message body
		@param date string response
		@return number of bytes sent
		~#
		method : public : WriteBody(data : String) ~ Int {
			array_args := Base->New[3];
			array_args[0] := IntHolder->New();
			array_args[1] := IntHolder->New(@response);
			array_args[2] := data;

			Proxy->GetDllProxy()->CallFunction("web_response_append_string", array_args);

			value := array_args[0]->As(IntHolder);
			return value->Get();
		}

		#~
		Writes a byte array response to the message body
		@param date byte array response
		@return number of bytes sent
		~#
		method : public : WriteBody(data : Byte[]) ~ Int {
			array_args := Base->New[3];
			array_args[0] := IntHolder->New();
			array_args[1] := IntHolder->New(@response);
			array_args[2] := ByteArrayHolder->New(data);

			Proxy->GetDllProxy()->CallFunction("web_response_append_bytes", array_args);

			value := array_args[0]->As(IntHolder);
			return value->Get();
		}

		#~
		Sets a HTTP header
		@param name header name
		@param value header value
		@return true successful, false otherwise
		~#
		method : public : SetHeader(name : String, value : String) ~ Bool {
			array_args := Base->New[4];
			array_args[0] := IntHolder->New();
			array_args[1] := IntHolder->New(@response);
			array_args[2] := name;
			array_args[3] := value;

			Proxy->GetDllProxy()->CallFunction("web_response_set_header", array_args);

			rvalue := array_args[0]->As(IntHolder);
			return rvalue->Get() = 0 ? false : true;
		}
	}
}
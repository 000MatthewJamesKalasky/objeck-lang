#~
Support for web servers
~#
bundle Web.Server {
	class Proxy {
		@lib_proxy : static : System.API.DllProxy;
		
		function : GetDllProxy() ~ System.API.DllProxy {
			if(@lib_proxy = Nil) {
				@lib_proxy := System.API.DllProxy->New("libobjk_web_iis");
			};

			return @lib_proxy;
		}
	}

	#~
	Interface required to implementing handling classes
	~#
	interface Handler {
		#~
		Accepts a forwarding request from another handler instance
		@param req request wrapper
		@param res response wrapper
		~#
		function : virtual : Forward(req : Request, res : Response) ~ Nil;
		#~
		Handles a direct request
		@param req request wrapper
		@param res response wrapper
		~#
		function : virtual : Request(res : Request, req : Response) ~ Nil;
	}

	#~
	Web request
	~#
	class Request {
		@handle : Int;

		New() {			
		}
	}

	#~
	Web Response 
	~#
	class Response {
		@handle : Int;
		
		New() {			
		}

		method : public : WriteString(str : String) ~ Bool {
			array_args := Base->New[3];
			array_args[0] := IntHolder->New();
			array_args[1] := IntHolder->New(@handle);
			array_args[2] := str;

			Proxy->GetDllProxy()->CallFunction("web_write_string", array_args);

			value := array_args[0]->As(IntHolder);
			return value->Get() = 0 ? false : true;
		}
	}
}
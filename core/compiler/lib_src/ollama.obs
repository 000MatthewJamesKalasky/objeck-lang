#~~
Copyright (c) 2024 Randy Hollines
~~#	

use Web.HTTP, Collection, Data.JSON, Data.JSON.Scheme, System.IO.Filesystem;

#~
Ollama client APIs (-lib ollama)
~#
bundle API.Ollama {
	#~
	Ollama enabled endpoint class
	~#
	class EndPoint {
		@last_error : static : String;

		function : SetLastError(last_error : String) ~ Nil {
			@last_error := last_error;
		}

		#~
		Get the last error
		@return last error
		~#
		function : GetLastError() ~ String {
			return @last_error;
		}
	}

	#~
	Ollama model interactions
	
```
prompt := "What number is this?";
file := System.IO.Filesystem.File->New("../gemini/thirteen.png");
Completion->Generate("llava", prompt, file)->PrintLine();
```
	~#
	class Completion from EndPoint {
		#~
		Generates a response from the model given an input
		@param model model name (i.e. llama3, llava)
		@param prompt prompt
		~#
		function : Generate(model : String, prompt : String) ~ String {
			return JsonElement->Decode(Generate(model, prompt, Nil));
		}

		#~
		Generates a response from the model given an input
		@param model model name (i.e. llama3, llava)
		@param prompt prompt
		@param format output format
		~#
		function : Generate(model : String, prompt : String, format : String) ~ String {
			query_json := JsonElement->New(JsonElement->JsonType->OBJECT);
			query_json->Insert("model", model);
			query_json->Insert("prompt", JsonElement->Encode(prompt));
			if(format <> Nil) {
				query_json->Insert("format", format);
			};
			query_json->Insert("stream", false);

	        url := Url->New("http://localhost:11434/api/generate");
	        post_request := query_json->ToString();
			
			# post_request->PrintLine();

	        post_response := Web.HTTP.HttpClient->QuickPost(url, post_request->ToByteArray(), "application/json");
	        if(post_response <> Nil) {
	            post_response_str := post_response->GetContent()->ToString();

				# post_response_str->PrintLine();
				# "---"->PrintLine();

	            post_response_json := JsonParser->TextToElement(post_response_str);
	            if(post_response_json <> Nil) {
	                response_json := post_response_json->Get("response")
	                if(response_json <> Nil) {
	                    return JsonElement->Decode(response_json->GetString());
	                };
	            }
	            else if(post_response_json->Has("error")) {
						SetLastError(post_response_json->Get("error")->ToString());
					};
	        };

	        return Nil;
		}

		#~
		Generates a response from the model given an input
		@param model model name (i.e. llama3, llava)
		@param prompt prompt
		@param image image file
		~#
		function : Generate(model : String, prompt : String, image : File) ~ String {
			images := File->New[1];
			images[0] := image;

			return Generate(model, prompt, images);
		}

		#~
		Generates a response from the model given an input
		@param model model name (i.e. llama3, llava)
		@param prompt prompt
		@param images image images
		~#
		function : Generate(model : String, prompt : String, images : File[]) ~ String {
			images_json := JsonElement->New(JsonElement->JsonType->ARRAY);
			
			each(file in images) {
				if(<>file->Exists()) {
					return Nil;
				};

				# file->GetFullName()->PrintLine();

				file_data := System.IO.Filesystem.FileReader->ReadBinaryFile(file->GetFullName());
				if(file_data = Nil) {
					return Nil;
				};

	        	images_json->Add(Encryption.Encrypt->Base64(file_data));
			};

			query_json := JsonElement->New(JsonElement->JsonType->OBJECT);
			query_json->Insert("model", model);
			query_json->Insert("prompt", JsonElement->Encode(prompt));
			query_json->Insert("images", images_json);
			query_json->Insert("stream", false);

			url := Url->New("http://localhost:11434/api/generate");
			post_request := query_json->ToString();
			
			# post_request->PrintLine();

			post_response := Web.HTTP.HttpClient->QuickPost(url, post_request->ToByteArray(), "application/json");
			if(post_response <> Nil) {
				post_response_str := post_response->GetContent()->ToString();

				# post_response_str->PrintLine();
				# "---"->PrintLine();

				post_response_json := JsonParser->TextToElement(post_response_str);
				if(post_response_json <> Nil) {
					response_json := post_response_json->Get("response")
					if(response_json <> Nil) {
						return JsonElement->Decode(response_json->GetString());
					}
					else if(post_response_json->Has("error")) {
						SetLastError(post_response_json->Get("error")->ToString());
					};
				}
			};

			return Nil;
		}
	}

	#~
	Ollama chat client
	
```
chat := Chat->New("llama3");
chat->Send("How many people like in San Pablo, CA?")->PrintLine();
chat->Send("How of the population identify as Latino??")->PrintLine();
chat->Send("Thanks, what are the major landmarks?")->PrintLine();
chat->Send("Goodbye?")->PrintLine();
```
	~#
	class Chat from EndPoint {
		@model : String;
		@messages_json : JsonElement;
		@url : Url;

		#~
		Constructor
		@param model model name (i.e. llama3, llava)
		~#
		New(model : String) {
			Parent();

			@messages_json := JsonElement->New(JsonElement->JsonType->ARRAY);

			query_json := JsonElement->New(JsonElement->JsonType->OBJECT);
			query_json->Insert("model", model);
			query_json->Insert("stream", false);

			@url := Url->New("http://localhost:11434/api/chat");
			# @url->ToString()->PrintLine();
			
			post_request := query_json->ToString();
			# post_request->PrintLine();

			post_response := Web.HTTP.HttpClient->QuickPost(@url, post_request->ToByteArray(), "application/json");
			if(post_response <> Nil) {
				post_response_str := post_response->GetContent()->ToString();
				# "---"->PrintLine();
				# post_response_str->PrintLine();

				post_response_json := JsonParser->TextToElement(post_response_str);
            if(post_response_json <> Nil) {
					@model := post_response_json->Get("model")->GetString();
            };
			};
		}

		#~
		Chat response from the model given an input
		@param message chat message
		@return chat response
		~#
		method : public : Send(message : String) ~ String {
			query_json := JsonElement->New(JsonElement->JsonType->OBJECT);

			message_json := JsonElement->New(JsonElement->JsonType->OBJECT);
			message_json->Insert("role", "user");
			message_json->Insert("content", JsonElement->Encode(message));
			@messages_json->Add(message_json);

			query_json->Insert("model", @model);
			query_json->Insert("messages", @messages_json);
			query_json->Insert("stream", false);

			post_request := query_json->ToString();

			# post_request->PrintLine();

			post_response := Web.HTTP.HttpClient->QuickPost(@url, post_request->ToByteArray(), "application/json");
			if(post_response <> Nil) {
				post_response_str := post_response->GetContent()->ToString();

				# "---"->PrintLine();
				# post_response_str->PrintLine();

				post_response_json := JsonParser->TextToElement(post_response_str);
            if(post_response_json <> Nil) {
					message_json := post_response_json->Get("message");
					if(message_json <> Nil) {
						@messages_json->Add(message_json);
						return JsonElement->Decode(JsonElement->Decode(message_json->Get("content")->GetString()));
					}
					else if(post_response_json->Has("error")) {
						SetLastError(post_response_json->Get("error")->ToString());
					};
				};
			};

			return Nil;
		}

		#~
		Chat response from the model given an input
		@param message chat message
		@param image image file
		@return chat response
		~#
		method : public : Send(message : String, image : File) ~ String {
			images := File->New[1];
			images[0] := image;

			return Send(message, images);
		}

		#~
		Chat response from the model given an input
		@param message chat query
		@param images image files
		@return chat response
		~#
		method : public : Send(message : String, images : File[]) ~ String {
			images_json := JsonElement->New(JsonElement->JsonType->ARRAY);
			
			each(file in images) {
				if(<>file->Exists()) {
					return Nil;
				};

				# file->GetFullName()->PrintLine();

				file_data := System.IO.Filesystem.FileReader->ReadBinaryFile(file->GetFullName());
				if(file_data = Nil) {
					return Nil;
				};

				images_json->Add(Encryption.Encrypt->Base64(file_data));
			};

			query_json := JsonElement->New(JsonElement->JsonType->OBJECT);

			message_json := JsonElement->New(JsonElement->JsonType->OBJECT);
			message_json->Insert("role", "user");
			message_json->Insert("content", message);
			@messages_json->Add(message_json);

			query_json->Insert("model", @model);
			query_json->Insert("messages", @messages_json);
			query_json->Insert("images", images_json);
			query_json->Insert("stream", false);

			post_request := query_json->ToString();
			# post_request->PrintLine();

			post_response := Web.HTTP.HttpClient->QuickPost(@url, post_request->ToByteArray(), "application/json");
			if(post_response <> Nil) {
				post_response_str := post_response->GetContent()->ToString();

				# "---"->PrintLine();
				# post_response_str->PrintLine();

				post_response_json := JsonParser->TextToElement(post_response_str);
            if(post_response_json <> Nil) {
					message_json := post_response_json->Get("message")
					if(message_json <> Nil) {
						@messages_json->Add(message_json);
						return JsonElement->Decode(message_json->Get("content")->GetString());
					}
					else if(post_response_json->Has("error")) {
						SetLastError(post_response_json->Get("error")->ToString());
					};
				};
			};

			return Nil;
		}
	}

	#~
	Ollama model operation
	
```
chat := Chat->New("llama3");
chat->Send("How many people like in San Pablo, CA?")->PrintLine();
chat->Send("How of the population identify as Latino??")->PrintLine();
chat->Send("Thanks, what are the major landmarks?")->PrintLine();
chat->Send("Goodbye?")->PrintLine();
```
	~#
	class Model from EndPoint {
		@name : String;
		@model : String;
		@modified_at_str : String;
		@size : Int;
		@digest : String;

		New(model_json : JsonElement) {
			Parent();

			@name := model_json->Get("name")->GetString();
			@model := model_json->Get("model")->GetString();
			@modified_at_str := model_json->Get("modified_at")->GetString();
			@size := model_json->Get("size")->GetInt();
			@digest := model_json->Get("digest")->GetString();
		}

		#~
		String representation of the instance
		@return string representation of the instance
		~#
		method : public : ToString() ~ String {
			buffer := "";

			buffer->Append("name='");
			buffer->Append(@name);

			buffer->Append("', model='");
			buffer->Append(@model);

			buffer->Append("', modified_at_str='");
			buffer->Append(@modified_at_str);

			buffer->Append("', size='");
			buffer->Append(@size);

			buffer->Append("', digest='");
			buffer->Append(@digest);

			buffer->Append('\'');
			return buffer;
		}

		#~
		List the models available 
		@return list of models available
		~#
		function : List() ~ Vector<Model> {
			url := Url->New("http://localhost:11434/api/tags");

			get_response := Web.HTTP.HttpClient->QuickGet(url, "application/json");
			if(get_response <> Nil) {
				get_response_str := get_response->GetContent()->ToString();
				# "---"->PrintLine();
				# get_response_str->PrintLine();
	
				get_response_json := JsonParser->TextToElement(get_response_str);
				if(get_response_json <> Nil) {
					response_json := get_response_json->Get("models")
					if(response_json <> Nil) {
						models := Vector->New()<Model>;

						each(model_json in response_json) {
							temp := Model->New(model_json);
temp->ToString()->PrintLine();							
							models->AddBack(temp);
						};

						return models;
					}
					else if(get_response_json->Has("error")) {
						SetLastError(get_response_json->Get("error")->ToString());
					};
				};

			};

			return Nil;
		}

		#~
		Creates a mode from a model description
		@param name name of the new model to create
		@param modelfile contents of the Modelfile
		~#
		function : Create(name : String, modelfile  : String) ~ Model {
			query_json := JsonElement->New(JsonElement->JsonType->OBJECT);
			query_json->Insert("name", name);
			query_json->Insert("modelfile", modelfile);

			url := Url->New("http://localhost:11434/api/create");
			post_request := query_json->ToString();
	
post_request->PrintLine();
	
			post_response := Web.HTTP.HttpClient->QuickPost(url, post_request->ToByteArray(), "application/json");
			if(post_response <> Nil) {
				post_response_str := post_response->GetContent()->ToString();
"---"->PrintLine();
post_response_str->PrintLine();
	
				post_response_json := JsonParser->TextToElement(post_response_str);
				if(post_response_json <> Nil) {
					response_json := post_response_json->Get("response")
					if(response_json <> Nil) {
						return Model->New(response_json);
					}
					else if(post_response_json->Has("error")) {
						SetLastError(post_response_json->Get("error")->ToString());
					};
				};

			};

			return Nil;
		}
	}
}
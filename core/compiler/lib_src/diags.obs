use Collection.Generic;
use System.API;

#~
Support for linting, code metrics and diagnostics
~#
bundle System.Diagnostics {
	class Proxy {
		@lib_proxy : static : DllProxy;

		function : GetDllProxy() ~ DllProxy {
			if(@lib_proxy = Nil) {
				@lib_proxy := DllProxy->New("libobjk_diags");
			};

			return @lib_proxy;
		}
	}

	#~
	Parsers and analyzers source
	~#
	class Analyzer {
		function : ParseFile(src_file : String, sys_path : String) ~ AnalysisTree {
			array_args := Base->New[3];
			array_args[0] := IntHolder->New();
			array_args[1] := src_file;
			array_args[2] := sys_path;
			Proxy->GetDllProxy()->CallFunction("diag_parse_file", array_args);
			
			value := array_args[0]->As(IntHolder);			
#			return value->Get();
			return Nil;
		}

		function : ParseString(src_str : String, sys_path : String) ~ AnalysisTree {
			array_args := Base->New[3];
			array_args[0] := IntHolder->New();
			array_args[1] := src_str;
			array_args[2] := sys_path;
			Proxy->GetDllProxy()->CallFunction("diag_parse_string", array_args);
			
			value := array_args[0]->As(IntHolder);			
#			return value->Get();
			return Nil;
		}
	}

	#~
	Analysis results
	~#
	class AnalysisTree {
		@handle : Int;

		New(handle : Int) {
			Parent();
			@handle := handle;
		}
		
		method : public : GetSymbols() ~ AnalysisSymbol[] {
			return Nil;
		}
	}

	#~
	Analysis symbols
	~#
	class AnalysisSymbol {
		enum Type {
			UNKN
		}

		@handle : Int;

		New(handle : Int) {
			Parent();
			@handle := handle;
		}

		method : public : GetType() ~ AnalysisSymbol->Type {
			return AnalysisSymbol->Type->UNKN;
		}

		method : public : GetSymbols() ~ AnalysisSymbol[] {
			return Nil;
		}
	}
}
use Collection.Generic;
use System.API;

#~
Support for linting, code metrics and diagnostics
~#
bundle System.Diagnostics {
	class Proxy {
		@lib_proxy : static : DllProxy;

		function : GetDllProxy() ~ DllProxy {
			if(@lib_proxy = Nil) {
				@lib_proxy := DllProxy->New("libobjk_diags");
			};

			return @lib_proxy;
		}
	}

	#~
	Parsers and analyzers source
	~#
	class Analyzer {
		function : ParseFile(src_file : String, sys_path : String) ~ AnalysisTree {
			array_args := Base->New[4];
			array_args[0] := IntHolder->New();
			array_args[1] := IntHolder->New();
			array_args[2] := src_file;
			array_args[3] := sys_path;
			Proxy->GetDllProxy()->CallFunction("diag_parse_file", array_args);
			
			handle := array_args[0]->As(IntHolder);
			was_parsed := array_args[1]->As(IntHolder);
			return AnalysisTree->New(handle->Get(), was_parsed->Get() = 1 ? true : false);
		}

		function : ParseString(src_str : String, sys_path : String) ~ AnalysisTree {
			return Nil;
		}
	}

	#~
	Analysis results
	~#
	class AnalysisTree {
		@handle : Int;
		@was_parsed : Bool;
		@symbols : AnalysisSymbol[];

		New(handle : Int, was_parsed : Bool) {
			Parent();
			@handle := handle;
			@was_parsed := was_parsed;
		}

		method : public : WasParsed() ~ Bool {
			return @was_parsed;
		}
		
		method : public : GetSymbols() ~ AnalysisSymbol[] {
			array_args := Base->New[2];
			array_args[0] := @self;
			array_args[1] := IntHolder->New(@handle);
			Proxy->GetDllProxy()->CallFunction("diag_tree_get_symbols", array_args);
			
			return @symbols;
		}

		method : public : Release() ~ Nil {
			array_args := Base->New[1];
			array_args[0] := IntHolder->New(@handle);
			Proxy->GetDllProxy()->CallFunction("diag_tree_release", array_args);
		}
	}

	#~
	Analysis symbols
	~#
	class AnalysisSymbol {
		consts Type {
			NAMESPACE := 2,
			CLASS := 5,
			METHOD := 6,
			UNKN := 0
		}

		@name : String;
		@type : AnalysisSymbol->Type;
		@line : Int;
		@pos : Int;
		@desc : String;
		@symbols : AnalysisSymbol[];

		New(handle : Int) {
		}

		method : public : GetType() ~ AnalysisSymbol->Type {
			return @type;
		}

		method : public : GetName() ~ String {
			return @name;
		}

		method : public : GetSymbols() ~ AnalysisSymbol[] {
			return @symbols;
		}

		method : public : ToString() ~ String {
			type := @type->As(Int);
			return "name='@name', type={$type}, line={$@line}, pos={$@pos}";
		}
	}


}
use System.Time;
use Collection.Generic;

#~
Provides support for conversions (-lib misc)
~#	
bundle System.Time {
	#~
	Utilities for handling dates.
	~#
	class DateUtility {
		#~
		Parses a date from a String. Format <i>MM: </i>month, <i>dd: </i>day, <i>yy(yy): </i>year, <i>hh: </i>hour, <i>mm: </i>minutes and <i>ss: </i>seconds. 
		@param date_str date
		@param format date string format 
		@param gmt true is GMT, false otherwise
		@return Date instance
		~#
		function : Parse(date_str : String, format : String, gmt : Bool) ~ Date {
			parts := Map->New()<IntRef, DatePart>;
		
			# month
			month := format->Find("MM");
			if(month > -1) {
				parts->Insert(month, DatePart->New(month, DatePart->Type->Month));
			};

			# day
			day := format->Find("dd");
			if(day > -1) {
				parts->Insert(day, DatePart->New(day, DatePart->Type->Day));
			};

			# year
			long_year_format := true;
			year := format->Find("yyyy");
			if(year > -1) {
				parts->Insert(year, DatePart->New(year, DatePart->Type->Year));
			}
			else {
				year := format->Find("yy");
				if(year > -1) {
					parts->Insert(year, DatePart->New(year, DatePart->Type->Year));
					long_year_format := false;
				};
			};
	
			# hour
			hours := format->Find("hh");
			if(hours > -1) {
				parts->Insert(hours, DatePart->New(hours, DatePart->Type->Hour));
			};

			# mins
			mins := format->Find("mm");
			if(mins > -1) {
				parts->Insert(mins, DatePart->New(mins, DatePart->Type->Min));
			};

			# secs
			secs := format->Find("ss");
			if(secs > -1) {
				parts->Insert(secs, DatePart->New(secs, DatePart->Type->Sec));
			};

			date_month := 0; date_day := 0; date_year := 0;
			date_hours := 0; date_mins := 0; date_secs := 0;
		
			offset := 0;
			values := parts->GetValues()<DatePart>;
			each(i : values) {
				part := values->Get(i);
				type := part->GetType();

				select(type) {
					label DatePart->Type->Month: {
						pos := month + offset + 1;
						if(pos > -1 & pos < date_str->Size()) { 
							if(date_str->Get(pos)->IsDigit()) {
								date_month := date_str->SubString(month + offset, 2)->ToInt();
							}
							else {
								date_month := date_str->SubString(month + offset, 1)->ToInt();
								offset -= 1;
							};
						};
					}

					label DatePart->Type->Day: {
						pos := day + offset + 1;
						if(pos > -1 & pos < date_str->Size()) { 
							if(date_str->Get(pos)->IsDigit()) {
								date_day := date_str->SubString(day + offset, 2)->ToInt();
							}
							else {
								date_day := date_str->SubString(day + offset, 1)->ToInt();
								offset -= 1;
							};
						};
					}
				
					label DatePart->Type->Year: {
						pos := year + offset;
						if(pos > -1 & pos < date_str->Size()) {
							if(long_year_format) {
								date_year := date_str->SubString(year + offset, 4)->ToInt();
							}	
							else {
								date_year := 2000;
								date_year += date_str->SubString(year + offset, 2)->ToInt();
							};
						};
					}

					label DatePart->Type->Hour: {
						pos := hours + offset + 1;
						if(pos > -1 & pos < date_str->Size()) { 
							if(date_str->Get(pos)->IsDigit()) {
								date_hours := date_str->SubString(hours + offset, 2)->ToInt();
							}
							else {
								date_hours := date_str->SubString(hours + offset, 1)->ToInt();
								offset -= 1;
							};
						};
					}

					label DatePart->Type->Min: {
						pos := mins + offset + 1;
						if(pos > -1 & pos < date_str->Size()) { 
							if(date_str->Get(pos)->IsDigit()) {
								date_mins := date_str->SubString(mins + offset, 2)->ToInt();
							}
							else {
								date_mins := date_str->SubString(mins + offset, 1)->ToInt();
								offset -= 1;
							};
						};
					}

					label DatePart->Type->Sec: {
						pos := secs + offset + 1;
						if(pos > -1 & pos < date_str->Size()) { 
							if(date_str->Get(pos)->IsDigit()) {
								date_secs := date_str->SubString(secs + offset, 2)->ToInt();
							}
							else {
								date_secs := date_str->SubString(secs + offset, 1)->ToInt();
								offset -= 1;
							};
						};
					}
				};
			};

			date := Date->New(date_day, date_month, date_year, gmt);
			date->AddHours(date_hours);
			date->AddMinutes(date_mins);
			date->AddSeconds(date_secs);

			return date;
		}

		#~
		Formats date into a string
		@param date date 
		@param format date string format 
		@param gmt true is GMT, false otherwise
		@return Date instance
		~#
		function : Format(date : Date, format : String, gmt : Bool) ~ String {
			return Nil;
		}
	}
	
	class DatePart {
		@index : Int;
		@type : Type;

		enum Type {
			Month,
			Day,
			Year,
			Hour,
			Min,
			Sec
		}

		New(index : Int, type : Type) {
			@index := index;
			@type := type;
		}

		method : public : GetType() ~ Type {
			return @type;
		}

		method : public : GetIndex() ~ Int {
			return @index;
		}
	}
}

#~
Provides support utilities (-lib misc)
~#	
bundle System.Utility {
	#~
	Utilities for parsing
	~#
	class Parser {
		#~
		Simple tokenizer 
		@param input source input
		@return vector of string tokens
		~#
		function : Tokenize(input : String) ~ Vector<String> {
			tokens := Vector->New()<String>;

			each(i : input) {
				# identifier
				if(input->Get(i)->IsChar()) {
					start := i;
					while(input->Get(i)->IsChar() | input->Get(i)->IsDigit() | input->Get(i) = '_') {
						i += 1;
					};
					tokens->AddBack(input->SubString(start, i - start));
					i -= 1;
				}
				# number
				else if(input->Get(i)->IsDigit()) {
					start := i;
					while(input->Get(i)->IsDigit() | input->Get(i) = '.') {
						i += 1;
					};
					tokens->AddBack(input->SubString(start, i - start));
					i -= 1;
				}
				# other
				else {
					value := input->Get(i);
					if(value <> ' ' & value <> '\t' & value <> '\r' & value <> '\n') {
						tokens->AddBack(value->ToString());
					};
				};
			};

			return tokens;
		}
	}
}

use System.API;

#~
Provides support for SDL
~#
bundle SDL2 {
	class Proxy {
		@lib_proxy : static : DllProxy;
		
		function : GetDllProxy() ~ DllProxy {
			if(@lib_proxy = Nil) {
				@lib_proxy := DllProxy->New("libobjk_sdl");
			};

			return @lib_proxy;
		}
	}
	
	consts HardwareFlags {
		SDL_INIT_TIMER := 0x00000001,
		SDL_INIT_AUDIO := 0x00000010,
		SDL_INIT_VIDEO := 0x00000020,
		SDL_INIT_JOYSTICK := 0x00000200,
		SDL_INIT_HAPTIC := 0x00001000,
		SDL_INIT_GAMECONTROLLER := 0x00002000,
		SDL_INIT_EVENTS := 0x00004000
	}

	consts WindowFlags {
		SDL_WINDOWPOS_UNDEFINED := 0x1FFF0000,
		###
	    SDL_WINDOW_FULLSCREEN := 0x00000001,
	    SDL_WINDOW_OPENGL := 0x00000002,
	    SDL_WINDOW_SHOWN := 0x00000004,
	    SDL_WINDOW_HIDDEN := 0x00000008,
	    SDL_WINDOW_BORDERLESS := 0x00000010,
	    SDL_WINDOW_RESIZABLE := 0x00000020,
	    SDL_WINDOW_MINIMIZED := 0x00000040,
	    SDL_WINDOW_MAXIMIZED := 0x00000080,
	    SDL_WINDOW_INPUT_GRABBED := 0x00000100,
	    SDL_WINDOW_INPUT_FOCUS := 0x00000200,
	    SDL_WINDOW_MOUSE_FOCUS := 0x00000400,
	    SDL_WINDOW_FOREIGN := 0x00000800,
	    SDL_WINDOW_ALLOW_HIGHDPI := 0x00002000,
	    SDL_WINDOW_MOUSE_CAPTURE := 0x00004000,
	    SDL_WINDOW_ALWAYS_ON_TOP := 0x00008000,
	    SDL_WINDOW_SKIP_TASKBAR := 0x00010000,
	    SDL_WINDOW_UTILITY := 0x00020000,
	    SDL_WINDOW_TOOLTIP := 0x00040000,
	    SDL_WINDOW_POPUP_MENU := 0x00080000,
	    SDL_WINDOW_VULKAN := 0x10000000
	}

	consts EventType {
		SDL_QUIT := 0x100,
		SDL_APP_TERMINATING := 0x101,
	    SDL_APP_LOWMEMORY := 0x102,
	    SDL_APP_WILLENTERBACKGROUND := 0x103,
	    SDL_APP_DIDENTERBACKGROUND := 0x104,
	    SDL_APP_WILLENTERFOREGROUND := 0x105,
	    SDL_APP_DIDENTERFOREGROUND := 0x106,
    	SDL_WINDOWEVENT := 0x200,
    	SDL_SYSWMEVENT := 0x201,
    	SDL_KEYDOWN := 0x300,
	    SDL_KEYUP := 0x301,
	    SDL_TEXTEDITING := 0x302,
	    SDL_TEXTINPUT := 0x303,
	    SDL_KEYMAPCHANGED := 0x304,
	    SDL_MOUSEMOTION := 0x400,
	    SDL_MOUSEBUTTONDOWN := 0x401,
	    SDL_MOUSEBUTTONUP := 0x402,
	    SDL_MOUSEWHEEL := 0x403,
	    SDL_JOYAXISMOTION := 0x600,
	    SDL_JOYBALLMOTION := 0x601,
	    SDL_JOYHATMOTION := 0x602,
	    SDL_JOYBUTTONDOWN := 0x603,
	    SDL_JOYBUTTONUP := 0x604,
	    SDL_JOYDEVICEADDED := 0x605,
	    SDL_JOYDEVICEREMOVED := 0x606,
	    SDL_CONTROLLERAXISMOTION := 0x650,
	    SDL_CONTROLLERBUTTONDOWN := 0x651,
	    SDL_CONTROLLERBUTTONUP := 0x652,
	    SDL_CONTROLLERDEVICEADDED := 0x653,
	    SDL_CONTROLLERDEVICEREMOVED := 0x654,
	    SDL_CONTROLLERDEVICEREMAPPED := 0x655,
	    SDL_FINGERDOWN := 0x700,
	    SDL_FINGERUP := 0x701,
	    SDL_FINGERMOTION := 0x702,
	    SDL_DOLLARGESTURE := 0x800,
	    SDL_DOLLARRECORD := 0x801,
	    SDL_MULTIGESTURE := 0x802,
	    SDL_CLIPBOARDUPDATE := 0x900,
	    SDL_DROPFILE := 0x1000,
	    SDL_DROPTEXT := 0x1001,
	    SDL_DROPBEGIN := 0x1002,
	    SDL_DROPCOMPLETE := 0x1003,
    	SDL_AUDIODEVICEADDED := 0x1100,
    	SDL_AUDIODEVICEREMOVED := 0x1101,
	    SDL_RENDER_TARGETS_RESET := 0x2000,
	    SDL_RENDER_DEVICE_RESET := 0x2000,
	    SDL_USEREVENT := 0x8000
	}
	
	#~
	Display class
	~#
	class Display {
		function : GetNumVideoDrivers() ~ Int {
			array_args := Base->New[1];
			array_args[0] := IntHolder->New();

			Proxy->GetDllProxy()->CallFunction("sdl_display_get_num_video_drivers", array_args);

			value := array_args[0]->As(IntHolder);
			return value->Get();
		}
		
		function : GetVideoDriver(index : Int) ~ String {
			array_args := Base->New[2];
			array_args[0] := Nil;
			array_args[1] := IntHolder->New(index);

			Proxy->GetDllProxy()->CallFunction("sdl_display_get_video_driver", array_args);

			return array_args[0]->As(String);
		}
		
		function : VideoInit(driver_name : String) ~ Int {
			if(driver_name <> Nil) {
				array_args := Base->New[2];
				array_args[0] := IntHolder->New();
				array_args[1] := driver_name;

				Proxy->GetDllProxy()->CallFunction("sdl_display_video_init", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};

			return -1;
		}
		
		function : VideoQuit() ~ Nil {
			array_args := Base->New[0];
			Proxy->GetDllProxy()->CallFunction("sdl_display_video_quit", array_args);
		}
		
		function : GetCurrentVideoDriver() ~ String {
			array_args := Base->New[1];
			array_args[0] := Nil;

			Proxy->GetDllProxy()->CallFunction("sdl_display_get_current_video_driver", array_args);

			return array_args[0];
		}
		
		function : GetNumVideoDisplays() ~ Int {
			array_args := Base->New[1];
			array_args[0] := IntHolder->New();

			Proxy->GetDllProxy()->CallFunction("sdl_display_get_num_video_displays", array_args);

			value := array_args[0]->As(IntHolder);
			return value->Get();
		}
		
		function : GetDisplayName(displayIndex : Int) ~ String {
			array_args := Base->New[2];
			array_args[0] := Nil;
			array_args[1] := IntHolder->New(displayIndex);

			Proxy->GetDllProxy()->CallFunction("sdl_display_get_display_name", array_args);

			return array_args[0];
		}
		
		function : GetDisplayBounds(displayIndex : Int, rect : Rect) ~ Int {
			if(rect <> Nil) {
				array_args := Base->New[3];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(displayIndex);
				array_args[2] := rect;

				Proxy->GetDllProxy()->CallFunction("sdl_display_get_display_bounds", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};

			return -1;
		}
		
		function : GetNumDisplayModes(displayIndex : Int) ~ Int {
			array_args := Base->New[2];
			array_args[0] := IntHolder->New();
			array_args[1] := IntHolder->New(displayIndex);

			Proxy->GetDllProxy()->CallFunction("sdl_display_get_num_display_modes", array_args);

			value := array_args[0]->As(IntHolder);
			return value->Get();
		}
		
		function : GetDisplayMode(displayIndex : Int, modeIndex : Int, mode : DisplayMode) ~ Int {
			if(mode <> Nil) {
				array_args := Base->New[4];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(displayIndex);
				array_args[2] := IntHolder->New(modeIndex);
				array_args[3] := mode;

				Proxy->GetDllProxy()->CallFunction("sdl_display_get_display_mode", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};

			return -1;
		}
		
		function : GetCurrentDisplayMode(displayIndex : Int, mode : DisplayMode) ~ Int {
			if(mode <> Nil) {
				array_args := Base->New[3];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(displayIndex);
				array_args[2] := mode;

				Proxy->GetDllProxy()->CallFunction("sdl_display_get_current_display_mode", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};

			return -1;
		}
		
		function : GetClosestDisplayMode(displayIndex : Int, mode : DisplayMode, closest : DisplayMode) ~ Bool {
			if(mode <> Nil & closest <> Nil) {
				array_args := Base->New[4];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(displayIndex);
				array_args[2] := mode;
				array_args[3] := closest;

				Proxy->GetDllProxy()->CallFunction("sdl_display_get_closest_display_mode", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get() <> 0;
			};

			return false;
		}
	}
	
	#~
	Windows class
	~#
	class Window {
		@window : Int;
		
		New(window : Int) {
			@window := window;
		}
		
		New(title : String, x : Int, y : Int, w : Int, h : Int, flags : Int) {
			array_args := Base->New[7];
			array_args[0] := IntHolder->New();
			array_args[1] := title;
			array_args[2] := IntHolder->New(x);
			array_args[3] := IntHolder->New(y);
			array_args[4] := IntHolder->New(w);
			array_args[5] := IntHolder->New(h);
			array_args[6] := IntHolder->New(flags);

			Proxy->GetDllProxy()->CallFunction("sdl_window_create", array_args);

			value := array_args[0]->As(IntHolder);
			@window := value->Get();
		}
		
		method : public : IsNull() ~ Bool {
			return @window = 0;
		}

		method : public : GLGetDrawableSize(w : IntHolder, h : IntHolder) ~ Nil {
			if(@window <> 0) {
				array_args := Base->New[3];
				array_args[0] := IntHolder->New(@window);
				array_args[1] := w;
				array_args[2] := h;

				Proxy->GetDllProxy()->CallFunction("sdl_window_gl_get_drawable_size", array_args);
			};
		}
		
		method : public : GLSwap() ~ Nil {
			if(@window <> 0) {
				array_args := Base->New[1];
				array_args[0] := IntHolder->New(@window);
				Proxy->GetDllProxy()->CallFunction("sdl_window_gl_swap", array_args);
			};
		}
		
		method : public : GetDisplayIndex() ~ Int {
			if(@window <> 0) {
				array_args := Base->New[2];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@window);

				Proxy->GetDllProxy()->CallFunction("sdl_window_get_display_index", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};
			
			return -1;
		}
		
		method : public : SetDisplayMode(mode : DisplayMode) ~ Int {
			if(@window <> 0 & mode <> Nil) {
				array_args := Base->New[3];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@window);
				array_args[2] := mode;

				Proxy->GetDllProxy()->CallFunction("sdl_window_set_display_mode", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};
			
			return -1;
		}
		
		method : public : GetPixelFormat() ~ Int {
			if(@window <> 0) {
				array_args := Base->New[2];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@window);

				Proxy->GetDllProxy()->CallFunction("sdl_window_get_pixel_format", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};
			
			return -1;
		}
		
		method : public : GetID() ~ Int {
			if(@window <> 0) {
				array_args := Base->New[2];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@window);

				Proxy->GetDllProxy()->CallFunction("sdl_window_getid", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};
			
			return -1;
		}
		
		method : public : GetFromID(id : Int) ~ Window {
			if(@window <> 0) {
				array_args := Base->New[2];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(id);

				Proxy->GetDllProxy()->CallFunction("sdl_window_get_fromid", array_args);

				value := array_args[0]->As(IntHolder);
				return Window->New(value->Get());
			};
			
			return Nil;
		}
		
		method : public : GetFlags() ~ Int {
			if(@window <> 0) {
				array_args := Base->New[2];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@window);

				Proxy->GetDllProxy()->CallFunction("sdl_window_get_flags", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};
			
			return -1;
		}
		
		method : public : SetTitle(title : String) ~ Nil {
			if(@window <> 0) {
				array_args := Base->New[2];
				array_args[0] := IntHolder->New(@window);
				array_args[1] := title;

				Proxy->GetDllProxy()->CallFunction("sdl_window_set_title", array_args);
			};	
		}
		
		method : public : SetIcon(icon : Surface) ~ Nil {
			if(@window <> 0) {
				array_args := Base->New[2];
				array_args[0] := IntHolder->New(@window);
				array_args[1] := icon;

				Proxy->GetDllProxy()->CallFunction("sdl_window_set_icon", array_args);
			};
		}
		
		method : public : SetPosition(x : Int, y : Int) ~ Nil {
			if(@window <> 0) {
				array_args := Base->New[3];
				array_args[0] := IntHolder->New(@window);
				array_args[1] := IntHolder->New(x);
				array_args[2] := IntHolder->New(y);

				Proxy->GetDllProxy()->CallFunction("sdl_window_set_position", array_args);
			};
		}
		
		method : public : GetPosition(x : IntHolder, y : IntHolder) ~ Nil {
			if(@window <> 0) {
				array_args := Base->New[3];
				array_args[0] := IntHolder->New(@window);
				array_args[1] := x;
				array_args[2] := y;

				Proxy->GetDllProxy()->CallFunction("sdl_window_get_position", array_args);
			};
		}
		
		method : public : SetSize(w : Int, h : Int) ~ Nil {
			if(@window <> 0) {
				array_args := Base->New[3];
				array_args[0] := IntHolder->New(@window);
				array_args[1] := IntHolder->New(w);
				array_args[2] := IntHolder->New(h);

				Proxy->GetDllProxy()->CallFunction("sdl_window_set_size", array_args);

			};
		}
		
		method : public : GetSize(w : IntHolder, h : IntHolder) ~ Nil {
			if(@window <> 0) {
				array_args := Base->New[3];
				array_args[0] := IntHolder->New(@window);
				array_args[1] := w;
				array_args[2] := h;

				Proxy->GetDllProxy()->CallFunction("sdl_window_get_size", array_args);
			};
		}
		
		method : public : SetMinimumSize(min_w : Int, min_h : Int) ~ Nil {
			if(@window <> 0) {
				array_args := Base->New[3];
				array_args[0] := IntHolder->New(@window);
				array_args[1] := IntHolder->New(min_w);
				array_args[2] := IntHolder->New(min_h);

				Proxy->GetDllProxy()->CallFunction("sdl_window_set_minimum_size", array_args);
			};
		}
		
		method : public : GetMinimumSize(w : IntHolder, h : IntHolder) ~ Nil {
			if(@window <> 0) {
				array_args := Base->New[3];
				array_args[0] := IntHolder->New(@window);
				array_args[1] := w;
				array_args[2] := h;

				Proxy->GetDllProxy()->CallFunction("sdl_window_get_minimum_size", array_args);
			};
		}
		
		method : public : SetMaximumSize(max_w : Int, max_h : Int) ~ Nil {
			if(@window <> 0) {
				array_args := Base->New[3];
				array_args[0] := IntHolder->New(@window);
				array_args[1] := IntHolder->New(max_w);
				array_args[2] := IntHolder->New(max_h);

				Proxy->GetDllProxy()->CallFunction("sdl_window_set_maximum_size", array_args);
			};
		}
		
		method : public : GetMaximumSize(w : IntHolder, h : IntHolder) ~ Nil {
			if(@window <> 0) {
				array_args := Base->New[3];
				array_args[0] := IntHolder->New(@window);
				array_args[1] := w;
				array_args[2] := h;

				Proxy->GetDllProxy()->CallFunction("sdl_window_get_maximum_size", array_args);
			};
		}
		
		method : public : SetBordered(bordered : Bool) ~ Nil {
			if(@window <> 0) {
				array_args := Base->New[2];
				array_args[0] := IntHolder->New(@window);
				array_args[1] := IntHolder->New(bordered ? 0 : 1);

				Proxy->GetDllProxy()->CallFunction("sdl_window_set_bordered", array_args);
			};
		}
		
		method : public : Show() ~ Nil {
			if(@window <> 0) {
				array_args := Base->New[1];
				array_args[0] := IntHolder->New(@window);

				Proxy->GetDllProxy()->CallFunction("sdl_window_show", array_args);
			};
		}
		
		method : public : Hide() ~ Nil {
			if(@window <> 0) {
				array_args := Base->New[1];
				array_args[0] := IntHolder->New(@window);

				Proxy->GetDllProxy()->CallFunction("sdl_window_hide", array_args);
			};
		}
		
		method : public : Raise() ~ Nil {
			if(@window <> 0) {
				array_args := Base->New[1];
				array_args[0] := IntHolder->New(@window);

				Proxy->GetDllProxy()->CallFunction("sdl_window_raise", array_args);
			};
		}
		
		method : public : Maximize() ~ Nil {
			if(@window <> 0) {
				array_args := Base->New[1];
				array_args[0] := IntHolder->New(@window);

				Proxy->GetDllProxy()->CallFunction("sdl_window_maximize", array_args);
			};
		}
		
		method : public : Minimize() ~ Nil {
			if(@window <> 0) {
				array_args := Base->New[1];
				array_args[0] := IntHolder->New(@window);

				Proxy->GetDllProxy()->CallFunction("sdl_window_minimize", array_args);
			};
		}
		
		method : public : Restore() ~ Nil {
			if(@window <> 0) {
				array_args := Base->New[1];
				array_args[0] := IntHolder->New(@window);

				Proxy->GetDllProxy()->CallFunction("sdl_window_restore", array_args);

			};
		}
		
		method : public : SetFullscreen(flags : Int) ~ Int {
			if(@window <> 0) {
				array_args := Base->New[3];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@window);
				array_args[2] := IntHolder->New(flags);

				Proxy->GetDllProxy()->CallFunction("sdl_window_set_fullscreen", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};
			
			return -1;
		}
		
		method : public : GetSurface() ~ Surface {
			if(@window <> 0) {
				array_args := Base->New[2];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@window);

				Proxy->GetDllProxy()->CallFunction("sdl_window_get_surface", array_args);

				value := array_args[0]->As(IntHolder);
				return Surface->New(value->Get());
			};
			
			return Nil;
		}
		
		method : public : UpdateSurface() ~ Int {
			if(@window <> 0) {
				array_args := Base->New[2];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@window);

				Proxy->GetDllProxy()->CallFunction("sdl_window_update_surface", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};
		
			return -1;
		}
		
		method : public : UpdateSurfaceRects(rects : Rect[], numrects : Int) ~ Int {
#~			
			if(@window <> 0) {
				array_args := Base->New[4];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@window);
				array_args[2] := rects;
				array_args[3] := IntHolder->New(numrects);

				Proxy->GetDllProxy()->CallFunction("sdl_window_update_surface_rects", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};
~#			
			return -1;
		}
		
		method : public : SetGrab(grabbed : Bool) ~ Nil {
			if(@window <> 0) {
				array_args := Base->New[2];
				array_args[0] := IntHolder->New(@window);
				array_args[1] := IntHolder->New(grabbed ? 0 : 1);

				Proxy->GetDllProxy()->CallFunction("sdl_window_set_grab", array_args);

			};
		}
		
		method : public : GetGrab() ~ Bool {
			if(@window <> 0) {
				array_args := Base->New[2];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@window);

				Proxy->GetDllProxy()->CallFunction("sdl_window_get_grab", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get() = 0 ? false : true;
			};
			
			return false;
		}
		
		method : public : SetBrightness(brightness : Float) ~ Int {
			if(@window <> 0) {
				array_args := Base->New[3];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@window);
				array_args[2] := FloatHolder->New(brightness);

				Proxy->GetDllProxy()->CallFunction("sdl_window_set_brightness", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};
			
			return -1;
		}
		
		method : public : GetBrightness() ~ Float {
			if(@window <> 0) {
				array_args := Base->New[2];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@window);

				Proxy->GetDllProxy()->CallFunction("sdl_window_get_brightness", array_args);

				value := array_args[0]->As(FloatHolder);
				return value->Get();
			};
			
			return 0.0;
		}
		
		method : public : SetGammaRamp(red : IntHolder, green : IntHolder, blue : IntHolder) ~ Int {
			if(@window <> 0) {
				array_args := Base->New[5];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@window);
				array_args[2] := red;
				array_args[3] := green;
				array_args[4] := blue;

				Proxy->GetDllProxy()->CallFunction("sdl_window_set_gamma_ramp", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};
			
			return -1;
		}
		
		method : public : GetGammaRamp(red : IntHolder, green : IntHolder, blue : IntHolder) ~ Int {
			if(@window <> 0) {
				array_args := Base->New[5];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@window);
				array_args[2] := red;
				array_args[3] := green;
				array_args[4] := blue;

				Proxy->GetDllProxy()->CallFunction("sdl_window_get_gamma_ramp", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};
			
			return -1;
		}
		
		method : public : Destroy() ~ Nil {
			if(@window <> 0) {
				array_args := Base->New[1];
				array_args[0] := IntHolder->New(@window);
				Proxy->GetDllProxy()->CallFunction("sdl_window_destroy", array_args);
				@window := 0;
			};
		}
		
		function : IsScreenSaverEnabled() ~ Bool {
			array_args := Base->New[1];
			array_args[0] := IntHolder->New();

			Proxy->GetDllProxy()->CallFunction("sdl_window_is_screen_saver_enabled", array_args);

			value := array_args[0]->As(IntHolder);
			return value->Get() = 0 ? false : true;
		}
		
		function : EnableScreenSaver() ~ Nil {
			array_args := Base->New[0];
			Proxy->GetDllProxy()->CallFunction("sdl_window_enable_screen_saver", array_args);

		}
		
		function : DisableScreenSaver() ~ Nil {
			array_args := Base->New[0];
			Proxy->GetDllProxy()->CallFunction("sdl_window_disable_screen_saver", array_args);
		}
	}
	
	consts Scancode {
		SDL_SCANCODE_UNKNOWN := 0,
		SDL_SCANCODE_A := 4,
		SDL_SCANCODE_B := 5,
		SDL_SCANCODE_C := 6,
		SDL_SCANCODE_D := 7,
		SDL_SCANCODE_E := 8,
		SDL_SCANCODE_F := 9,
		SDL_SCANCODE_G := 10,
		SDL_SCANCODE_H := 11,
		SDL_SCANCODE_I := 12,
		SDL_SCANCODE_J := 13,
		SDL_SCANCODE_K := 14,
		SDL_SCANCODE_L := 15,
		SDL_SCANCODE_M := 16,
		SDL_SCANCODE_N := 17,
		SDL_SCANCODE_O := 18,
		SDL_SCANCODE_P := 19,
		SDL_SCANCODE_Q := 20,
		SDL_SCANCODE_R := 21,
		SDL_SCANCODE_S := 22,
		SDL_SCANCODE_T := 23,
		SDL_SCANCODE_U := 24,
		SDL_SCANCODE_V := 25,
		SDL_SCANCODE_W := 26,
		SDL_SCANCODE_X := 27,
		SDL_SCANCODE_Y := 28,
		SDL_SCANCODE_Z := 29,
		SDL_SCANCODE_1 := 30,
		SDL_SCANCODE_2 := 31,
		SDL_SCANCODE_3 := 32,
		SDL_SCANCODE_4 := 33,
		SDL_SCANCODE_5 := 34,
		SDL_SCANCODE_6 := 35,
		SDL_SCANCODE_7 := 36,
		SDL_SCANCODE_8 := 37,
		SDL_SCANCODE_9 := 38,
		SDL_SCANCODE_0 := 39,
		SDL_SCANCODE_RETURN := 40,
		SDL_SCANCODE_ESCAPE := 41,
		SDL_SCANCODE_BACKSPACE := 42,
		SDL_SCANCODE_TAB := 43,
		SDL_SCANCODE_SPACE := 44,
		SDL_SCANCODE_MINUS := 45,
		SDL_SCANCODE_EQUALS := 46,
		SDL_SCANCODE_LEFTBRACKET := 47,
		SDL_SCANCODE_RIGHTBRACKET := 48,
		SDL_SCANCODE_BACKSLASH := 49,
		SDL_SCANCODE_NONUSHASH := 50,
		SDL_SCANCODE_SEMICOLON := 51,
		SDL_SCANCODE_APOSTROPHE := 52,
		SDL_SCANCODE_GRAVE := 53,
		SDL_SCANCODE_COMMA := 54,
		SDL_SCANCODE_PERIOD := 55,
		SDL_SCANCODE_SLASH := 56,
		SDL_SCANCODE_CAPSLOCK := 57,
		SDL_SCANCODE_F1 := 58,
		SDL_SCANCODE_F2 := 59,
		SDL_SCANCODE_F3 := 60,
		SDL_SCANCODE_F4 := 61,
		SDL_SCANCODE_F5 := 62,
		SDL_SCANCODE_F6 := 63,
		SDL_SCANCODE_F7 := 64,
		SDL_SCANCODE_F8 := 65,
		SDL_SCANCODE_F9 := 66,
		SDL_SCANCODE_F10 := 67,
		SDL_SCANCODE_F11 := 68,
		SDL_SCANCODE_F12 := 69,
		SDL_SCANCODE_PRINTSCREEN := 70,
		SDL_SCANCODE_SCROLLLOCK := 71,
		SDL_SCANCODE_PAUSE := 72,
		SDL_SCANCODE_INSERT := 73,
		SDL_SCANCODE_HOME := 74,
		SDL_SCANCODE_PAGEUP := 75,
		SDL_SCANCODE_DELETE := 76,
		SDL_SCANCODE_END := 77,
		SDL_SCANCODE_PAGEDOWN := 78,
		SDL_SCANCODE_RIGHT := 79,
		SDL_SCANCODE_LEFT := 80,
		SDL_SCANCODE_DOWN := 81,
		SDL_SCANCODE_UP := 82,
		SDL_SCANCODE_NUMLOCKCLEAR := 83,
		SDL_SCANCODE_KP_DIVIDE := 84,
		SDL_SCANCODE_KP_MULTIPLY := 85,
		SDL_SCANCODE_KP_MINUS := 86,
		SDL_SCANCODE_KP_PLUS := 87,
		SDL_SCANCODE_KP_ENTER := 88,
		SDL_SCANCODE_KP_1 := 89,
		SDL_SCANCODE_KP_2 := 90,
		SDL_SCANCODE_KP_3 := 91,
		SDL_SCANCODE_KP_4 := 92,
		SDL_SCANCODE_KP_5 := 93,
		SDL_SCANCODE_KP_6 := 94,
		SDL_SCANCODE_KP_7 := 95,
		SDL_SCANCODE_KP_8 := 96,
		SDL_SCANCODE_KP_9 := 97,
		SDL_SCANCODE_KP_0 := 98,
		SDL_SCANCODE_KP_PERIOD := 99,
		SDL_SCANCODE_NONUSBACKSLASH := 100,
		SDL_SCANCODE_APPLICATION := 101,
		SDL_SCANCODE_POWER := 102,
		SDL_SCANCODE_KP_EQUALS := 103,
		SDL_SCANCODE_F13 := 104,
		SDL_SCANCODE_F14 := 105,
		SDL_SCANCODE_F15 := 106,
		SDL_SCANCODE_F16 := 107,
		SDL_SCANCODE_F17 := 108,
		SDL_SCANCODE_F18 := 109,
		SDL_SCANCODE_F19 := 110,
		SDL_SCANCODE_F20 := 111,
		SDL_SCANCODE_F21 := 112,
		SDL_SCANCODE_F22 := 113,
		SDL_SCANCODE_F23 := 114,
		SDL_SCANCODE_F24 := 115,
		SDL_SCANCODE_EXECUTE := 116,
		SDL_SCANCODE_HELP := 117,
		SDL_SCANCODE_MENU := 118,
		SDL_SCANCODE_SELECT := 119,
		SDL_SCANCODE_STOP := 120,
		SDL_SCANCODE_AGAIN := 121,
		SDL_SCANCODE_UNDO := 122,
		SDL_SCANCODE_CUT := 123,
		SDL_SCANCODE_COPY := 124,
		SDL_SCANCODE_PASTE := 125,
		SDL_SCANCODE_FIND := 126,
		SDL_SCANCODE_MUTE := 127,
		SDL_SCANCODE_VOLUMEUP := 128,
		SDL_SCANCODE_VOLUMEDOWN := 129,
		SDL_SCANCODE_KP_COMMA := 133,
		SDL_SCANCODE_KP_EQUALSAS400 := 134,
		SDL_SCANCODE_INTERNATIONAL1 := 135,
		SDL_SCANCODE_INTERNATIONAL2 := 136,
		SDL_SCANCODE_INTERNATIONAL3 := 137,
		SDL_SCANCODE_INTERNATIONAL4 := 138,
		SDL_SCANCODE_INTERNATIONAL5 := 139,
		SDL_SCANCODE_INTERNATIONAL6 := 140,
		SDL_SCANCODE_INTERNATIONAL7 := 141,
		SDL_SCANCODE_INTERNATIONAL8 := 142,
		SDL_SCANCODE_INTERNATIONAL9 := 143,
		SDL_SCANCODE_LANG1 := 144,
		SDL_SCANCODE_LANG2 := 145,
		SDL_SCANCODE_LANG3 := 146,
		SDL_SCANCODE_LANG4 := 147,
		SDL_SCANCODE_LANG5 := 148,
		SDL_SCANCODE_LANG6 := 149,
		SDL_SCANCODE_LANG7 := 150,
		SDL_SCANCODE_LANG8 := 151,
		SDL_SCANCODE_LANG9 := 152,
		SDL_SCANCODE_ALTERASE := 153,
		SDL_SCANCODE_SYSREQ := 154,
		SDL_SCANCODE_CANCEL := 155,
		SDL_SCANCODE_CLEAR := 156,
		SDL_SCANCODE_PRIOR := 157,
		SDL_SCANCODE_RETURN2 := 158,
		SDL_SCANCODE_SEPARATOR := 159,
		SDL_SCANCODE_OUT := 160,
		SDL_SCANCODE_OPER := 161,
		SDL_SCANCODE_CLEARAGAIN := 162,
		SDL_SCANCODE_CRSEL := 163,
		SDL_SCANCODE_EXSEL := 164,
		SDL_SCANCODE_KP_00 := 176,
		SDL_SCANCODE_KP_000 := 177,
		SDL_SCANCODE_THOUSANDSSEPARATOR := 178,
		SDL_SCANCODE_DECIMALSEPARATOR := 179,
		SDL_SCANCODE_CURRENCYUNIT := 180,
		SDL_SCANCODE_CURRENCYSUBUNIT := 181,
		SDL_SCANCODE_KP_LEFTPAREN := 182,
		SDL_SCANCODE_KP_RIGHTPAREN := 183,
		SDL_SCANCODE_KP_LEFTBRACE := 184,
		SDL_SCANCODE_KP_RIGHTBRACE := 185,
		SDL_SCANCODE_KP_TAB := 186,
		SDL_SCANCODE_KP_BACKSPACE := 187,
		SDL_SCANCODE_KP_A := 188,
		SDL_SCANCODE_KP_B := 189,
		SDL_SCANCODE_KP_C := 190,
		SDL_SCANCODE_KP_D := 191,
		SDL_SCANCODE_KP_E := 192,
		SDL_SCANCODE_KP_F := 193,
		SDL_SCANCODE_KP_XOR := 194,
		SDL_SCANCODE_KP_POWER := 195,
		SDL_SCANCODE_KP_PERCENT := 196,
		SDL_SCANCODE_KP_LESS := 197,
		SDL_SCANCODE_KP_GREATER := 198,
		SDL_SCANCODE_KP_AMPERSAND := 199,
		SDL_SCANCODE_KP_DBLAMPERSAND := 200,
		SDL_SCANCODE_KP_VERTICALBAR := 201,
		SDL_SCANCODE_KP_DBLVERTICALBAR := 202,
		SDL_SCANCODE_KP_COLON := 203,
		SDL_SCANCODE_KP_HASH := 204,
		SDL_SCANCODE_KP_SPACE := 205,
		SDL_SCANCODE_KP_AT := 206,
		SDL_SCANCODE_KP_EXCLAM := 207,
		SDL_SCANCODE_KP_MEMSTORE := 208,
		SDL_SCANCODE_KP_MEMRECALL := 209,
		SDL_SCANCODE_KP_MEMCLEAR := 210,
		SDL_SCANCODE_KP_MEMADD := 211,
		SDL_SCANCODE_KP_MEMSUBTRACT := 212,
		SDL_SCANCODE_KP_MEMMULTIPLY := 213,
		SDL_SCANCODE_KP_MEMDIVIDE := 214,
		SDL_SCANCODE_KP_PLUSMINUS := 215,
		SDL_SCANCODE_KP_CLEAR := 216,
		SDL_SCANCODE_KP_CLEARENTRY := 217,
		SDL_SCANCODE_KP_BINARY := 218,
		SDL_SCANCODE_KP_OCTAL := 219,
		SDL_SCANCODE_KP_DECIMAL := 220,
		SDL_SCANCODE_KP_HEXADECIMAL := 221,
		SDL_SCANCODE_LCTRL := 224,
		SDL_SCANCODE_LSHIFT := 225,
		SDL_SCANCODE_LALT := 226,
		SDL_SCANCODE_LGUI := 227,
		SDL_SCANCODE_RCTRL := 228,
		SDL_SCANCODE_RSHIFT := 229,
		SDL_SCANCODE_RALT := 230,
		SDL_SCANCODE_RGUI := 231,
		SDL_SCANCODE_MODE := 257,
		SDL_SCANCODE_AUDIONEXT := 258,
		SDL_SCANCODE_AUDIOPREV := 259,
		SDL_SCANCODE_AUDIOSTOP := 260,
		SDL_SCANCODE_AUDIOPLAY := 261,
		SDL_SCANCODE_AUDIOMUTE := 262,
		SDL_SCANCODE_MEDIASELECT := 263,
		SDL_SCANCODE_WWW := 264,
		SDL_SCANCODE_MAIL := 265,
		SDL_SCANCODE_CALCULATOR := 266,
		SDL_SCANCODE_COMPUTER := 267,
		SDL_SCANCODE_AC_SEARCH := 268,
		SDL_SCANCODE_AC_HOME := 269,
		SDL_SCANCODE_AC_BACK := 270,
		SDL_SCANCODE_AC_FORWARD := 271,
		SDL_SCANCODE_AC_STOP := 272,
		SDL_SCANCODE_AC_REFRESH := 273,
		SDL_SCANCODE_AC_BOOKMARKS := 274,
		SDL_SCANCODE_BRIGHTNESSDOWN := 275,
		SDL_SCANCODE_BRIGHTNESSUP := 276,
		SDL_SCANCODE_DISPLAYSWITCH := 277,
		SDL_SCANCODE_KBDILLUMTOGGLE := 278,
		SDL_SCANCODE_KBDILLUMDOWN := 279,
		SDL_SCANCODE_KBDILLUMUP := 280,
		SDL_SCANCODE_EJECT := 281,
		SDL_SCANCODE_SLEEP := 282,
		SDL_SCANCODE_APP1 := 283,
		SDL_SCANCODE_APP2 := 284
	}

	consts Keymod {
		KMOD_NONE := 0x0000,
	    KMOD_LSHIFT := 0x0001,
	    KMOD_RSHIFT := 0x0002,
	    KMOD_LCTRL := 0x0040,
	    KMOD_RCTRL := 0x0080,
	    KMOD_LALT := 0x0100,
	    KMOD_RALT := 0x0200,
	    KMOD_LGUI := 0x0400,
	    KMOD_RGUI := 0x0800,
	    KMOD_NUM := 0x1000,
	    KMOD_CAPS := 0x2000,
	    KMOD_MODE := 0x4000,
	    KMOD_RESERVED := 0x8000
	}

	#~
	Keysym associated with a keyboard event
	~#
	class Keysym {
		@scancode : Scancode;
		@sym : Int;
		@mod : Int;
		
		New() {
		}
		
		method : public : GetScancode() ~ Int {
			return @scancode;
		}
		
		method : public : GetSym() ~ Int {
			return @sym;
		}
		
		method : public : GetMod() ~ Int {
			return @mod;
		}
	}
	
	#~
	KeyboardEvent associated with an Event
	~#
	class KeyboardEvent {
		@type : Int;
		@timestamp : Int;
		@windowID : Int;
		@state : Int;
		@repeat : Int;
		@keysym : Keysym;
		
		New() {
			@keysym := Keysym->New();
		}
		
		method : public : GetType() ~ Int {
			return @type;
		}
		
		method : public : GetTimestamp() ~ Int {
			return @timestamp;
		}
		
		method : public : GetWindowID() ~ Int {
			return @windowID;
		}
		
		method : public : GetState() ~ Int {
			return @state;
		}
		
		method : public : GetRepeat() ~ Int {
			return @repeat;
		}
		
		method : public : GetKeysym() ~ Keysym {
			return @keysym;
		}
	}

	class Keyboard {
		function : GetState() ~ Byte[] {
	        array_args := Base->New[1];
	        
	        Proxy->GetDllProxy()->CallFunction("sdl_keyboard_get_state", array_args);

	        value := array_args[0]->As(ByteArrayHolder);
	        return value->Get();
		}

		function : GetModState() ~ Keymod {
			array_args := Base->New[1];
			array_args[0] := IntHolder->New();

			Proxy->GetDllProxy()->CallFunction("sdl_keyboard_get_mod_state", array_args);

			value := array_args[0]->As(IntHolder);
	        return value->Get()->As(Keymod);
		}
	}

	class Joystick {
		@joystick : Int;

		New(device_index : Int) {
			array_args := Base->New[2];
	        array_args[0] := IntHolder->New();
	        array_args[1] := IntHolder->New(device_index);

	        Proxy->GetDllProxy()->CallFunction("sdl_joystick_open", array_args);

	        value := array_args[0]->As(IntHolder);
	        @joystick := value->Get();
		}

		method : public : IsNull() ~ Bool {
			return @joystick = 0;
		}

		method : public : Free() ~ Nil {
			if(@joystick <> 0) {
				array_args := Base->New[1];
		        array_args[0] := IntHolder->New(@joystick);

				Proxy->GetDllProxy()->CallFunction("sdl_joystick_close", array_args);
				@joystick := 0;
			}; 
	    }

	    function : Number() ~ Int {
	        array_args := Base->New[1];
	        array_args[0] := IntHolder->New();

	        Proxy->GetDllProxy()->CallFunction("sdl_joystick_nums", array_args);

	        value := array_args[0]->As(IntHolder);
	        return value->Get();
		}

		method : public : GetName() ~ String {
	        array_args := Base->New[2];
	        array_args[0] := Nil;
	        array_args[1] := IntHolder->New(@joystick);

	        Proxy->GetDllProxy()->CallFunction("sdl_joystick_name", array_args);

	        return array_args[0];
		}
	}

	class JoyAxisEvent {
		@type : Int;
		@timestamp : Int;
		@which : Int;
		@axis : Int;
		@value : Int;

		New() {			
		}

		method : public : GetType() ~ Int {
			return @type;
		}

		method : public : GetTimestamp() ~ Int {
			return @timestamp;
		}

		method : public : GetWhich() ~ Int {
			return @which;
		}

		method : public : GetAxis() ~ Int {
			return @axis;
		}
		
		method : public : GetValue() ~ Int {
			return @value;
		}
	}

	class JoyHatEvent {
		@type : Int;
		@timestamp : Int;
		@which : Int;
		@hat : Int;
		@value : Int;

		New() {			
		}

		method : public : GetType() ~ Int {
			return @type;
		}

		method : public : GetTimestamp() ~ Int {
			return @timestamp;
		}

		method : public : GetWhich() ~ Int {
			return @which;
		}

		method : public : GetHat() ~ Int {
			return @hat;
		}
		
		method : public : GetValue() ~ Int {
			return @value;
		}
	}

	class JoyButtonEvent {
		@type : Int;
    	@timestamp : Int;
    	@which : Int;
    	@button : Int;
    	@state : Int;

    	New() {			
		}

		method : public : GetType() ~ Int {
			return @type;
		}

		method : public : GetTimestamp() ~ Int {
			return @timestamp;
		}

		method : public : GetWhich() ~ Int {
			return @which;
		}

		method : public : GetButton() ~ Int {
			return @button;
		}
		
		method : public : GetState() ~ Int {
			return @state;
		}
	}

	class MouseMotionEvent {
		@type : Int;
	    @timestamp : Int;
	    @windowID : Int;
	    @which : Int;
	    @state : Int;
	    @x : Int;
	    @y : Int;
	    @xrel : Int;
	    @yrel : Int;

	    New() {			
		}

		method : public : GetType() ~ Int {
			return @type;
		}

		method : public : GetTimestamp() ~ Int {
			return @timestamp;
		}

		method : public : GetWindowID() ~ Int {
			return @windowID;
		}

		method : public : GetWhich() ~ Int {
			return @which;
		}

		method : public : GetState() ~ Int {
			return @state;
		}

		method : public : GetX() ~ Int {
			return @x;
		}

		method : public : GetY() ~ Int {
			return @y;
		}

		method : public : GetRelX() ~ Int {
			return @xrel;
		}

		method : public : GetRelY() ~ Int {
			return @yrel;
		}
	}

	class MouseButtonEvent {
		@type : Int;
	    @timestamp : Int;
	    @windowID : Int;
	    @which : Int;
	    @button : Int;
	    @state : Int;
	    @clicks : Int;
	    @x : Int;
	    @y : Int;

	    New() {			
		}

		method : public : GetType() ~ Int {
			return @type;
		}

		method : public : GetTimestamp() ~ Int {
			return @timestamp;
		}

		method : public : GetWindowID() ~ Int {
			return @windowID;
		}

		method : public : GetWhich() ~ Int {
			return @which;
		}

		method : public : GetButton() ~ Int {
			return @button;
		}

		method : public : GetState() ~ Int {
			return @state;
		}

		method : public : GetClicks() ~ Int {
			return @clicks;
		}

		method : public : GetX() ~ Int {
			return @x;
		}

		method : public : GetY() ~ Int {
			return @y;
		}
	}

	class MouseWheelEvent {
		@type : Int;
	    @timestamp : Int;
	    @windowID : Int;
	    @which : Int;
	    @x : Int;
	    @y : Int;
	    @direction : Int;

	    New() {			
		}

		method : public : GetType() ~ Int {
			return @type;
		}

		method : public : GetTimestamp() ~ Int {
			return @timestamp;
		}

		method : public : GetWindowID() ~ Int {
			return @windowID;
		}

		method : public : GetWhich() ~ Int {
			return @which;
		}

		method : public : GetX() ~ Int {
			return @x;
		}

		method : public : GetY() ~ Int {
			return @y;
		}

		method : public : GetDirection() ~ Int {
			return @direction;
		}		
	}

	#~
	Event class
	~#
	class Event {
		@event : Int;
		@key : KeyboardEvent;
		@axis : JoyAxisEvent;
		@hat : JoyHatEvent;
		@jbutton : JoyButtonEvent;
		@motion : MouseMotionEvent;
		@mbutton : MouseButtonEvent;
		@wheel : MouseWheelEvent;
		
		New() {
			array_args := Base->New[1];
			array_args[0] := IntHolder->New();
			Proxy->GetDllProxy()->CallFunction("sdl_event_new", array_args);
			value := array_args[0]->As(IntHolder);
			@event := value->Get();
		}
		
		New : private (events : Int) {
			@event := events;
		}

		method : public : IsNull() ~ Bool {
			return @event = 0;
		}
		
		method : public : Free() ~ Nil {
			if(@event <> 0) {
				array_args := Base->New[1];
				array_args[0] := IntHolder->New(@event);
				Proxy->GetDllProxy()->CallFunction("sdl_event_free", array_args);
				@event := 0;
			};
		}
		
		method : public : GetType() ~ EventType {
			if(@event <> 0) {
				array_args := Base->New[2];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@event);
				
				Proxy->GetDllProxy()->CallFunction("sdl_event_type", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get()->As(EventType);
			};
			
			return -1;
		}
		
		method : public : GetKey() ~ KeyboardEvent {
			if(@event <> 0) {
				if(@key = Nil) {
					@key := KeyboardEvent->New();
				};
				
				array_args := Base->New[3];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@event);
				array_args[2] := @key;
				
				Proxy->GetDllProxy()->CallFunction("sdl_event_key", array_args);

				value := array_args[0]->As(IntHolder);
				if(value->Get() < 0) {
					return Nil;
				};

				return @key;
			};
			
			return Nil;
		}

		method : public : GetJAxis() ~ JoyAxisEvent {
			if(@event <> 0) {
				if(@axis = Nil) {
					@axis := JoyAxisEvent->New();
				};
				
				array_args := Base->New[3];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@event);
				array_args[2] := @axis;
				
				Proxy->GetDllProxy()->CallFunction("sdl_axis_key", array_args);

				value := array_args[0]->As(IntHolder);
				if(value->Get() < 0) {
					return Nil;
				};

				return @axis;
			};
			
			return Nil;
		}

		method : public : GetMouseMotion() ~ MouseMotionEvent {
			if(@event <> 0) {
				if(@motion = Nil) {
					@motion := MouseMotionEvent->New();
				};
				
				array_args := Base->New[3];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@event);
				array_args[2] := @motion;
				
				Proxy->GetDllProxy()->CallFunction("sdl_mouse_motion", array_args);

				value := array_args[0]->As(IntHolder);
				if(value->Get() < 0) {
					return Nil;
				};

				return @motion;
			};
			
			return Nil;
		}

		method : public : GetMouseWheel() ~ MouseWheelEvent {
			if(@event <> 0) {
				if(@wheel = Nil) {
					@wheel := MouseWheelEvent->New();
				};
				
				array_args := Base->New[3];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@event);
				array_args[2] := @wheel;
				
				Proxy->GetDllProxy()->CallFunction("sdl_mouse_wheel", array_args);

				value := array_args[0]->As(IntHolder);
				if(value->Get() < 0) {
					return Nil;
				};

				return @wheel;
			};
			
			return Nil;
		}

		method : public : GetJButton() ~ JoyButtonEvent {
			if(@event <> 0) {
				if(@jbutton = Nil) {
					@jbutton := JoyButtonEvent->New();
				};
				
				array_args := Base->New[3];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@event);
				array_args[2] := @jbutton;
				
				Proxy->GetDllProxy()->CallFunction("sdl_jbutton_key", array_args);

				value := array_args[0]->As(IntHolder);
				if(value->Get() < 0) {
					return Nil;
				};

				return @jbutton;
			};
			
			return Nil;
		}

		method : public : GetMButton() ~ MouseButtonEvent {
			if(@event <> 0) {
				if(@mbutton = Nil) {
					@mbutton := MouseButtonEvent->New();
				};
				
				array_args := Base->New[3];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@event);
				array_args[2] := @mbutton;
				
				Proxy->GetDllProxy()->CallFunction("sdl_mbutton_key", array_args);

				value := array_args[0]->As(IntHolder);
				if(value->Get() < 0) {
					return Nil;
				};

				return @mbutton;
			};
			
			return Nil;
		}

		method : public : GetJHat() ~ JoyHatEvent {
			if(@event <> 0) {
				if(@hat = Nil) {
					@hat := JoyHatEvent->New();
				};
				
				array_args := Base->New[3];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@event);
				array_args[2] := @hat;
				
				Proxy->GetDllProxy()->CallFunction("sdl_hat_key", array_args);
				
				value := array_args[0]->As(IntHolder);
				if(value->Get() < 0) {
					return Nil;
				};

				return @hat;
			};
			
			return Nil;
		}
				
		function : Pumps() ~ Nil {
			array_args := Base->New[0];
			Proxy->GetDllProxy()->CallFunction("sdl_event_pumps", array_args);
		}
		
		method : public : Peeps(numevents : Int, action : EventAction, minType : Int, maxType : Int) ~ Int {
			if(@event <> 0) {
				array_args := Base->New[6];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@event);
				array_args[2] := IntHolder->New(numevents);
				array_args[3] := IntHolder->New(action->As(Int));
				array_args[4] := IntHolder->New(minType);
				array_args[5] := IntHolder->New(maxType);

				Proxy->GetDllProxy()->CallFunction("sdl_event_peeps", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};
			
			return -1;
		}
		
		function : Has(type : Int) ~ Bool {
			array_args := Base->New[2];
			array_args[0] := IntHolder->New();
			array_args[1] := IntHolder->New(type);

			Proxy->GetDllProxy()->CallFunction("sdl_event_has", array_args);

			value := array_args[0]->As(IntHolder);
			return value->Get() = 0 ? false : true;
		}
		
		function : Flush(type : Int) ~ Nil {
			array_args := Base->New[1];
			array_args[0] := IntHolder->New(type);
			Proxy->GetDllProxy()->CallFunction("sdl_event_flush", array_args);
		}
		
		method : public : Poll() ~ Int {
			if(@event <> 0) {
				array_args := Base->New[2];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@event);

				Proxy->GetDllProxy()->CallFunction("sdl_event_poll", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};
		
			return -1;
		}
		
		method : public : Wait() ~ Int {
			if(@event <> 0) {
				array_args := Base->New[2];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@event);

				Proxy->GetDllProxy()->CallFunction("sdl_event_wait", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};
			
			return -1;
		}
		
		method : public : WaitTimeout(timeout : Int) ~ Int {
			if(@event <> 0) {
				array_args := Base->New[3];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@event);
				array_args[2] := IntHolder->New(timeout);

				Proxy->GetDllProxy()->CallFunction("sdl_event_wait_timeout", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};
			
			return -1;
		}
		
		method : public : Push() ~ Int {
			if(@event <> 0) {
				array_args := Base->New[2];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@event);

				Proxy->GetDllProxy()->CallFunction("sdl_event_push", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};
			
			return -1;
		}
		
		function : State(type : Int, state : Int) ~ Int {
			array_args := Base->New[3];
			array_args[0] := IntHolder->New();
			array_args[1] := IntHolder->New(type);
			array_args[2] := IntHolder->New(state);

			Proxy->GetDllProxy()->CallFunction("sdl_event_state", array_args);

			value := array_args[0]->As(IntHolder);
			return value->Get();
		}
		
		function : Registers(numevents : Int) ~ Int {
			array_args := Base->New[2];
			array_args[0] := IntHolder->New();
			array_args[1] := IntHolder->New(numevents);

			Proxy->GetDllProxy()->CallFunction("sdl_event_registers", array_args);

			value := array_args[0]->As(IntHolder);
			return value->Get();
		}
	}
	
	enum EventAction {
		SDL_ADDEVENT,
		SDL_PEEKEVENT,
		SDL_GETEVENT
	}
	
	#~
	Core class
	~#
	class Core {
		function : Init(flags : Int) ~ Int {
			array_args := Base->New[2];
			array_args[0] := IntHolder->New();
			array_args[1] := IntHolder->New(flags);
			
			Proxy->GetDllProxy()->CallFunction("sdl_core_init", array_args);
			value := array_args[0]->As(IntHolder);
			return value->Get();
		}

		function : InitSubSystem(flags : Int) ~ Int {
			array_args := Base->New[2];
			array_args[0] := IntHolder->New();
			array_args[1] := IntHolder->New(flags);
			
			Proxy->GetDllProxy()->CallFunction("sdl_core_init_sub_system", array_args);
			value := array_args[0]->As(IntHolder);
			return value->Get();
		}
		
		function : QuitSubSystem(flags : Int) ~ Nil {
			array_args := Base->New[1];
			array_args[0] := IntHolder->New(flags);
			
			Proxy->GetDllProxy()->CallFunction("sdl_core_quit_sub_system", array_args);
		}
		
		function : WasInit(flags : Int) ~ Int {
			array_args := Base->New[2];
			array_args[0] := IntHolder->New();
			array_args[1] := IntHolder->New(flags);
			
			Proxy->GetDllProxy()->CallFunction("sdl_core_was_init", array_args);
			value := array_args[0]->As(IntHolder);
			return value->Get();
		}
		
		function : Quit() ~ Nil {
			array_args := Base->New[0];
			Proxy->GetDllProxy()->CallFunction("sdl_core_quit", array_args);
		}
		
		function : GLLoadLibrary(path : String) ~ Int {
			array_args := Base->New[2];
			array_args[0] := IntHolder->New();
			array_args[1] := path;

			Proxy->GetDllProxy()->CallFunction("sdl_core_gl_load_library", array_args);

			value := array_args[0]->As(IntHolder);
			return value->Get();
		}
		
		function : GLUnloadLibrary() ~ Nil {
			array_args := Base->New[0];
			Proxy->GetDllProxy()->CallFunction("sdl_core_gl_unload_library", array_args);
		}
		
		function : GLExtensionSupported(extension : String) ~ Bool {
			array_args := Base->New[2];
			array_args[0] := IntHolder->New();
			array_args[1] := extension;

			Proxy->GetDllProxy()->CallFunction("sdl_core_gl_extension_supported", array_args);

			value := array_args[0]->As(IntHolder);
			return value->Get() = 0 ? false : true;
		}
		
		function : GLResetAttributes() ~ Nil {
			array_args := Base->New[0];
			Proxy->GetDllProxy()->CallFunction("sdl_core_gl_reset_attributes", array_args);
		}
		
		function : GLSetAttribute(attr : GLattr, value : Int) ~ Int {
			array_args := Base->New[3];
			array_args[0] := IntHolder->New();
			array_args[1] := IntHolder->New(attr->As(Int));
			array_args[2] := IntHolder->New(value);

			Proxy->GetDllProxy()->CallFunction("sdl_core_gl_set_attribute", array_args);

			rtrn_value := array_args[0]->As(IntHolder);
			return rtrn_value->Get();
		}
		
		function : GLGetAttribute(attr : GLattr, value : IntHolder) ~ Int {
			array_args := Base->New[3];
			array_args[0] := IntHolder->New();
			array_args[1] := IntHolder->New(attr->As(Int));
			array_args[2] := value;

			Proxy->GetDllProxy()->CallFunction("sdl_core_gl_get_attribute", array_args);

			value := array_args[0]->As(IntHolder);
			return value->Get();
		}
		
		function : GLGetCurrent() ~ Window {
			array_args := Base->New[1];
			array_args[0] := IntHolder->New();

			Proxy->GetDllProxy()->CallFunction("sdl_core_gl_get_current", array_args);

			value := array_args[0]->As(IntHolder);
			return Window->New(value->Get());
		}
		
		function : GLSetSwapInterval(interval : Int) ~ Int {
			array_args := Base->New[2];
			array_args[0] := IntHolder->New();
			array_args[1] := IntHolder->New(interval);

			Proxy->GetDllProxy()->CallFunction("sdl_core_gl_set_swap_interval", array_args);

			value := array_args[0]->As(IntHolder);
			return value->Get();
		}
		
		function : GLGetSwapInterval() ~ Int {
			array_args := Base->New[1];
			array_args[0] := IntHolder->New();

			Proxy->GetDllProxy()->CallFunction("sdl_core_gl_get_swap_interval", array_args);

			value := array_args[0]->As(IntHolder);
			return value->Get();
		}

		function : GetError() ~ String {
			array_args := Base->New[1];
			array_args[0] := Nil;

			Proxy->GetDllProxy()->CallFunction("sdl_core_get_error", array_args);
			
			return array_args[0]->As(String);
		}
	}
	
	enum GLattr {
		SDL_GL_RED_SIZE,
	    SDL_GL_GREEN_SIZE,
	    SDL_GL_BLUE_SIZE,
	    SDL_GL_ALPHA_SIZE,
	    SDL_GL_BUFFER_SIZE,
	    SDL_GL_DOUBLEBUFFER,
	    SDL_GL_DEPTH_SIZE,
	    SDL_GL_STENCIL_SIZE,
	    SDL_GL_ACCUM_RED_SIZE,
	    SDL_GL_ACCUM_GREEN_SIZE,
	    SDL_GL_ACCUM_BLUE_SIZE,
	    SDL_GL_ACCUM_ALPHA_SIZE,
	    SDL_GL_STEREO,
	    SDL_GL_MULTISAMPLEBUFFERS,
	    SDL_GL_MULTISAMPLESAMPLES,
	    SDL_GL_ACCELERATED_VISUAL,
	    SDL_GL_RETAINED_BACKING,
	    SDL_GL_CONTEXT_MAJOR_VERSION,
	    SDL_GL_CONTEXT_MINOR_VERSION,
	    SDL_GL_CONTEXT_EGL,
	    SDL_GL_CONTEXT_FLAGS,
	    SDL_GL_CONTEXT_PROFILE_MASK,
	    SDL_GL_SHARE_WITH_CURRENT_CONTEXT,
	    SDL_GL_FRAMEBUFFER_SRGB_CAPABLE,
	    SDL_GL_CONTEXT_RELEASE_BEHAVIOR,
	    SDL_GL_CONTEXT_RESET_NOTIFICATION,
	    SDL_GL_CONTEXT_NO_ERROR
	}
	
	#~
	Hints
	~#
	class Hints {
		method : public : SetWithPriority(name : String, value : String, priority : HintPriority) ~ Bool {
			array_args := Base->New[4];
			array_args[0] := IntHolder->New();
			array_args[1] := name;
			array_args[2] := value;
			array_args[3] := IntHolder->New(priority->As(Int));
			Proxy->GetDllProxy()->CallFunction("sdl_hints_set_hint_with_priority", array_args);
			
			rvalue := array_args[0]->As(IntHolder);
			return rvalue->Get() = 0 ? false : true;
		}
		
		function : Set(name : String, value : String) ~ Bool {
			array_args := Base->New[3];
			array_args[0] := IntHolder->New();
			array_args[1] := name;
			array_args[2] := value;

			Proxy->GetDllProxy()->CallFunction("sdl_hints_set_hint", array_args);

			rvalue := array_args[0]->As(IntHolder);
			return rvalue->Get() = 0 ? false : true;
		}
		
		function : Get(name : String) ~ String {
			array_args := Base->New[2];
			array_args[0] := Nil;
			array_args[1] := name;
			
			Proxy->GetDllProxy()->CallFunction("sdl_hints_get_hint", array_args);

			return array_args[0]->As(String);
		}

		function : Clear() ~ Nil {
			array_args := Base->New[0];
			Proxy->GetDllProxy()->CallFunction("sdl_hints_clear", array_args);
		}
	}
	
	consts HintPriority {
		SDL_HINT_DEFAULT := 0,
		SDL_HINT_NORMAL := 1,
		SDL_HINT_OVERRIDE := 2
	}
	
	#~
	Color class may be used independently 
	~#
	class Color {
		@r : Int;
		@g : Int;
		@b : Int;
		@a : Int;
		
		New() {
			@r := 0;
			@g := 0;
			@b := 0;
		}

		New(r : Int, g : Int, b : Int) {
			@r := r;
			@g := g;
			@b := b;
		}

		method : public : GetR() ~ Int {
			return @r;
		}
		
		method : public : SetR(r : Int) ~ Nil {
			@r := r;
		}

		method : public : GetG() ~ Int {
			return @g;
		}
		
		method : public : SetG(g : Int) ~ Nil {
			@g := g;
		}

		method : public : GetB() ~ Int {
			return @b;
		}
		
		method : public : SetB(b : Int) ~ Nil {
			@b := b;
		}

		method : public : GetA() ~ Int {
			return @a;
		}
		
		method : public : SetA(a : Int) ~ Nil {
			@a := a;
		}
	}
	
	class DisplayMode {
		@format : Int;
	    @w : Int;
	    @h : Int;
	    @refresh_rate : Int;
		
	    New() {
	    }

		New(format : Int, w : Int, h : Int, refresh_rate : Int) {
			@format := format;
			@w := w;
			@w := w;
			@refresh_rate := refresh_rate;
		}

		method : public : GetFormat() ~ Int {
			return @format;
		}

		method : public : SetFormat(format : Int) ~ Nil {
			@format := format;
		}

		method : public : GetW() ~ Int {
			return @w;
		}

		method : public : SetW(w : Int) ~ Nil {
			@w := w;
		}

		method : public : GetH() ~ Int {
			return @h;
		}

		method : public : SetH(h : Int) ~ Nil {
			@h := h;
		}

		method : public : GetRefreshRate() ~ Int {
			return @refresh_rate;
		}

		method : public : SetRefreshRate(refresh_rate : Int) ~ Nil {
			@refresh_rate := refresh_rate;
		}
	}
	
	class Point {
		@x : Int;
		@y : Int;
		
		New() {
			@x := 0;
			@y := 0;
		}
		
		method : public : GetX() ~ Int {
			return @x;
		}
		
		method : public : GetY() ~ Int {
			return @y;
		}
		
		method : public : SetX(x : Int) ~ Nil {
			@x := x;
		}
		
		method : public : SetY(y : Int) ~ Nil {
			@y := y;
		}
	}

	class Rect {
		@x : Int;
		@y : Int;
		@w : Int;
		@h : Int;
		
		New() {
		}
		
		New(w : Int, h : Int) {
			@x := 0;
			@y := 0;
			@w := w;
			@h := h;
		}

		New(x : Int, y : Int, w : Int, h : Int) {
			@x := x;
			@y := y;
			@w := w;
			@h := h;
		}

		method : public : GetX() ~ Int {
			return @x;
		}
		
		method : public : GetY() ~ Int {
			return @y;
		}
		
		method : public : GetH() ~ Int {
			return @h;
		}
		
		method : public : GetW() ~ Int {
			return @w;
		}
		
		method : public : SetX(x : Int) ~ Nil {
			@x := x;
		}
		
		method : public : SetY(y : Int) ~ Nil {
			@y := y;
		}
		
		method : public : SetH(h : Int) ~ Nil {
			@h := h;
		}
		
		method : public : SetW(w : Int) ~ Nil {
			@w := w;
		}
		
		method : public : HasIntersection(B : Rect) ~ Bool {
			array_args := Base->New[3];
			array_args[0] := IntHolder->New();
			array_args[1] := @self;
			array_args[2] := B;

			Proxy->GetDllProxy()->CallFunction("sdl_rect_has_intersection", array_args);

			value := array_args[0]->As(IntHolder);
			return value->Get() = 0 ? false : true;
		}
		
		method : public : Intersect(B : Rect, result : Rect) ~ Bool {
			array_args := Base->New[4];
			array_args[0] := IntHolder->New();
			array_args[1] := @self;
			array_args[2] := B;
			array_args[3] := result;

			Proxy->GetDllProxy()->CallFunction("sdl_rect_intersect", array_args);
			
			value := array_args[0]->As(IntHolder);
			return value->Get() = 0 ? false : true;
		}
		
		method : public : Union(B : Rect, result : Rect) ~ Nil {
			array_args := Base->New[3];
			array_args[0] := @self;
			array_args[1] := B;
			array_args[2] := result;

			Proxy->GetDllProxy()->CallFunction("sdl_rect_union", array_args);
		}
		
		method : public : IntersectAndLine(X1 : IntHolder, Y1 :IntHolder, X2 : IntHolder, Y2 : IntHolder) ~ Bool {
			array_args := Base->New[6];
			array_args[0] := IntHolder->New();
			array_args[1] := @self;
			array_args[2] := X1;
			array_args[3] := Y1;
			array_args[4] := X2;
			array_args[5] := Y2;

			Proxy->GetDllProxy()->CallFunction("sdl_rect_intersect_and_line", array_args);

			value := array_args[0]->As(IntHolder);
			return value->Get() = 0 ? false : true;
		}
	}
	
	#~
	PixelFormat class
	~#
	class PixelFormat {
		@format : Int;
		@palette : Int;
		@bits_per_pixel : Int;
		@bytes_per_pixel : Int;
		@r_mask : Int;
		@g_mask : Int;
		@b_mask : Int;
		@a_mask : Int;
		@r_loss : Int;
	    @g_loss : Int;
	    @b_loss : Int;
	    @a_loss : Int;
	    @r_shift : Int;
	    @g_shift : Int;
	    @b_shift : Int;
	    @a_shift : Int;

		New() {
		}

		method : public : MapRGB(r : Int, g : Int, b : Int) ~ Int {
			array_args := Base->New[5];
			array_args[0] := IntHolder->New();
			array_args[1] := @self;
			array_args[2] := IntHolder->New(r);
			array_args[3] := IntHolder->New(g);
			array_args[4] := IntHolder->New(b);

			Proxy->GetDllProxy()->CallFunction("sdl_pixelformat_maprgb", array_args);

			value := array_args[0]->As(IntHolder);
			return value->Get();
		}
		
		method : public : GetFormat() ~ Int {
			return @format;
		}
		
		method : public : SetFormat(format : Int) ~ Nil {
			@format := format;
		}
		
		method : public : GetBitsPerPixel() ~ Int {
			return @bits_per_pixel;
		}
		
		method : public : SetBitsPerPixel(bits_per_pixel : Int) ~ Nil {
			@bits_per_pixel := bits_per_pixel;
		}
		
		method : public : GetBytesPerPixel() ~ Int {
			return @bytes_per_pixel;
		}
		
		method : public : SetBytesPerPixel(bytes_per_pixel : Int) ~ Nil {
			@bytes_per_pixel := bytes_per_pixel;
		}
		
		method : public : GetRmask() ~ Int {
			return @r_mask;
		}
		
		method : public : SetRmask(r_mask : Int) ~ Nil {
			@r_mask := r_mask;
		}
		
		method : public : GetGmask() ~ Int {
			return @g_mask;
		}
		
		method : public : SetGmask(g_mask : Int) ~ Nil {
			@g_mask := g_mask;
		}
		
		method : public : GetBmask() ~ Int {
			return @b_mask;
		}
		
		method : public : SetBmask(b_mask : Int) ~ Nil {
			@b_mask := b_mask;
		}
		
		method : public : GetAmask() ~ Int {
			return @a_mask;
		}
		
		method : public : SetAmask(a_mask : Int) ~ Nil {
			@a_mask := a_mask;
		}
	}
	
	#~
	Core class
	~#
	class Surface {
		@surface : Int;
		
		New(surface : Int) {
			@surface := surface;
		}
		
		New(flags : Int, width : Int, height : Int, depth : Int, Rmask : Int, Gmask : Int, Bmask : Int, Amask : Int) {
			array_args := Base->New[9];
			array_args[0] := IntHolder->New();
			array_args[1] := IntHolder->New(flags);
			array_args[2] := IntHolder->New(width);
			array_args[3] := IntHolder->New(height);
			array_args[4] := IntHolder->New(depth);
			array_args[5] := IntHolder->New(Rmask);
			array_args[6] := IntHolder->New(Gmask);
			array_args[7] := IntHolder->New(Bmask);
			array_args[8] := IntHolder->New(Amask);

			Proxy->GetDllProxy()->CallFunction("sdl_surface_creatergb", array_args);
			value := array_args[0]->As(IntHolder);
			@surface := value->Get();
		}
		
		method : public : IsNull() ~ Bool {
			return @surface = 0;
		}

		method : public : Free() ~ Nil {
			if(@surface <> 0) {
				array_args := Base->New[1];
				array_args[0] := IntHolder->New(@surface);

				Proxy->GetDllProxy()->CallFunction("sdl_surface_free", array_args);
				@surface := 0;
			};
		}
		
		method : public : GetPixelFormat() ~ PixelFormat {
			if(@surface <> 0) {
				pixel_format := PixelFormat->New();

				array_args := Base->New[2];
				array_args[0] := pixel_format;
				array_args[1] := IntHolder->New(@surface);
		
				Proxy->GetDllProxy()->CallFunction("sdl_surface_get_pixel_format", array_args);

				return pixel_format;
			};

			return Nil;
		}

		method : public : GetW() ~ Int {
			if(@surface <> 0) {
				array_args := Base->New[2];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@surface);

				Proxy->GetDllProxy()->CallFunction("sdl_surface_get_w", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};
			
			return -1;
		}

		method : public : GetH() ~ Int {
			if(@surface <> 0) {
				array_args := Base->New[2];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@surface);

				Proxy->GetDllProxy()->CallFunction("sdl_surface_get_h", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};
			
			return -1;
		}

		method : public : GetPitch() ~ Int {
			if(@surface <> 0) {
				array_args := Base->New[2];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@surface);

				Proxy->GetDllProxy()->CallFunction("sdl_surface_get_pitch", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};
			
			return -1;
		}
		
		method : public : Lock() ~ Int {
			if(@surface <> 0) {
				array_args := Base->New[2];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@surface);

				Proxy->GetDllProxy()->CallFunction("sdl_surface_lock", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};
			
			return -1;
		}
		
		method : public : Unlock() ~ Nil {
			if(@surface <> 0) {
				array_args := Base->New[1];
				array_args[0] := IntHolder->New(@surface);
				Proxy->GetDllProxy()->CallFunction("sdl_surface_unlock", array_args);
			};
		}

		method : public : CreateTexture(renderer : Renderer) ~ Texture {
			if(@surface <> 0 & renderer <> Nil) {
				array_args := Base->New[3];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@surface);
				array_args[2] := renderer;
				
				Proxy->GetDllProxy()->CallFunction("sdl_surface_create_texture", array_args);

				value := array_args[0]->As(IntHolder);
				return Texture->New(value->Get());
			};

			return Nil;
		}
		
		function : LoadBMP(file : String) ~ Surface {
			array_args := Base->New[2];
			array_args[0] := IntHolder->New();
			array_args[1] := file;

			Proxy->GetDllProxy()->CallFunction("sdl_surface_loadbmp", array_args);
			value := array_args[0]->As(IntHolder);
			return Surface->New(value->Get());
		}
		
		function : SaveBMP(surface : Surface, file : String) ~ Int {
			array_args := Base->New[3];
			array_args[0] := IntHolder->New();
			array_args[1] := surface;
			array_args[2] := file;

			@lib_proxy := Proxy->GetDllProxy();
			@lib_proxy->CallFunction("sdl_surface_savebmp", array_args);

			value := array_args[0]->As(IntHolder);
			return value->Get();
		}
		
		method : public : SetRLE(flag : Int) ~ Int {
			if(@surface <> 0) {
				array_args := Base->New[3];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@surface);
				array_args[2] := IntHolder->New(flag);

				Proxy->GetDllProxy()->CallFunction("sdl_surface_setrle", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};
			
			return -1;
		}
		
		method : public : SetColorKey(flag : Bool, key : Int) ~ Int {
			if(@surface <> 0) {
				array_args := Base->New[4];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@surface);
				array_args[2] := IntHolder->New(flag ? 1 : 0);
				array_args[3] := IntHolder->New(key);

				Proxy->GetDllProxy()->CallFunction("sdl_surface_set_color_key", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};
			
			return -1;
		}
		
		method : public : GetColorKey(key : IntHolder) ~ Int {
			if(@surface <> 0) {
				array_args := Base->New[3];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@surface);
				array_args[2] := key;

				Proxy->GetDllProxy()->CallFunction("sdl_surface_get_color_key", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};
			
			return -1;
		}
		
		method : public : SetColorMod(r : Int, g : Int, b : Int) ~ Int {
			if(@surface <> 0) {
				array_args := Base->New[5];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@surface);
				array_args[2] := IntHolder->New(r);
				array_args[3] := IntHolder->New(g);
				array_args[4] := IntHolder->New(b);

				Proxy->GetDllProxy()->CallFunction("sdl_surface_set_color_mod", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};
			
			return -1;
		}
		
		method : public : GetColorMod(r : IntHolder, g : IntHolder, b : IntHolder) ~ Int {
			if(@surface <> 0) {		
				array_args := Base->New[5];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@surface);
				array_args[2] := r;
				array_args[3] := g;
				array_args[4] := b;

				@lib_proxy := Proxy->GetDllProxy();
				@lib_proxy->CallFunction("sdl_surface_get_color_mod", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};
			
			return -1;
		}
		
		method : public : SetAlphaMod(alpha : Int) ~ Int {
			if(@surface <> 0) {
				array_args := Base->New[3];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@surface);
				array_args[2] := IntHolder->New(alpha);

				Proxy->GetDllProxy()->CallFunction("sdl_surface_set_alpha_mod", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};
			
			return -1;
		}
		
		method : public : GetAlphaMod(alpha : IntHolder) ~ Int {
			if(@surface <> 0) {
				array_args := Base->New[3];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@surface);
				array_args[2] := alpha;

				Proxy->GetDllProxy()->CallFunction("sdl_surface_get_alpha_mod", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};
			
			return -1;
		}
		
		method : public : SetBlendMode(blendMode : BlendMode) ~ Int {
			if(@surface <> 0) {
				array_args := Base->New[3];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@surface);
				array_args[2] := IntHolder->New(blendMode->As(Int));

				Proxy->GetDllProxy()->CallFunction("sdl_surface_set_blend_mode", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};
			
			return -1;
		}
		
		method : public : GetBlendMode(blendMode : IntHolder) ~ Int {
			if(@surface <> 0) {
				array_args := Base->New[3];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@surface);
				array_args[2] := blendMode;

				Proxy->GetDllProxy()->CallFunction("sdl_surface_get_blend_mode", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};
			
			return -1;
		}
		
		method : public : GetClipRect(rect : Rect) ~ Nil {
			if(@surface <> 0) {
				array_args := Base->New[2];
				array_args[0] := IntHolder->New(@surface);
				array_args[1] := rect;

				Proxy->GetDllProxy()->CallFunction("sdl_surface_get_clip_rect", array_args);
			};
		}
		
		method : public : SetClipRect(rect : Rect) ~ Bool {
			if(@surface <> 0) {
				array_args := Base->New[3];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@surface);
				array_args[2] := rect;

				Proxy->GetDllProxy()->CallFunction("sdl_surface_set_clip_rect", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get() = 0 ? false : true;
			};
			
			return false;
		}
		
		method : public : Convert(fmt : PixelFormat, flags : Int) ~ Surface {
			if(@surface <> 0) {
				array_args := Base->New[4];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@surface);
				array_args[2] := fmt;
				array_args[3] := IntHolder->New(flags);

				Proxy->GetDllProxy()->CallFunction("sdl_surface_convert", array_args);

				value := array_args[0]->As(IntHolder);
				return Surface->New(value->Get());
			};
			
			return Nil;
		}
		
		method : public : FillRect(rect : Rect, color : Int) ~ Int {
			if(@surface <> 0) {
				array_args := Base->New[4];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@surface);
				array_args[2] := rect;
				array_args[3] := IntHolder->New(color);

				Proxy->GetDllProxy()->CallFunction("sdl_surface_fill_rect", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};
			
			return -1;
		}
		
		method : public : UpperBlit(srcrect : Rect, dst : Surface, dstrect : Rect) ~ Int {
			if(@surface <> 0) {
				array_args := Base->New[5];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@surface);
				array_args[2] := srcrect;
				array_args[3] := dst;
				array_args[4] := dstrect;

				Proxy->GetDllProxy()->CallFunction("sdl_surface_upper_blit", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};

			return -1;
		}
		
		method : public : LowerBlit(srcrect : Rect, dst : Surface, dstrect : Rect) ~ Int {
			if(@surface <> 0) {
				array_args := Base->New[5];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@surface);
				array_args[2] := srcrect;
				array_args[3] := dst;
				array_args[4] := dstrect;

				Proxy->GetDllProxy()->CallFunction("sdl_surface_lower_blit", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};

			return -1;
		}
		
		method : public : SoftStretch(srcrect : Rect, dst : Surface, dstrect : Rect) ~ Int {
			if(@surface <> 0) {
				array_args := Base->New[5];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@surface);
				array_args[2] := srcrect;
				array_args[3] := dst;
				array_args[4] := dstrect;

				@lib_proxy := Proxy->GetDllProxy();
				@lib_proxy->CallFunction("sdl_surface_soft_stretch", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};

			return -1;
		}
		
		method : public : BlitScaled(srcrect : Rect, dst : Surface, dstrect : Rect) ~ Int {
			return UpperBlitScaled(srcrect, dst, dstrect);
		}
		
		method : public : UpperBlitScaled(srcrect : Rect, dst : Surface, dstrect : Rect) ~ Int {
			if(@surface <> 0) {
				array_args := Base->New[5];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@surface);
				array_args[2] := srcrect;
				array_args[3] := dst;
				array_args[4] := dstrect;

				Proxy->GetDllProxy()->CallFunction("sdl_surface_upper_blit_scaled", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};

			return -1;
		}
		
		method : public : LowerBlitScaled(srcrect : Rect, dst : Surface, dstrect : Rect) ~ Int {
			if(@surface <> 0) {
				array_args := Base->New[5];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@surface);
				array_args[2] := srcrect;
				array_args[3] := dst;
				array_args[4] := dstrect;

				Proxy->GetDllProxy()->CallFunction("sdl_surface_lower_blit_scaled", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};

			return -1;
		}
	}
	
	consts BlendMode {
		SDL_BLENDMODE_NONE := 0x00000000,
		SDL_BLENDMODE_BLEND := 0x00000001,
		SDL_BLENDMODE_ADD := 0x00000002,
		SDL_BLENDMODE_MOD := 0x00000004 
	}

	class Image {
		function : Init(flags : Int) ~ Int {
	        array_args := Base->New[2];
	        array_args[0] := IntHolder->New();
	        array_args[1] := IntHolder->New(flags);

	        Proxy->GetDllProxy()->CallFunction("sdl_image_init", array_args);

	        value := array_args[0]->As(IntHolder);
	        return value->Get();
		}
	
		function : Quit() ~ Nil {
			Proxy->GetDllProxy()->CallFunction("sdl_image_quit", Nil->As(Base[]));
		}

		function : Load(file : String) ~ Surface {
	        array_args := Base->New[2];
	        array_args[0] := IntHolder->New();
	        array_args[1] := file;

	        Proxy->GetDllProxy()->CallFunction("sdl_image_load", array_args);

	        value := array_args[0]->As(IntHolder);
			return Surface->New(value->Get());
		}
	}

	consts ImageFlags {
	    IMG_INIT_JPG := 0x00000001,
	    IMG_INIT_PNG := 0x00000002,
	    IMG_INIT_TIF := 0x00000004,
	    IMG_INIT_WEBP := 0x00000008
	}

	class Renderer {
		@renderer : Int;

		New(renderer : Int) {
			@renderer := renderer;
		}

		New(window : Window, index : Int, flags : Int) {
	        array_args := Base->New[4];
	        array_args[0] := IntHolder->New();
	        array_args[1] := window;
	        array_args[2] := IntHolder->New(index);
	        array_args[3] := IntHolder->New(flags);

	        Proxy->GetDllProxy()->CallFunction("sdl_renderer_create", array_args);

	        value := array_args[0]->As(IntHolder);
			@renderer := value->Get();
		}

		method : public : Destroy() ~ Nil {
			array_args := Base->New[1];
			array_args[0] := IntHolder->New(@renderer);

			Proxy->GetDllProxy()->CallFunction("sdl_renderer_destroy", array_args);

		}

		method : public : IsNull() ~ Bool {
			return @renderer = 0;
		}

		function : GetNumRenderDrivers() ~ Int {
			array_args := Base->New[1];
			array_args[0] := IntHolder->New();

			Proxy->GetDllProxy()->CallFunction("sdl_renderer_get_num_render_drivers", array_args);

			value := array_args[0]->As(IntHolder);
			return value->Get();
		}

		method : public : FillRect(rect : Rect) ~ Int {
			if(@renderer <> 0) {
				array_args := Base->New[3];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@renderer);
				array_args[2] := rect;

				Proxy->GetDllProxy()->CallFunction("sdl_renderer_render_fill_rect", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};

			return -1;
		}

		function : GetRenderDriverInfo(index : Int, info : RendererInfo) ~ Int {
			array_args := Base->New[3];
			array_args[0] := IntHolder->New();
			array_args[1] := IntHolder->New(index);
			array_args[2] := info;

			Proxy->GetDllProxy()->CallFunction("sdl_renderer_get_render_driver_info", array_args);

			value := array_args[0]->As(IntHolder);
			return value->Get();
		}

		function : CreateSoftwareRenderer(surface : Surface) ~ Renderer {
			array_args := Base->New[2];
			array_args[0] := IntHolder->New();
			array_args[1] := surface;

			Proxy->GetDllProxy()->CallFunction("sdl_renderer_create_software", array_args);

			value := array_args[0]->As(IntHolder);
	        return Renderer->New(value->Get());
		}

		function : Get(window : Window) ~ Renderer {
			array_args := Base->New[2];
			array_args[0] := IntHolder->New();
			array_args[1] := window;

			Proxy->GetDllProxy()->CallFunction("sdl_renderer_get", array_args);

			value := array_args[0]->As(IntHolder);
	        return Renderer->New(value->Get());
		}

		method : public : SetDrawColor(r : Int, g : Int, b : Int, a : Int) ~ Int {
			if(@renderer <> 0) {
		        array_args := Base->New[6];
		        array_args[0] := IntHolder->New();
		        array_args[1] := IntHolder->New(@renderer);
		        array_args[2] := IntHolder->New(r);
		        array_args[3] := IntHolder->New(g);
		        array_args[4] := IntHolder->New(b);
		        array_args[5] := IntHolder->New(a);

		        Proxy->GetDllProxy()->CallFunction("sdl_renderer_set_render_draw_color", array_args);

		        value := array_args[0]->As(IntHolder);
		        return value->Get();
		    };

		    return -1;
		}

		method : public : GetRenderDrawColor(r : IntHolder, g : IntHolder, b : IntHolder, a : IntHolder) ~ Int {
			array_args := Base->New[6];
			array_args[0] := IntHolder->New();
			array_args[1] := IntHolder->New(@renderer);
			array_args[2] := r;
			array_args[3] := g;
			array_args[4] := b;
			array_args[5] := a;

			Proxy->GetDllProxy()->CallFunction("sdl_renderer_get_render_draw_color", array_args);

			value := array_args[0]->As(IntHolder);
			return value->Get();
		}

		method : public : DrawPoint(x : Int, y : Int) ~ Int {
			if(@renderer <> 0) {
				array_args := Base->New[4];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@renderer);
				array_args[2] := IntHolder->New(x);
				array_args[3] := IntHolder->New(y);

				Proxy->GetDllProxy()->CallFunction("sdl_renderer_render_draw_point", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};

			return -1;
		}

		method : public : DrawLine(x1 : Int, y1 : Int, x2 : Int, y2 : Int) ~ Int {
			if(@renderer <> 0) {
				array_args := Base->New[6];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@renderer);
				array_args[2] := IntHolder->New(x1);
				array_args[3] := IntHolder->New(y1);
				array_args[4] := IntHolder->New(x2);
				array_args[5] := IntHolder->New(y2);

				Proxy->GetDllProxy()->CallFunction("sdl_renderer_render_draw_line", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};

			return -1;
		}

		method : public : DrawRect(rect : Rect) ~ Int {
			if(@renderer <> 0) {
				array_args := Base->New[3];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@renderer);
				array_args[2] := rect;

				@lib_proxy := Proxy->GetDllProxy();
				@lib_proxy->CallFunction("sdl_renderer_render_draw_rect", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};

			return -1;
		}

		method : public : GetViewport(rect : Rect) ~ Nil {
			if(@renderer <> 0) {
				array_args := Base->New[2];
				array_args[0] := IntHolder->New(@renderer);
				array_args[1] := rect;

				@lib_proxy := Proxy->GetDllProxy();
				@lib_proxy->CallFunction("sdl_renderer_render_get_viewport", array_args);
			};
		}

		method : public : SetViewport(rect : Rect) ~ Int {
			if(@renderer <> 0) {
				array_args := Base->New[3];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@renderer);
				array_args[2] := rect;

				@lib_proxy := Proxy->GetDllProxy();
				@lib_proxy->CallFunction("sdl_renderer_render_set_viewport", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};

			return -1;
		}

		method : public : GetInfo(info : RendererInfo) ~ Int {
			if(@renderer <> 0) {
				array_args := Base->New[3];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@renderer);
				array_args[2] := info;

				Proxy->GetDllProxy()->CallFunction("sdl_renderer_get_info", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};

			return -1;
		}

		method : public : Clear() ~ Int {
			if(@renderer <> 0) {
				array_args := Base->New[2];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@renderer);

				Proxy->GetDllProxy()->CallFunction("sdl_renderer_render_clear", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};

			return -1;
		}

		method : public : Copy(texture : Texture, srcrect : Rect, dstrect : Rect) ~ Int {
			if(@renderer <> 0) {
				array_args := Base->New[5];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@renderer);
				array_args[2] := texture;
				array_args[3] := srcrect;
				array_args[4] := dstrect;

				Proxy->GetDllProxy()->CallFunction("sdl_renderer_render_copy", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};

			return -1;
		}

		method : public : CopyEx(texture : Texture, srcrect : Rect, dstrect : Rect, angle : Float, center : Point, flip : RendererFlip) ~ Int {
			if(@renderer <> 0) {
				array_args := Base->New[8];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@renderer);
				array_args[2] := texture;
				array_args[3] := srcrect;
				array_args[4] := dstrect;
				array_args[5] := FloatHolder->New(angle);
				array_args[6] := center;
				array_args[7] := IntHolder->New(flip->As(Int));

				@lib_proxy := Proxy->GetDllProxy();
				@lib_proxy->CallFunction("sdl_renderer_render_copy_ex", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};

			return -1;
		}

		method : public : Present() ~ Nil {
			array_args := Base->New[1];
			array_args[0] := IntHolder->New(@renderer);

			Proxy->GetDllProxy()->CallFunction("sdl_renderer_render_present", array_args);
		}
	}

	consts RendererFlip {
		SDL_FLIP_NONE := 0x00000000,
    	SDL_FLIP_HORIZONTAL := 0x00000001,
    	SDL_FLIP_VERTICAL := 0x00000002
	}

	class RendererInfo {
		@name : String;
	    @flags : Int;
	    @num_texture_formats : Int;
	    @texture_formats : Int[];
	    @max_texture_width : Int;
	    @max_texture_height : Int;
		
		New() {
			@texture_formats := Int->New[16];
		}

		method : public : GetName() ~ String {
			return @name;
		}

		method : public : GetFlags() ~ Int {
			return @flags;
		}

		method : public : GetNumTextureFormats() ~ Int {
			return @num_texture_formats;
		}

		method : public : GetTextureFormats() ~ Int[] {
			return @texture_formats;
		}

		method : public : GetMaxTextureWidth() ~ Int {
			return @max_texture_width;
		}

		method : public : GetMaxTextureHeight() ~ Int {
			return @max_texture_height;
		}
	}

	consts RendererFlags {
	    SDL_RENDERER_SOFTWARE := 0x00000001,
	    SDL_RENDERER_ACCELERATED := 0x00000002,
	    SDL_RENDERER_PRESENTVSYNC := 0x00000004,
	    SDL_RENDERER_TARGETTEXTURE := 0x00000008
	}

	class Texture {
		@texture : Int;

		New(renderer : Renderer, format : Int, access : Int, w : Int, h : Int) {
			array_args := Base->New[6];
			array_args[0] := IntHolder->New();
			array_args[1] := renderer;
			array_args[2] := IntHolder->New(format);
			array_args[3] := IntHolder->New(access);
			array_args[4] := IntHolder->New(w);
			array_args[5] := IntHolder->New(h);

			Proxy->GetDllProxy()->CallFunction("sdl_texture_create", array_args);

			value := array_args[0]->As(IntHolder);
			@texture := value->Get();
		}

		New(texture : Int) {
			@texture := texture;
		}

		method : public : Destroy() ~ Nil {
			array_args := Base->New[1];
			array_args[0] := IntHolder->New(@texture);

			Proxy->GetDllProxy()->CallFunction("sdl_texture_destroy", array_args);
		}
		
		method : public : IsNull() ~ Bool {
			return @texture = 0;
		}

		method : public : Query(format : IntHolder, access : IntHolder, w : IntHolder, h : IntHolder) ~ Int {
			if(@texture <> 0) {
				array_args := Base->New[6];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@texture);
				array_args[2] := format;
				array_args[3] := access;
				array_args[4] := w;
				array_args[5] := h;

				Proxy->GetDllProxy()->CallFunction("sdl_texture_query", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};

			return -1;
		}

		method : public : SetColorMod(r : Int, g : Int, b : Int) ~ Int {
			if(@texture <> 0) {
				array_args := Base->New[5];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@texture);
				array_args[2] := IntHolder->New(r);
				array_args[3] := IntHolder->New(g);
				array_args[4] := IntHolder->New(b);

				Proxy->GetDllProxy()->CallFunction("sdl_texture_set_color_mod", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};

			return -1;
		}

		method : public : GetColorMod(r : IntHolder, g : IntHolder, b : IntHolder) ~ Int {
			if(@texture <> 0) {
				array_args := Base->New[5];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@texture);
				array_args[2] := r;
				array_args[3] := g;
				array_args[4] := b;

				Proxy->GetDllProxy()->CallFunction("sdl_texture_get_color_mod", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};

			return -1;
		}

		method : public : SetAlphaMod(alpha : Int) ~ Int {
			if(@texture <> 0) {
				array_args := Base->New[3];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@texture);
				array_args[2] := IntHolder->New(alpha);

				Proxy->GetDllProxy()->CallFunction("sdl_texture_set_alpha_mod", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};

			return -1;
		}

		method : public : GetAlphaMod(alpha : IntHolder) ~ Int {
			if(@texture <> 0) {
				array_args := Base->New[3];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@texture);
				array_args[2] := alpha;

				Proxy->GetDllProxy()->CallFunction("sdl_texture_get_alpha_mod", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};

			return -1;
		}

		method : public : SetBlendMode(blendMode : BlendMode) ~ Int {
			if(@texture <> 0) {
				array_args := Base->New[3];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@texture);
				array_args[2] := IntHolder->New(blendMode->As(Int));

				Proxy->GetDllProxy()->CallFunction("sdl_texture_set_blend_mode", array_args);
				
				value := array_args[0]->As(IntHolder);
				return value->Get();
			};

			return -1;
		}

		method : public : GetBlendMode(blendMode : IntHolder) ~ Int {
			if(@texture <> 0) {
				array_args := Base->New[3];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@texture);
				array_args[2] := blendMode;

				Proxy->GetDllProxy()->CallFunction("sdl_texture_get_blend_mode", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};

			return -1;
		}
	}
	
	class Timer {
		function : GetTicks() ~ Int {
			array_args := Base->New[1];
			array_args[0] := IntHolder->New();
			
			Proxy->GetDllProxy()->CallFunction("sdl_timer_get_ticks", array_args);

			value := array_args[0]->As(IntHolder);
			return value->Get();
		}

		function : Delay(ms : Int) ~ Nil {
			array_args := Base->New[1];
			array_args[0] := IntHolder->New(ms);
			
			Proxy->GetDllProxy()->CallFunction("sdl_timer_delay", array_args);
		}
	}

	class Font {
		@font : Int;

		function : Init() ~ Int {
			array_args := Base->New[1];
	        array_args[0] := IntHolder->New();

	        Proxy->GetDllProxy()->CallFunction("sdl_font_init", array_args);

	        value := array_args[0]->As(IntHolder);
	        return value->Get();
		}

		function : Quit() ~ Nil {
        	array_args := Base->New[0];
        	Proxy->GetDllProxy()->CallFunction("sdl_font_quit", array_args);
		}
		
		New(file : String, ptsize : Int) {
	        array_args := Base->New[3];
	        array_args[0] := IntHolder->New();
	        array_args[1] := file;
	        array_args[2] := IntHolder->New(ptsize);

	        Proxy->GetDllProxy()->CallFunction("sdl_font_open", array_args);

	        value := array_args[0]->As(IntHolder);
	        @font := value->Get();
		}

		New(file : String, ptsize : Int, index : Int) {
	        array_args := Base->New[4];
	        array_args[0] := IntHolder->New();
	        array_args[1] := file;
	        array_args[2] := IntHolder->New(ptsize);
	        array_args[3] := IntHolder->New(index);

	        Proxy->GetDllProxy()->CallFunction("sdl_font_open_index", array_args);

	        value := array_args[0]->As(IntHolder);
	        @font := value->Get();        
		}

		method : public : IsNull() ~ Bool {
			return @font = 0;
		}

		method : public : RenderTextSolid(text : String, fg : Color) ~ Surface {
	        array_args := Base->New[4];
	        array_args[0] := IntHolder->New();
	        array_args[1] := IntHolder->New(@font);
	        array_args[2] := text;
	        array_args[3] := fg;

	        Proxy->GetDllProxy()->CallFunction("sdl_font_render_text_solid", array_args);

	        value := array_args[0]->As(IntHolder);
	        return Surface->New(value->Get());
		}
	}

	class Cursor {
		function : GetGlobalMouseState(x : IntHolder, y : IntHolder) ~ Int {
			array_args := Base->New[3];
			array_args[0] := IntHolder->New();
			array_args[1] := x;
			array_args[2] := y;

			Proxy->GetDllProxy()->CallFunction("sdl_cursor_get_global_mouse_state", array_args);

			value := array_args[0]->As(IntHolder);
			return value->Get();
		}

		function : GetMouseState(x : IntHolder, y : IntHolder) ~ Int {
	        array_args := Base->New[3];
	        array_args[0] := IntHolder->New();
	        array_args[1] := x;
			array_args[2] := y;

	        Proxy->GetDllProxy()->CallFunction("sdl_cursor_get_mouse_state", array_args);

	        value := array_args[0]->As(IntHolder);
	        return value->Get();
		}
	}

	class Mixer {
		consts Flags {
			MIX_DEFAULT_FORMAT := 0x8010,
			MIX_DEFAULT_CHANNELS := 2,
			MIX_MAX_VOLUME := 128
		}

		function : OpenAudio(frequency : Int, format : Int, channels : Int, chunksize : Int) ~ Bool {
			array_args := Base->New[5];
			array_args[0] := IntHolder->New();
			array_args[1] := IntHolder->New(frequency);
			array_args[2] := IntHolder->New(format);
			array_args[3] := IntHolder->New(channels);
			array_args[4] := IntHolder->New(chunksize);

			Proxy->GetDllProxy()->CallFunction("sdl_mixer_open_audio", array_args);

			value := array_args[0]->As(IntHolder);
			return value->Get() = 0;
		}

		function : Quit() ~ Nil {
			array_args := Base->New[0];
			Proxy->GetDllProxy()->CallFunction("sdl_mix_quit", array_args);
		}

		function : FadeOutChannel(which : Int, ms : Int) ~ Int {
			array_args := Base->New[3];
			array_args[0] := IntHolder->New();
			array_args[1] := IntHolder->New(which);
			array_args[2] := IntHolder->New(ms);

			Proxy->GetDllProxy()->CallFunction("sdl_mixer_fade_out_channel", array_args);

			value := array_args[0]->As(IntHolder);
			return value->Get();
		}

		function : HaltChannel(channel : Int) ~ Int {
			array_args := Base->New[2];
			array_args[0] := IntHolder->New();
			array_args[1] := IntHolder->New(channel);

			Proxy->GetDllProxy()->CallFunction("sdl_mixer_halt_channel", array_args);

			value := array_args[0]->As(IntHolder);
			return value->Get();
		}

		function : Playing(channel : Int) ~ Bool {
			array_args := Base->New[2];
			array_args[0] := IntHolder->New();
			array_args[1] := IntHolder->New(channel);

			Proxy->GetDllProxy()->CallFunction("sdl_mixer_playing", array_args);

			value := array_args[0]->As(IntHolder);
			return value->Get() <> 0;
		}

		function : GetVolume(channel : Int) ~ Int {
			return Volume(channel, -1);
		}

		function : Volume(channel : Int, volume : Int) ~ Int {
			array_args := Base->New[3];
			array_args[0] := IntHolder->New();
			array_args[1] := IntHolder->New(channel);
			array_args[2] := IntHolder->New(volume);

			Proxy->GetDllProxy()->CallFunction("sdl_mixer_volume", array_args);

			value := array_args[0]->As(IntHolder);
			return value->Get();
		}
	}

	class MixChunk {
	    @mix_chunk : Int;

	    New(file : String) {
	    	array_args := Base->New[2];
			array_args[0] := IntHolder->New();
			array_args[1] := file;

			Proxy->GetDllProxy()->CallFunction("sdl_mixer_load_wav", array_args);

			value := array_args[0]->As(IntHolder);
			@mix_chunk := value->Get();
	    }

	    method : public : IsNull() ~ Bool {
			return @mix_chunk = 0;
		}

	    method : public : PlayChannel(channel : Int, loops : Int) ~ Int {
	    	return PlayChannelTimed(channel, loops, -1);
	    }

	    method : public : PlayChannelTimed(channel : Int, loops : Int, ticks : Int) ~ Int {
	    	if(@mix_chunk <> 0) {
				array_args := Base->New[5];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(channel);
				array_args[2] := IntHolder->New(@mix_chunk);
				array_args[3] := IntHolder->New(loops);
				array_args[4] := IntHolder->New(ticks);

				Proxy->GetDllProxy()->CallFunction("sdl_mixer_play_channel_timed", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};

			return -1;
		}

		method : public : FadeInChannel(channel : Int, loops : Int, ms : Int) ~ Int {
			return FadeInChannelTimed(channel, loops, ms, -1);
		}

		method : public : FadeInChannelTimed(channel : Int, loops : Int, ms : Int, ticks : Int) ~ Int {
			if(@mix_chunk <> 0) {
				array_args := Base->New[6];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(channel);
				array_args[2] := IntHolder->New(@mix_chunk);
				array_args[3] := IntHolder->New(loops);
				array_args[4] := IntHolder->New(ms);
				array_args[5] := IntHolder->New(ticks);

				Proxy->GetDllProxy()->CallFunction("sdl_mixer_fade_in_channel_timed", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};

			return -1;
		}

	    method : public : Free() ~ Nil {
	    	if(@mix_chunk <> 0) {
				array_args := Base->New[1];
		        array_args[0] := IntHolder->New(@mix_chunk);

		        Proxy->GetDllProxy()->CallFunction("sdl_mixer_free_wav", array_args);
		        @mix_chunk := 0;
		    };
		}
	}

	class MixMusic {
		@mix_music : Int;

		New(file : String) {
			array_args := Base->New[2];
	        array_args[0] := IntHolder->New();
	        array_args[1] := file;

	        Proxy->GetDllProxy()->CallFunction("sdl_mixer_load_mus", array_args);

	        value := array_args[0]->As(IntHolder);
			@mix_music := value->Get();
		}

		method : public : IsNull() ~ Bool {
			return @mix_music = 0;
		}

		function : Playing() ~ Bool {
			array_args := Base->New[1];
			array_args[0] := IntHolder->New();

			Proxy->GetDllProxy()->CallFunction("sdl_mixer_playing_music", array_args);

			value := array_args[0]->As(IntHolder);
			return value->Get() = 1;
		}

		function : Paused() ~ Bool {
			array_args := Base->New[1];
			array_args[0] := IntHolder->New();
			
			Proxy->GetDllProxy()->CallFunction("sdl_mixer_paused_music", array_args);

			value := array_args[0]->As(IntHolder);
			return value->Get() = 1;
		}

		function : Resume() ~ Nil {
			array_args := Base->New[0];			
			Proxy->GetDllProxy()->CallFunction("sdl_mixer_resume_music", array_args);
		}

		function : Pause() ~ Nil {
			array_args := Base->New[0];			
			Proxy->GetDllProxy()->CallFunction("sdl_mixer_pause_music", array_args);
		}

		function : Halt() ~ Nil {
			array_args := Base->New[0];
			Proxy->GetDllProxy()->CallFunction("sdl_mixer_halt_music", array_args);
		}

		function : GetVolumeMusic() ~ Int {
			return VolumeMusic(-1);
		}

		function : VolumeMusic(volume : Int) ~ Int {
			array_args := Base->New[2];
			array_args[0] := IntHolder->New();
			array_args[1] := IntHolder->New(volume);

			Proxy->GetDllProxy()->CallFunction("sdl_mixer_volume_music", array_args);

			value := array_args[0]->As(IntHolder);
			return value->Get();
		}

		method : public : PlayMusic(loops : Int) ~ Int {
			if(@mix_music <> 0) {
				array_args := Base->New[3];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@mix_music);
				array_args[2] := IntHolder->New(loops);
				
				Proxy->GetDllProxy()->CallFunction("sdl_mixer_play_music", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};

			return -1;
		}

		method : public : FadeInMusic(loops : Int, ms : Int) ~ Int {
			if(@mix_music <> 0) {
				array_args := Base->New[4];
				array_args[0] := IntHolder->New();
				array_args[1] := IntHolder->New(@mix_music);
				array_args[2] := IntHolder->New(loops);
				array_args[3] := IntHolder->New(ms);

				Proxy->GetDllProxy()->CallFunction("sdl_mixer_fade_in_music", array_args);

				value := array_args[0]->As(IntHolder);
				return value->Get();
			};

			return -1;
		}

		function : FadeOutMusic(ms : Int) ~ Int {
			array_args := Base->New[2];
			array_args[0] := IntHolder->New();
			array_args[1] := IntHolder->New(ms);

			Proxy->GetDllProxy()->CallFunction("sdl_mixer_fade_out_music", array_args);

			value := array_args[0]->As(IntHolder);
			return value->Get();
		}

		method : public : Free() ~ Nil {
			if(@mix_music <> 0) {
				array_args := Base->New[1];
		        array_args[0] := IntHolder->New(@mix_music);

		        Proxy->GetDllProxy()->CallFunction("sdl_mixer_free_mus", array_args);
		        @mix_music := 0;
		    };
		}
	}
}
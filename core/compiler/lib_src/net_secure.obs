#~~
Copyright (c) 2023 Randy Hollines
~~#

use System.IO.Net; 
use Collection.Generic;

#~
Web client support (-lib net)
~#
bundle Web.HTTP {
	#~
	HTTPS client
	~#
	class HttpsClient {
		@request_headers : Hash<String, String>;
		@response_headers : Hash<String, String>;
		@cookies_enabled : Bool;
		@cookies: Vector<String>;
		@cert_issuer : String;
		@cert_subject : String;
		
		#~
		Default constructor 
		~#
		New() {
			@request_headers := Hash->New()<String, String>;
			@request_headers->Insert("Cache-Control"->ToLower(), "max-age=0");
			@request_headers->Insert("User-Agent"->ToLower(), "Objeck/1.0");
			
			@response_headers := Hash->New()<String, String>;

			@cookies_enabled := false;
			@cookies := Vector->New()<String>;
		}
		
		#~
		Gets the HTTPS request headers
		@return HTTPS request headers
		~#
		method : public : GetRequestHeaders() ~ Hash<String, String> {
			return @request_headers;
		}

		#~
		Gets the HTTPS response headers
		@return HTTPS response headers
		~#
		method : public : GetResponseHeaders() ~ Hash<String, String> {
			return @response_headers;
		}

		#~
		Adds a HTTPS request header
		@param name header name
		@param value header value
		~#
		method : public : AddHeader(name : String, value : String) ~  Nil {
			@request_headers->Insert(name->ToLower(), value);
		}

		#~
		Removes a HTTPS request header
		@param name header name
		~#
		method : public : RemoveHeader(name : String) ~  Nil {
			@request_headers->Remove(name->ToLower());
		}
		
		#~
		Sets cookie support
		@param cookies_enabled true if cookies are enabled, false otherwise
		~#
		method : public : CookiesEnabled(cookies_enabled : Bool) ~ Nil {
			@cookies_enabled := cookies_enabled;
		}	
		
		#~
		Gets the cookies
		@return vector of cookies
		~#
		method : public : GetCookies() ~ Vector<String> {
			return @cookies;
		}	
		
		#~
		Sets a cookie
		@param cookie cookie nane and value
		~#
		method : public : SetCookie(cookie : String) ~ Nil {
			@cookies->AddBack(cookie);
		}

		#~
		Performs a HTTPS POST
		@param url URL
		@param data data to post
		@return vector of read strings
		~#
		method : public : Post(url : String, data : String) ~ Vector<String> {
			return Post(url, data, "text/plain");
		}
		
		#~
		Performs a HTTPS POST
		@param url URL
		@param data data to post
		@return read strings
		~#
		function : PostAll(url : String, data : String) ~ String {
			document := "";
			
			client := HttpsClient->New();
			lines := client->Post(url, data);
			if(lines = Nil) {
				return Nil;
			};

			each(i : lines) {
				document->Append(lines->Get(i));
			};

			return document;
		}
		
		#~
		Performs a HTTPS POST
		@param url URL
		@param data data to post
		@param content_type content type
		@param headers key/value headers
		@return read strings
		~#
		function : PostAll(url : String, data : String, content_type : String, headers : Map<String, String>) ~ String {
			document := "";
			
			client := HttpsClient->New();
			header_key_values := headers->GetKeyValues()<Pair<String, String>>;
			each(i : header_key_values) {
				key_value := header_key_values->Get(i);
				key := key_value->GetFirst();
				value := key_value->GetSecond();
				client->AddHeader(key, value);
			};

			lines := client->Post(url, data, content_type);
			if(lines = Nil) {
				return Nil;
			};

			each(i : lines) {
				document->Append(lines->Get(i));
			};

			return document;
		}

		#~
		Performs a HTTPS POST
		@param url URL
		@param content_type content type
		@param data data to post
		@return vector of read strings
		~#
		method : public : Post(url : String, data : String, content_type : String) ~ Vector<String> {
			content := Vector->New()<String>;
			
			if(url->StartsWith("https://")) {
				if(url->EndsWith('/')) {
					url->Pop();
				};

				url := url->SubString("https://"->Size(), url->Size() - "https://"->Size());
				address := "";
				location := "/";
				index := url->Find('/');
				port := "443";
				if(index > -1) {
				  address := url->SubString(index);
				  port_index := address->Find(':');
				  if(port_index > -1) {
				    port_index += 1;
				    port := address->SubString(port_index, address->Size() - port_index);
				    address := address->SubString(port_index - 1);
				  }
				  else {
				    location->Append(url->SubString(index + 1, url->Size() - index - 1));
				  };
				}
				else {
				  address := url;
				};
				
				socket := TCPSecureSocket->New(address, port->ToInt());
				if(socket->IsOpen()) {
					post := "POST ";
					post->Append(location);
					post->Append(" HTTP/1.1\r\nHost: ");
					post->Append(address);
					post->Append("\r\nContent-Type: ");
					post->Append(content_type);
					post->Append("\r\nContent-Length: ");
					post->Append(data->Size()->ToString());
					post->Append("\r\n");

					request_keys := @request_headers->GetKeys()<String>;
					each(i : request_keys) {		
						request_key := request_keys->Get(i);
						request_value := @request_headers->Find(request_key);					
						post->Append(request_key);
						post->Append(": ");
						post->Append(request_value);
						post->Append("\r\n");
					};

					if(@cookies_enabled & @cookies->Size() > 0) {
						post->Append("Cookie: ");
						each(i : @cookies) {
							post->Append(@cookies->Get(i));
							if(i + 1 < @cookies->Size()) {
								post->Append("; ");
							};
						};
						post->Append("\r\n");
					};
					post->Append("\r\n");					
					post->Append(data);
					socket->WriteString(post);
					
					# post->PrintLine();					
					
					status_code := 500;
					status_line := socket->ReadLine();
					if(status_line->StartsWith("HTTP/1.")) {
						status_line := status_line->SubString("HTTP/1."->Size() + 2, 
							status_line->Size() - "HTTP/1."->Size() - 2);
						index := status_line->Find(' ');
						status_code := status_line->SubString(index)->ToInt();
					};
					
					# status_line->PrintLine();
					
					if(status_code <> 500) {
						# get request headers
						do {
							line := socket->ReadLine();
							if(line->Size() > 0) {
								index := line->Find(':');
								name := line->SubString(index);
								value := line->SubString(index + 1, line->Size() - index - 1)->Trim();
								
								# IO.Standard->Print("|")->Print(name)->Print("|, |")->Print(value)->PrintLine("|");
								if(@cookies_enabled & name->Equals("Set-Cookie")) {
									offset := value->Find(';');
									if(offset > -1) {
										value := value->SubString(offset);
									};
									@cookies->AddBack(value);
									# IO.Standard->Print("cookie=")->PrintLine(value);									
								}
								else {
									@response_headers->Insert(name->ToLower(), value);
								};
							};
						}
						while(line->Size() > 0);
						# IO.Standard->Print("cookies: size=")->PrintLine(@cookies->Size());
						
						# permanently moved
						if(status_code = 301 | status_code = 302) {
							moved_location := @response_headers->Find("location");
							if(moved_location <> Nil) {
								moved_url : String;
								if(moved_location->StartsWith("https://")) {
									moved_url := moved_location;
								}
								else {
									moved_url := "https://";
									moved_url += address;
									moved_url += moved_location;
								};
								@response_headers->Empty();

								# IO.Standard->Print("permanently moved: ")->PrintLine(moved_url);
								return Get(moved_url, content_type);
							};
						};

						# look for chunked blocks
						encoding : String := @response_headers->Find("transfer-encoding");
						if(encoding <> Nil & encoding->Equals("chunked")) {
							WebCommon->ReadChunked(content, socket);
						}
						else {
							length_header : String := @response_headers->Find("content-length");
							if(length_header <> Nil) {
								WebCommon->ReadLength(length_header->ToInt(), content, socket);
							};						
						};
					};
					socket->Close();
				};
			};
			
			return content;
		}
		
		#~
		Performs a HTTPS GET and returns results as a String
		@param url URL
		@return output as one string
		~#
		function : GetAll(url : String) ~ String {
			return GetAll(url, "text/plain", Nil);
		}

		#~
		Performs a HTTPS GET and returns results as a String
		@param url URL
		@param headers key/value headers
		@return output as one string
		~#
		function : GetAll(url : String, headers : Map<String, String>) ~ String {
			return GetAll(url, "text/plain", headers);
		}
		
		#~
		Performs a HTTPS GET and returns results as a String
		@param url URL
		@param content_type content type
		@param headers key/value headers
		@return output as one string
		~#
		function : GetAll(url : String, content_type : String, headers : Map<String, String>) ~ String {
			document := "";
			
			client := HttpsClient->New();
			if(headers <> Nil) {
				header_key_values := headers->GetKeyValues()<Pair<String, String>>;
				each(i : header_key_values) {
					key_value := header_key_values->Get(i);
					key := key_value->GetFirst();
					value := key_value->GetSecond();
					
					if(value->IsEmpty()) {
						client->RemoveHeader(key);
					}
					else {
						client->AddHeader(key, value);
					};
				};
			};

			lines := client->Get(url, content_type);
			if(lines = Nil) {
				return Nil;
			};

			each(i : lines) {
				document->Append(lines->Get(i));
			};

			return document;
		}
				
		#~
		Performs a HTTPS GET
		@param url URL
		@return vector of read strings
		~#
		method : public : Get(url : String) ~ Vector<String> {
			return Get(url, "text/plain");
		}

		#~
		Gets the socket's X.509 certificate issurer name
		@return certificate issurer name
		~#
		method : public : GetIssuer() ~ String {
			return @cert_issuer;
		}

		#~
		Gets the socket's X.509 certificate subject name
		@return certificate subject name
		~#
		method : public : GetSubject() ~ String {
			return @cert_subject;
		}
		
		#~
		Performs a HTTPS GET
		@param url URL
		@param content_type content type
		@return vector of read strings
		~#
		method : public : Get(url : String, content_type : String) ~ Vector<String> {
			content := Vector->New()<String>;
			
			if(url->StartsWith("https://")) {
				if(url->EndsWith('/')) {
					url->Pop();
				};

				url := url->SubString("https://"->Size(), url->Size() - "https://"->Size());
				address := "";
				location := "/";
				index := url->Find('/');
				port := "443";
				if(index > -1) {
				  address := url->SubString(index);
				  port_index := address->Find(':');
				  if(port_index > -1) {
				    port_index += 1;
				    port := address->SubString(port_index, address->Size() - port_index);
				    address := address->SubString(port_index - 1);
				  }
				  else {
				    location->Append(url->SubString(index + 1, url->Size() - index - 1));
				  };
				}
				else {
				  address := url;
				};
				
				socket := TCPSecureSocket->New(address, port->ToInt());
				if(socket->IsOpen()) {
					get := "GET ";
					get->Append(location);
					get->Append(" HTTP/1.1\r\nHost: ");
					get->Append(address);
					get->Append("\r\n");

					request_keys := @request_headers->GetKeys()<String>;
					each(i : request_keys) {		
						request_key := request_keys->Get(i);
						request_value := @request_headers->Find(request_key);					
						get->Append(request_key);
						get->Append(": ");
						get->Append(request_value);
						get->Append("\r\n");
					};
					
					if(@cookies_enabled & @cookies->Size() > 0) {
						get->Append("Cookie: ");
						each(i : @cookies) {
							get->Append(@cookies->Get(i));
							if(i + 1 < @cookies->Size()) {
								get->Append("; ");
							};
						};
						get->Append("\r\n");
					};					
					get->Append("\r\n");		
					
					# IO.Standard->Print("Get: |")->Print(get)->PrintLine("|");
					
					socket->WriteString(get);
					
					status_code := 500;
					status_line := socket->ReadLine();
					# status_line->PrintLine();

					if(status_line->StartsWith("HTTP/1.")) {
						status_line := status_line->SubString("HTTP/1."->Size() + 2, 
							status_line->Size() - "HTTP/1."->Size() - 2);
						index := status_line->Find(' ');
						status_code := status_line->SubString(index)->ToInt();
					};
					# status_code->PrintLine();					

					if(status_code <> 500) {
						# get request headers
						do {
							line := socket->ReadLine();
							if(line->Size() > 0) {
								index := line->Find(':');
								name := line->SubString(index);
								value := line->SubString(index + 1, line->Size() - index - 1)->Trim();
								# IO.Standard->Print("|")->Print(name)->Print("|, |")->Print(value)->PrintLine("|");

								if(@cookies_enabled & name->Equals("Set-Cookie")) {
									offset := value->Find(';');
									if(offset > -1) {
										value := value->SubString(offset);
									};
									@cookies->AddBack(value);
									# IO.Standard->Print("cookie=")->PrintLine(value);									
								}
								else {
									@response_headers->Insert(name->ToLower(), value);
								};
							};
						}
						while(line->Size() > 0);						
						# IO.Standard->Print("cookies: size=")->PrintLine(@cookies->Size());
						
						# permanently moved
						if(status_code = 301 | status_code = 302) {
							moved_location := @response_headers->Find("location");
							if(moved_location <> Nil) {
								moved_url : String;
								if(moved_location->StartsWith("https://")) {
									moved_url := moved_location;
								}
								else {
									moved_url := "https://";
									moved_url += address;
									moved_url += moved_location;
								};
								@response_headers->Empty();

								# IO.Standard->Print("permanently moved: ")->PrintLine(moved_url);
								return Get(moved_url, content_type);
							};
						};

						# look for chunked blocks
						encoding : String := @response_headers->Find("transfer-encoding");
						if(encoding <> Nil & encoding->Equals("chunked")) {
							WebCommon->ReadChunked(content, socket);
						}
						else {
							length_header : String := @response_headers->Find("content-length");
							if(length_header <> Nil) {
								WebCommon->ReadLength(length_header->ToInt(), content, socket);
							}
							else {
								count := 0;
								do {
									line := socket->ReadLine();
									if(line->Size() = 0) {
										count += 1;
									}
									else {
										content->AddBack(line);
										count := 0;
									};
								}
								while(count < 2);
							};							
						};
						@cert_issuer := socket->GetIssuer();
						@cert_subject := socket->GetSubject();
					};
					socket->Close();
				}
				else {
					return Nil;
				};
			};	
			
			return content;
		}
	}
}

#~
Web server support (-lib net)
~#
bundle Web.HTTP.Server {
	#~
	Request handler for HTTPS GET and POST requests
	~#
	class HttpsRequestHandler from System.Concurrency.Thread {
		@client : TCPSecureSocket;
		@server_config : WebServerConfig;
		@is_debug : Bool;

		New() {
			Parent();
		}

		method : public : SetConfig(server_config : WebServerConfig, is_debug : Bool) ~ Nil {
			@server_config := server_config;
			@is_debug := is_debug;
		}
        
		method : public : Run(param : Base) ~ Nil {
			@client := param->As(TCPSecureSocket);

			if(@client <> Nil & @client->IsOpen()) {
				# get request
				request := @client->ReadLine();
				if(@is_debug) {
					request_address := @client->GetAddress();
					"Request: '{$request}' from '{$request_address}'\n---"->PrintLine();
				};

				# parse request
				request_verb : String; request_url : String;
				if(request->Size() > 0) {
					request_parts := request->Split(" ");
					if(request_parts->Size() = 3) {
						request_verb := request_parts[0];
						request_url := request_parts[1];
					};
				};

				# verify request
				if(request_verb <> Nil & request_url <> Nil & <>request_url->IsEmpty()) {
					# get request headers
					request_headers := GetHeaders();

					# GET and HEAD request
					if(request_verb->Equals("GET") | request_verb->Equals("HEAD")) {
						# retrieve content
						if(request_url = Nil | request_url->Equals("/") | request_url->Has("..")) {
							request_url := "/index.html";
						};

						# write response
						http_request := Request->New(request_url, request_headers);
						http_response := Response->New();
						
						if(@server_config <> Nil & @server_config->IsHandlingFiles()) {
							@server_config->ProcessGet(http_request, http_response);
						};
						ProcessGet(http_request, http_response);
						ProcessResponse(http_response, request_verb->Equals("HEAD"));
					}
					# POST request
					else if(request_verb->Equals("POST")) {
						content_length_str := request_headers->Find("Content-Length");
						if(content_length_str <> Nil) {
							content_length  := content_length_str->ToInt();
							if(content_length > 0) {
								buffer := WebCommon->ReadPost(content_length, @client);
								
								# retrieve content
								if(request_url = Nil | request_url->Equals("/") | request_url->Has("..")) {
									request_url := "/index.html";
								};

								# write response
								http_request := Request->New(request_url, request_headers, buffer);
								http_response := Response->New();
								ProcessPost(http_request, http_response);
								ProcessResponse(http_response);
							};
						};
					};
				};
				
				@client->Close();
			};
		}

		method : ProcessResponse(response : Response, is_head : Bool := false) ~ Nil {
			if(response <> Nil) {
				response_headers := response->GetHeaders();
				if(response->GetCode() = 200) {
					response_header := "";
					key_values := response_headers->GetKeyValues()<Pair<String, String>>;
					each(i : key_values) {
						key_value := key_values->Get(i);
						key := key_value->GetFirst();
						value := key_value->GetSecond();
						response_header += "{$key}: {$value}\r\n";
					};

					content := response->GetContent();
					if(content <> Nil) {
						content_size := content->Size();
						response_header += "Content-Length: {$content_size}\r\nAccept-Ranges: bytes\r\nConnection: close\r\n";

						cookies := response->GetCookies()<String, String>->GetKeyValues()<Pair<String, String>>;
						each(i : cookies) {
							cookie := cookies->Get(i);
							name := cookie->GetFirst();
							value := cookie->GetSecond();
							response_header += "Set-Cookie: {$name}={$value}\r\n";

							if(@is_debug) {
								"cooke: {$name}={$value}"->PrintLine();
							};
						};

						@client->WriteString("HTTP/1.1 200 OK\r\n{$response_header}\r\n");
						if(<>is_head) {
							@client->WriteBuffer(content);
						};
					}
					else {
						@client->WriteString("HTTP/1.1 200\r\n\r\n");
					};
				}
				else {
					select(response->GetCode()) {
						label 202 {
							@client->WriteString("HTTP/1.1 202 Accepted\r\n\r\n");
						}

						label 302 {
							reason := response->GetReason();
							if(reason <> Nil) {
								@client->WriteString("HTTP/1.1 302 Found\r\nLocation: {$reason}\r\nConnection: close\r\n\r\n");
							}
							else {
								@client->WriteString("HTTP/1.1 400\r\n\r\n");
							};
						}

						label 404 {
							@client->WriteString("HTTP/1.1 404 Not Found\r\n\r\n");
						}

						label 410 {
							@client->WriteString("HTTP/1.1 410 Gone\r\n\r\n");
						}

						other {
							@client->WriteString("HTTP/1.1 400\r\n\r\n");
						}
					};
				};
			};
		}
		
		#~
		Get HTTP headers
		@return HTTP headers
		~#
		method : public : GetHeaders() ~ Map<String, String> {
			headers := Map->New()<String, String>;
			
			header := @client->ReadLine();
			while(header <> Nil & header->Size() > 0) {
				if(@is_debug) {				
					"header: {$header}"->PrintLine();
				};
                
				header_parts := header->Split(": ");
				if(header_parts->Size() = 2) {
					headers->Insert(header_parts[0], header_parts[1]);
				};

				header := @client->ReadLine();
			};
			
			return headers;
		}

		#~
		Callback for GET requests
		@param request HTTP request
		@param response HTTP response
		~#
		method : virtual : ProcessGet(request : Request, response : Response) ~ Nil;

		#~
		Callback for POST requests
		@param request HTTP request
		@param response HTTP response
		~#
		method : virtual : ProcessPost(request : Request, response : Response) ~ Nil;
	}
}
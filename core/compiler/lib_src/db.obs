#~~
Simple tabular query library
Copyright (c) 2017-2018 Randy Hollines
~~#

use Collection;
use System.Time;
use RegEx;

#~
Supports processing of semi-structured data
~#
bundle Query {
	#~
	Container for semi-structured data
	~#
	class Table {
		@name : String;
		@keys : IntMap;
		@column_names : String[];
		@column_map : StringMap;
		@head : Row;
		@tail : Row;
		@count : Int;
		@query : Query;
		
		#~
		Constructor
		@param name table name
		@param column_names column names
		~#
		New(name : String, column_names : String[]) {
			@column_map := StringMap->New();
			@keys := IntMap->New();
		
			@name := name;
			@column_names := String->New[column_names->Size() + 1];
			@column_names[0] := "pk";
			each(i : column_names) {
				@column_names[i + 1] := column_names[i];
				@column_map->Insert(@column_names[i + 1], IntHolder->New(i + 1));
			};
		}
		
		#~
		Gets the table name
		@return table name
		~#
		method : public : GetName() ~ String {
			return @name;
		}
		
		#~
		Get column index by name
		@return column name
		~#
		method : public : native : GetIndex(name : String) ~ Int {
			found := @column_map->Find(name);
			if(found <> Nil) {
				return found->As(IntHolder)->Get();
			};
			
			return -1;
		}
		
		#~
		Get all row
		@return all row
		~#
		method : public : native : GetAll() ~ Vector {
			matches := Vector->New();
			
			row := @head;
			while(row <> Nil) {
				matches->AddBack(row);
				row := row->Next();
			};
			
			return matches;
		}
		
		#~
		Get row by primary key
		@param pk primary key
		@return row
		~#
		method : public : native : GetRow(pk : Int) ~ Row {
			return @keys->Find(pk)->As(Row);
		}
		
		#~
		Gets all column names
		@return column names
		~#
		method : public : GetColumnNames() ~ String[] {
			return @column_names;
		}
		
		#~
		Gets unique rows by column name
		@param name column name
		@return unique rows
		~#
		method : public : Unique(name : String) ~ Vector {
			out := Vector->New();
			
			index := GetIndex(name);		
			if(index < 0) {
				return out;
			};
			
			in_row := @head;
			while(in_row <> Nil) {
				left := in_row->Get(index);
				
				found := false;
				for(j := 0; found = false & j < out->Size(); j += 1;) {
					out_row := out->Get(j)->As(Row);
					right := out_row->Get(index);
					if(left->Compare(right) = 0) {
						found := true;
					};
				};
				
				# add
				if(<>found) {
					out->AddBack(in_row);
				};
				
				# next
				in_row := in_row->Next();
			};
			
			return out;
		}
		
		#~
		Gets the column average
		@param name column name
		@return column average
		~#
		method : public : Average(name : String) ~ Float {
			index := GetIndex(name);		
			if(index < 0) {
				return 0.0;
			};
			
			sum := 0.0;
			count := 0.0;
			row := @head;
			while(row <> Nil) {
				value := row->Get(index);
				
				if(value->TypeOf(IntHolder)) {
					sum += value->As(IntHolder)->Get()->As(Float);
				}
				else if(value->TypeOf(FloatHolder)) {
					sum += value->As(FloatHolder)->Get();
				};
				
				# next
				count += 1.0;
				row := row->Next();
			};
						
			return sum / count;
		}
		
		#~
		Gets the column sum
		@param name column name
		@return column sum
		~#
		method : public : Sum(name : String) ~ Float {
			index := GetIndex(name);		
			if(index < 0) {
				return 0.0;
			};
			
			sum := 0.0;
			row := @head;
			while(row <> Nil) {
				value := row->Get(index);
				
				if(value->TypeOf(IntHolder)) {
					sum += value->As(IntHolder)->Get()->As(Float);
				}
				else if(value->TypeOf(FloatHolder)) {
					sum += value->As(FloatHolder)->Get();
				};
				
				# next
				row := row->Next();
			};
			
			return sum;
		}
		
		#~
		Filters table based upon conditional criteria 
		@return filtered rows
		~#
		method : public : native : Filter(cond : Conditional) ~ Vector {
			matches := Vector->New();
			row := @head;
			while(row <> Nil) {
				left := row->Get(cond->GetLeft());
				if(left <> Nil) {
					right := cond->GetValue();
					select(cond->GetQualifier()) {
						label Conditional->Qualifier->EQUAL: {
							if(left->Compare(right) = 0) {
								matches->AddBack(row);
							};
						}
						
						label Conditional->Qualifier->NOT_EQUAL: {
							if(left->Compare(right) <> 0) {
								matches->AddBack(row);
							};
						}
						
						label Conditional->Qualifier->GREATER: {
							if(left->Compare(right) > 0) {
								matches->AddBack(row);
							};
						}
						
						label Conditional->Qualifier->LESS: {
							if(left->Compare(right) < 0) {
								matches->AddBack(row);
							};
						}
						
						label Conditional->Qualifier->GREATER_EQUAL: {
							if(left->Compare(right) >= 0) {
								matches->AddBack(row);
							};
						}
						
						label Conditional->Qualifier->LESS_EQUAL: {
							if(left->Compare(right) <= 0) {
								matches->AddBack(row);
							};
						}
						
						label Conditional->Qualifier->LIKE: {
							if(left->TypeOf(String) & right->TypeOf(String)) {
								if(MatchLike(left->As(String), right->As(String))) {
									matches->AddBack(row);
								};
							};
						}
					};
				};
				# next
				row := row->Next();
			};
			
			return matches;
		}
		
		#~
		Query table using SQL-like syntax
		@return result table
		~#
		method : public : Query(statement : String) ~ Table {
			@query := Query->New(statement, @self);
			return @query->Query();
		}
		
		#~
		Gets the last query error
		@return last query error
		~#
		method : public : GetError() ~ String {
			return @query->GetError();
		}
		
		method : native : MatchLike(check : String, cond : String) ~ Bool {
			pattern := "";
			
			each(i : cond) {
				c := cond->Get(i);
				
				if(c =  '%') {
					pattern += ".*";
				}
				else if(c =  '_') {
					pattern += '.';
				}
				else {
					pattern += c;
				};
			};
			regex := RegEx->New(pattern);
			
			return regex->MatchExact(check);
		}
		
		#~
		Inserts a new row into the table. After the row 
		has been added it's values will need to be set.
		@return newly inserted row
		~#
		method : public : native : Insert() ~ Row {
			pk := IntHolder->New(@count);
			values := Compare->New[@column_names->Size()];
			values[0] := pk;
			row := Row->New(@self, values);
			@keys->Insert(pk->Get(), row);
			@count += 1;
			
			if(@head = Nil) {
				@head := row;
				@tail := row;
			}
			else {
				@tail->Next(row);
				row->Prev(@tail);
				@tail := row;
			};
			
			return row;
		}
		
		#~
		Delete row by primary key
		@param pk primary key
		@return true of successful, false otherwise
		~#
		method : public : native : Delete(pk : Int) ~ Bool {
			row := @keys->Find(pk)->As(Row);
			if(row <> Nil) {
				if(row = @head) {
					@head := row->Next();
					row->Next(Nil);
					@head->Prev(Nil);
				}
				else if(row = @tail) {
					@tail := row->Prev();
					row->Prev(Nil);
					@tail->Next(Nil);
				}
				else {
					row->Prev()->Next(row->Next());
					row->Next()->Prev(row->Prev());
					row->Next(Nil);
					row->Prev(Nil);					
				};
				
				@keys->Remove(pk);
				return true;
			};
			
			return false;
		}
		
		#~
		Count of rows
		@return number of rows
		~#
		method : public : Count() ~ Int {
			return @count;
		}
		
		#~
		String representation of table
		@return all row as a string
		~#
		method : public : ToString() ~ String {
			buffer := "";
			
			row := @head;
			while(row <> Nil) {
				buffer += row->ToString();
				buffer += "\r\n";
				row := row->Next();
			};
			
			return buffer;
		}
	}
	
	#~
	Conditional for filtering
	~#
	class Conditional {
		@left : Int;
		@qualifier : Conditional->Qualifier;
		@value : Compare;
		
		#~
		Conditional comparisons 
		~#
		enum Qualifier {
			EQUAL,
			NOT_EQUAL,
			GREATER,
			LESS,
			GREATER_EQUAL,
			LESS_EQUAL,
			LIKE
		}
		
		#~
		Constructor
		@param left index of column to compare
		@param qualifier comparison type
		@param value to compare against column
		~#
		New(left : Int, qualifier : Conditional->Qualifier, value : Compare) {
			@left := left;
			@qualifier := qualifier;
			@value := value;
		}
		
		#~
		Get the qualifying value
		@return qualifying value
		~#
		method : public : GetQualifier() ~ Qualifier {
			return @qualifier;
		}
		
		#~
		Gets the comparison value
		@return comparison value
		~#
		method : public : GetValue() ~ Compare {
			return @value;
		}
		
		#~
		Gets comparison index
		@return comparison index
		~#
		method : public : GetLeft() ~ Int {
			return @left;
		}
	}
	
	#~
	Row in table
	~#
	class Row {
		@values : Compare[];
		@table : Table;
		@true_token : static : IntHolder;
		@false_token : static : IntHolder;
		@next : Row;
		@prev : Row;
		
		New(table : Table, values : Compare[]) {
			@table := table;
			@values := values;
		}
		
		#~
		Gets value by name
		@return value
		~#
		method : public : Get(name : String) ~ Compare {
			return Get(@table->GetIndex(name));
		}
		
		#~
		Sets value by name
		@param name column name
		@param value value
		@return ture of successful, false otherwise
		~#
		method : public : Set(name : String, value : Compare) ~ Bool {
			return Set(@table->GetIndex(name), value);
		}
		
		#~
		Gets value by index
		@return value
		~#
		method : public : Get(index : Int) ~ Compare {
			if(index < 0 | index >= @values->Size()) {
				return Nil;
			};
			
			return @values[index];
		}
		
		#~
		Sets value by index
		@param name column index
		@param value value
		@return ture of successful, false otherwise
		~#
		method : public : Set(index : Int, value : Compare) ~ Bool {
			if(index < 0 | index >= @values->Size()) {
				return false;
			};
			
			@values[index] := value;
			return true;
		}
		
		#~
		Helper for setting 'true' column value
		@return 'true' value holder
		~#
		function : True() ~ IntHolder {
			if(@true_token = Nil) {
				@true_token := IntHolder->New(1);
			};
			
			return @true_token;
		}
		
		#~
		Helper for setting 'false' column value
		@return 'false' value holder
		~#
		function : False() ~ IntHolder {
			if(@false_token = Nil) {
				@false_token := IntHolder->New(0);
			};
			
			return @false_token;
		}
			
		method : public : Next() ~ Row {
			return @next;
		}
		
		method : public : Next(next : Row) ~ Nil {
			@next := next;
		}
		
		method : public : Prev() ~ Row {
			return @prev;
		}
		
		method : public : Prev(prev : Row) ~ Nil {
			@prev := prev;
		}
		
		#~
		Gets the number of columns
		@return number of columns
		~#
		method : public : Size() ~ Int {
			return @values->Size();
		}
		
		#~
		String representation of row
		@return row as string
		~#
		method : public : ToString() ~ String {
			buffer := "";

			each(i : @values) {
				value := @values[i];
				
				if(value <> Nil) {
					if(value->TypeOf(IntHolder)) {
						buffer += value->As(IntHolder)->Get()->ToString();
					}
					else if(value->TypeOf(FloatHolder)) {
						buffer += value->As(FloatHolder)->Get()->ToString();
					}
					else if(value->TypeOf(Date)) {
						buffer += value->As(Date)->ToString();
					}
					else if(value->TypeOf(String)) {
						buffer += value->As(String);
					}
					else {
						buffer += value->GetClass()->GetName();
					};
				}
				else {
						buffer += "<Nil>";
				};	
					
				if(i + 1 < @values->Size()) {
					buffer += ", ";
				};
			};
			
			return buffer;
		}
	}
	
	class Query {
		@parser : Parser;
		@terms : Term;
		@table : Table;
		@conds : Vector;
		@error : String;
		
		New(line : String, table : Table) {
			@table := table;
			@conds := Vector->New();
			@parser := Parser->New(line);
		}
		
		method : public : Query() ~ Table {
			expr := @parser->Parse();
			if(expr = Nil) {
				@error := "*** Parse error ***";
				return Nil;
			};
			
			if(expr->GetType() = Token->Type->SELECT) {
				results := ProcessSelect(expr);
				if(results = Nil) {
					@error := "*** Select error ***";
					return Nil;
				};
				
				return results;
			}
			else if(expr->GetType() = Token->Type->FROM) {
				results := ProcessFrom(expr);
				if(results = Nil) {
					@error := "*** From error ***";
					return Nil;
				};
				
				names := @table->GetColumnNames();
				column_names := String->New[names->Size() - 1];
				each(i : column_names) {
					column_names[i] := names[i + 1];
				};
				
				return BuildTable("<rs>", column_names, results, Nil);				
			}
			else {
				@error := "*** General error ***";
				return Nil;
			};
			
			return Nil;
		}

		method : public : GetError() ~ String {
			return @error;
		}
		
		method : ProcessSelect(expr : Term) ~ Table {
# "== Select =="->PrintLine();
			results := ProcessFrom(expr->GetLeft());
			if(results = Nil) {
				return Nil;
			};
			columns := expr->GetTerms();
						
			column_names : String[];
			if(columns->Size() = 1 & columns->Get(0)->As(Term)->GetType() = Token->Type->STAR) {
				names := @table->GetColumnNames();
				column_names := String->New[names->Size() - 1];
				each(i : column_names) {
					column_names[i] := names[i + 1];
				};
			}
			else if(columns->Size() = 2 & 
					columns->Get(0)->As(Term)->GetType() = Token->Type->DISTINCT & 
					columns->Get(1)->As(Term)->GetType() = Token->Type->REF) {
				column_names := String->New[1];
				column_name := columns->Get(1)->As(Term)->GetValue()->As(String);
				column_names[0] := column_name;
				results := Unique(column_name, results);
			}
			else {
				column_names := String->New[columns->Size()];
				each(i : columns) {
					column_names[i] := columns->Get(i)->As(Term)->GetValue()->As(String);
				};
			};

			if(expr->GetRight() <> Nil) {
				order_by := expr->GetRight()->GetValue()->As(String);
				return BuildTable("<rs>", column_names, results, order_by);
			};
						
			return BuildTable("<rs>", column_names, results, Nil);
		}
		
		method : Unique(col : String, in : Vector) ~ Vector {
			out := Vector->New();
			
			index := @table->GetIndex(col);
			if(index < 0) {
				return out;
			};
			
			each(i : in) {
				in_row := in->Get(i)->As(Row);
				left := in_row->Get(index);
				
				found := false;
				for(j := 0; found = false & j < out->Size(); j += 1;) {
					out_row := out->Get(j)->As(Row);
					right := out_row->Get(index);
					if(left->Compare(right) = 0) {
						found := true;
					};
				};
				
				if(<>found) {
					out->AddBack(in_row);
				};
			};
			
			return out;
		}
		
		method : BuildTable(name : String, column_names : String[], from_results : Vector, order_by : String) ~ Table {
			table := Table->New(name, column_names);

			if(order_by <> Nil) {
				order_index := @table->GetIndex(order_by);
				if(order_index > -1) {
					ordered_values := Map->New();
					each(i : from_results) {
						row := from_results->Get(i)->As(Row);
						ordered_values->Insert(row->Get(order_index), row);
					};
					from_results := ordered_values->GetValues();
				};
			};
			
			each(i : from_results) {
				row := from_results->Get(i)->As(Row);
				result_row := table->Insert();
				each(j : column_names) {
					column_name := column_names[j];
					result_row->Set(column_name, row->Get(column_name));
				};
			};

			return table;
		}
		
		method : ProcessFrom(expr : Term) ~ Vector {
# "== From =="->PrintLine();
			
			name := expr->GetValue()->As(String);
			if(<>name->Equals(@table->GetName())) {
				return Nil;
			};
			
			# where
			left := expr->GetLeft();
			if(left <> Nil & left->GetType() = Token->Type->WHERE) {
				return ProcessTerm(left->GetLeft());
			}
			else {
				return @table->GetAll();
			};
		}
		
		method : Dump(results : Vector) ~ Nil {
			"# DUMP ##"->PrintLine();
			count := results->Size();
			"count={$count}"->PrintLine();
			each(i : results) {
				row := results->Get(i)->As(Row);
				row->ToString()->PrintLine();
			};
		}
				
		method : ProcessTerm(expr : Term) ~ Vector {
			left := expr->GetLeft();
			right := expr->GetRight();
			if(left = Nil | right = Nil) {
 				return Nil;
 			};
			
			select(expr->GetType()) {
				label Token->Type->AND: {
# "== And =="->PrintLine();		
					left_result := ProcessTerm(left);
					right_result := ProcessTerm(right);
					return MergeAnd(left_result, right_result);
				}
				
				label Token->Type->OR: {
# "== Or =="->PrintLine();		
					left_result := ProcessTerm(left);
					right_result := ProcessTerm(right);
					return MergeOr(left_result, right_result);
				}
				
				label Token->Type->EQUAL: {					
# "== Equal =="->PrintLine();
					index := @table->GetIndex(left->GetValue()->As(String));
 					if(index > -1) {
						return @table->Filter(Conditional->New(index, Conditional->Qualifier->EQUAL, right->GetValue()));
 					};
				}
				
				label Token->Type->NOT_EQUAL: {
# "== Not equal =="->PrintLine();
					index := @table->GetIndex(left->GetValue()->As(String));
 					if(index > -1) {
						return @table->Filter(Conditional->New(index, Conditional->Qualifier->NOT_EQUAL, right->GetValue()));
					};
				}
				
				label Token->Type->GREATER: {
# "== Greater =="->PrintLine();
					index := @table->GetIndex(left->GetValue()->As(String));
 					if(index > -1) {
						return @table->Filter(Conditional->New(index, Conditional->Qualifier->GREATER, right->GetValue()));
					};
				}
				
				label Token->Type->LESS: {
# "== Less =="->PrintLine();
					index := @table->GetIndex(left->GetValue()->As(String));
 					if(index > -1) {
						return @table->Filter(Conditional->New(index, Conditional->Qualifier->LESS, right->GetValue()));
					};
				}
				
				label Token->Type->GREATER_EQUAL: {
# "== Greater =="->PrintLine();
					index := @table->GetIndex(left->GetValue()->As(String));
 					if(index > -1) {
						return @table->Filter(Conditional->New(index, Conditional->Qualifier->GREATER_EQUAL, right->GetValue()));
					};
				}
				
				label Token->Type->LESS_EQUAL: {
# "== Less =="->PrintLine();
					index := @table->GetIndex(left->GetValue()->As(String));
 					if(index > -1) {
						return @table->Filter(Conditional->New(index, Conditional->Qualifier->LESS_EQUAL, right->GetValue()));
					};
				}
				
				label Token->Type->LIKE: {
# "== Like =="->PrintLine();
					index := @table->GetIndex(left->GetValue()->As(String));
 					if(index > -1) {
						return @table->Filter(Conditional->New(index, Conditional->Qualifier->LIKE, right->GetValue()));
					};
				}
			};
			
			return Nil;
		}
		
		method : MergeAnd(left : Vector, right : Vector) ~ Vector {
			merged := Vector->New();
			
			each(i : right) {
				right_value := right->Get(i);
				
				found := false;
				for(j := 0; found = false & j < left->Size(); j += 1;) {
					left_value := left->Get(j);
					if(left_value = right_value) {
						found := true;
					};
				};
				
				if(found) {
					merged->AddBack(right_value);
				};
			};
			
			return merged;
		}
		
		method : MergeOr(left : Vector, right : Vector) ~ Vector {			
			each(i : right) {
				right_value := right->Get(i);
				
				not_found := false;
				for(j := 0; not_found = false & j < left->Size(); j += 1;) {
					left_value := left->Get(j);
					if(left_value <> right_value) {
						not_found := true;
					};
				};
				
				if(not_found) {
					left->AddBack(right_value);
				};
			};
			
			return left;
		}
	}
	
	class Parser {
		@line : String;
		@tokens : Vector;
		@tokens_index : Int;
		@cur_token : Token;
		
		New(line : String) {
			@line := line;
		}
		
		method : public : Parse() ~ Term {
			@tokens := Scan();

			term : Term;
			if(@tokens = Nil)	{
				return Nil;
			};			
			NextToken();
			if(TokenType() = Token->Type->SELECT) {
				NextToken();				
				term := ParseSelect();
			}
			else if(TokenType() = Token->Type->FROM) {
				NextToken();
				term := ParseFrom();
			};

			if(term <> Nil & TokenType() = Token->Type->ORDER) {
				NextToken();

				if(TokenType() <> Token->Type->BY) {
					return Nil;
				};
				NextToken();

				if(TokenType() <> Token->Type->REF) {
					return Nil;
				};

				right := Term->New(TokenType());
				right->SetValue(TokenValue());
				term->SetRight(right);
			};
			
			return term;
		}
		
		method : ParseSelect() ~ Term {
# "--- Select ---"->PrintLine();		
			term := Term->New(Token->Type->SELECT);
			term->SetValue(TokenValue());
			
			if(TokenType() = Token->Type->STAR) {
				term->AddTerm(Term->New(TokenType()));
				NextToken();		
			}
			else if(TokenType() = Token->Type->DISTINCT) {
				term->AddTerm(Term->New(TokenType()));
				NextToken();
				
				if(TokenType() <> Token->Type->REF) {
					return Nil;
				};
				name := Term->New(TokenType());
				name->SetValue(TokenValue());
				term->AddTerm(name);
				NextToken();
			}
			else {
				do {
					if(TokenType() <> Token->Type->REF) {
						return Nil;
					};
					name := Term->New(TokenType());
					name->SetValue(TokenValue());
					term->AddTerm(name);
					NextToken();
				
					if(TokenType() = Token->Type->COMMA) {
						NextToken();
					};
				}
				while(TokenType() <> Token->Type->EOS & TokenType() <> Token->Type->FROM);
			};
			
			if(TokenType() <> Token->Type->FROM) {			
				return Nil;
			};
			
			NextToken();
			left := ParseFrom();
			if(left = Nil) {			
				return Nil;
			};
			term->SetLeft(left);

			return term;
		}

		method : ParseFrom() ~ Term {
# "--- From ---"->PrintLine();

			if(TokenType() <> Token->Type->REF) {
				return Nil;
			};
			term := Term->New(Token->Type->FROM);
			term->SetValue(TokenValue());
			NextToken();
			
			if(TokenType() = Token->Type->WHERE) {
				NextToken();
				left := ParseWhere();
				if(left = Nil) {
					return Nil;
				};
				term->SetLeft(left);
			};
			
			term->SetRight(Term->New(Token->Type->EOS));
			return term;
		}

		method : public : ParseWhere() ~ Term {
# "--- Where ---"->PrintLine();
			
			where := Term->New(Token->Type->WHERE);
			
			left := ParseLogic();
			do {
				type := TokenType();
				if(type = Token->Type->AND | type = Token->Type->OR) {
					term := Term->New(type);
					term->SetValue(TokenValue());
					NextToken();
					
					right := ParseTerm();
					if(right = Nil) {
						return Nil;
					};
					
					term->SetLeft(left);
					term->SetRight(right);
					left := term;
				};
			}
			while(TokenType() <> Token->Type->EOS);
			
			where->SetLeft(left);
			return where;
		}
		
		method : ParseLogic() ~ Term {
			left := ParseTerm();
			if(left = Nil) {
				return Nil;
			};
			
			type := TokenType();
			if(type = Token->Type->AND | type = Token->Type->OR) {
# "--- Logic ---"->PrintLine();
			
				term := Term->New(type);
				term->SetValue(TokenValue());
				NextToken();
				
				right := ParseTerm();
				if(right = Nil) {
					return Nil;
				};
				
				term->SetLeft(left);
				term->SetRight(right);
				return term;
			};

			return left;
		}
		
		method : ParseTerm() ~ Term {
# "--- Term ---"->PrintLine();
			
			left : Term;
			select(TokenType()) {
				label Token->Type->REF:
				label Token->Type->DATE:
				label Token->Type->INT:
				label Token->Type->FLOAT: {				
					left := Term->New(TokenType());
					left->SetValue(TokenValue());
					NextToken();
				}
				
				label Token->Type->OPRN: {
					NextToken();
					
					left := ParseLogic();
					if(left = Nil | TokenType() <> Token->Type->CPRN) {
						return Nil;
					};
					NextToken();
										
					return left;
				}
				
				other: {
					return Nil;
				}
			};
			
			term : Term;
			select(TokenType()) {
				label Token->Type->LIKE:
				label Token->Type->EQUAL:
				label Token->Type->NOT_EQUAL:
				label Token->Type->LESS:
				label Token->Type->GREATER:
				label Token->Type->LESS_EQUAL:
				label Token->Type->GREATER_EQUAL: {				
					term := Term->New(TokenType());
					term->SetValue(TokenValue());
					NextToken();
				}
				
				other: {
					return Nil;
				}
			};
			
			right : Term;			
			select(TokenType()) {
				label Token->Type->REF:
				label Token->Type->DATE:
				label Token->Type->INT:
				label Token->Type->FLOAT: {			
					right := Term->New(TokenType());					
					right->SetValue(TokenValue());
					NextToken();
				}
				
				other: {
					return Nil;
				}
			};
		
			term->SetLeft(left);
			term->SetRight(right);
			
			return term;
		}
		
		method : NextToken() ~ Bool {
			if(@tokens_index < @tokens->Size()) {
				@cur_token := @tokens->Get(@tokens_index);
				@tokens_index += 1;
				return true;
			};
			
			@cur_token := Nil;
			return false;
		}
		
		method : TokenType() ~ Token->Type {
			if(@cur_token <> Nil) {
				return @cur_token->GetType();
			};
			
			return Token->Type->EOS;
		}
		
		method : TokenValue() ~ Compare {
			if(@cur_token <> Nil) {
				return @cur_token->GetValue();
			};
			
			return "";
		}
		
		method : native : Scan() ~ Vector {		
			reserved := StringMap->New();
			reserved->Insert("select", Token->New(Token->Type->SELECT));
			reserved->Insert("distinct", Token->New(Token->Type->DISTINCT));
			reserved->Insert("from", Token->New(Token->Type->FROM));
			reserved->Insert("where", Token->New(Token->Type->WHERE));
			reserved->Insert("like", Token->New(Token->Type->LIKE));
			reserved->Insert("between", Token->New(Token->Type->BETWEEN));
			reserved->Insert("in", Token->New(Token->Type->IN));
			reserved->Insert("and", Token->New(Token->Type->AND));
			reserved->Insert("or", Token->New(Token->Type->OR));
			reserved->Insert("true", Token->New(1));
			reserved->Insert("false", Token->New(0));
			reserved->Insert("order", Token->New(Token->Type->ORDER));
			reserved->Insert("by", Token->New(Token->Type->BY));
			
			i := 0;
			tokens := Vector->New();
			while(i < @line->Size()) { 			 			  
				# skip whitespace
				while(i < @line->Size() & (@line->Get(i) = ' ' | @line->Get(i) = '\t')) {
					i += 1;					
				};
				
				# parse the @line
				if(i < @line->Size()) {
					# string
					if(@line->Get(i) = '\'') {
						string := "";
						i += 1;
						while(i < @line->Size() & @line->Get(i) <> '\'') {
							string->Append(@line->Get(i));
							i += 1;
						};
						
						if(@line->Get(i) <> '\'') {
							return Nil;
						};
						i += 1;
						
						tokens->AddBack(Token->New(string));
					}
					# date
					else if(@line->Get(i) = '#') {
						i += 1;					
						string := "";
						while(i < @line->Size() & @line->Get(i) <> '#') {
							string->Append(@line->Get(i));
							i += 1;
						};
					
						if(@line->Get(i) <> '#') {
							return Nil;
						};
						i += 1;
						
						select(string->Size()) {
							label 8: {
								date := DateUtility->Parse(string, "MM/dd/yy", false);
								tokens->AddBack(Token->New(date));
							}
							
							label 10: {						
								date := DateUtility->Parse(string, "MM/dd/yyyy", false);	
								tokens->AddBack(Token->New(date));
							}
							
							label 17: {
								date := DateUtility->Parse(string, "MM/dd/yy hh:mm:ss", false);
								tokens->AddBack(Token->New(date));
							}
							
							label 19: {
								date := DateUtility->Parse(string, "MM/dd/yyyy hh:mm:ss", false);
								tokens->AddBack(Token->New(date));
							}
							
							other: {
								return Nil;
							}
						};
					}
					# word
					else if(@line->Get(i)->IsChar() = true) {
						string := "";
						while(i < @line->Size() & @line->Get(i)->IsChar() | @line->Get(i) = '_') {
							string->Append(@line->Get(i));
							i += 1;
						};
					
						result := reserved->Find(string->ToLower())->As(Token);
						if(result <> Nil) {
							tokens->AddBack(result);
						}
						else {
							tokens->AddBack(Token->New(string));
						};
					}
					# number
					else if(@line->Get(i)->IsDigit() = true) {
						number := "";
						is_dec := 0;
						while(i < @line->Size() & @line->Get(i)->IsDigit() = true | @line->Get(i) = '.') {
							if(@line->Get(i) = '.') {
								is_dec += 1;
							};
							number->Append(@line->Get(i));
							i += 1;
						};

						if(is_dec = 1) {
							tokens->AddBack(Token->New(number->ToFloat()));
						}
						else if(is_dec = 0) {
							tokens->AddBack(Token->New(number->ToInt()));
						}
						else {
							return Nil;
						};
					}
					# other
					else {
						select(@line->Get(i)) {
							label '*': {
								tokens->AddBack(Token->New(Token->Type->STAR));
							}

							label ',': {
								tokens->AddBack(Token->New(Token->Type->COMMA));
							}
							
							label '(': {
								tokens->AddBack(Token->New(Token->Type->OPRN));
							}
							
							label ')': {
								tokens->AddBack(Token->New(Token->Type->CPRN));
							}
							
							label '=': {
								tokens->AddBack(Token->New(Token->Type->EQUAL));
							}
							
							label '<': {
								if(@line->Get(i + 1) = '>') {
									i += 1;
									tokens->AddBack(Token->New(Token->Type->NOT_EQUAL));
								}
								else if(@line->Get(i + 1) = '=') {
									i += 1;
									tokens->AddBack(Token->New(Token->Type->LESS_EQUAL));
								}
								else {
									tokens->AddBack(Token->New(Token->Type->LESS));
								};
							}
							
							label '>': {
								if(@line->Get(i + 1) = '=') {
									i += 1;
									tokens->AddBack(Token->New(Token->Type->GREATER_EQUAL));
								}
								else {
									tokens->AddBack(Token->New(Token->Type->GREATER));
								};
							}
              
							other: {
								return Nil;
							}
						};
						i += 1;
					};
				};			
			};			
			tokens->AddBack(Token->New(Token->Type->EOS));

			return tokens;
		}
	}
	
	class Term {
		@type : Token->Type;
		@oper : Conditional->Qualifier;
		@left : Term;
		@right : Term;
		@terms : Vector;
		@value : Compare;
		
		New(type : Token->Type) {
			@type := type;
		}
		
		method : public : GetType() ~ Token->Type {
			return @type;
		}
		
		method : public : SetType(type : Token->Type) ~ Nil {
			@type := type;
		}
		
		method : public : GetOperator() ~ Conditional->Qualifier {
			return @oper;
		}
		
		method : public : SetOperator(oper : Conditional->Qualifier) ~ Nil {
			@oper := oper;
		}
		
		method : public : SetValue(value : Compare) ~ Nil {
			@value := value;
		}
		
		method : public : GetValue() ~ Compare {
			return @value;
		}
		
		method : public : SetLeft(left : Term) ~ Nil {
			@left := left;
		}
		
		method : public : GetLeft() ~ Term {
			return @left;
		}
		
		method : public : SetRight(right : Term) ~ Nil {
			@right := right;
		}
		
		method : public : GetRight() ~ Term {
			return @right;
		}
		
		method : public : AddTerm(term : Term) ~ Nil {
			if(@terms = Nil) {
				@terms := Vector->New();
			};
			
			@terms->AddBack(term);
		}
		
		method : public : GetTerms() ~ Vector {
			return @terms;
		}
	}
	
	class Token {
		@type : Type;
		@value : Compare;
		
		enum Type {
			SELECT,
			DISTINCT,
			FROM,
			WHERE,
			LIKE,
			BETWEEN,
			IN,
			AND,
			OR,
			ORDER,
			BY,
			STAR,
			COMMA,
			OPRN,
			CPRN,
			EQUAL,
			NOT_EQUAL,
			LESS_EQUAL,
			LESS,
			GREATER_EQUAL,
			GREATER,
			REF,
			OPER,
			INT,
			FLOAT,
			DATE,
			TRUE,
			FASLE,
			EOS
		}
		
		New(value : String) {
			@type := Type->REF;
			@value := value;
		}
		
		New(value : Date) {
			@type := Type->DATE;
			@value := value;
		}
		
		New(type : Type) {
			@type := type;
			@value := "";
		}
		
		New(value : Int) {
			@type := Type->INT;
			@value := IntHolder->New(value);
		}
		
		New(value : Float) {
			@type := Type->FLOAT;
			@value := FloatHolder->New(value);
		}
		
		method : public : GetType() ~ Type {
			return @type;
		}
		
		method : public : GetValue() ~ Compare {
			return @value;
		}

		method : public : ToString() ~ String {
			buffer := "";

			select(@type) {
				label Type->SELECT: {
					buffer += "SELECT";
				}

				label Type->DISTINCT: {
					buffer += "DISTINCT";
				}
				
				label Type->FROM: {
					buffer += "FROM";
				}

				label Type->WHERE: {
					buffer += "WHERE";
				}

				label Type->LIKE: {
					buffer += "LIKE";
				}

				label Type->BETWEEN: {
					buffer += "BETWEEN";
				}

				label Type->IN: {
					buffer += "IN";
				}

				label Type->AND: {
					buffer += "AND";
				}

				label Type->OR: {
					buffer += "OR";
				}

				label Type->STAR: {
					buffer += "STAR";
				}

				label Type->ORDER: {
					buffer += "ORDER";
				}

				label Type->BY: {
					buffer += "BY";
				}

				label Type->COMMA: {
					buffer += "COMMA";
				}

				label Type->OPRN: {
					buffer += "OPRN";
				}
				
				label Type->CPRN: {
					buffer += "CPRN";
				}

				label Type->EQUAL: {
					buffer += "EQUAL";
				}

				label Type->NOT_EQUAL: {
					buffer += "NOT_EQUAL";
				}

				label Type->LESS_EQUAL: {
					buffer += "LESS_EQUAL";
				}

				label Type->LESS: {
					buffer += "LESS";
				}

				label Type->GREATER_EQUAL: {
					buffer += "GREATER_EQUAL";
				}

				label Type->GREATER: {
					buffer += "GREATER";
				}

				label Type->REF: {
					buffer += "REF, value='";
					buffer += @value->As(String);
					buffer += '"';
				}

				label Type->INT: {
					buffer += "INT, value=";
					buffer += @value->As(IntHolder)->Get();
				}

				label Type->FLOAT: {
					buffer += "FLOAT, value=";
					f := @value->As(FloatHolder);
					buffer += f->Get();
				}

				label Type->EOS: {
					buffer += "EOS";
				}
			};

			return buffer;
		}
	}
}
use Web.HTTP, Collection, System.IO.Filesystem, Data.JSON;

bundle API.Google.Gemini {
	class Model from EndPoint {
		@description : String;
		@display_name : String;
		@input_token_limit : Int;
		@name : String;
		@output_token_limit : Int;
		@generation_methods : Vector<String>;
		@temperature : Float;
		@top_k : Int;
		@top_p : Float;
		@version : String;

		New(description : String, display_name : String, input_token_limit : Int, 
				name : String, output_token_limit : Int, generation_methods : Vector<String>, 
				temperature : Float, top_k : Int, top_p : Float, version : String) {
			Parent();

			@description := description;
			@display_name := display_name;
			@input_token_limit := input_token_limit;
			@name := name;
			@output_token_limit := output_token_limit;
			@generation_methods := generation_methods;
			@temperature := temperature;
			@top_k := top_k;
			@top_p := top_p;
			@version := version;
		}

		method : public : GetDescription() ~ String {
			return @description;
		}

		method : public : GetDisplayName() ~ String {
			return @display_name;
		}

		method : public : GetInputTokenLimit() ~ Int {
			return @input_token_limit;
		}

		method : public : GetName() ~ String {
			return @name;
		}

		method : public : GetOutputTokenLimit() ~ Int {
			return @output_token_limit;
		}

		method : public : GetGenerationMethods() ~ Vector<String> {
			return @generation_methods;
		}

		method : public : GetTemperature() ~ Float {
			return @temperature;
		}

		method : public : GetTopK() ~ Int {
			return @top_k;
		}

		method : public : GetTopP() ~ Float {
			return @top_p;
		}

		method : public : GetVersion() ~ String {
			return @version;
		}

		function : List(key : String) ~ Vector<Model> {
			models := Vector->New()<Model>;

			url := Url->New("https://generativelanguage.googleapis.com/v1beta/models?key={$key}");
			response := GetRequest(url);

			if(response <> Nil) {
				# response->ToString()->PrintLine();			
				models_json := response->Get("models");

				each(model_json in models_json) {
					description := model_json->Get("description")->GetString();
					display_name := model_json->Get("displayName")->GetString();
					input_token_limit := model_json->Get("inputTokenLimit")->GetInt();
					name := model_json->Get("name")->GetString();
					output_token_limit := model_json->Get("outputTokenLimit")->GetInt();

					generation_methods := Vector->New()<String>;
					generation_methods_json := model_json->Get("supportedGenerationMethods");
					each(generation_method_json in generation_methods_json) {
						generation_methods->AddBack(generation_method_json->GetString());
					}

					temperature := 0.9;
					temperature_json := model_json->Get("temperature");
					if(temperature_json <> Nil) {
						temperature := temperature_json->GetFloat();
					};

					top_k := 0;			
					top_k_json := model_json->Get("topK");
					if(top_k_json <> Nil) {
						top_k := top_k_json->GetInt();
					};

					top_p := 1.0;
					top_p_json := model_json->Get("topP");
					if(top_p_json <> Nil) {
						top_p := top_p_json->GetFloat();
					};
					version := model_json->Get("version")->GetString();

					models->AddBack(Model->New(description, display_name, input_token_limit, name, output_token_limit, 
						generation_methods, temperature, top_k, top_p, version));
				};
			};

			return models;
		}

#~
		method : BuildRequest(data : String) ~ JsonElement {
			query := "What is this picture?";
			"Query='{$query}'\nData='{$data}'"->PrintLine();

			inline_data_json := JsonElement->New(JsonElement->JsonType->OBJECT);
			inline_data_json->Insert("mime_type", "image/png");
			inline_data_json->Insert("data", data);

			inline_obj_json := JsonElement->New(JsonElement->JsonType->OBJECT);
			inline_obj_json->Insert("inline_data", inline_data_json);

			# ---

			content_array_json := JsonElement->New(JsonElement->JsonType->OBJECT);
			content_array_json->Insert("text", query);

			# ---

			part_array_json := JsonElement->New(JsonElement->JsonType->ARRAY);
			part_array_json->Add(inline_obj_json);
			part_array_json->Add(content_array_json);

			# ---

			parts_json := JsonElement->New(JsonElement->JsonType->OBJECT);
			parts_json->Insert("parts", part_array_json);

			contents_array_json := JsonElement->New(JsonElement->JsonType->ARRAY);
			contents_array_json->Add(parts_json);

			content_array_json := JsonElement->New(JsonElement->JsonType->OBJECT);
			content_array_json->Insert("contents", contents_array_json);

			# content_array_json->ToString()->PrintLine();

			return content_array_json;
		}

		method : ParseResponse(response : JsonElement) ~ Vector<String> {
			responses := Vector->New()<String>;

			candidates_json := response->Get("candidates");
			if(candidates_json <> Nil & candidates_json->Size() > 0) {
				content_json := candidates_json->Get(0)->Get("content");
				parts_json := content_json->Get("parts");
				if(parts_json <> Nil & parts_json->Size() > 0) {
					text_json := parts_json->Get(0)->Get("text");
					role_json := content_json->Get("role");

					responses->AddBack(role_json->GetString()->Trim());
					responses->AddBack(JsonElement->Decode(text_json->GetString()->Trim()));
				};
			};

			return responses;
		}
~#

		method : public : ToString() ~ String {
			buffer := "";

			buffer += "name='"
			buffer += @name;
			buffer += "', version="
			buffer += @version;
			buffer += "', description=\""
			buffer += @description;
			buffer += "\"\nmethods:\n\t"
			each(generation_method in @generation_methods) {
				buffer += generation_method;
				buffer += "\n\t";
			};

			return buffer;
		}
	}

	#~
	Gemini endpoint
	~#
	class EndPoint {
		@last_message : static : String;
		@api_key : static : String;

		New() {}

		function : GetRequest(url : Url) ~ JsonElement {
			response := HttpsClient->QuickGet(url, "application/json");
			if(response <> Nil) {
				response_json := JsonParser->TextToElement(response->GetContent()->ToString());
				
				# response->GetContent()->ToString()->PrintLine();			
				
				if(response_json = Nil) {
					"### Error: Unable to parse response ###"->ErrorLine();
					return Nil;
				};
				
				error_json := response_json->FindElements("error/message")
				if(error_json <> Nil) {
					error_message := error_json->GetString();
					">>> Error: {$error_message} <<<"->ErrorLine();
					return Nil;
				};

				return response_json;
			};

			return Nil;
		}

		function : PostRequest(request : JsonElement, url : Url) ~ JsonElement {
			response := HttpsClient->QuickPost(url, request->ToString()->ToByteArray(), "application/json");
			if(response <> Nil) {
				response_json := JsonParser->TextToElement(response->GetContent()->ToString());
				
				# response->GetContent()->ToString()->PrintLine();			
				
				if(response_json = Nil) {
					"### Error: Unable to parse response ###"->ErrorLine();
					return Nil;
				};
				
				error_json := response_json->FindElements("error/message")
				if(error_json <> Nil) {
					error_message := error_json->GetString();
					">>> Error: {$error_message} <<<"->ErrorLine();
					return Nil;
				};

				return response_json;
			};

			return Nil;
		}

		function : GetApiKey() ~ String {
			if(@api_key = Nil) {
				token := FileReader->ReadFile("api_key.txt");
				if(token <> Nil) {
					@api_key := token->Trim();
				};
			};

			return @api_key;
		}

		function : SetLastError(last_message : String) ~ Nil {
			@last_message := last_message;

		}

		#~
		Get the last error
		@return last error
		~#
		function : GetLastError() ~ String {
			return @last_message;
		}
	}
}
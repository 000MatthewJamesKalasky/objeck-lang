#~
Provides support for machine learning
~#

use Collection;
use Data.CSV;

bundle System.Matrix {
	#~
	Encapsulates 2D matrix operations
	~#
	class Matrix2D {
		#~
		Adds a constant to a matrix
		@param x constant to add
		@param b matrix
		@return updated matrix
		~#
		function : native : Add(x : Float, b : Float[,]) ~ Float[,] {
			b_dims := b->Size();
			b_rows := b_dims[0];
			b_cols := b_dims[1];

			c := Float->New[b_rows, b_cols];
			for(i := 0; i < b_rows; i += 1;) {
				for(j := 0; j < b_cols; j += 1;) {
					c[i,j] := x + b[i,j];
				};
			};

			return c;
		}

		#~
		Adds a constant to a matrix
		@param b matrix
		@param x constant to add
		@return updated matrix
		~#
		function : native : Add(b : Float[,], x : Float) ~ Float[,] {
			b_dims := b->Size();
			b_rows := b_dims[0];
			b_cols := b_dims[1];

			c := Float->New[b_rows, b_cols];
			for(i := 0; i < b_rows; i += 1;) {
				for(j := 0; j < b_cols; j += 1;) {
					c[i,j] := b[i,j] + x;
				};
			};

			return c;
		}
		
		#~
		Adds two matrices
		@param a matrix
		@param b matrix
		@return updated matrix
		~#
		function : native : Add(a : Float[,], b : Float[,]) ~ Float[,] {
			a_dims := a->Size();
			a_rows := a_dims[0];
			a_cols := a_dims[1];

			b_dims := b->Size();
			b_rows := b_dims[0];
			b_cols := b_dims[1];

			if( a_rows <> b_rows | a_cols <> b_cols) {
				return Nil;
			};

			c := Float->New[a_rows, b_cols];
			for(i := 0; i < a_rows; i += 1;) {
				for(j := 0; j < b_cols; j += 1;) {
					c[i,j] := a[i,j] + b[i,j];
				};
			};

			return c;
		}

		#~
		Subtracts a constant from a matrix
		@param x constant to subtract
		@param b matrix
		@return updated matrix
		~#
		function : native : Subtract(x : Float, b : Float[,]) ~ Float[,] {
			b_dims := b->Size();
			b_rows := b_dims[0];
			b_cols := b_dims[1];

			c := Float->New[b_rows, b_cols];
			for(i := 0; i < b_rows; i += 1;) {
				for(j := 0; j < b_cols; j += 1;) {
					c[i,j] := x - b[i,j];
				};
			};

			return c;
		}
		
		#~
		Adds a constant to a matrix
		@param b matrix
		@param x constant to add
		@return updated matrix
		~#
		function : native : Subtract(b : Float[,], x : Float) ~ Float[,] {
			b_dims := b->Size();
			b_rows := b_dims[0];
			b_cols := b_dims[1];

			c := Float->New[b_rows, b_cols];
			for(i := 0; i < b_rows; i += 1;) {
				for(j := 0; j < b_cols; j += 1;) {
					c[i,j] := b[i,j] - x;
				};
			};

			return c;
		}

		#~
		Subtracts two matrices
		@param a matrix
		@param b matrix
		@return updated matrix
		~#
		function : native : Subtract(a : Float[,], b : Float[,]) ~ Float[,] {
			a_dims := a->Size();
			a_rows := a_dims[0];
			a_cols := a_dims[1];

			b_dims := b->Size();
			b_rows := b_dims[0];
			b_cols := b_dims[1];

			if( a_rows <> b_rows | a_cols <> b_cols) {
				return Nil;
			};

			c := Float->New[a_rows, b_cols];
			for(i := 0; i < a_rows; i += 1;) {
				for(j := 0; j < b_cols; j += 1;) {
					c[i,j] := a[i,j] - b[i,j];
				};
			};

			return c;
		}

		#~
		Multiplies a constant by a matrix
		@param x constant to multiple
		@param b matrix
		@return updated matrix
		~#
		function : native : Multiple(x : Float, b : Float[,]) ~ Float[,] {
			b_dims := b->Size();
			b_rows := b_dims[0];
			b_cols := b_dims[1];

			c := Float->New[b_rows, b_cols];
			for(i := 0; i < b_rows; i += 1;) {
				for(j := 0; j < b_cols; j += 1;) {
					c[i,j] := x * b[i,j];
				};
			};

			return c;
		}

		#~
		Multiplies a constant by a matrix
		@param b matrix
		@param x constant to multiple
		@return updated matrix
		~#
		function : native : Multiple(b : Float[,], x : Float) ~ Float[,] {
			b_dims := b->Size();
			b_rows := b_dims[0];
			b_cols := b_dims[1];

			c := Float->New[b_rows, b_cols];
			for(i := 0; i < b_rows; i += 1;) {
				for(j := 0; j < b_cols; j += 1;) {
					c[i,j] := b[i,j] * x;
				};
			};

			return c;
		}
		
		#~
		Multiplies two matrices using the Hadamard rule
		@param a matrix
		@param b matrix
		@return updated matrix
		~#
		function : native : Multiple(a : Float[,], b : Float[,]) ~ Float[,] {
			a_dims := a->Size();
			a_rows := a_dims[0];
			a_cols := a_dims[1];

			b_dims := b->Size();
			b_rows := b_dims[0];
			b_cols := b_dims[1];

			if( a_rows <> b_rows | a_cols <> b_cols) {
				return Nil;
			};

			c := Float->New[a_rows, b_cols];
			for(i := 0; i < a_rows; i += 1;) {
				for(j := 0; j < b_cols; j += 1;) {
					c[i,j] := a[i,j] * b[i,j];
				};
			};

			return c;
		}

		#~
		Divides a constant by a matrix
		@param b matrix
		@param x constant to divide
		@return updated matrix
		~#
		function : native : Divide(b : Float[,], x : Float) ~ Float[,] {
			b_dims := b->Size();
			b_rows := b_dims[0];
			b_cols := b_dims[1];

			c := Float->New[b_rows, b_cols];
			for(i := 0; i < b_rows; i += 1;) {
				for(j := 0; j < b_cols; j += 1;) {
					c[i,j] := b[i,j] / x;
				};
			};

			return c;
		}

		#~
		Divides a constant by a matrix
		@param x constant to divide
		@param b matrix
		@return updated matrix
		~#
		function : native : Divide(x : Float, b : Float[,]) ~ Float[,] {
			b_dims := b->Size();
			b_rows := b_dims[0];
			b_cols := b_dims[1];

			c := Float->New[b_rows, b_cols];
			for(i := 0; i < b_rows; i += 1;) {
				for(j := 0; j < b_cols; j += 1;) {
					c[i,j] := b[i,j] / x;
				};
			};

			return c;
		}

		#~
		Divides two matrices
		@param a matrix
		@param b matrix
		@return updated matrix
		~#
		function : native : Divide(a : Float[,], b : Float[,]) ~ Float[,] {
			a_dims := a->Size();
			a_rows := a_dims[0];
			a_cols := a_dims[1];

			b_dims := b->Size();
			b_rows := b_dims[0];
			b_cols := b_dims[1];

			if( a_rows <> b_rows | a_cols <> b_cols) {
				return Nil;
			};

			c := Float->New[a_rows, b_cols];
			for(i := 0; i < a_rows; i += 1;) {
				for(j := 0; j < b_cols; j += 1;) {
					c[i,j] := a[i,j] / b[i,j];
				};
			};

			return c;
		}

		#~
		Transpose a matrix swapping rows and columns.
		@param a matrix
		@return transposed matrix
		~#
		function : native : Transpose(a : Float[,]) ~ Float[,] {
			dim := a->Size();
			rows := dim[0];
			cols := dim[1];

			b := Float->New[cols, rows];
			for(r := 0; r < rows; r += 1;) {
				for(c := 0; c < cols; c += 1;) {
					b[c,r] := a[r,c];
				};
			};

			return b;
		}

		#~
		Calculates the dot product.
		@param a matrix
		@param b matrix
		@return updated matrix
		~#
		function : native : Dot(a : Float[,], b : Float[,]) ~ Float[,] {
			a_dims := a->Size();
			a_rows := a_dims[0];
			a_cols := a_dims[1];

			b_dims := b->Size();
			b_rows := b_dims[0];
			b_cols := b_dims[1];

			if(a_cols <> b_rows & a_rows <> b_cols) {
				return Nil;
			};

			c := Float->New[a_rows, b_cols];
			for(a_col := 0; a_col < a_rows; a_col += 1;) {
				for(b_col := 0; b_col < b_cols; b_col += 1;) {
					cx := 0.0;
					for(x_col := 0; x_col < b_rows; x_col += 1;) {
						cx += a[a_col, x_col] * b[x_col, b_col];
					};
					c[a_col, b_col] := cx;
				};
			};

			return c;
		}

		#~
		Sigmoid 'S' function
		@param x input value
		@return Sigmoid value
		~#
		function : native : Sigmoid(x : Float) ~ Float {
			return 1.0 / (1.0 + Float->Pow(Float->E(), -1.0 * x));
		}

		#~
		Applies the Sigmoid function to all elements
		@param b matrix
		@return updated matrix
		~#
		function : native : Sigmoid(b : Float[,]) ~ Float[,] {
			b_dims := b->Size();
			b_rows := b_dims[0];
			b_cols := b_dims[1];

			c := Float->New[b_rows, b_cols];
			for(i := 0; i < b_rows; i += 1;) {
				for(j := 0; j < b_cols; j += 1;) {
					c[i,j] := Sigmoid(b[i,j]);
				};
			};

			return c;
		}
		
		#~
		Calculates the Dot Product applying while applying the Sigmoid function to all elements
		@param a matrix
		@param b matrix
		@return updated matrix
		~#
		function : native : DotSigmoid(a : Float[,], b : Float[,]) ~ Float[,] {
			a_dims := a->Size();
			a_rows := a_dims[0];
			a_cols := a_dims[1];

			b_dims := b->Size();
			b_rows := b_dims[0];
			b_cols := b_dims[1];
			
			if(a_cols <> b_rows & a_rows <> b_cols) {
				return Nil;
			};

			c := Float->New[a_rows, b_cols];
			for(a_col := 0; a_col < a_rows; a_col += 1;) {
				for(b_col := 0; b_col < b_cols; b_col += 1;) {
					cx := 0.0;
					for(x_col := 0; x_col < b_rows; x_col += 1;) {
						cx += a[a_col, x_col] * b[x_col, b_col];
					};
					c[a_col, b_col] := Sigmoid(cx);
				};
			};

			return c;
		}

		#~
		Generates a random 2D array of values from 0.0 to 1.0
		@param rows rows
		@param cols columns
		@return updated matrix
		~#
		function : Random(rows : Int, cols : Int) ~ Float[,] {
			m := Float->New[rows, cols];

			for(i := 0; i < rows; i += 1;) {
				for(j := 0; j < cols; j += 1;) {
					m[i,j] := Float->Random();
				};
			};
			
			return m;
		}
		
		#~
		Generates a random normal distribution of values
		@param mean center of values
		@param variance variance in values
		@param rows rows
		@param cols columns
		@return updated matrix
		~#
		function : RandomNormal(mean : Float, variance : Float, rows : Int, cols : Int) ~ Float[,] {
			m := Float->New[rows, cols];

			for(i := 0; i < rows; i += 1;) {
				for(j := 0; j < cols; j += 1;) {
					m[i,j] := RandomNormal(mean, variance);
				};
			};

			return m;
		}

		#~
		Generates a random normal value
		@param mean center of values
		@param variance variance in values
		@return updated matrix
		~#
		function : RandomNormal(mean : Float, variance : Float) ~ Float {
			return  (-2.0 * variance * Float->Random()->Log())->Sqrt() * (2.0 * Float->Pi() * Float->Random())->Cos() + mean;
		}

		#~
		Splits a matrix
		@param b matrix
		@param offset offset index
		@param count number of rows to split
		@param is_row true for row split, false for column
		@return copied matrix
		~#
		function : Split(b : Float[,], offset : Int, count : Int, is_row : Bool) ~ Float[,] {
			b_dims := b->Size();
			b_rows := b_dims[0];
			b_cols := b_dims[1];
			
			c : Float[,];
			if(is_row) {
				if(count + offset <= 0 | count + offset > b_rows) {
					return Nil;
				};

				c := Float->New[count, b_cols];
				count := count + offset;
				for(row := offset; row < count; row += 1;) {
					for(col := 0; col < b_cols; col += 1;) {
						c[row - offset, col] := b[row, col];
					};
				};
			}
			else {
				if(count + offset <= 0 | count + offset > b_cols) {
					return Nil;
				};

				c := Float->New[b_rows, count];
				count := count + offset;
				for(row := 0; row < b_rows; row += 1;) {
					for(col := offset; col < count; col += 1;) {
						c[row, col - offset] := b[row, col];
					};
				};
			};

			return c;
		}
		
		#~
		Concatenates two matrix
		@param a left matrix
		@param b right matrix
		@param is_row true concatenate by rows, false for columns
		@return concatenated matrix
		~#
		function : Concatenate(a : Float[,], b : Float[,], is_row : Bool) ~ Float[,] {
			a_dims := a->Size();
			a_rows := a_dims[0];
			a_cols := a_dims[1];

			b_dims := b->Size();
			b_rows := b_dims[0];
			b_cols := b_dims[1];

			c : Float[,];
			if(is_row) {
				if(a_cols <> b_cols) {
					return Nil;
				};

				c_rows := a_rows + b_rows;
				c := Float->New[c_rows, a_cols];

				for(row := 0; row < a_rows; row += 1;) {
					for(col := 0; col < a_cols; col += 1;) {
						c[row, col] := a[row, col];
					};
				};

				for(row := 0; row < b_rows; row += 1;) {
					for(col := 0; col < b_cols; col += 1;) {
						c[row + a_rows, col] := b[row, col];
					};
				};
			}
			else {
				if(a_rows <> b_rows) {
					return Nil;
				};

				c_cols := a_cols + b_cols;
				c := Float->New[a_rows, c_cols];

				for(row := 0; row < a_rows; row += 1;) {
					for(col := 0; col < a_cols; col += 1;) {
						c[row, col] := a[row, col];
					};
				};

				for(row := 0; row < b_rows; row += 1;) {
					for(col := 0; col < b_cols; col += 1;) {
						c[row, col + a_cols] := b[row, col];
					};
				};
			};

			return c;
		}
	}

	#~
	Matrix reference
	~#
	class MatrixRef {
		@value : Float[,];

		#~
		Default constructor
		~#
		New() {
			Parent();
		}

		#~
		Copy constructor
		@param value boolean value
		~#
		New(value : Float[,]) {
			Parent();
			@value := value;
		}

		#~
		Get boolean value
		@return boolean value
		~#
		method : public : Get() ~ Float[,] {
			return @value;
		}

		method : GetBoolen() ~ Bool {
			dim := @value->Size();
			if(dim->Size() = 2 & dim[0] = 1 & dim[1] = 1) {
				return @value[0,0] = 1.0;
			}
			
			return false;
		}
		
		#~
		Set boolean value
		@param value boolean value		
		~#
		method : public : Set(value : Float[,]) ~ Nil {
			@value := value;
		}

		#~
		Formats the matrix into a string
		@return string value
		~#
		method : public : ToString() ~ String {
			return @value->ToString();
		}

		#~
		Parsers a boolean value
		@return boolean value
		~#
		method : public : ToBool() ~ Bool {
			return ToInt() <> 0;
		}

		#~
		Parsers an integer value
		@return integer value
		~#
		method : public : ToInt() ~ Int {
			return Float->Round(ToFloat());
		}

		#~
		Parsers a decimal value
		@return decimal value
		~#
		method : public : ToFloat() ~ Float {
			dim := @value->Size();
			if(dim->Size() = 2 & dim[0] = 1 & dim[1] = 1) {
				return @value[0,0];;
			};

			return 0.0;
		}
	}

	#~
	Simple neural network 
	~#
	class NeuralNetwork {
		@input_nodes : Float;
		@hidden_nodes : Float;
		@output_nodes : Float;
		@learning_rate : Float;
		@weight_inputs_hidden : Float[,];
		@weight_outputs_hidden : Float[,];
		@threshold : Float;
		@attempts : Int;

		#~
		Trains the network
		@param input_nodes number of input nodes
		@param inputs : training inputs
		@param hidden_factor size of hidden layer, factor of input (i.e. input_nodes * hidden_factor)
		@param output_nodes training outputs
		@param targets training targets
		@param learning_rate learning rate
		@param iterations number of training iterations
		~#
		function : Train(input_nodes : Int, inputs : Vector<MatrixRef>, hidden_factor : Int, output_nodes : Int, targets : Vector<MatrixRef>, learning_rate : Float, iterations : Int) ~ NeuralNetwork {
			network := NeuralNetwork->New(input_nodes, hidden_factor * input_nodes, output_nodes, learning_rate);
			network->Train(inputs, targets, learning_rate, iterations);
			return network;		
		}
		
		New : private (input_nodes : Float, hidden_nodes : Float, output_nodes : Float, learning_rate : Float) {
			@input_nodes := input_nodes;
			@hidden_nodes := hidden_nodes;
			@output_nodes := output_nodes;
			@learning_rate := learning_rate;
			@threshold := 0.80;
			@attempts := 10;

			@weight_inputs_hidden := Matrix2D->RandomNormal(0.0, Float->Pow(@input_nodes, -1.0), @hidden_nodes, @input_nodes);
			@weight_outputs_hidden := Matrix2D->RandomNormal(0.0, Float->Pow(@input_nodes, -1.0), @output_nodes, @hidden_nodes);
		}

		#~
		Sets the activation threshold. Activation if output > threshold or < 1.0 - threshold
		@param threshold activation threshold default is 0.85
		~#
		method : public : SetActivation(threshold : Float, attempts : Int) ~ Nil {
			@threshold := threshold;
			@attempts := attempts;
		}

		#~
		Query the network
		@return true if activated, false otherwise
		~#
		method : public : Query(inputs : MatrixRef) ~ Bool {
			# try and fail is unsuccessful
			values :=  inputs->Get();
			each(i : @attempts) {
				outputs := Query(values);

				if(outputs[0,0] > @threshold) {
					return true;
				}
				else if(outputs[0,0] < 1.0 - @threshold) {
					return false;
				}
			};

			return false;
		}

		#~
		Query the network confidence
		@return confidence percentage
		~#
		method : public : Confidence(inputs : MatrixRef) ~ Float {
			outputs := Query(inputs->Get());
			return outputs[0,0];
		}

		method : Query(inputs : Float[,]) ~ Float[,] {
			# calculate signals into hidden layer
			hidden_outputs := Matrix2D->DotSigmoid(@weight_inputs_hidden, inputs);
			# calculate the signals emerging from final output layer
			return Matrix2D->DotSigmoid(@weight_outputs_hidden, hidden_outputs);
		}

		method : Train(inputs : Vector<MatrixRef>, targets : Vector<MatrixRef>, rate : Float, iterations : Int) ~ Nil {
			if(inputs->Size() = targets->Size()) {
				each(i : iterations) {
					each(j : inputs) {
						input := inputs->Get(j)->Get();
						target := targets->Get(j)->Get();

						# calculate signals into hidden layer
						hidden_outputs := Matrix2D->DotSigmoid(@weight_inputs_hidden, input);
						# calculate signals into final output layer
						final_outputs  := Matrix2D->DotSigmoid(@weight_outputs_hidden, hidden_outputs);
						# output layer error is the (target - actual)
						output_errors := Matrix2D->Subtract(target, final_outputs);
						# hidden layer error is the output_errors, split by weights, recombined at hidden nodes
						hidden_errors := Matrix2D->Dot(Matrix2D->Transpose(@weight_outputs_hidden), output_errors);
						# update the weights for the links between the input and hidden layers
						@weight_inputs_hidden := Matrix2D->Add(@weight_inputs_hidden, Adjust(rate, hidden_errors, hidden_outputs, input));
						# update the weights for the links between the hidden and output layers
						@weight_outputs_hidden := Matrix2D->Add(@weight_outputs_hidden, Adjust(rate, output_errors, final_outputs, hidden_outputs));
					};
				};
			};
		}

		method : Adjust(rate : Float, errors : Float[,], outputs : Float[,], inputs : Float[,]) ~ Float[,] {
			return Matrix2D->Multiple(rate, Matrix2D->Dot(Matrix2D->Multiple(errors, Matrix2D->Multiple(outputs, Matrix2D->Subtract(1.0, outputs))), Matrix2D->Transpose(inputs)));
		}
	}

	#~
	Utilities for reading data from CSV data sources 
	~#
	class MatrixReader {
		#~
		Load input and output data into matrices
		@param filename filename
		@param output_offset index of first column with output data
		@return input and output matrix data
		~#
		function : public : LoadMatrices(filename : String, target_offset : Int) ~ Vector[]<MatrixRef> {
			table := CsvTable->New(System.IO.Filesystem.FileReader->ReadFile(filename));
			if(table <> Nil & table->Size() > 0) {
				inputs := Vector->New()<MatrixRef>;
				targets := Vector->New()<MatrixRef>;

				each(row := table) {
					input_length := row->Size() - target_offset;
					target_length := row->Size() - input_length;
					if(input_length < 0) {
						return Nil;
					};

					input_array := Float->New[input_length, 1];
					target_array := Float->New[target_length, 1];

					each(i : input_length) {
						input_array[i, 0] := row->Get(i)->ToFloat();
					};

					target_index := 0;
					for(i := input_length; i < row->Size(); i += 1;) {
						target_array[target_index, 0] := row->Get(i)->ToFloat();
					};

					inputs->AddBack(MatrixRef->New(input_array));
					targets->AddBack(MatrixRef->New(target_array));
				};

				input_targets := Vector->New[2]<MatrixRef>;
				input_targets[0] := inputs;
				input_targets[1] := targets;

				return input_targets;
			};

			return Nil;
		}

		#~
		Load input and output data into split matrices for training and testing
		@param output_offset index of first column with output data
		@return split matrices for training and testing, first two matrices are training, latter two test
		~#
		function : public : SplitMatrices(filename : String, target_offset : Int, training_perc : Float) ~ Vector[]<MatrixRef> {
			table := CsvTable->New(System.IO.Filesystem.FileReader->ReadFile(filename));
			if(table <> Nil & table->Size() > 0) {
				train_count := (table->Size()->As(Float) * training_perc)->As(Int);
				if(train_count < 1) {
					return Nil;
				};

				training_inputs := Vector->New()<MatrixRef>;
				training_targets := Vector->New()<MatrixRef>;

				test_inputs := Vector->New()<MatrixRef>;
				test_targets := Vector->New()<MatrixRef>;

				count := 0;
				each(row := table) {
					input_length := row->Size() - target_offset;
					target_length := row->Size() - input_length;
					if(input_length < 0) {
						return Nil;
					};

					input_array := Float->New[input_length, 1];
					target_array := Float->New[target_length, 1];

					each(i : input_length) {
						input_array[i, 0] := row->Get(i)->ToFloat();
					};

					target_count := 0;
					for(i := input_length; i < row->Size(); i += 1;) {
						target_array[target_count, 0] := row->Get(i)->ToFloat();
					};

					if(count < train_count) {
						training_inputs->AddBack(MatrixRef->New(input_array));
						training_targets->AddBack(MatrixRef->New(target_array));
					}
					else {
						test_inputs->AddBack(MatrixRef->New(input_array));
						test_targets->AddBack(MatrixRef->New(target_array));
					};

					count += 1;
				};

				input_training_targets := Vector->New[4]<MatrixRef>;
				input_training_targets[0] := training_inputs;
				input_training_targets[1] := training_targets;
				input_training_targets[2] := test_inputs;
				input_training_targets[3] := test_targets;

				return input_training_targets;
			};

			return Nil;
		}
	}
}

#~~
# Stream JSON parser
# Copyright (c) 2024
# Music: 7th Chamber, 1:22
~~#

#~
Support for JSON stream parsing (-lib json_stream.obl)
~#
bundle Data.JSON.Stream {
	#~
	Event driven stream JSON parser

	```
stream := System.IO.Filesystem.FileReader->ReadFile(args[0]);
parser := Data.JSON.Stream.JsonStreamParser->New(stream);
if(parser->GetNextElement("person") & parser->GetNextElement("age") & parser->GetNextElement()) {
  parser->GetValue()->PrintLine();
};

parser->Reset();
while(parser->GetType() <> JsonStreamParser->JsonStreamType->END & parser->GetType() <> JsonStreamParser->JsonStreamType->ERROR) {
  if(parser->GetType() = JsonStreamParser->JsonStreamType->OBJECT_LIT) {
    if(parser->GetNextElement()) {
      parser->GetValue()->PrintLine();
    };
  };
};
	```
	~#
	class JsonStreamParser {
		@stream : Char[];
		@stream_position : Int;
		
		@stream_stack : ParseScope[];
		@stream_stack_position : Int;
		
		@current_value : String;
		@current_type : JsonStreamParser->JsonStreamType;
		@error_message : String;

		@is_debug : Bool;

		#~
		Stream JSON type
		~#
		enum JsonStreamType {
			ARRAY,
			OBJECT,
			OBJECT_LIT,
			STRING,
			NUMBER,
			TRUE,
			FALSE,
			NULL,
			END,
			ERROR
		}

		#~
		Constructor
		@param stream input stream
		~#
		New(stream : String) {
			@stream := stream->ToCharArray();
			@is_debug := false;

			max_level := 64;
			@stream_stack := ParseScope->New[max_level];
			each(i : max_level) {
				 @stream_stack[i] := ParseScope->New();
			};
		}
		
		#~
		Reset stream cursor to the beginning
		~#
		method : public : Reset() ~ Nil {
			@stream_stack_position := @stream_position := 0;
			@error_message := Nil;
		}

		#~
		Reset stream cursor to the beginning and reset buffer
		@param stream input stream buffer
		~#
		method : public : Reset(stream : String) ~ Nil {
			@stream := stream->ToCharArray();
			@stream_stack_position := @stream_position := 0;
			@error_message := Nil;
		}

		#~
		Gets the current stream type
		@return current stream type
		~#
		method : public : GetType() ~ JsonStreamParser->JsonStreamType {
			if(@error_message <> Nil) {
				return JsonStreamParser->JsonStreamType->ERROR;
			};

			return @current_type;
		}

		#~
		Gets the current stream type name
		@return current stream type name
		~#
		method : public : GetTypeName() ~ String {
			if(@error_message = Nil) {
				select(@current_type) {
					label JsonStreamParser->JsonStreamType->ARRAY {
						return "@array@";
					}
					
					label JsonStreamParser->JsonStreamType->OBJECT {
						return "@object@";
					}
					
					label JsonStreamParser->JsonStreamType->OBJECT_LIT {
						return "@object_literal@";
					}
					
					label JsonStreamParser->JsonStreamType->STRING {
						return "@string@";
					}
					
					label JsonStreamParser->JsonStreamType->NUMBER {
						return "@number@";
					}
					
					label JsonStreamParser->JsonStreamType->END {
						return "@end-of-stream@";
					}
				};
			};

			return "@error@";
		}

		#~
		Gets the current stream value
		@return current stream value
		~#
		method : public : GetValue() ~ String {
			if(@error_message <> Nil) {
				return Nil;
			};

			if(@current_type = JsonStreamParser->JsonStreamType->ARRAY) {
				return "@array@";
			}

			if(@current_type = JsonStreamParser->JsonStreamType->OBJECT) {
				return "@object@";
			}

			return @current_value;
		}

		#~
		Gets the current stream document tree level. 0 is the document root.
		@return current stream document tree level
		~#
		method : public : GetLevel() ~ Int {
			return @stream_stack_position;
		}

		#~
		Get the last error message
		@return last error message
		~#
		method : public : GetLastError() ~ String {
			return @error_message;
		}

		#~
		Gets the next element that matches the object literal name
		@param value value to match
		@return true if element match, false otherwise
		~#
		method : public : native : GetNextElement(value : String) ~ Bool {
			if(@error_message <> Nil) {
				return false;
			};

			@current_value := Nil;
			@current_type := JsonStreamParser->JsonStreamType->ERROR;

			do {
				ParseElement();
				if(@error_message <> Nil) {
					return false;
				}
				else if(@current_type = JsonStreamParser->JsonStreamType->OBJECT_LIT) {
					if(@current_value <> Nil & @current_value->Equals(value)) {
						return true;
					};
				};
			}
			while(@current_type <> JsonStreamParser->JsonStreamType->END);

			return false;
		}

		#~
		Checks to see the element pointer can be advanced
		@return true if pointer can be advanced, false otherwise
		~#
		method : public : More() ~ Bool {
			return @current_type <> JsonStreamParser->JsonStreamType->END & @current_type <> JsonStreamParser->JsonStreamType->ERROR;
		}

		#~
		Advances the element pointer
		~#
		method : public : Next() ~ Nil {
			GetNextElement();
		}

		#~
		Gets the next element
		@return true if successful match, false otherwise
		~#
		method : public : GetNextElement() ~ Bool {
			return GetNextElement(1);
		}

		#~
		Gets the nth element per offset
		@param offset offset from current position
		@return true if element match, false otherwise
		~#
		method : public : native : GetNextElement(offset : Int) ~ Bool {
			if(@error_message <> Nil) {
				return false;
			};

			@current_value := Nil;
			@current_type := JsonStreamParser->JsonStreamType->ERROR;

			each(i : offset) {
				ParseElement();
				if(@error_message <> Nil) {
					return false;
				};			
			};

			return true;
		}

		method : native : ParseElement() ~ Nil {
			Whitespace();

			if(@stream_position >= @stream->Size()) {
				@current_type := JsonStreamParser->JsonStreamType->END;
				return;
			};

			#
			# array and object endings
			#
			if(GetChar() = ']' | GetChar() = '}') {
				last := @stream_stack[--@stream_stack_position];
				@current_type := last->GetType();
				@current_value := last->GetValue();
			}
			#
			# additional array and object elements
			#
			else if(GetChar() = ',' & 
					(@stream_stack_position > 0 & @stream_stack[@stream_stack_position]->GetType() = JsonStreamParser->JsonStreamType->ARRAY |
					@stream_stack_position > 0 & @stream_stack[@stream_stack_position]->GetType() = JsonStreamParser->JsonStreamType->OBJECT)) {
				NextChar();
				Whitespace();
			}			
			#
			# number
			#
			else if(GetChar()->IsDigit()) {
				start := @stream_position;

				char := GetChar();
				while(char->IsDigit() | char = '.' | char = 'E' | char = 'e' | char = '+' | char = '-') {
					NextChar();
					char := GetChar();
				};
				value := String->New(@stream, start, @stream_position - start);
				
				if(@is_debug) {
					stream_level := @stream_stack_position;
					Print("Number: level={$stream_level}: value={$value}");
				};

				@current_value := value;
				@current_type := JsonStreamParser->JsonStreamType->NUMBER;
			}
			#
			# string or attribute
			#
			else if(GetChar() = '"') {
				NextChar();

				start := @stream_position;
				cur_char := GetChar();
				prev_char := '\0';
				while(cur_char <> '"' | (cur_char = '"' & prev_char = '\\')) {
					prev_char := cur_char;
					NextChar();
					cur_char := GetChar();
				};
				value := String->New(@stream, start, @stream_position - start);
				
				NextChar();	Whitespace();
				if(GetChar() = ':' & @stream_stack_position > 0 & @stream_stack[@stream_stack_position - 1]->GetType() = JsonStreamParser->JsonStreamType->OBJECT) {
					NextChar();	Whitespace();

					if(@is_debug) {
						stream_level := @stream_stack_position;
						Print("---");
						Print("Attribute: level={$stream_level}: value='{$value}'");
					};

					@current_value := value;
					@current_type := JsonStreamParser->JsonStreamType->OBJECT_LIT;
				}
				else {
					if(@is_debug) {
						stream_level := @stream_stack_position;
						Print("String: level={$stream_level}: value='{$value}'");
					};

					@current_value := value;
					@current_type := JsonStreamParser->JsonStreamType->STRING;
				};
			}
			#
			# array start
			#
			else if(GetChar() = '[') {
				if(@is_debug) {
					stream_level := @stream_stack_position;
					Print("Array: level={$stream_level}");
				};

				@current_type := JsonStreamParser->JsonStreamType->ARRAY;
				@stream_stack[@stream_stack_position++]->Set(JsonStreamParser->JsonStreamType->ARRAY, @stream_stack_position);
				NextChar();
			}
			#
			# object start
			#
			else if(GetChar() = '{') {
				if(@is_debug) {
					stream_level := @stream_stack_position;
					Print("Object: level={$stream_level}");
				};

				@current_type := JsonStreamParser->JsonStreamType->OBJECT;
				@stream_stack[@stream_stack_position++]->Set(JsonStreamParser->JsonStreamType->OBJECT, @stream_stack_position);
				NextChar();
			}
			#
			# 'null' literal
			#
			else if(GetChar() = 'n') {
				NextChar();
				
				if(GetChar() <> 'u') {
					@error_message := MakeErrorMessage();
					return;
				};
				NextChar();

				if(GetChar() <> 'l') {
					@error_message := MakeErrorMessage();
					return;
				};
				NextChar();

				if(GetChar() <> 'l') {
					@error_message := MakeErrorMessage();
					return;
				};
				NextChar();

				@current_value := "null";
				@current_type := JsonStreamParser->JsonStreamType->NULL;
			}
			#
			# 'true' literal
			#
			else if(GetChar() = 't') {
				NextChar();
				
				if(GetChar() <> 'r') {
					@error_message := MakeErrorMessage();
					return;
				};
				NextChar();

				if(GetChar() <> 'u') {
					@error_message := MakeErrorMessage();
					return;
				};
				NextChar();

				if(GetChar() <> 'e') {
					@error_message := MakeErrorMessage();
					return;
				};
				NextChar();

				@current_value := "true";
				@current_type := JsonStreamParser->JsonStreamType->TRUE;
			}
			#
			# 'false' literal
			#
			else if(GetChar() = 'f') {
				NextChar();
				
				if(GetChar() <> 'a') {
					@error_message := MakeErrorMessage();
					return;
				};
				NextChar();

				if(GetChar() <> 'l') {
					@error_message := MakeErrorMessage();
					return;
				};
				NextChar();

				if(GetChar() <> 's') {
					@error_message := MakeErrorMessage();
					return;
				};
				NextChar();

				if(GetChar() <> 'e') {
					@error_message := MakeErrorMessage();
					return;
				};
				NextChar();

				@current_value := "false";
				@current_type := JsonStreamParser->JsonStreamType->FALSE;
			}
			#
			# error
			#
			else {
				@error_message := MakeErrorMessage();
				return;
			};			
		}

		method : MakeErrorMessage() ~ String {
			buffer := "*** Error: '";
			buffer->Append(GetChar());
			buffer->Append("' (");
			buffer->Append(GetChar()->ToInt());
			buffer->Append(")");

			return buffer;
		}

		method : MatchChar(char : Char) ~ Bool {
			return GetChar() = char;
		}

		method : native : GetChar() ~ Char {
			if(@stream_position < @stream->Size()) {
				return @stream[@stream_position];
			};

			return '\0';
		}

		method : NextChar() ~ Nil {
			@stream_position += 1;
		}
		
		method : native : Whitespace() ~ Nil {
			char := GetChar();
			while(char = ' ' | char = '\t' | char = '\r' | char = '\n' | char = 0xa0 | char = 0x1680 | 
					char >= 0x2000 & char <= 0x200a | char >= 0x000a & char <= 0x000d | char = 0x202f | 
					char = 0x205f | char = 0x3000 | char = 0x0085 | char = 0x2029) {
				NextChar();
				char := GetChar();
			}
		}

		method : Print(message : String) ~ Nil {
			level := @stream_stack_position;
			while(level-- > 0) {
				"..|"->Print();
			};
			message->PrintLine();
		}
	}

	class : private : ParseScope {
		@level : Int;
		@current_type : JsonStreamParser->JsonStreamType;
		@current_value : String;

		New() {}

		method : public : Set(type : JsonStreamParser->JsonStreamType, level : Int) ~ Nil {
			@level := level;
			@current_type := type;
			@current_value := Nil;
		}

		method : public : Set(type : JsonStreamParser->JsonStreamType, value : String, level : Int) ~ Nil {
			@level := level;
			@current_type := type;
			@current_value := value;
		}

		method : public : GetLevel() ~ Int {
			return @level;
		}

		method : public : GetType() ~ JsonStreamParser->JsonStreamType {
			return @current_type;
		}

		method : public : GetValue() ~ String {
			return @current_value;
		}

		method : public : ToString() ~ String {
			type_str : String;
			if(@current_type = JsonStreamParser->JsonStreamType->OBJECT) {
				type_str := "Object";
			}
			else {
				type_str := "Array";

			};

			value_str : String;
			if(@current_value = Nil) {
				value_str := "<Nil>";
			}
			else if(@current_value->TypeOf(Stringify)) {
				value_str := @current_value->As(System.Stringify)->ToString();
			}
			# use instance ID instead
			else {
				value_str := @current_value->GetInstanceID()->ToHexString();
			};

			return "type={$type_str}, value={$value_str}, level={$@level}";
		}
	}
}
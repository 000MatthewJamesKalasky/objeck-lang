use Web.HTTP, Collection, System.IO.Filesystem, Data.JSON, Web.HTTP.Server;

bundle API.OpenAI {
	# TODO: Okay
	class File {
		@token : String;

		@id : String;
		@object : String;
		@bytes : Int;
		@created_at : Int;
		@filename : String;
		@purpose : String;
		
		New(file_json : JsonElement, token : String) {
			@token := token;

			@id := file_json->Get("id")->GetString();
			@object := file_json->Get("object")->GetString();
			@bytes := file_json->Get("bytes")->GetInt();
			@created_at := file_json->Get("created_at")->GetInt();
			@filename := file_json->Get("filename")->GetString();
			@purpose := file_json->Get("purpose")->GetString();
		}

		function : Create(name : String, content : Byte[], token : String) ~ Bool {
			purpose_headers := Map->New()<String, String>;
			purpose_headers->Insert("Content-Disposition", "form-data; name=\"purpose\"");
			purpose_content := MultipartContent->New(purpose_headers, "assistants"->ToByteArray());

			content_headers := Map->New()<String, String>;
			content_headers->Insert("Content-Disposition", "form-data; name=\"file\"; filename=\"{$name}\"");
			content_headers->Insert("Content-Type", "application/octet-stream");
			multi_content := MultipartContent->New(content_headers, content);

			encoder := MultipartEncoder->New();
			encoder->Add(purpose_content);
			encoder->Add(multi_content);
			boundry := encoder->GetBoundary();
			data := encoder->ToByteArray();

			headers := Map->New()<String, String>;
			headers->Insert("Authorization", "Bearer sk-{$token}");
			headers->Insert("Content-Type", "multipart/form-data; boundary={$boundry}");
			response := HttpsClient->QuickPost(Url->New("https://api.openai.com/v1/files"), data, "multipart/form-data", headers);			
			return response->GetCode() = 200;
		}

		function : Load(id : String, token : String) ~ API.OpenAI.File {
			file : API.OpenAI.File;

			headers := Map->New()<String, String>;
			headers->Insert("Authorization", "Bearer sk-{$token}");
			response := HttpsClient->QuickGet(Url->New("https://api.openai.com/v1/files/{$id}"), "application/json", headers);
			
			if(response <> Nil) {
				file_json := JsonParser->TextToElement(response->GetContent()->ToString());
				if(file_json = Nil) {
					return Nil;
				};

				if(file_json->Has("error")) {
					error_str := file_json->FindElements("error/message")->GetString();
					"### Error: {$error_str} ###"->ErrorLine();
					return Nil;
				}

				file := API.OpenAI.File->New(file_json, token);
			};

			return file;
		}

		function : Delete(id : String, token : String) ~ Bool {
			file : API.OpenAI.File;

			headers := Map->New()<String, String>;
			headers->Insert("Authorization", "Bearer sk-{$token}");
			response := HttpsClient->QuickDelete(Url->New("https://api.openai.com/v1/files/{$id}"), "application/json", headers);
			
			if(response <> Nil) {
				file_json := JsonParser->TextToElement(response->GetContent()->ToString());
				if(file_json = Nil) {
					return false;
				};

				if(file_json->Has("error")) {
					error_str := file_json->FindElements("error/message")->GetString();
					"### Error: {$error_str} ###"->ErrorLine();
					return false;
				}

				return file_json->Get("deleted")->GetString()->Equals("true");
			};

			return false;
		}
		
		function : LoadOrCreate(filename : String, token : String) ~ API.OpenAI.File {
			file := LoadByName(filename, token);
			
			if(file = Nil) {
				# "Uploading file: '{$filename}'"->PrintLine();
				content := FileReader->ReadBinaryFile(filename);
				if(content = Nil | content->Size() = 0) {
					"### Error: Unable to find file: '{$filename}' ###"->PrintLine();
					Runtime->Exit(1);
				};

				File->Create(filename, content, token);
				file := LoadByName(filename, token);
			};

			return file;
		}

		function : LoadByName(filename : String, token : String) ~ API.OpenAI.File {
			found : API.OpenAI.File;
			
			files := File->ListFiles(token);
			each(file in files) {
				if(file->GetFilename()->Equals(filename)) {
					found := file;
					break;
				};
			};

			return found;
		}

		function : ListFiles(token : String) ~ Vector<API.OpenAI.File> {
			files := Vector->New()<API.OpenAI.File>

			headers := Map->New()<String, String>;
			headers->Insert("Authorization", "Bearer sk-{$token}");
			response := HttpsClient->QuickGet(Url->New("https://api.openai.com/v1/files"), "application/json", headers);
			if(response <> Nil) {
				root_json := JsonParser->TextToElement(response->GetContent()->ToString());

				if(root_json = Nil) {
					return Nil;
				};

				if(root_json->Has("error")) {
					error_str := root_json->FindElements("error/message")->GetString();
					"### Error: {$error_str} ###"->ErrorLine();
					return Nil;
				};

				files_json := root_json->Get("data");
				each(file_json in files_json) {
					files->AddBack(API.OpenAI.File->New(file_json, token));
				};
			};

			return files;
		}

		method : public : Retrieve() ~ Byte[] {
			headers := Map->New()<String, String>;
			headers->Insert("Authorization", "Bearer sk-{$@token}");
			return HttpsClient->QuickGet(Url->New("https://api.openai.com/v1/files/{$@id}/content"), "application/json", headers)->GetContent();
		}

		method : public : GetId() ~ String {
			return @id;
		}

		method : public : GetObject() ~ String {
			return @object;
		}

		method : public : GetBytes() ~ Int {
			return @bytes;
		}

		method : public : GetCreatedAt() ~ Int {
			return @created_at;
		}

		method : public : GetFilename() ~ String {
			return @filename;
		}

		method : public : GetPurpose() ~ String {
			return @purpose;
		}

		method : public : ToString() ~ String {
			return "[id='{$@id}', object='{$@object}', bytes={$@bytes}, created_at={$@created_at}, filename='{$@filename}', purpose='{$@purpose}']"; 
		}
	}

	# TODO: Okay
	class Assistant {
		@token : String;

		@id : String;
		@object : String;
		@model : String;
		@name : String;
		@description : String;
		@instructions : String;
		@created_at : Int;

		@tools : Vector<String>;
		@files : Vector<API.OpenAI.File>;

		New : private(assistant_json : JsonElement, token : String) {
			@token := token;

			@id := assistant_json->Get("id")->GetString();
			@created_at := assistant_json->Get("created_at")->GetInt();
			@object := assistant_json->Get("object")->GetString();
			@name := assistant_json->Get("name")->GetString();
			@description := assistant_json->Get("description")->GetString();
			@model := assistant_json->Get("model")->GetString();
			@instructions := assistant_json->Get("instructions")->GetString();

			@tools := Vector->New()<String>;
			tools := assistant_json->Get("tools");
			each(tool in tools) {
				tool_desc := tool->Get("type")->GetString();
				@tools->AddBack(tool_desc);
			};

			@files := Vector->New()<API.OpenAI.File>;
			file_ids := assistant_json->Get("file_ids");
			each(file_id in file_ids) {
				file := API.OpenAI.File->Load(file_id->GetString(), token);
				if(file <> Nil) {
					@files->AddBack(file);
				};
			};
		}

		method : public : GetId() ~ String {
			return @id;
		}	

		function : ListAssistants(token : String) ~ Vector<API.OpenAI.Assistant> {
			assistants := Vector->New()<API.OpenAI.Assistant>

			headers := Map->New()<String, String>;
			headers->Insert("Authorization", "Bearer sk-{$token}");
			headers->Insert("OpenAI-Beta", "assistants=v1");
			response := HttpsClient->QuickGet(Url->New("https://api.openai.com/v1/assistants"), "application/json", headers);
			if(response <> Nil) {
				# response->GetContent()->ToString()->PrintLine();				
				assistants_json := JsonParser->TextToElement(response->GetContent()->ToString());
				if(assistants_json = Nil) {
					"### Error: Unable to parse assistant response ###"->ErrorLine();
					return Nil;
				};
				
				if(assistants_json->Has("error")) {
					error_str := assistants_json->FindElements("error/message")->GetString();
					"### Error: {$error_str} ###"->ErrorLine();
					return Nil;
				};

				assistants_json := assistants_json->Get("data");
				each(assistant_json in assistants_json) {
					assistants->AddBack(API.OpenAI.Assistant->New(assistant_json, token));
				};
			};

			return assistants;
		}

		function : Create(model : String, token : String) ~ API.OpenAI.Assistant {
			return Create(model, Nil, Nil, Nil, Nil, Nil, token);
		}

		function : Create(model : String, name : String, description : String, instructions : String, token : String) ~ API.OpenAI.Assistant {
			return Create(model, name, description, instructions, Nil, Nil, token);
		}

		function : Create(model : String, name : String, description : String, instructions : String, 
				tools : Vector<String>, files : Vector<API.OpenAI.File>, token : String) ~ API.OpenAI.Assistant {
			if(model = Nil) {
				return Nil;
			};

			@token : String;

			builder := JsonBuilder->New();
			create_json := builder->PushObject();
			create_json->Insert("model", model);

			if(name <> Nil) {
				create_json->Insert("name", name);
			};

			if(description <> Nil) {
				create_json->Insert("description", description);
			};

			if(instructions <> Nil) {
				create_json->Insert("instructions", instructions);
			};

			# tools
			if(<>tools->IsEmpty()) {
				tools_json := JsonElement->New(JsonElement->JsonType->ARRAY);
				each(tool in tools) {
					tool_json := JsonElement->New(JsonElement->JsonType->OBJECT);
					tool_json->Insert("type", tool);
					tools_json->Add(tool_json);
				};
				create_json->Insert("tools", tools_json);
			};

			# files
			if(<>files->IsEmpty()) {
				files_json := JsonElement->New(JsonElement->JsonType->ARRAY);
				each(file in files) {
					files_json->Add(file->GetId());
				};
				create_json->Insert("file_ids", files_json);
			};
			
			data := builder->PopAll()->ToString()->ToByteArray();
			# data->ToString()->PrintLine();			

			headers := Map->New()<String, String>;
			headers->Insert("Authorization", "Bearer sk-{$token}");
			headers->Insert("OpenAI-Beta", "assistants=v1");
			response := HttpsClient->QuickPost(Url->New("https://api.openai.com/v1/assistants"), data, "application/json", headers);
			if(response <> Nil) {
				assistant_json := JsonParser->TextToElement(response->GetContent()->ToString());
				if(assistant_json = Nil) {
					return Nil;
				};
				
				if(assistant_json->Has("error")) {
					error_str := assistant_json->FindElements("error/message")->GetString();
					"### Error: {$error_str} ###"->ErrorLine();
					return Nil;
				}

				return API.OpenAI.Assistant->New(assistant_json, token);
			};

			return Nil;
		}

		function : Load(id : String, token : String) ~ API.OpenAI.Assistant {
			assistant : API.OpenAI.Assistant;

			headers := Map->New()<String, String>;
			headers->Insert("Authorization", "Bearer sk-{$token}");
			headers->Insert("OpenAI-Beta", "assistants=v1");
			response := HttpsClient->QuickGet(Url->New("https://api.openai.com/v1/assistants/{$id}"), "application/json", headers);
			if(response <> Nil) {
				# response->GetContent()->ToString()->PrintLine();				
				assistant_json := JsonParser->TextToElement(response->GetContent()->ToString());
				if(assistant_json = Nil) {
					"### Error: Unable to parse assistant response ###"->ErrorLine();
					return Nil;
				};
				
				if(assistant_json->Has("error")) {
					error_str := assistant_json->FindElements("error/message")->GetString();
					"### Error: {$error_str} ###"->ErrorLine();
					return Nil;
				};

				assistant := API.OpenAI.Assistant->New(assistant_json, token);
			};

			return assistant;
		}

		function : Delete(id : String, token : String) ~ Bool {
			file : API.OpenAI.File;

			headers := Map->New()<String, String>;
			headers->Insert("Authorization", "Bearer sk-{$token}");
			headers->Insert("OpenAI-Beta", "assistants=v1");
			response := HttpsClient->QuickDelete(Url->New("https://api.openai.com/v1/assistants/{$id}"), "application/json", headers);
			
			if(response <> Nil) {
				file_json := JsonParser->TextToElement(response->GetContent()->ToString());
				if(file_json = Nil) {
					return false;
				};

				if(file_json->Has("error")) {
					error_str := file_json->FindElements("error/message")->GetString();
					"### Error: {$error_str} ###"->ErrorLine();
					return false;
				}

				return file_json->Get("deleted")->GetString()->Equals("true");
			};

			return false;
		}

		method : public : AddFile(file : API.OpenAI.File) ~ Bool {
			file_json := JsonElement->New(JsonElement->JsonType->OBJECT);
			file_json->Insert("file_id", file->GetId());
			data := file_json->ToString()->ToByteArray();

			headers := Map->New()<String, String>;
			headers->Insert("Authorization", "Bearer sk-{$@token}");
			headers->Insert("OpenAI-Beta", "assistants=v1");
			response := HttpsClient->QuickPost(Url->New("https://api.openai.com/v1/assistants/{$@id}/files"), data, "application/json", headers);
			if(response <> Nil) {
				# response->GetContent()->ToString()->PrintLine();				
				file_json := JsonParser->TextToElement(response->GetContent()->ToString());
				if(file_json = Nil) {
					"### Error: Unable to parse assistant response ###"->ErrorLine();
					return false;
				};
				
				if(file_json->Has("error")) {
					error_str := file_json->FindElements("error/message")->GetString();
					"### Error: {$error_str} ###"->ErrorLine();
					return false;
				};

				return file->GetId()->Equals(file_json->Get("id")->GetString());
			}

			return false;
		}

		# TODO:
		method : public : AddTool(tools : Vector<String>) ~ Nil {
		}

		method : public : ToString() ~ String {			
			buffer := "[id='";
			buffer += @id;

			buffer += "', object='"
			buffer += @object;

			buffer += "', model='"
			buffer += @model;

			buffer += "', name='"
			buffer += @name;

			buffer += "', description='"
			buffer += @description;

			buffer += "', instructions='"
			buffer += @instructions;

			buffer += "', created_at='"
			buffer += @created_at;

			buffer += "'\ntools: ["
			for(i := 0; i < @tools->Size(); i +=1 ;) {
				buffer += i;
				buffer += ": ";
				buffer += @tools->Get(i);
				buffer += '\'';
				
				if(i + 1 < @tools->Size()) {
					buffer += ',';
				};
			};

			buffer += "]\nfiles: [";
			for(i := 0; i < @files->Size(); i +=1 ;) {
				buffer += i;
				buffer += ": ";
				buffer += @files->Get(i)->ToString();
								
				if(i + 1 < @files->Size()) {
					buffer += "\n\t";
				};
			};
			buffer += ']';

			return buffer;
		}
	}

	# TODO: Implement
	class Thread {
		@id : String;
		@object : String;
		@created_at : Int;

		New : private(thread_json : JsonElement) {
			@id := thread_json->Get("id")->GetString();
			@created_at := thread_json->Get("created_at")->GetInt();
			@object := thread_json->Get("object")->GetString();
		}

		function : Create(token : String) ~ API.OpenAI.Thread {
			thread : API.OpenAI.Thread;

			headers := Map->New()<String, String>;
			headers->Insert("Authorization", "Bearer sk-{$token}");
			headers->Insert("OpenAI-Beta", "assistants=v1");
			response := HttpsClient->QuickPost(Url->New("https://api.openai.com/v1/threads"), ""->ToByteArray(), "application/json", headers);
			if(response <> Nil) {
				# response->GetContent()->ToString()->PrintLine();				
				thread_json := JsonParser->TextToElement(response->GetContent()->ToString());
				if(thread_json = Nil) {
					"### Error: Unable to parse thread response ###"->ErrorLine();
					return Nil;
				};
				
				if(thread_json->Has("error")) {
					error_str := thread_json->FindElements("error/message")->GetString();
					"### Error: {$error_str} ###"->ErrorLine();
					return Nil;
				};

				return API.OpenAI.Thread->New(thread_json);
			};
			
			return Nil;	
		}

		function : Load(id : String, token : String) ~ API.OpenAI.Thread {
			headers := Map->New()<String, String>;
			headers->Insert("Authorization", "Bearer sk-{$token}");
			headers->Insert("OpenAI-Beta", "assistants=v1");
			response := HttpsClient->QuickGet(Url->New("https://api.openai.com/v1/threads/{$id}"), "application/json", headers);
			if(response <> Nil) {
				# response->GetContent()->ToString()->PrintLine();				
				thread_json := JsonParser->TextToElement(response->GetContent()->ToString());
				if(thread_json = Nil) {
					"### Error: Unable to parse thread response ###"->ErrorLine();
					return Nil;
				};
				
				if(thread_json->Has("error")) {
					error_str := thread_json->FindElements("error/message")->GetString();
					"### Error: {$error_str} ###"->ErrorLine();
					return Nil;
				};

				return API.OpenAI.Thread->New(thread_json);

			};

			return Nil;
		}

		function : Delete(id : String, token : String) ~ Bool {
			file : API.OpenAI.File;

			headers := Map->New()<String, String>;
			headers->Insert("Authorization", "Bearer sk-{$token}");
			headers->Insert("OpenAI-Beta", "assistants=v1");
			response := HttpsClient->QuickDelete(Url->New("https://api.openai.com/v1/threads/{$id}"), "application/json", headers);
			
			if(response <> Nil) {
				file_json := JsonParser->TextToElement(response->GetContent()->ToString());
				if(file_json = Nil) {
					return false;
				};

				if(file_json->Has("error")) {
					error_str := file_json->FindElements("error/message")->GetString();
					"### Error: {$error_str} ###"->ErrorLine();
					return false;
				}

				return file_json->Get("deleted")->GetString()->Equals("true");
			};

			return false;
		}
	
		method : public : GetId() ~ String {
			return @id;
		}		

		method : public : ToString() ~ String {
			buffer := "[id='";
			buffer += @id;

			buffer += "', object='"
			buffer += @object;

			buffer += "', created_at='"
			buffer += @created_at;

			buffer += "']";

			return buffer;
		}
	}

	# TODO: Implement
	class Message {
		@id : String;
		@object : String;
		@created_at : Int;
		@thread_id : String;
		@role : String;
		@contents : Vector<Pair<String, String>>;

		New(message_json : JsonElement) {
			@id := message_json->Get("id")->GetString();
			@created_at := message_json->Get("created_at")->GetInt();
			@object := message_json->Get("object")->GetString();
			@thread_id := message_json->Get("thread_id")->GetString();
			@role := message_json->Get("role")->GetString();

			@contents := Vector->New()<Pair<String, String>>;	
			contents_json := message_json->Get("content");
			each(content_json in contents_json) {
				type := content_json->Get("type")->GetString();
				value := content_json->Get("text")->Get("value")->GetString();
				@contents->AddBack(Pair->New(type, value)<String, String>);
				# "content[/text/annotations[]]" : Array
			};
		}

		# TODO: support adding files
		function : Create(role : String, content : String, thread : API.OpenAI.Thread, token : String) ~ API.OpenAI.Message {
			message_json := JsonElement->New(JsonElement->JsonType->OBJECT);
			message_json->Insert("role", role);
			message_json->Insert("content", content);
			data := message_json->ToString()->ToByteArray();
			
			thread_id := thread->GetId();
			headers := Map->New()<String, String>;
			headers->Insert("Authorization", "Bearer sk-{$token}");
			headers->Insert("OpenAI-Beta", "assistants=v1");
			response := HttpsClient->QuickPost(Url->New("https://api.openai.com/v1/threads/{$thread_id}/messages"), data, "application/json", headers);
			if(response <> Nil) {
				# response->GetContent()->ToString()->PrintLine();				
				message_json := JsonParser->TextToElement(response->GetContent()->ToString());
				if(message_json = Nil) {
					"### Error: Unable to parse thread response ###"->ErrorLine();
					return Nil;
				};
				
				if(message_json->Has("error")) {
					error_str := message_json->FindElements("error/message")->GetString();
					"### Error: {$error_str} ###"->ErrorLine();
					return Nil;
				};

				return API.OpenAI.Message->New(message_json);
			};
			
			return Nil;	
		}

		function : Load(id : String, thread : API.OpenAI.Thread, token : String) ~ API.OpenAI.Message {
			thread_id := thread->GetId();
			headers := Map->New()<String, String>;
			headers->Insert("Authorization", "Bearer sk-{$token}");
			headers->Insert("OpenAI-Beta", "assistants=v1");
			response := HttpsClient->QuickGet(Url->New("https://api.openai.com/v1/threads/{$thread_id}/messages/{$id}"), "application/json", headers);
			if(response <> Nil) {
				# response->GetContent()->ToString()->PrintLine();				
				root_json := JsonParser->TextToElement(response->GetContent()->ToString());

				if(root_json = Nil) {
					return Nil;
				};

				if(root_json->Has("error")) {
					error_str := root_json->FindElements("error/message")->GetString();
					"### Error: {$error_str} ###"->ErrorLine();
					return Nil;
				};

				root_json := JsonParser->TextToElement(response->GetContent()->ToString());

				if(root_json = Nil) {
					return Nil;
				};

				if(root_json->Has("error")) {
					error_str := root_json->FindElements("error/message")->GetString();
					"### Error: {$error_str} ###"->ErrorLine();
					return Nil;
				};

				return API.OpenAI.Message->New(root_json);
			}

			return Nil;
		}

		function : ListMessages(thread : API.OpenAI.Thread, token : String) ~ Vector<API.OpenAI.Message> {
			messages := Vector->New()<API.OpenAI.Message>

			thread_id := thread->GetId();
			headers := Map->New()<String, String>;
			headers->Insert("Authorization", "Bearer sk-{$token}");
			headers->Insert("OpenAI-Beta", "assistants=v1");
			response := HttpsClient->QuickGet(Url->New("https://api.openai.com/v1/threads/{$thread_id}/messages"), "application/json", headers);
			if(response <> Nil) {
				# response->GetContent()->ToString()->PrintLine();				
				root_json := JsonParser->TextToElement(response->GetContent()->ToString());

				if(root_json = Nil) {
					return Nil;
				};

				if(root_json->Has("error")) {
					error_str := root_json->FindElements("error/message")->GetString();
					"### Error: {$error_str} ###"->ErrorLine();
					return Nil;
				};

				messages_json := root_json->Get("data");
				each(message_json in messages_json) {
					messages->AddBack(API.OpenAI.Message->New(message_json));
				};
			};

			return messages;
		}

		# TODO: not supported
		function : Delete(id : String, token : String) ~ Bool {
			return false;
		}

		method : public : ToString() ~ String {
			buffer := "[id='";
			buffer += @id;

			buffer += "', object='"
			buffer += @object;

			buffer += "', created_at='"
			buffer += @created_at;

			buffer += "', created_at='"
			buffer += @created_at;

			buffer += "', role='"
			buffer += @role;

			buffer += "''\ncontents: [";
			for(i := 0; i < @contents->Size(); i +=1 ;) {
				buffer += '{';
				buffer += i;
				buffer += ": type=";

				content := @contents->Get(i);
				buffer += content->GetFirst();
				buffer += ", text=\"";
				buffer += content->GetSecond();
				buffer += "\"}";
												
				if(i + 1 < @contents->Size()) {
					buffer += "\n\t";
				};
			};
			buffer += ']';

			return buffer;
		}
	}

	# TODO: Implement
	class Run {
		@id : String;
		@object : String;
		@created_at : Int;
		@thread_id : String;
		@assistant_id : String;
		@status : String;

		New(run_json : JsonElement) {
			Set(run_json);
		}

		method : public : GetId() ~ String {
			return @id;
		}

		method : public : GetStatus() ~ String {
			return @status;
		}
		
		method: Set(run_json : JsonElement) ~ Nil {
			@id := run_json->Get("id")->GetString();
			@created_at := run_json->Get("created_at")->GetInt();
			@object := run_json->Get("object")->GetString();
			@thread_id := run_json->Get("thread_id")->GetString();
			@assistant_id := run_json->Get("assistant_id")->GetString();
			@status := run_json->Get("status")->GetString();
		}

		function : Create(assistant : API.OpenAI.Assistant, thread : API.OpenAI.Thread, token : String) ~ API.OpenAI.Run {
			run_json := JsonElement->New(JsonElement->JsonType->OBJECT);
			run_json->Insert("assistant_id", assistant->GetId());
			data := run_json->ToString()->ToByteArray();
			
			thread_id := thread->GetId();
			headers := Map->New()<String, String>;
			headers->Insert("Authorization", "Bearer sk-{$token}");
			headers->Insert("OpenAI-Beta", "assistants=v1");
			response := HttpsClient->QuickPost(Url->New("https://api.openai.com/v1/threads/{$thread_id}/runs"), data, "application/json", headers);
			if(response <> Nil) {
				# response->GetContent()->ToString()->PrintLine();				
				run_json := JsonParser->TextToElement(response->GetContent()->ToString());
				if(run_json = Nil) {
					"### Error: Unable to parse thread response ###"->ErrorLine();
					return Nil;
				};
				
				if(run_json->Has("error")) {
					error_str := run_json->FindElements("error/message")->GetString();
					"### Error: {$error_str} ###"->ErrorLine();
					return Nil;
				};

				return API.OpenAI.Run->New(run_json);
			};
			
			return Nil;	
		}

		method : public : Refresh(token : String) ~ Bool {
			headers := Map->New()<String, String>;
			headers->Insert("Authorization", "Bearer sk-{$token}");
			headers->Insert("OpenAI-Beta", "assistants=v1");
			response := HttpsClient->QuickGet(Url->New("https://api.openai.com/v1/threads/{$@thread_id}/runs/{$@id}"), "application/json", headers);
			if(response <> Nil) {
				# response->GetContent()->ToString()->PrintLine();				
				run_json := JsonParser->TextToElement(response->GetContent()->ToString());

				if(run_json = Nil) {
					return false;
				};

				if(run_json->Has("error")) {
					error_str := run_json->FindElements("error/message")->GetString();
					"### Error: {$error_str} ###"->ErrorLine();
					return false;
				};

				run_json := JsonParser->TextToElement(response->GetContent()->ToString());

				if(run_json = Nil) {
					return false;
				};

				if(run_json->Has("error")) {
					error_str := run_json->FindElements("error/message")->GetString();
					"### Error: {$error_str} ###"->ErrorLine();
					return false;
				};

				Set(run_json);				
				return true;
			}

			return false;
		}

		function : Load(id : String, thread : API.OpenAI.Thread, token : String) ~ API.OpenAI.Run {
			thread_id := thread->GetId();
			headers := Map->New()<String, String>;
			headers->Insert("Authorization", "Bearer sk-{$token}");
			headers->Insert("OpenAI-Beta", "assistants=v1");
			response := HttpsClient->QuickGet(Url->New("https://api.openai.com/v1/threads/{$thread_id}/runs/{$id}"), "application/json", headers);
			if(response <> Nil) {
				# response->GetContent()->ToString()->PrintLine();				
				root_json := JsonParser->TextToElement(response->GetContent()->ToString());

				if(root_json = Nil) {
					return Nil;
				};

				if(root_json->Has("error")) {
					error_str := root_json->FindElements("error/message")->GetString();
					"### Error: {$error_str} ###"->ErrorLine();
					return Nil;
				};

				root_json := JsonParser->TextToElement(response->GetContent()->ToString());

				if(root_json = Nil) {
					return Nil;
				};

				if(root_json->Has("error")) {
					error_str := root_json->FindElements("error/message")->GetString();
					"### Error: {$error_str} ###"->ErrorLine();
					return Nil;
				};

				return API.OpenAI.Run->New(root_json);
			}

			return Nil;
		}

		method : public : ToString() ~ String {
			buffer := "[id='";
			buffer += @id;

			buffer += "', object='"
			buffer += @object;

			buffer += "', created_at='"
			buffer += @created_at;

			buffer += "', created_at='"
			buffer += @created_at;

			buffer += "', assistant_id='"
			buffer += @assistant_id;

			buffer += "', thread_id='"
			buffer += @thread_id;

			buffer += "', status='"
			buffer += @status;

			buffer += "']";

			return buffer;
		}
	}
}
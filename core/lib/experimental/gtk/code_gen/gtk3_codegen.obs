use Collection;
use System.IO.Filesystem;
use Data.XML;

class Gtk3Binder {
	enum ModelType {
		ENUMERATION,
		BITFIELD,
		UNION,
		CLASS
,		RECORD
	}

	@filename : String;
	@enum_names : Set<String>;
	@klass_names : Set<String>;

	@is_debug : Bool;

	function : Main(args : String[]) ~ Nil {
		show_usage := true;

		if(args->Size() = 1) {
			Gtk3Binder->New(args[0])->Emit();
			show_usage := false;
		};

		if(show_usage) {
			"args: filename, [list|emit]"->ErrorLine();
		};
	}

	New(filename : String) {
		@filename := filename;
		@enum_names := Set->New()<String>;
		@klass_names := Set->New()<String>;

		@is_debug := true;
	}

	method : Emit() ~ Nil {
		# read file
		data := FileReader->ReadFile(@filename);
		data_size := data->Size() / 1000;
		data_size_str := data_size->ToCommaString();
		
		"[File: name='{$@filename}', size={$data_size_str} kb]\n---"->PrintLine();

		# parse xml
		timer := System.Time.Timer->New();
		timer->Start();

		parser := XmlParser->New(data);
		if(parser->Parse()) {
			enums_xml := parser->FindElements("/repository/namespace/enumeration")<XmlElement>;
			if(enums_xml <> Nil) {
				LoadEnums(enums_xml, Gtk3Binder->ModelType->ENUMERATION);
			};

			bitfields_xml := parser->FindElements("/repository/namespace/bitfield")<XmlElement>;
			if(bitfields_xml <> Nil) {
				LoadEnums(bitfields_xml, Gtk3Binder->ModelType->BITFIELD);
			};

			unions_xml := parser->FindElements("/repository/namespace/union")<XmlElement>;
			if(unions_xml <> Nil) {
				LoadEnums(unions_xml, Gtk3Binder->ModelType->UNION);
			};

			classes_xml := parser->FindElements("/repository/namespace/class")<XmlElement>;
			if(classes_xml <> Nil) {
				LoadClasses(classes_xml, Gtk3Binder->ModelType->CLASS);
			};

			records_xml := parser->FindElements("/repository/namespace/record")<XmlElement>;
			if(records_xml <> Nil) {
				LoadClasses(records_xml, Gtk3Binder->ModelType->RECORD);
			};
		};


		timer->End();
		String->SetFloatPrecision(3);
		tick_secs := timer->GetElapsedTime();
		"---\nTime={$tick_secs} sec(s)\n---"->PrintLine();
	}

	method : LoadEnums(enums_xml : Vector<XmlElement>, type : Gtk3Binder->ModelType) ~ Bool {
		return false;
	}

	method : LoadClasses(enums_xml : Vector<XmlElement>, type : Gtk3Binder->ModelType) ~ Bool {
		return false;
	}

	function : CamelCaseName(name : String) ~ String {
		if(<>name->IsEmpty()) {
			name->Set(name->Get(0)->ToUpper(), 0);

			do {
				underscore_index := name->Find('_');
				if(underscore_index > -1) {
					name->Delete(underscore_index);
					name->Set(name->Get(underscore_index)->ToUpper(), underscore_index);
				};
			}
			while(underscore_index > -1);
		};

		return name;
	}
}
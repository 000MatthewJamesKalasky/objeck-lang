use Collection;
use System.IO.Filesystem;
use Data.XML;

class Gtk3Binder {
	@filename : String;
	@enum_names : Set<String>;
	@klass_names : Set<String>;

	@is_debug : Bool;

	function : Main(args : String[]) ~ Nil {
		show_usage := true;

		if(args->Size() = 1) {
			Gtk3Binder->New(args[0])->Emit();
			show_usage := false;
		};

		if(show_usage) {
			"args: filename, [list|emit]"->ErrorLine();
		};
	}

	New(filename : String) {
		@filename := filename;
		@enum_names := Set->New()<String>;
		@klass_names := Set->New()<String>;

		@is_debug := true;
	}

	method : Emit() ~ Nil {
		# read file
		data := FileReader->ReadFile(@filename);
		data_size := data->Size() / 1000;
		data_size_str := data_size->ToCommaString();
		
		"[File: name='{$@filename}', size={$data_size_str} kb]\n---"->PrintLine();

		# parse xml
		timer := System.Time.Timer->New();
		timer->Start();

		parser := XmlParser->New(data);
		if(parser->Parse()) {
			enums_xml := parser->FindElements("/repository/namespace/enumeration")<XmlElement>;
			if(enums_xml <> Nil) {
				LoadEnums(enums_xml, GtkModel->Type->ENUM_BITFIELD);
			};

			bitfields_xml := parser->FindElements("/repository/namespace/bitfield")<XmlElement>;
			if(bitfields_xml <> Nil) {
				LoadEnums(bitfields_xml, GtkModel->Type->ENUM_BITFIELD);
			};

			unions_xml := parser->FindElements("/repository/namespace/union")<XmlElement>;
			if(unions_xml <> Nil) {
				LoadEnums(unions_xml, GtkModel->Type->UNION);
			};

			classes_xml := parser->FindElements("/repository/namespace/class")<XmlElement>;
			if(classes_xml <> Nil) {
				LoadClasses(classes_xml, GtkModel->Type->CLASS);
			};

			records_xml := parser->FindElements("/repository/namespace/record")<XmlElement>;
			if(records_xml <> Nil) {
				LoadClasses(records_xml, GtkModel->Type->RECORD);
			};
		};


		timer->End();
		String->SetFloatPrecision(3);
		tick_secs := timer->GetElapsedTime();
		"---\nTime={$tick_secs} sec(s)\n---"->PrintLine();
	}

	method : LoadEnums(enums_xml : Vector<XmlElement>, type : GtkModel->Type) ~ Bool {
		each(enum_xml := enums_xml) {
			type_name := enum_xml->GetName();

			if(type_name->Equals("bitfield") | type_name->Equals("enumeration")) {
				name_xml := enum_xml->GetAttribute("name");
				ctype_xml := enum_xml->GetAttribute("type");
				doc_xml := enum_xml->GetFirstChild("doc");
				
				if(name_xml <> Nil & ctype_xml <> Nil & doc_xml <> Nil) {
					name_value := name_xml->GetValue();
					ctype_value := ctype_xml->GetValue();
					doc_value := doc_xml->GetContent();

					const_type := GtkConst->New(name_value, ctype_value, doc_value);
					const_type->ToString()->PrintLine();
				}

			};
		};

		return false;
	}

	method : LoadClasses(enums_xml : Vector<XmlElement>, type : GtkModel->Type) ~ Bool {
		return false;
	}
}
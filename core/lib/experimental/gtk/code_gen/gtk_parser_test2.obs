use Collection.Generic;
use System.IO.Filesystem;
use Data.XML;

#~
Blah code generators are ugly, rather parsing XML or C source
~#
class GtkTestRunner {
	@debug : Bool;
	@filename : String;
	@basic_type_map : Hash<String, String>;
	@namespace : String;
	@objk_out : FileWriter;
	@cxx_out : FileWriter;

	function : Main(args : String[]) ~ Nil {
		if(args->Size() = 1) {
			GtkTestRunner->New(args[0])->Parse();
		};
	}

	New(filename : String) {
		@filename := filename;

		@basic_type_map := Hash->New()<String, String>;
		@basic_type_map->Insert("gpointer", "Int");
		@basic_type_map->Insert("gboolean", "Bool");
		@basic_type_map->Insert("gshort", "Int");
		@basic_type_map->Insert("gint", "Int");
		@basic_type_map->Insert("gint8", "Int");
		@basic_type_map->Insert("gint16", "Int");
		@basic_type_map->Insert("gint32", "Int");
		@basic_type_map->Insert("guint", "Int");
		@basic_type_map->Insert("guint8", "Int");
		@basic_type_map->Insert("guint16", "Int");
		@basic_type_map->Insert("guint32", "Int");
		@basic_type_map->Insert("glong", "Int");
		@basic_type_map->Insert("gulong", "Int");
		@basic_type_map->Insert("gfloat", "Float");
		@basic_type_map->Insert("gdouble", "Float");
		@basic_type_map->Insert("utf8", "String");
		@basic_type_map->Insert("gchar*", "String");
		@basic_type_map->Insert("filename", "String");
		@basic_type_map->Insert("void", "Nil");
		@basic_type_map->Insert("guint8*", "Byte[]");

		@objk_out := FileWriter->New("objk_code.txt");
		@cxx_out := FileWriter->New("cxx_code.txt");
	}

	method : Parse() ~ Nil {
		# read file
		data := FileReader->ReadFile(@filename);
		data_size := data->Size()->ToCommaString();
		if(#~@debug~#true) {
			"[file: name='{$@filename}', size={$data_size} byte(s)]\n###"->PrintLine();
		};

		# parse xml
		timer := System.Time.Timer->New();

		timer->Start();
		parser := XmlParser->New(data);
		if(parser->Parse()) {
			@namespace := parser->GetRoot()->GetFirstChild("namespace")->GetAttribute("name")->GetValue();

			records_xml := parser->FindElements("/repository/namespace/record")<XmlElement>;
			if(records_xml <> Nil) {
				ParseRecords(records_xml);
			};
		};

		@objk_out->Close();
		@cxx_out->Close();

		timer->End();

		String->SetFloatPrecision(3);
		tick_secs := timer->GetElapsedTime();
		"###\ntime={$tick_secs} sec(s)"->PrintLine();
	}

	method : ParseRecords(records_xml : Vector<XmlElement>) ~ Nil {
		@objk_out->WriteString("bundle GTK3 {\n");
		@objk_out->WriteString("  class : private : Proxy {\n");
		@objk_out->WriteString("    @lib_proxy : static : DllProxy;\n\n");
		@objk_out->WriteString("    function : GetDllProxy() ~ DllProxy {\n");
		@objk_out->WriteString("      if(@lib_proxy = Nil) {\n");
		@objk_out->WriteString("        @lib_proxy := DllProxy->New(\"libobjk_gtk3\");\n");
		@objk_out->WriteString("      };\n\n");
		@objk_out->WriteString("      return @lib_proxy;\n");
		@objk_out->WriteString("    }\n");
		@objk_out->WriteString("  }\n\n");

		each(i : records_xml) {
			cxx_buffer := "";
			objk_buffer := "";

			record_xml := records_xml->Get(i);

			record_name := record_xml->GetAttribute("name")->GetValue();
			if(record_name->Equals("Point") | record_name->Equals("RGBA")  | record_name->Equals("Rectangle")) {
				@debug := true;

				WriteRecord(record_name, record_xml, objk_buffer, cxx_buffer);

				@debug := false;
			};
			
			if(i + 1 = records_xml->Size()) {
				objk_buffer->Pop();
			};
			@objk_out->WriteString(objk_buffer);
		};
		@objk_out->WriteString("}\n");

		"\n==============================================================="->PrintLine();
	}

	method : WriteRecord(record_name : String, record_xml : XmlElement, objk_buffer : String, cxx_buffer : String) ~ String {
		if(@debug) {
			"\n[record: name='{$record_name}']"->PrintLine();
		};

		# start class
		objk_buffer += "  class {$record_name} {\n";

		ref_name := record_name->ToLower();
		objk_buffer += "    @{$ref_name} : Int;\n";

		# parse parameters
		fields_xml := record_xml->GetChildren("field")<XmlElement>;
		getters_setters := ParseParameters(fields_xml, objk_buffer, cxx_buffer);

		# write constructor
		objk_buffer += "    New({$ref_name} : Int) {\n";
		objk_buffer += "      @{$ref_name} := {$ref_name};\n";
		objk_buffer += "    }\n\n";

		# write getters and setters
		WriteGettersSetters(ref_name, getters_setters, objk_buffer, cxx_buffer);

		# add space
		objk_buffer += '\n';

		# write methods
		methods_xml := record_xml->GetChildren("method")<XmlElement>;
		WriteMethods(ref_name, methods_xml, objk_buffer, cxx_buffer);

		# end class
		objk_buffer += "  }\n\n";

		return record_name;
	}

	method : WriteGettersSetters(ref_name : String, getters_setters : Vector<Pair<String, String>>, objk_buffer : String, cxx_buffer : String) ~ Nil {
		# write getters and setters
		each(getter_setter := getters_setters) {
			name := getter_setter->GetFirst();
			method_case_name := CamelCaseName(name->Copy());
			type := getter_setter->GetSecond();

			#
			# getter
			#
			objk_buffer += "    method : public : Get{$method_case_name}() ~ {$type} {\n";
			objk_buffer += "      array_args := Base->New[2];\n\n";
			
			# set params
			if(type->Equals("Byte") | type->Equals("Char") | type->Equals("Int") | type->Equals("Bool")) {
				objk_buffer += "      array_args[0] := IntHolder->New();\n";
			}
			else if(type->Equals("Float")) {
				objk_buffer += "      array_args[0] := FloatHolder->New();\n";
			}
			else {
				objk_buffer += "      array_args[0] := Nil;\n";
			};

			objk_buffer += "      array_args[1] := IntHolder->New(@{$ref_name});\n";

			c_call_name := "{$ref_name}_get_{$method_case_name}"->ToLower();
			objk_buffer += "\n      Proxy->GetDllProxy()->CallFunction(\"{$c_call_name}\", array_args);\n";

			# get return
			if(type->Equals("Byte")) {
				objk_buffer += "\n      value := array_args[0]->As(IntHolder);\n";
				objk_buffer += "      return value->Get()->As(Byte);\n";
			}
			else if(type->Equals("Char")) {
				objk_buffer += "\n      value := array_args[0]->As(IntHolder);\n";
				objk_buffer += "      return value->Get()->As(Char);\n";
			}
			else if(type->Equals("Int")) {
				objk_buffer += "\n      value := array_args[0]->As(IntHolder);\n";
				objk_buffer += "      return value->Get();\n";
			}
			else if(type->Equals("Bool")) {
				objk_buffer += "\n      value := array_args[0]->As(IntHolder);\n";
				objk_buffer += "      return value->Get() = 0 ? false : true;\n";
			}
			else if(type->Equals("Float")) {
				objk_buffer += "\n      value := array_args[0]->As(FloatHolder);\n";
				objk_buffer += "      return value->Get();\n";
			}
			else if(type->Equals("String")) {
				objk_buffer += "\n      return array_args[0]->As(String);\n";
			}
			else {
				objk_buffer += "\n      value := array_args[0]->As(IntHolder);\n";
				objk_buffer += "      return {$type}->New(value);\n";
			};
			objk_buffer += "    }\n\n";

			#
			# setter
			#
			objk_buffer += "    method : public : Set{$method_case_name}({$name} : {$type}) ~ Nil {\n";
			objk_buffer += "      array_args := Base->New[2];\n\n";
			objk_buffer += "      array_args[0] := IntHolder->New(@{$ref_name});\n";

			# set value
			if(type->Equals("Byte") | type->Equals("Char") | type->Equals("Int")) {
				objk_buffer += "      array_args[1] := IntHolder->New({$name});\n";
			}
			else if(type->Equals("Bool")) {
				objk_buffer += "      array_args[1] := IntHolder->New({$name} ? 1 : 0);\n";
			}
			else if(type->Equals("Float")) {
				objk_buffer += "      array_args[1] := FloatHolder->New({$name});\n";
			}
			else {
				objk_buffer += "      array_args[1] := {$name};\n";
			};

			c_call_name := "{$ref_name}_set_{$method_case_name}"->ToLower();
			objk_buffer += "\n      Proxy->GetDllProxy()->CallFunction(\"{$c_call_name}\", array_args);\n";

			objk_buffer += "    }\n\n";
		};

		objk_buffer->Pop();
	}

	method : WriteMethods(ref_name : String, methods_xml : Vector<XmlElement>, objk_buffer : String, cxx_buffer : String) ~ Nil {
		each(method_xml := methods_xml) {
			method_name := method_xml->GetAttribute("name")->GetValue();
			identifier_name := method_xml->GetAttribute("identifier")->GetValue();
			method_case_name := CamelCaseName(method_name->Copy());

			return_type_xml := method_xml->GetFirstChild("return-value")->GetFirstChild("type");
			return_type := GetMappingName(return_type_xml->GetAttribute("type")->GetValue());

			if(@debug) {
				"  ---\n  [method: name='{$method_name}']"->PrintLine();
			};
			objk_buffer += "    method : public : {$method_case_name}";

			# get parameters and returns types
			params_xml := method_xml->GetFirstChild("parameters");
			return_xml := method_xml->GetFirstChild("return-value");
			
			WriteParameters(params_xml, objk_buffer, cxx_buffer);
			objk_buffer += " ~ {$return_type} {\n";

			if(return_type->Equals("Nil")) {
				parameters_size := params_xml->Size();
				objk_buffer += "      array_args := Base->New[{$parameters_size}];\n\n";

				objk_buffer += "      array_args[0] := IntHolder->New(@{$ref_name});\n";
				WriteProxyParameters(params_xml, objk_buffer, cxx_buffer, true);
			}
			else {
				parameters_size := params_xml->Size() + 1;
				objk_buffer += "      array_args := Base->New[{$parameters_size}];\n";
				WriteProxyReturnParameter(return_xml, objk_buffer, cxx_buffer);
				
				objk_buffer += "      array_args[1] := IntHolder->New(@{$ref_name});\n";
				WriteProxyParameters(params_xml, objk_buffer, cxx_buffer, false);
			};

			objk_buffer += "\n      Proxy->GetDllProxy()->CallFunction(\"{$identifier_name}\", array_args);\n";
			WriteProxyReturn(return_xml, objk_buffer, cxx_buffer);
			objk_buffer += "    }\n\n";
		};

		objk_buffer->Pop();
	}

	method : WriteParameters(params_xml : XmlElement, objk_buffer : String, cxx_buffer : String) ~ Nil {
		objk_buffer += '(';

		if(params_xml <> Nil & params_xml->Size() > 0) {
			clean_up : Bool;

			each(param_xml := params_xml) {
				param_name := param_xml->GetName();
				if(param_name->Equals("parameter")) {
					clean_up := true;

					param_name := param_xml->GetAttribute("name")->GetValue();
					type_xml := param_xml->GetFirstChild("type");
					if(type_xml <> Nil) {									
						type_name := GetMappingName(type_xml->GetAttribute("name")->GetValue());
						type_ctype := XmlElement->DecodeString(type_xml->GetAttribute("type")->GetValue());
						if(@debug) {
							"    [param='{$param_name}', type='{$type_name}', ctype='{$type_ctype}']"->PrintLine();
						};

						objk_buffer += "{$param_name} : {$type_name}, ";
					};
				};
			};

			if(clean_up) {
				objk_buffer->Pop();
				objk_buffer->Pop();
			};
		};

		objk_buffer += ')';
	}

	method : WriteProxyReturn(return_xml : XmlElement, objk_buffer : String, cxx_buffer : String) ~ Nil {		
		return_type_xml := return_xml->GetFirstChild("type");
		if(return_type_xml <> Nil) {
			type_xml := return_type_xml->GetAttribute("type");
			if(type_xml <> Nil) {									
				type_name := GetMappingName(type_xml->GetValue());
				
				# TODO: hash sub-strings
				if(type_name->Equals("Int")) {
					objk_buffer += "\n      value := array_args[0]->As(IntHolder);\n";
					objk_buffer += "      return value->Get();\n";
				}
				else if(type_name->Equals("Bool")) {
					objk_buffer += "\n      value := array_args[0]->As(IntHolder);\n";
					objk_buffer += "      return value->Get() = 0 ? false : true;\n";
				}
				else if(type_name->Equals("Float")) {
					objk_buffer += "\n      value := array_args[0]->As(FloatHolder);\n";
					objk_buffer += "      return value->Get();\n";
				}
				else if(type_name->Equals("String")) {
					objk_buffer += "\n      return array_args[0]->As(String);\n";
				}
				else if(<>type_name->Equals("Nil")) {
					objk_buffer += "\n      value := array_args[0]->As(FloatHolder);\n";
					objk_buffer += "      return {$type_name}->New(value);\n";
				};
			};
		};
	}

	method : WriteProxyParameters(params_xml : XmlElement, objk_buffer : String, cxx_buffer : String, is_nil : Bool) ~ Nil {
		if(params_xml <> Nil) {
			each(i : params_xml) {
				index := i;
				if(<>is_nil) {
					index += 1;
				};

				param_xml := params_xml->Get(i);
				param_name := param_xml->GetName();
				if(param_name->Equals("parameter")) {
					param_name := param_xml->GetAttribute("name")->GetValue();
					type_xml := param_xml->GetFirstChild("type");
					if(type_xml <> Nil) {									
						type_name := GetMappingName(type_xml->GetAttribute("name")->GetValue());
						
						# TODO: hash sub-strings
						if(type_name->Equals("Int")) {
							objk_buffer += "      array_args[{$index}] := IntHolder->New({$param_name});\n";
						}
						else if(type_name->Equals("Float")) {
							objk_buffer += "      array_args[{$index}] := FloatHolder->New({$param_name});\n";
						}
						else if(type_name->Equals("Bool")) {
							objk_buffer += "      array_args[{$index}] := IntHolder->New({$param_name} = 0 ? 0 : 1);\n";
						}
						else {
							objk_buffer += "      array_args[{$index}] := {$param_name};\n";
						};
					};
				};
			};
		};
	}

	method : WriteProxyReturnParameter(return_xml : XmlElement, objk_buffer : String, cxx_buffer : String) ~ Nil {		
		return_type_xml := return_xml->GetFirstChild("type");
		if(return_type_xml <> Nil) {
			type_xml := return_type_xml->GetAttribute("type");
			if(type_xml <> Nil) {									
				type_name := GetMappingName(type_xml->GetValue());
				
				# TODO: hash sub-strings
				if(type_name->Equals("Int") | type_name->Equals("Bool")) {
					objk_buffer += "      array_args[0] := IntHolder->New();\n";
				}
				else if(type_name->Equals("Float")) {
					objk_buffer += "      array_args[0] := FloatHolder->New();\n";
				}
				else {
					objk_buffer += "      array_args[0] := Nil;\n";
				};
			};
		};
	}

	method : ParseParameters(fields_xml : Vector<XmlElement>, objk_buffer : String, cxx_buffer : String) ~ Vector<Pair<String, String>> {
		# TODO: check 'writable' flag
		getters_setters := Vector->New()<Pair<String, String>>;

		if(fields_xml->Size() > 0) {
			each(field_xml := fields_xml) {
				type_xml := field_xml->GetFirstChild("type");
				field_name := field_xml->GetAttribute("name")->GetValue();

				if(type_xml <> Nil) {
					type_name := type_xml->GetAttribute("name")->GetValue();
					ctype_type_xml := type_xml->GetAttribute("type");
					if(ctype_type_xml <> Nil) {
						ctype_type := ctype_type_xml->GetValue();
						if(@debug) {
							"  [\"{$field_name}\": type: name='{$type_name}', ctype='{$ctype_type}']"->PrintLine();
						};
						
						mapping_name := GetMappingName(type_name);
						getters_setters->AddBack(Pair->New(field_name, mapping_name)<String, String>);

					}
					else {
						if(@debug) {
							"  [\"{$field_name}\": type: name='{$type_name}']"->PrintLine();
						};
					};
				};
			};
			objk_buffer += "\n";
		};

		return getters_setters;
	}

	method : GetMappingName(ctype_name : String) ~ String {
		mapping_name := @basic_type_map->Find(ctype_name);
		if(mapping_name <> Nil) {
			return mapping_name;
		};

		mapping_name := ctype_name->Copy()->Remove(@namespace);
		if(mapping_name->EndsWith('*')) {
			mapping_name->Pop();
		};

		return mapping_name;
	}

	function : CamelCaseName(name : String) ~ String {
		if(<>name->IsEmpty()) {
			name->Set(name->Get(0)->ToUpper(), 0);

			do {
				underscore_index := name->Find('_');
				if(underscore_index > -1) {
					name->Delete(underscore_index);
					name->Set(name->Get(underscore_index)->ToUpper(), underscore_index);
				};
			}
			while(underscore_index > -1);
		};

		return name;
	}
}
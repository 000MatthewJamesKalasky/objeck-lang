Compiled 1 class.
Linked 29 library classes.
Wrote target file: 'gtk_parser.obe'
---
[file: name='gtk3\Gdk-3.0.gir.xml', size=1,250,048 byte(s)]
###

[record: name='Atom']
  ---
  [method: name='name'

[record: name='Color']
  ["pixel": type: name='guint32', ctype='guint32']
  ["red": type: name='guint16', ctype='guint16']
  ["green": type: name='guint16', ctype='guint16']
  ["blue": type: name='guint16', ctype='guint16']
  ---
  [method: name='copy'
  ---
  [method: name='equal'
    [param='colorb', type='Color', ctype='const GdkColor*']
  ---
  [method: name='free'
  ---
  [method: name='hash'
  ---
  [method: name='to_string'

[record: name='DevicePadInterface']

[record: name='DrawingContextClass']

[record: name='EventAny']
  ["type": type: name='EventType', ctype='GdkEventType']
  ["window": type: name='Window', ctype='GdkWindow*']
  ["send_event": type: name='gint8', ctype='gint8']

[record: name='EventButton']
  ["type": type: name='EventType', ctype='GdkEventType']
  ["window": type: name='Window', ctype='GdkWindow*']
  ["send_event": type: name='gint8', ctype='gint8']
  ["time": type: name='guint32', ctype='guint32']
  ["x": type: name='gdouble', ctype='gdouble']
  ["y": type: name='gdouble', ctype='gdouble']
  ["axes": type: name='gdouble', ctype='gdouble*']
  ["state": type: name='ModifierType']
  ["button": type: name='guint', ctype='guint']
  ["device": type: name='Device', ctype='GdkDevice*']
  ["x_root": type: name='gdouble', ctype='gdouble']
  ["y_root": type: name='gdouble', ctype='gdouble']

[record: name='EventConfigure']
  ["type": type: name='EventType', ctype='GdkEventType']
  ["window": type: name='Window', ctype='GdkWindow*']
  ["send_event": type: name='gint8', ctype='gint8']
  ["x": type: name='gint', ctype='gint']
  ["y": type: name='gint', ctype='gint']
  ["width": type: name='gint', ctype='gint']
  ["height": type: name='gint', ctype='gint']

[record: name='EventCrossing']
  ["type": type: name='EventType', ctype='GdkEventType']
  ["window": type: name='Window', ctype='GdkWindow*']
  ["send_event": type: name='gint8', ctype='gint8']
  ["subwindow": type: name='Window', ctype='GdkWindow*']
  ["time": type: name='guint32', ctype='guint32']
  ["x": type: name='gdouble', ctype='gdouble']
  ["y": type: name='gdouble', ctype='gdouble']
  ["x_root": type: name='gdouble', ctype='gdouble']
  ["y_root": type: name='gdouble', ctype='gdouble']
  ["mode": type: name='CrossingMode', ctype='GdkCrossingMode']
  ["detail": type: name='NotifyType', ctype='GdkNotifyType']
  ["focus": type: name='gboolean', ctype='gboolean']
  ["state": type: name='ModifierType']

[record: name='EventDND']
  ["type": type: name='EventType', ctype='GdkEventType']
  ["window": type: name='Window', ctype='GdkWindow*']
  ["send_event": type: name='gint8', ctype='gint8']
  ["context": type: name='DragContext', ctype='GdkDragContext*']
  ["time": type: name='guint32', ctype='guint32']
  ["x_root": type: name='gshort', ctype='gshort']
  ["y_root": type: name='gshort', ctype='gshort']

[record: name='EventExpose']
  ["type": type: name='EventType', ctype='GdkEventType']
  ["window": type: name='Window', ctype='GdkWindow*']
  ["send_event": type: name='gint8', ctype='gint8']
  ["area": type: name='Rectangle', ctype='GdkRectangle']
  ["region": type: name='cairo.Region', ctype='cairo_region_t*']
  ["count": type: name='gint', ctype='gint']

[record: name='EventFocus']
  ["type": type: name='EventType', ctype='GdkEventType']
  ["window": type: name='Window', ctype='GdkWindow*']
  ["send_event": type: name='gint8', ctype='gint8']
  ["in": type: name='gint16', ctype='gint16']

[record: name='EventGrabBroken']
  ["type": type: name='EventType', ctype='GdkEventType']
  ["window": type: name='Window', ctype='GdkWindow*']
  ["send_event": type: name='gint8', ctype='gint8']
  ["keyboard": type: name='gboolean', ctype='gboolean']
  ["implicit": type: name='gboolean', ctype='gboolean']
  ["grab_window": type: name='Window', ctype='GdkWindow*']

[record: name='EventKey']
  ["type": type: name='EventType', ctype='GdkEventType']
  ["window": type: name='Window', ctype='GdkWindow*']
  ["send_event": type: name='gint8', ctype='gint8']
  ["time": type: name='guint32', ctype='guint32']
  ["state": type: name='ModifierType']
  ["keyval": type: name='guint', ctype='guint']
  ["length": type: name='gint', ctype='gint']
  ["string": type: name='utf8', ctype='gchar*']
  ["hardware_keycode": type: name='guint16', ctype='guint16']
  ["group": type: name='guint8', ctype='guint8']
  ["is_modifier": type: name='guint', ctype='guint']

[record: name='EventMotion']
  ["type": type: name='EventType', ctype='GdkEventType']
  ["window": type: name='Window', ctype='GdkWindow*']
  ["send_event": type: name='gint8', ctype='gint8']
  ["time": type: name='guint32', ctype='guint32']
  ["x": type: name='gdouble', ctype='gdouble']
  ["y": type: name='gdouble', ctype='gdouble']
  ["axes": type: name='gdouble', ctype='gdouble*']
  ["state": type: name='ModifierType']
  ["is_hint": type: name='gint16', ctype='gint16']
  ["device": type: name='Device', ctype='GdkDevice*']
  ["x_root": type: name='gdouble', ctype='gdouble']
  ["y_root": type: name='gdouble', ctype='gdouble']

[record: name='EventOwnerChange']
  ["type": type: name='EventType', ctype='GdkEventType']
  ["window": type: name='Window', ctype='GdkWindow*']
  ["send_event": type: name='gint8', ctype='gint8']
  ["owner": type: name='Window', ctype='GdkWindow*']
  ["reason": type: name='OwnerChange', ctype='GdkOwnerChange']
  ["selection": type: name='Atom', ctype='GdkAtom']
  ["time": type: name='guint32', ctype='guint32']
  ["selection_time": type: name='guint32', ctype='guint32']

[record: name='EventPadAxis']
  ["type": type: name='EventType', ctype='GdkEventType']
  ["window": type: name='Window', ctype='GdkWindow*']
  ["send_event": type: name='gint8', ctype='gint8']
  ["time": type: name='guint32', ctype='guint32']
  ["group": type: name='guint', ctype='guint']
  ["index": type: name='guint', ctype='guint']
  ["mode": type: name='guint', ctype='guint']
  ["value": type: name='gdouble', ctype='gdouble']

[record: name='EventPadButton']
  ["type": type: name='EventType', ctype='GdkEventType']
  ["window": type: name='Window', ctype='GdkWindow*']
  ["send_event": type: name='gint8', ctype='gint8']
  ["time": type: name='guint32', ctype='guint32']
  ["group": type: name='guint', ctype='guint']
  ["button": type: name='guint', ctype='guint']
  ["mode": type: name='guint', ctype='guint']

[record: name='EventPadGroupMode']
  ["type": type: name='EventType', ctype='GdkEventType']
  ["window": type: name='Window', ctype='GdkWindow*']
  ["send_event": type: name='gint8', ctype='gint8']
  ["time": type: name='guint32', ctype='guint32']
  ["group": type: name='guint', ctype='guint']
  ["mode": type: name='guint', ctype='guint']

[record: name='EventProperty']
  ["type": type: name='EventType', ctype='GdkEventType']
  ["window": type: name='Window', ctype='GdkWindow*']
  ["send_event": type: name='gint8', ctype='gint8']
  ["atom": type: name='Atom', ctype='GdkAtom']
  ["time": type: name='guint32', ctype='guint32']
  ["state": type: name='PropertyState']

[record: name='EventProximity']
  ["type": type: name='EventType', ctype='GdkEventType']
  ["window": type: name='Window', ctype='GdkWindow*']
  ["send_event": type: name='gint8', ctype='gint8']
  ["time": type: name='guint32', ctype='guint32']
  ["device": type: name='Device', ctype='GdkDevice*']

[record: name='EventScroll']
  ["type": type: name='EventType', ctype='GdkEventType']
  ["window": type: name='Window', ctype='GdkWindow*']
  ["send_event": type: name='gint8', ctype='gint8']
  ["time": type: name='guint32', ctype='guint32']
  ["x": type: name='gdouble', ctype='gdouble']
  ["y": type: name='gdouble', ctype='gdouble']
  ["state": type: name='ModifierType']
  ["direction": type: name='ScrollDirection', ctype='GdkScrollDirection']
  ["device": type: name='Device', ctype='GdkDevice*']
  ["x_root": type: name='gdouble', ctype='gdouble']
  ["y_root": type: name='gdouble', ctype='gdouble']
  ["delta_x": type: name='gdouble', ctype='gdouble']
  ["delta_y": type: name='gdouble', ctype='gdouble']
  ["is_stop": type: name='guint', ctype='guint']

[record: name='EventSelection']
  ["type": type: name='EventType', ctype='GdkEventType']
  ["window": type: name='Window', ctype='GdkWindow*']
  ["send_event": type: name='gint8', ctype='gint8']
  ["selection": type: name='Atom', ctype='GdkAtom']
  ["target": type: name='Atom', ctype='GdkAtom']
  ["property": type: name='Atom', ctype='GdkAtom']
  ["time": type: name='guint32', ctype='guint32']
  ["requestor": type: name='Window', ctype='GdkWindow*']

[record: name='EventSequence']

[record: name='EventSetting']
  ["type": type: name='EventType', ctype='GdkEventType']
  ["window": type: name='Window', ctype='GdkWindow*']
  ["send_event": type: name='gint8', ctype='gint8']
  ["action": type: name='SettingAction', ctype='GdkSettingAction']
  ["name": type: name='utf8', ctype='char*']

[record: name='EventTouch']
  ["type": type: name='EventType', ctype='GdkEventType']
  ["window": type: name='Window', ctype='GdkWindow*']
  ["send_event": type: name='gint8', ctype='gint8']
  ["time": type: name='guint32', ctype='guint32']
  ["x": type: name='gdouble', ctype='gdouble']
  ["y": type: name='gdouble', ctype='gdouble']
  ["axes": type: name='gdouble', ctype='gdouble*']
  ["state": type: name='ModifierType']
  ["sequence": type: name='EventSequence', ctype='GdkEventSequence*']
  ["emulating_pointer": type: name='gboolean', ctype='gboolean']
  ["device": type: name='Device', ctype='GdkDevice*']
  ["x_root": type: name='gdouble', ctype='gdouble']
  ["y_root": type: name='gdouble', ctype='gdouble']

[record: name='EventTouchpadPinch']
  ["type": type: name='EventType', ctype='GdkEventType']
  ["window": type: name='Window', ctype='GdkWindow*']
  ["send_event": type: name='gint8', ctype='gint8']
  ["phase": type: name='gint8', ctype='gint8']
  ["n_fingers": type: name='gint8', ctype='gint8']
  ["time": type: name='guint32', ctype='guint32']
  ["x": type: name='gdouble', ctype='gdouble']
  ["y": type: name='gdouble', ctype='gdouble']
  ["dx": type: name='gdouble', ctype='gdouble']
  ["dy": type: name='gdouble', ctype='gdouble']
  ["angle_delta": type: name='gdouble', ctype='gdouble']
  ["scale": type: name='gdouble', ctype='gdouble']
  ["x_root": type: name='gdouble', ctype='gdouble']
  ["y_root": type: name='gdouble', ctype='gdouble']
  ["state": type: name='ModifierType']

[record: name='EventTouchpadSwipe']
  ["type": type: name='EventType', ctype='GdkEventType']
  ["window": type: name='Window', ctype='GdkWindow*']
  ["send_event": type: name='gint8', ctype='gint8']
  ["phase": type: name='gint8', ctype='gint8']
  ["n_fingers": type: name='gint8', ctype='gint8']
  ["time": type: name='guint32', ctype='guint32']
  ["x": type: name='gdouble', ctype='gdouble']
  ["y": type: name='gdouble', ctype='gdouble']
  ["dx": type: name='gdouble', ctype='gdouble']
  ["dy": type: name='gdouble', ctype='gdouble']
  ["x_root": type: name='gdouble', ctype='gdouble']
  ["y_root": type: name='gdouble', ctype='gdouble']
  ["state": type: name='ModifierType']

[record: name='EventVisibility']
  ["type": type: name='EventType', ctype='GdkEventType']
  ["window": type: name='Window', ctype='GdkWindow*']
  ["send_event": type: name='gint8', ctype='gint8']
  ["state": type: name='VisibilityState', ctype='GdkVisibilityState']

[record: name='EventWindowState']
  ["type": type: name='EventType', ctype='GdkEventType']
  ["window": type: name='Window', ctype='GdkWindow*']
  ["send_event": type: name='gint8', ctype='gint8']
  ["changed_mask": type: name='WindowState', ctype='GdkWindowState']
  ["new_window_state": type: name='WindowState', ctype='GdkWindowState']

[record: name='FrameClockClass']

[record: name='FrameClockPrivate']

[record: name='FrameTimings']
  ---
  [method: name='get_complete'
  ---
  [method: name='get_frame_counter'
  ---
  [method: name='get_frame_time'
  ---
  [method: name='get_predicted_presentation_time'
  ---
  [method: name='get_presentation_time'
  ---
  [method: name='get_refresh_interval'
  ---
  [method: name='ref'
  ---
  [method: name='unref'

[record: name='Geometry']
  ["min_width": type: name='gint', ctype='gint']
  ["min_height": type: name='gint', ctype='gint']
  ["max_width": type: name='gint', ctype='gint']
  ["max_height": type: name='gint', ctype='gint']
  ["base_width": type: name='gint', ctype='gint']
  ["base_height": type: name='gint', ctype='gint']
  ["width_inc": type: name='gint', ctype='gint']
  ["height_inc": type: name='gint', ctype='gint']
  ["min_aspect": type: name='gdouble', ctype='gdouble']
  ["max_aspect": type: name='gdouble', ctype='gdouble']
  ["win_gravity": type: name='Gravity', ctype='GdkGravity']

[record: name='KeymapKey']
  ["keycode": type: name='guint', ctype='guint']
  ["group": type: name='gint', ctype='gint']
  ["level": type: name='gint', ctype='gint']

[record: name='MonitorClass']

[record: name='Point']
  ["x": type: name='gint', ctype='gint']
  ["y": type: name='gint', ctype='gint']

[record: name='RGBA']
  ["red": type: name='gdouble', ctype='gdouble']
  ["green": type: name='gdouble', ctype='gdouble']
  ["blue": type: name='gdouble', ctype='gdouble']
  ["alpha": type: name='gdouble', ctype='gdouble']
  ---
  [method: name='copy'
  ---
  [method: name='equal'
    [param='p2', type='RGBA', ctype='gconstpointer']
  ---
  [method: name='free'
  ---
  [method: name='hash'
  ---
  [method: name='parse'
    [param='spec', type='String', ctype='const gchar*']
  ---
  [method: name='to_string'

[record: name='Rectangle']
  ["x": type: name='gint', ctype='int']
  ["y": type: name='gint', ctype='int']
  ["width": type: name='gint', ctype='int']
  ["height": type: name='gint', ctype='int']
  ---
  [method: name='equal'
    [param='rect2', type='Rectangle', ctype='const GdkRectangle*']
  ---
  [method: name='intersect'
    [param='src2', type='Rectangle', ctype='const GdkRectangle*']
    [param='dest', type='Rectangle', ctype='GdkRectangle*']
  ---
  [method: name='union'
    [param='src2', type='Rectangle', ctype='const GdkRectangle*']
    [param='dest', type='Rectangle', ctype='GdkRectangle*']

[record: name='TimeCoord']
  ["time": type: name='guint32', ctype='guint32']

[record: name='WindowAttr']
  ["title": type: name='utf8', ctype='gchar*']
  ["event_mask": type: name='gint', ctype='gint']
  ["x": type: name='gint', ctype='gint']
  ["y": type: name='gint', ctype='gint']
  ["width": type: name='gint', ctype='gint']
  ["height": type: name='gint', ctype='gint']
  ["wclass": type: name='WindowWindowClass', ctype='GdkWindowWindowClass']
  ["visual": type: name='Visual', ctype='GdkVisual*']
  ["window_type": type: name='WindowType', ctype='GdkWindowType']
  ["cursor": type: name='Cursor', ctype='GdkCursor*']
  ["wmclass_name": type: name='utf8', ctype='gchar*']
  ["wmclass_class": type: name='utf8', ctype='gchar*']
  ["override_redirect": type: name='gboolean', ctype='gboolean']
  ["type_hint": type: name='WindowTypeHint', ctype='GdkWindowTypeHint']

[record: name='WindowClass']
  ["parent_class": type: name='GObject.ObjectClass', ctype='GObjectClass']

[record: name='WindowRedirect']

==========================================================================

bundle GTK3 {
  class : private : Proxy {
    @lib_proxy : static : DllProxy;

    function : GetDllProxy() ~ DllProxy {
      if(@lib_proxy = Nil) {
        @lib_proxy := DllProxy->New("libobjk_gtk3");
      };

      return @lib_proxy;
    }
  }

  class Atom {
    New() {
    }

    }

    method : public : Name() ~ String {
      array_args := Base->New[2];
      array_args[0] := Nil;
      array_args[1] := @self;

      Proxy->GetDllProxy()->CallFunction("gdk_atom_name", array_args);

      return Nil;
    }
  }

  class Color {
    @pixel : Int;
    @red : Int;
    @green : Int;
    @blue : Int;

    New() {
    }

    New(pixel: Int, red: Int, green: Int, blue: Int) {
      @pixel := pixel;
      @red := red;
      @green := green;
      @blue := blue;
    }

    method : public : Copy() ~ Color {
      array_args := Base->New[2];
      array_args[0] := Nil;
      array_args[1] := @self;

      # TODO: write record copy

      Proxy->GetDllProxy()->CallFunction("gdk_color_copy", array_args);

      return Nil;
    }

    method : public : Equal(colorb : Color) ~ Bool {
      array_args := Base->New[3];
      array_args[0] := IntHolder->New();
      array_args[1] := @self;

      # TODO: write record equal

      Proxy->GetDllProxy()->CallFunction("gdk_color_equal", array_args);

      value := array_args[0]->As(IntHolder);
      return value->Get() = 0 ? false : true;
    }

    method : public : Free() ~ Nil {
      array_args := Base->New[2];
      array_args[0] := Nil;
      array_args[1] := @self;

      # TODO: write record free

      Proxy->GetDllProxy()->CallFunction("gdk_color_free", array_args);
    }

    method : public : Hash() ~ Int {
      array_args := Base->New[2];
      array_args[0] := IntHolder->New();
      array_args[1] := @self;

      Proxy->GetDllProxy()->CallFunction("gdk_color_hash", array_args);

      value := array_args[0]->As(IntHolder);
      return value->Get();
    }

    method : public : ToString() ~ String {
      array_args := Base->New[2];
      array_args[0] := Nil;
      array_args[1] := @self;

      Proxy->GetDllProxy()->CallFunction("gdk_color_to_string", array_args);

      return Nil;
    }

    method : public : GetPixel() ~ Int {
      return @pixel;
    }

    method : public : SetPixel(pixel : Int) ~ Nil {
      @pixel := pixel;
    }

    method : public : GetRed() ~ Int {
      return @red;
    }

    method : public : SetRed(red : Int) ~ Nil {
      @red := red;
    }

    method : public : GetGreen() ~ Int {
      return @green;
    }

    method : public : SetGreen(green : Int) ~ Nil {
      @green := green;
    }

    method : public : GetBlue() ~ Int {
      return @blue;
    }

    method : public : SetBlue(blue : Int) ~ Nil {
      @blue := blue;
    }
  }

  class DevicePadInterface {
    New() {
    }

    }
  }

  class DrawingContextClass {
    New() {
    }

    }
  }

  class EventAny {
    @type : EventType;
    @window : Window;
    @send_event : Int;

    New() {
    }

    New(type: EventType, window: Window, send_event: Int) {
      @type := type;
      @window := window;
      @send_event := send_event;
    }

    method : public : GetType() ~ EventType {
      return @type;
    }

    method : public : SetType(type : EventType) ~ Nil {
      @type := type;
    }

    method : public : GetWindow() ~ Window {
      return @window;
    }

    method : public : SetWindow(window : Window) ~ Nil {
      @window := window;
    }

    method : public : GetSendEvent() ~ Int {
      return @send_event;
    }

    method : public : SetSendEvent(send_event : Int) ~ Nil {
      @send_event := send_event;
    }
  }

  class EventButton {
    @type : EventType;
    @window : Window;
    @send_event : Int;
    @time : Int;
    @x : Float;
    @y : Float;
    @axes : Float;
    @button : Int;
    @device : Device;
    @x_root : Float;
    @y_root : Float;

    New() {
    }

    New(type: EventType, window: Window, send_event: Int, time: Int, x: Float, y: Float, axes: Float, button: Int, device: Device, x_root: Float, y_root: Float) {
      @type := type;
      @window := window;
      @send_event := send_event;
      @time := time;
      @x := x;
      @y := y;
      @axes := axes;
      @button := button;
      @device := device;
      @x_root := x_root;
      @y_root := y_root;
    }

    method : public : GetType() ~ EventType {
      return @type;
    }

    method : public : SetType(type : EventType) ~ Nil {
      @type := type;
    }

    method : public : GetWindow() ~ Window {
      return @window;
    }

    method : public : SetWindow(window : Window) ~ Nil {
      @window := window;
    }

    method : public : GetSendEvent() ~ Int {
      return @send_event;
    }

    method : public : SetSendEvent(send_event : Int) ~ Nil {
      @send_event := send_event;
    }

    method : public : GetTime() ~ Int {
      return @time;
    }

    method : public : SetTime(time : Int) ~ Nil {
      @time := time;
    }

    method : public : GetX() ~ Float {
      return @x;
    }

    method : public : SetX(x : Float) ~ Nil {
      @x := x;
    }

    method : public : GetY() ~ Float {
      return @y;
    }

    method : public : SetY(y : Float) ~ Nil {
      @y := y;
    }

    method : public : GetAxes() ~ Float {
      return @axes;
    }

    method : public : SetAxes(axes : Float) ~ Nil {
      @axes := axes;
    }

    method : public : GetButton() ~ Int {
      return @button;
    }

    method : public : SetButton(button : Int) ~ Nil {
      @button := button;
    }

    method : public : GetDevice() ~ Device {
      return @device;
    }

    method : public : SetDevice(device : Device) ~ Nil {
      @device := device;
    }

    method : public : GetXRoot() ~ Float {
      return @x_root;
    }

    method : public : SetXRoot(x_root : Float) ~ Nil {
      @x_root := x_root;
    }

    method : public : GetYRoot() ~ Float {
      return @y_root;
    }

    method : public : SetYRoot(y_root : Float) ~ Nil {
      @y_root := y_root;
    }
  }

  class EventConfigure {
    @type : EventType;
    @window : Window;
    @send_event : Int;
    @x : Int;
    @y : Int;
    @width : Int;
    @height : Int;

    New() {
    }

    New(type: EventType, window: Window, send_event: Int, x: Int, y: Int, width: Int, height: Int) {
      @type := type;
      @window := window;
      @send_event := send_event;
      @x := x;
      @y := y;
      @width := width;
      @height := height;
    }

    method : public : GetType() ~ EventType {
      return @type;
    }

    method : public : SetType(type : EventType) ~ Nil {
      @type := type;
    }

    method : public : GetWindow() ~ Window {
      return @window;
    }

    method : public : SetWindow(window : Window) ~ Nil {
      @window := window;
    }

    method : public : GetSendEvent() ~ Int {
      return @send_event;
    }

    method : public : SetSendEvent(send_event : Int) ~ Nil {
      @send_event := send_event;
    }

    method : public : GetX() ~ Int {
      return @x;
    }

    method : public : SetX(x : Int) ~ Nil {
      @x := x;
    }

    method : public : GetY() ~ Int {
      return @y;
    }

    method : public : SetY(y : Int) ~ Nil {
      @y := y;
    }

    method : public : GetWidth() ~ Int {
      return @width;
    }

    method : public : SetWidth(width : Int) ~ Nil {
      @width := width;
    }

    method : public : GetHeight() ~ Int {
      return @height;
    }

    method : public : SetHeight(height : Int) ~ Nil {
      @height := height;
    }
  }

  class EventCrossing {
    @type : EventType;
    @window : Window;
    @send_event : Int;
    @subwindow : Window;
    @time : Int;
    @x : Float;
    @y : Float;
    @x_root : Float;
    @y_root : Float;
    @mode : CrossingMode;
    @detail : NotifyType;
    @focus : Bool;

    New() {
    }

    New(type: EventType, window: Window, send_event: Int, subwindow: Window, time: Int, x: Float, y: Float, x_root: Float, y_root: Float, mode: CrossingMode, detail: NotifyType, focus: Bool) {
      @type := type;
      @window := window;
      @send_event := send_event;
      @subwindow := subwindow;
      @time := time;
      @x := x;
      @y := y;
      @x_root := x_root;
      @y_root := y_root;
      @mode := mode;
      @detail := detail;
      @focus := focus;
    }

    method : public : GetType() ~ EventType {
      return @type;
    }

    method : public : SetType(type : EventType) ~ Nil {
      @type := type;
    }

    method : public : GetWindow() ~ Window {
      return @window;
    }

    method : public : SetWindow(window : Window) ~ Nil {
      @window := window;
    }

    method : public : GetSendEvent() ~ Int {
      return @send_event;
    }

    method : public : SetSendEvent(send_event : Int) ~ Nil {
      @send_event := send_event;
    }

    method : public : GetSubwindow() ~ Window {
      return @subwindow;
    }

    method : public : SetSubwindow(subwindow : Window) ~ Nil {
      @subwindow := subwindow;
    }

    method : public : GetTime() ~ Int {
      return @time;
    }

    method : public : SetTime(time : Int) ~ Nil {
      @time := time;
    }

    method : public : GetX() ~ Float {
      return @x;
    }

    method : public : SetX(x : Float) ~ Nil {
      @x := x;
    }

    method : public : GetY() ~ Float {
      return @y;
    }

    method : public : SetY(y : Float) ~ Nil {
      @y := y;
    }

    method : public : GetXRoot() ~ Float {
      return @x_root;
    }

    method : public : SetXRoot(x_root : Float) ~ Nil {
      @x_root := x_root;
    }

    method : public : GetYRoot() ~ Float {
      return @y_root;
    }

    method : public : SetYRoot(y_root : Float) ~ Nil {
      @y_root := y_root;
    }

    method : public : GetMode() ~ CrossingMode {
      return @mode;
    }

    method : public : SetMode(mode : CrossingMode) ~ Nil {
      @mode := mode;
    }

    method : public : GetDetail() ~ NotifyType {
      return @detail;
    }

    method : public : SetDetail(detail : NotifyType) ~ Nil {
      @detail := detail;
    }

    method : public : GetFocus() ~ Bool {
      return @focus;
    }

    method : public : SetFocus(focus : Bool) ~ Nil {
      @focus := focus;
    }
  }

  class EventDND {
    @type : EventType;
    @window : Window;
    @send_event : Int;
    @context : DragContext;
    @time : Int;
    @x_root : Int;
    @y_root : Int;

    New() {
    }

    New(type: EventType, window: Window, send_event: Int, context: DragContext, time: Int, x_root: Int, y_root: Int) {
      @type := type;
      @window := window;
      @send_event := send_event;
      @context := context;
      @time := time;
      @x_root := x_root;
      @y_root := y_root;
    }

    method : public : GetType() ~ EventType {
      return @type;
    }

    method : public : SetType(type : EventType) ~ Nil {
      @type := type;
    }

    method : public : GetWindow() ~ Window {
      return @window;
    }

    method : public : SetWindow(window : Window) ~ Nil {
      @window := window;
    }

    method : public : GetSendEvent() ~ Int {
      return @send_event;
    }

    method : public : SetSendEvent(send_event : Int) ~ Nil {
      @send_event := send_event;
    }

    method : public : GetContext() ~ DragContext {
      return @context;
    }

    method : public : SetContext(context : DragContext) ~ Nil {
      @context := context;
    }

    method : public : GetTime() ~ Int {
      return @time;
    }

    method : public : SetTime(time : Int) ~ Nil {
      @time := time;
    }

    method : public : GetXRoot() ~ Int {
      return @x_root;
    }

    method : public : SetXRoot(x_root : Int) ~ Nil {
      @x_root := x_root;
    }

    method : public : GetYRoot() ~ Int {
      return @y_root;
    }

    method : public : SetYRoot(y_root : Int) ~ Nil {
      @y_root := y_root;
    }
  }

  class EventExpose {
    @type : EventType;
    @window : Window;
    @send_event : Int;
    @area : Rectangle;
    @region : cairo.Region;
    @count : Int;

    New() {
    }

    New(type: EventType, window: Window, send_event: Int, area: Rectangle, region: cairo.Region, count: Int) {
      @type := type;
      @window := window;
      @send_event := send_event;
      @area := area;
      @region := region;
      @count := count;
    }

    method : public : GetType() ~ EventType {
      return @type;
    }

    method : public : SetType(type : EventType) ~ Nil {
      @type := type;
    }

    method : public : GetWindow() ~ Window {
      return @window;
    }

    method : public : SetWindow(window : Window) ~ Nil {
      @window := window;
    }

    method : public : GetSendEvent() ~ Int {
      return @send_event;
    }

    method : public : SetSendEvent(send_event : Int) ~ Nil {
      @send_event := send_event;
    }

    method : public : GetArea() ~ Rectangle {
      return @area;
    }

    method : public : SetArea(area : Rectangle) ~ Nil {
      @area := area;
    }

    method : public : GetRegion() ~ cairo.Region {
      return @region;
    }

    method : public : SetRegion(region : cairo.Region) ~ Nil {
      @region := region;
    }

    method : public : GetCount() ~ Int {
      return @count;
    }

    method : public : SetCount(count : Int) ~ Nil {
      @count := count;
    }
  }

  class EventFocus {
    @type : EventType;
    @window : Window;
    @send_event : Int;
    @in : Int;

    New() {
    }

    New(type: EventType, window: Window, send_event: Int, in: Int) {
      @type := type;
      @window := window;
      @send_event := send_event;
      @in := in;
    }

    method : public : GetType() ~ EventType {
      return @type;
    }

    method : public : SetType(type : EventType) ~ Nil {
      @type := type;
    }

    method : public : GetWindow() ~ Window {
      return @window;
    }

    method : public : SetWindow(window : Window) ~ Nil {
      @window := window;
    }

    method : public : GetSendEvent() ~ Int {
      return @send_event;
    }

    method : public : SetSendEvent(send_event : Int) ~ Nil {
      @send_event := send_event;
    }

    method : public : GetIn() ~ Int {
      return @in;
    }

    method : public : SetIn(in : Int) ~ Nil {
      @in := in;
    }
  }

  class EventGrabBroken {
    @type : EventType;
    @window : Window;
    @send_event : Int;
    @keyboard : Bool;
    @implicit : Bool;
    @grab_window : Window;

    New() {
    }

    New(type: EventType, window: Window, send_event: Int, keyboard: Bool, implicit: Bool, grab_window: Window) {
      @type := type;
      @window := window;
      @send_event := send_event;
      @keyboard := keyboard;
      @implicit := implicit;
      @grab_window := grab_window;
    }

    method : public : GetType() ~ EventType {
      return @type;
    }

    method : public : SetType(type : EventType) ~ Nil {
      @type := type;
    }

    method : public : GetWindow() ~ Window {
      return @window;
    }

    method : public : SetWindow(window : Window) ~ Nil {
      @window := window;
    }

    method : public : GetSendEvent() ~ Int {
      return @send_event;
    }

    method : public : SetSendEvent(send_event : Int) ~ Nil {
      @send_event := send_event;
    }

    method : public : GetKeyboard() ~ Bool {
      return @keyboard;
    }

    method : public : SetKeyboard(keyboard : Bool) ~ Nil {
      @keyboard := keyboard;
    }

    method : public : GetImplicit() ~ Bool {
      return @implicit;
    }

    method : public : SetImplicit(implicit : Bool) ~ Nil {
      @implicit := implicit;
    }

    method : public : GetGrabWindow() ~ Window {
      return @grab_window;
    }

    method : public : SetGrabWindow(grab_window : Window) ~ Nil {
      @grab_window := grab_window;
    }
  }

  class EventKey {
    @type : EventType;
    @window : Window;
    @send_event : Int;
    @time : Int;
    @keyval : Int;
    @length : Int;
    @string : String;
    @hardware_keycode : Int;
    @group : Int;
    @is_modifier : Int;

    New() {
    }

    New(type: EventType, window: Window, send_event: Int, time: Int, keyval: Int, length: Int, string: String, hardware_keycode: Int, group: Int, is_modifier: Int) {
      @type := type;
      @window := window;
      @send_event := send_event;
      @time := time;
      @keyval := keyval;
      @length := length;
      @string := string;
      @hardware_keycode := hardware_keycode;
      @group := group;
      @is_modifier := is_modifier;
    }

    method : public : GetType() ~ EventType {
      return @type;
    }

    method : public : SetType(type : EventType) ~ Nil {
      @type := type;
    }

    method : public : GetWindow() ~ Window {
      return @window;
    }

    method : public : SetWindow(window : Window) ~ Nil {
      @window := window;
    }

    method : public : GetSendEvent() ~ Int {
      return @send_event;
    }

    method : public : SetSendEvent(send_event : Int) ~ Nil {
      @send_event := send_event;
    }

    method : public : GetTime() ~ Int {
      return @time;
    }

    method : public : SetTime(time : Int) ~ Nil {
      @time := time;
    }

    method : public : GetKeyval() ~ Int {
      return @keyval;
    }

    method : public : SetKeyval(keyval : Int) ~ Nil {
      @keyval := keyval;
    }

    method : public : GetLength() ~ Int {
      return @length;
    }

    method : public : SetLength(length : Int) ~ Nil {
      @length := length;
    }

    method : public : GetString() ~ String {
      return @string;
    }

    method : public : SetString(string : String) ~ Nil {
      @string := string;
    }

    method : public : GetHardwareKeycode() ~ Int {
      return @hardware_keycode;
    }

    method : public : SetHardwareKeycode(hardware_keycode : Int) ~ Nil {
      @hardware_keycode := hardware_keycode;
    }

    method : public : GetGroup() ~ Int {
      return @group;
    }

    method : public : SetGroup(group : Int) ~ Nil {
      @group := group;
    }

    method : public : GetIsModifier() ~ Int {
      return @is_modifier;
    }

    method : public : SetIsModifier(is_modifier : Int) ~ Nil {
      @is_modifier := is_modifier;
    }
  }

  class EventMotion {
    @type : EventType;
    @window : Window;
    @send_event : Int;
    @time : Int;
    @x : Float;
    @y : Float;
    @axes : Float;
    @is_hint : Int;
    @device : Device;
    @x_root : Float;
    @y_root : Float;

    New() {
    }

    New(type: EventType, window: Window, send_event: Int, time: Int, x: Float, y: Float, axes: Float, is_hint: Int, device: Device, x_root: Float, y_root: Float) {
      @type := type;
      @window := window;
      @send_event := send_event;
      @time := time;
      @x := x;
      @y := y;
      @axes := axes;
      @is_hint := is_hint;
      @device := device;
      @x_root := x_root;
      @y_root := y_root;
    }

    method : public : GetType() ~ EventType {
      return @type;
    }

    method : public : SetType(type : EventType) ~ Nil {
      @type := type;
    }

    method : public : GetWindow() ~ Window {
      return @window;
    }

    method : public : SetWindow(window : Window) ~ Nil {
      @window := window;
    }

    method : public : GetSendEvent() ~ Int {
      return @send_event;
    }

    method : public : SetSendEvent(send_event : Int) ~ Nil {
      @send_event := send_event;
    }

    method : public : GetTime() ~ Int {
      return @time;
    }

    method : public : SetTime(time : Int) ~ Nil {
      @time := time;
    }

    method : public : GetX() ~ Float {
      return @x;
    }

    method : public : SetX(x : Float) ~ Nil {
      @x := x;
    }

    method : public : GetY() ~ Float {
      return @y;
    }

    method : public : SetY(y : Float) ~ Nil {
      @y := y;
    }

    method : public : GetAxes() ~ Float {
      return @axes;
    }

    method : public : SetAxes(axes : Float) ~ Nil {
      @axes := axes;
    }

    method : public : GetIsHint() ~ Int {
      return @is_hint;
    }

    method : public : SetIsHint(is_hint : Int) ~ Nil {
      @is_hint := is_hint;
    }

    method : public : GetDevice() ~ Device {
      return @device;
    }

    method : public : SetDevice(device : Device) ~ Nil {
      @device := device;
    }

    method : public : GetXRoot() ~ Float {
      return @x_root;
    }

    method : public : SetXRoot(x_root : Float) ~ Nil {
      @x_root := x_root;
    }

    method : public : GetYRoot() ~ Float {
      return @y_root;
    }

    method : public : SetYRoot(y_root : Float) ~ Nil {
      @y_root := y_root;
    }
  }

  class EventOwnerChange {
    @type : EventType;
    @window : Window;
    @send_event : Int;
    @owner : Window;
    @reason : OwnerChange;
    @selection : Atom;
    @time : Int;
    @selection_time : Int;

    New() {
    }

    New(type: EventType, window: Window, send_event: Int, owner: Window, reason: OwnerChange, selection: Atom, time: Int, selection_time: Int) {
      @type := type;
      @window := window;
      @send_event := send_event;
      @owner := owner;
      @reason := reason;
      @selection := selection;
      @time := time;
      @selection_time := selection_time;
    }

    method : public : GetType() ~ EventType {
      return @type;
    }

    method : public : SetType(type : EventType) ~ Nil {
      @type := type;
    }

    method : public : GetWindow() ~ Window {
      return @window;
    }

    method : public : SetWindow(window : Window) ~ Nil {
      @window := window;
    }

    method : public : GetSendEvent() ~ Int {
      return @send_event;
    }

    method : public : SetSendEvent(send_event : Int) ~ Nil {
      @send_event := send_event;
    }

    method : public : GetOwner() ~ Window {
      return @owner;
    }

    method : public : SetOwner(owner : Window) ~ Nil {
      @owner := owner;
    }

    method : public : GetReason() ~ OwnerChange {
      return @reason;
    }

    method : public : SetReason(reason : OwnerChange) ~ Nil {
      @reason := reason;
    }

    method : public : GetSelection() ~ Atom {
      return @selection;
    }

    method : public : SetSelection(selection : Atom) ~ Nil {
      @selection := selection;
    }

    method : public : GetTime() ~ Int {
      return @time;
    }

    method : public : SetTime(time : Int) ~ Nil {
      @time := time;
    }

    method : public : GetSelectionTime() ~ Int {
      return @selection_time;
    }

    method : public : SetSelectionTime(selection_time : Int) ~ Nil {
      @selection_time := selection_time;
    }
  }

  class EventPadAxis {
    @type : EventType;
    @window : Window;
    @send_event : Int;
    @time : Int;
    @group : Int;
    @index : Int;
    @mode : Int;
    @value : Float;

    New() {
    }

    New(type: EventType, window: Window, send_event: Int, time: Int, group: Int, index: Int, mode: Int, value: Float) {
      @type := type;
      @window := window;
      @send_event := send_event;
      @time := time;
      @group := group;
      @index := index;
      @mode := mode;
      @value := value;
    }

    method : public : GetType() ~ EventType {
      return @type;
    }

    method : public : SetType(type : EventType) ~ Nil {
      @type := type;
    }

    method : public : GetWindow() ~ Window {
      return @window;
    }

    method : public : SetWindow(window : Window) ~ Nil {
      @window := window;
    }

    method : public : GetSendEvent() ~ Int {
      return @send_event;
    }

    method : public : SetSendEvent(send_event : Int) ~ Nil {
      @send_event := send_event;
    }

    method : public : GetTime() ~ Int {
      return @time;
    }

    method : public : SetTime(time : Int) ~ Nil {
      @time := time;
    }

    method : public : GetGroup() ~ Int {
      return @group;
    }

    method : public : SetGroup(group : Int) ~ Nil {
      @group := group;
    }

    method : public : GetIndex() ~ Int {
      return @index;
    }

    method : public : SetIndex(index : Int) ~ Nil {
      @index := index;
    }

    method : public : GetMode() ~ Int {
      return @mode;
    }

    method : public : SetMode(mode : Int) ~ Nil {
      @mode := mode;
    }

    method : public : GetValue() ~ Float {
      return @value;
    }

    method : public : SetValue(value : Float) ~ Nil {
      @value := value;
    }
  }

  class EventPadButton {
    @type : EventType;
    @window : Window;
    @send_event : Int;
    @time : Int;
    @group : Int;
    @button : Int;
    @mode : Int;

    New() {
    }

    New(type: EventType, window: Window, send_event: Int, time: Int, group: Int, button: Int, mode: Int) {
      @type := type;
      @window := window;
      @send_event := send_event;
      @time := time;
      @group := group;
      @button := button;
      @mode := mode;
    }

    method : public : GetType() ~ EventType {
      return @type;
    }

    method : public : SetType(type : EventType) ~ Nil {
      @type := type;
    }

    method : public : GetWindow() ~ Window {
      return @window;
    }

    method : public : SetWindow(window : Window) ~ Nil {
      @window := window;
    }

    method : public : GetSendEvent() ~ Int {
      return @send_event;
    }

    method : public : SetSendEvent(send_event : Int) ~ Nil {
      @send_event := send_event;
    }

    method : public : GetTime() ~ Int {
      return @time;
    }

    method : public : SetTime(time : Int) ~ Nil {
      @time := time;
    }

    method : public : GetGroup() ~ Int {
      return @group;
    }

    method : public : SetGroup(group : Int) ~ Nil {
      @group := group;
    }

    method : public : GetButton() ~ Int {
      return @button;
    }

    method : public : SetButton(button : Int) ~ Nil {
      @button := button;
    }

    method : public : GetMode() ~ Int {
      return @mode;
    }

    method : public : SetMode(mode : Int) ~ Nil {
      @mode := mode;
    }
  }

  class EventPadGroupMode {
    @type : EventType;
    @window : Window;
    @send_event : Int;
    @time : Int;
    @group : Int;
    @mode : Int;

    New() {
    }

    New(type: EventType, window: Window, send_event: Int, time: Int, group: Int, mode: Int) {
      @type := type;
      @window := window;
      @send_event := send_event;
      @time := time;
      @group := group;
      @mode := mode;
    }

    method : public : GetType() ~ EventType {
      return @type;
    }

    method : public : SetType(type : EventType) ~ Nil {
      @type := type;
    }

    method : public : GetWindow() ~ Window {
      return @window;
    }

    method : public : SetWindow(window : Window) ~ Nil {
      @window := window;
    }

    method : public : GetSendEvent() ~ Int {
      return @send_event;
    }

    method : public : SetSendEvent(send_event : Int) ~ Nil {
      @send_event := send_event;
    }

    method : public : GetTime() ~ Int {
      return @time;
    }

    method : public : SetTime(time : Int) ~ Nil {
      @time := time;
    }

    method : public : GetGroup() ~ Int {
      return @group;
    }

    method : public : SetGroup(group : Int) ~ Nil {
      @group := group;
    }

    method : public : GetMode() ~ Int {
      return @mode;
    }

    method : public : SetMode(mode : Int) ~ Nil {
      @mode := mode;
    }
  }

  class EventProperty {
    @type : EventType;
    @window : Window;
    @send_event : Int;
    @atom : Atom;
    @time : Int;

    New() {
    }

    New(type: EventType, window: Window, send_event: Int, atom: Atom, time: Int) {
      @type := type;
      @window := window;
      @send_event := send_event;
      @atom := atom;
      @time := time;
    }

    method : public : GetType() ~ EventType {
      return @type;
    }

    method : public : SetType(type : EventType) ~ Nil {
      @type := type;
    }

    method : public : GetWindow() ~ Window {
      return @window;
    }

    method : public : SetWindow(window : Window) ~ Nil {
      @window := window;
    }

    method : public : GetSendEvent() ~ Int {
      return @send_event;
    }

    method : public : SetSendEvent(send_event : Int) ~ Nil {
      @send_event := send_event;
    }

    method : public : GetAtom() ~ Atom {
      return @atom;
    }

    method : public : SetAtom(atom : Atom) ~ Nil {
      @atom := atom;
    }

    method : public : GetTime() ~ Int {
      return @time;
    }

    method : public : SetTime(time : Int) ~ Nil {
      @time := time;
    }
  }

  class EventProximity {
    @type : EventType;
    @window : Window;
    @send_event : Int;
    @time : Int;
    @device : Device;

    New() {
    }

    New(type: EventType, window: Window, send_event: Int, time: Int, device: Device) {
      @type := type;
      @window := window;
      @send_event := send_event;
      @time := time;
      @device := device;
    }

    method : public : GetType() ~ EventType {
      return @type;
    }

    method : public : SetType(type : EventType) ~ Nil {
      @type := type;
    }

    method : public : GetWindow() ~ Window {
      return @window;
    }

    method : public : SetWindow(window : Window) ~ Nil {
      @window := window;
    }

    method : public : GetSendEvent() ~ Int {
      return @send_event;
    }

    method : public : SetSendEvent(send_event : Int) ~ Nil {
      @send_event := send_event;
    }

    method : public : GetTime() ~ Int {
      return @time;
    }

    method : public : SetTime(time : Int) ~ Nil {
      @time := time;
    }

    method : public : GetDevice() ~ Device {
      return @device;
    }

    method : public : SetDevice(device : Device) ~ Nil {
      @device := device;
    }
  }

  class EventScroll {
    @type : EventType;
    @window : Window;
    @send_event : Int;
    @time : Int;
    @x : Float;
    @y : Float;
    @direction : ScrollDirection;
    @device : Device;
    @x_root : Float;
    @y_root : Float;
    @delta_x : Float;
    @delta_y : Float;
    @is_stop : Int;

    New() {
    }

    New(type: EventType, window: Window, send_event: Int, time: Int, x: Float, y: Float, direction: ScrollDirection, device: Device, x_root: Float, y_root: Float, delta_x: Float, delta_y: Float, is_stop: Int) {
      @type := type;
      @window := window;
      @send_event := send_event;
      @time := time;
      @x := x;
      @y := y;
      @direction := direction;
      @device := device;
      @x_root := x_root;
      @y_root := y_root;
      @delta_x := delta_x;
      @delta_y := delta_y;
      @is_stop := is_stop;
    }

    method : public : GetType() ~ EventType {
      return @type;
    }

    method : public : SetType(type : EventType) ~ Nil {
      @type := type;
    }

    method : public : GetWindow() ~ Window {
      return @window;
    }

    method : public : SetWindow(window : Window) ~ Nil {
      @window := window;
    }

    method : public : GetSendEvent() ~ Int {
      return @send_event;
    }

    method : public : SetSendEvent(send_event : Int) ~ Nil {
      @send_event := send_event;
    }

    method : public : GetTime() ~ Int {
      return @time;
    }

    method : public : SetTime(time : Int) ~ Nil {
      @time := time;
    }

    method : public : GetX() ~ Float {
      return @x;
    }

    method : public : SetX(x : Float) ~ Nil {
      @x := x;
    }

    method : public : GetY() ~ Float {
      return @y;
    }

    method : public : SetY(y : Float) ~ Nil {
      @y := y;
    }

    method : public : GetDirection() ~ ScrollDirection {
      return @direction;
    }

    method : public : SetDirection(direction : ScrollDirection) ~ Nil {
      @direction := direction;
    }

    method : public : GetDevice() ~ Device {
      return @device;
    }

    method : public : SetDevice(device : Device) ~ Nil {
      @device := device;
    }

    method : public : GetXRoot() ~ Float {
      return @x_root;
    }

    method : public : SetXRoot(x_root : Float) ~ Nil {
      @x_root := x_root;
    }

    method : public : GetYRoot() ~ Float {
      return @y_root;
    }

    method : public : SetYRoot(y_root : Float) ~ Nil {
      @y_root := y_root;
    }

    method : public : GetDeltaX() ~ Float {
      return @delta_x;
    }

    method : public : SetDeltaX(delta_x : Float) ~ Nil {
      @delta_x := delta_x;
    }

    method : public : GetDeltaY() ~ Float {
      return @delta_y;
    }

    method : public : SetDeltaY(delta_y : Float) ~ Nil {
      @delta_y := delta_y;
    }

    method : public : GetIsStop() ~ Int {
      return @is_stop;
    }

    method : public : SetIsStop(is_stop : Int) ~ Nil {
      @is_stop := is_stop;
    }
  }

  class EventSelection {
    @type : EventType;
    @window : Window;
    @send_event : Int;
    @selection : Atom;
    @target : Atom;
    @property : Atom;
    @time : Int;
    @requestor : Window;

    New() {
    }

    New(type: EventType, window: Window, send_event: Int, selection: Atom, target: Atom, property: Atom, time: Int, requestor: Window) {
      @type := type;
      @window := window;
      @send_event := send_event;
      @selection := selection;
      @target := target;
      @property := property;
      @time := time;
      @requestor := requestor;
    }

    method : public : GetType() ~ EventType {
      return @type;
    }

    method : public : SetType(type : EventType) ~ Nil {
      @type := type;
    }

    method : public : GetWindow() ~ Window {
      return @window;
    }

    method : public : SetWindow(window : Window) ~ Nil {
      @window := window;
    }

    method : public : GetSendEvent() ~ Int {
      return @send_event;
    }

    method : public : SetSendEvent(send_event : Int) ~ Nil {
      @send_event := send_event;
    }

    method : public : GetSelection() ~ Atom {
      return @selection;
    }

    method : public : SetSelection(selection : Atom) ~ Nil {
      @selection := selection;
    }

    method : public : GetTarget() ~ Atom {
      return @target;
    }

    method : public : SetTarget(target : Atom) ~ Nil {
      @target := target;
    }

    method : public : GetProperty() ~ Atom {
      return @property;
    }

    method : public : SetProperty(property : Atom) ~ Nil {
      @property := property;
    }

    method : public : GetTime() ~ Int {
      return @time;
    }

    method : public : SetTime(time : Int) ~ Nil {
      @time := time;
    }

    method : public : GetRequestor() ~ Window {
      return @requestor;
    }

    method : public : SetRequestor(requestor : Window) ~ Nil {
      @requestor := requestor;
    }
  }

  class EventSequence {
    New() {
    }

    }
  }

  class EventSetting {
    @type : EventType;
    @window : Window;
    @send_event : Int;
    @action : SettingAction;
    @name : String;

    New() {
    }

    New(type: EventType, window: Window, send_event: Int, action: SettingAction, name: String) {
      @type := type;
      @window := window;
      @send_event := send_event;
      @action := action;
      @name := name;
    }

    method : public : GetType() ~ EventType {
      return @type;
    }

    method : public : SetType(type : EventType) ~ Nil {
      @type := type;
    }

    method : public : GetWindow() ~ Window {
      return @window;
    }

    method : public : SetWindow(window : Window) ~ Nil {
      @window := window;
    }

    method : public : GetSendEvent() ~ Int {
      return @send_event;
    }

    method : public : SetSendEvent(send_event : Int) ~ Nil {
      @send_event := send_event;
    }

    method : public : GetAction() ~ SettingAction {
      return @action;
    }

    method : public : SetAction(action : SettingAction) ~ Nil {
      @action := action;
    }

    method : public : GetName() ~ String {
      return @name;
    }

    method : public : SetName(name : String) ~ Nil {
      @name := name;
    }
  }

  class EventTouch {
    @type : EventType;
    @window : Window;
    @send_event : Int;
    @time : Int;
    @x : Float;
    @y : Float;
    @axes : Float;
    @sequence : EventSequence;
    @emulating_pointer : Bool;
    @device : Device;
    @x_root : Float;
    @y_root : Float;

    New() {
    }

    New(type: EventType, window: Window, send_event: Int, time: Int, x: Float, y: Float, axes: Float, sequence: EventSequence, emulating_pointer: Bool, device: Device, x_root: Float, y_root: Float) {
      @type := type;
      @window := window;
      @send_event := send_event;
      @time := time;
      @x := x;
      @y := y;
      @axes := axes;
      @sequence := sequence;
      @emulating_pointer := emulating_pointer;
      @device := device;
      @x_root := x_root;
      @y_root := y_root;
    }

    method : public : GetType() ~ EventType {
      return @type;
    }

    method : public : SetType(type : EventType) ~ Nil {
      @type := type;
    }

    method : public : GetWindow() ~ Window {
      return @window;
    }

    method : public : SetWindow(window : Window) ~ Nil {
      @window := window;
    }

    method : public : GetSendEvent() ~ Int {
      return @send_event;
    }

    method : public : SetSendEvent(send_event : Int) ~ Nil {
      @send_event := send_event;
    }

    method : public : GetTime() ~ Int {
      return @time;
    }

    method : public : SetTime(time : Int) ~ Nil {
      @time := time;
    }

    method : public : GetX() ~ Float {
      return @x;
    }

    method : public : SetX(x : Float) ~ Nil {
      @x := x;
    }

    method : public : GetY() ~ Float {
      return @y;
    }

    method : public : SetY(y : Float) ~ Nil {
      @y := y;
    }

    method : public : GetAxes() ~ Float {
      return @axes;
    }

    method : public : SetAxes(axes : Float) ~ Nil {
      @axes := axes;
    }

    method : public : GetSequence() ~ EventSequence {
      return @sequence;
    }

    method : public : SetSequence(sequence : EventSequence) ~ Nil {
      @sequence := sequence;
    }

    method : public : GetEmulatingPointer() ~ Bool {
      return @emulating_pointer;
    }

    method : public : SetEmulatingPointer(emulating_pointer : Bool) ~ Nil {
      @emulating_pointer := emulating_pointer;
    }

    method : public : GetDevice() ~ Device {
      return @device;
    }

    method : public : SetDevice(device : Device) ~ Nil {
      @device := device;
    }

    method : public : GetXRoot() ~ Float {
      return @x_root;
    }

    method : public : SetXRoot(x_root : Float) ~ Nil {
      @x_root := x_root;
    }

    method : public : GetYRoot() ~ Float {
      return @y_root;
    }

    method : public : SetYRoot(y_root : Float) ~ Nil {
      @y_root := y_root;
    }
  }

  class EventTouchpadPinch {
    @type : EventType;
    @window : Window;
    @send_event : Int;
    @phase : Int;
    @n_fingers : Int;
    @time : Int;
    @x : Float;
    @y : Float;
    @dx : Float;
    @dy : Float;
    @angle_delta : Float;
    @scale : Float;
    @x_root : Float;
    @y_root : Float;

    New() {
    }

    New(type: EventType, window: Window, send_event: Int, phase: Int, n_fingers: Int, time: Int, x: Float, y: Float, dx: Float, dy: Float, angle_delta: Float, scale: Float, x_root: Float, y_root: Float) {
      @type := type;
      @window := window;
      @send_event := send_event;
      @phase := phase;
      @n_fingers := n_fingers;
      @time := time;
      @x := x;
      @y := y;
      @dx := dx;
      @dy := dy;
      @angle_delta := angle_delta;
      @scale := scale;
      @x_root := x_root;
      @y_root := y_root;
    }

    method : public : GetType() ~ EventType {
      return @type;
    }

    method : public : SetType(type : EventType) ~ Nil {
      @type := type;
    }

    method : public : GetWindow() ~ Window {
      return @window;
    }

    method : public : SetWindow(window : Window) ~ Nil {
      @window := window;
    }

    method : public : GetSendEvent() ~ Int {
      return @send_event;
    }

    method : public : SetSendEvent(send_event : Int) ~ Nil {
      @send_event := send_event;
    }

    method : public : GetPhase() ~ Int {
      return @phase;
    }

    method : public : SetPhase(phase : Int) ~ Nil {
      @phase := phase;
    }

    method : public : GetNFingers() ~ Int {
      return @n_fingers;
    }

    method : public : SetNFingers(n_fingers : Int) ~ Nil {
      @n_fingers := n_fingers;
    }

    method : public : GetTime() ~ Int {
      return @time;
    }

    method : public : SetTime(time : Int) ~ Nil {
      @time := time;
    }

    method : public : GetX() ~ Float {
      return @x;
    }

    method : public : SetX(x : Float) ~ Nil {
      @x := x;
    }

    method : public : GetY() ~ Float {
      return @y;
    }

    method : public : SetY(y : Float) ~ Nil {
      @y := y;
    }

    method : public : GetDx() ~ Float {
      return @dx;
    }

    method : public : SetDx(dx : Float) ~ Nil {
      @dx := dx;
    }

    method : public : GetDy() ~ Float {
      return @dy;
    }

    method : public : SetDy(dy : Float) ~ Nil {
      @dy := dy;
    }

    method : public : GetAngleDelta() ~ Float {
      return @angle_delta;
    }

    method : public : SetAngleDelta(angle_delta : Float) ~ Nil {
      @angle_delta := angle_delta;
    }

    method : public : GetScale() ~ Float {
      return @scale;
    }

    method : public : SetScale(scale : Float) ~ Nil {
      @scale := scale;
    }

    method : public : GetXRoot() ~ Float {
      return @x_root;
    }

    method : public : SetXRoot(x_root : Float) ~ Nil {
      @x_root := x_root;
    }

    method : public : GetYRoot() ~ Float {
      return @y_root;
    }

    method : public : SetYRoot(y_root : Float) ~ Nil {
      @y_root := y_root;
    }
  }

  class EventTouchpadSwipe {
    @type : EventType;
    @window : Window;
    @send_event : Int;
    @phase : Int;
    @n_fingers : Int;
    @time : Int;
    @x : Float;
    @y : Float;
    @dx : Float;
    @dy : Float;
    @x_root : Float;
    @y_root : Float;

    New() {
    }

    New(type: EventType, window: Window, send_event: Int, phase: Int, n_fingers: Int, time: Int, x: Float, y: Float, dx: Float, dy: Float, x_root: Float, y_root: Float) {
      @type := type;
      @window := window;
      @send_event := send_event;
      @phase := phase;
      @n_fingers := n_fingers;
      @time := time;
      @x := x;
      @y := y;
      @dx := dx;
      @dy := dy;
      @x_root := x_root;
      @y_root := y_root;
    }

    method : public : GetType() ~ EventType {
      return @type;
    }

    method : public : SetType(type : EventType) ~ Nil {
      @type := type;
    }

    method : public : GetWindow() ~ Window {
      return @window;
    }

    method : public : SetWindow(window : Window) ~ Nil {
      @window := window;
    }

    method : public : GetSendEvent() ~ Int {
      return @send_event;
    }

    method : public : SetSendEvent(send_event : Int) ~ Nil {
      @send_event := send_event;
    }

    method : public : GetPhase() ~ Int {
      return @phase;
    }

    method : public : SetPhase(phase : Int) ~ Nil {
      @phase := phase;
    }

    method : public : GetNFingers() ~ Int {
      return @n_fingers;
    }

    method : public : SetNFingers(n_fingers : Int) ~ Nil {
      @n_fingers := n_fingers;
    }

    method : public : GetTime() ~ Int {
      return @time;
    }

    method : public : SetTime(time : Int) ~ Nil {
      @time := time;
    }

    method : public : GetX() ~ Float {
      return @x;
    }

    method : public : SetX(x : Float) ~ Nil {
      @x := x;
    }

    method : public : GetY() ~ Float {
      return @y;
    }

    method : public : SetY(y : Float) ~ Nil {
      @y := y;
    }

    method : public : GetDx() ~ Float {
      return @dx;
    }

    method : public : SetDx(dx : Float) ~ Nil {
      @dx := dx;
    }

    method : public : GetDy() ~ Float {
      return @dy;
    }

    method : public : SetDy(dy : Float) ~ Nil {
      @dy := dy;
    }

    method : public : GetXRoot() ~ Float {
      return @x_root;
    }

    method : public : SetXRoot(x_root : Float) ~ Nil {
      @x_root := x_root;
    }

    method : public : GetYRoot() ~ Float {
      return @y_root;
    }

    method : public : SetYRoot(y_root : Float) ~ Nil {
      @y_root := y_root;
    }
  }

  class EventVisibility {
    @type : EventType;
    @window : Window;
    @send_event : Int;
    @state : VisibilityState;

    New() {
    }

    New(type: EventType, window: Window, send_event: Int, state: VisibilityState) {
      @type := type;
      @window := window;
      @send_event := send_event;
      @state := state;
    }

    method : public : GetType() ~ EventType {
      return @type;
    }

    method : public : SetType(type : EventType) ~ Nil {
      @type := type;
    }

    method : public : GetWindow() ~ Window {
      return @window;
    }

    method : public : SetWindow(window : Window) ~ Nil {
      @window := window;
    }

    method : public : GetSendEvent() ~ Int {
      return @send_event;
    }

    method : public : SetSendEvent(send_event : Int) ~ Nil {
      @send_event := send_event;
    }

    method : public : GetState() ~ VisibilityState {
      return @state;
    }

    method : public : SetState(state : VisibilityState) ~ Nil {
      @state := state;
    }
  }

  class EventWindowState {
    @type : EventType;
    @window : Window;
    @send_event : Int;
    @changed_mask : WindowState;
    @new_window_state : WindowState;

    New() {
    }

    New(type: EventType, window: Window, send_event: Int, changed_mask: WindowState, new_window_state: WindowState) {
      @type := type;
      @window := window;
      @send_event := send_event;
      @changed_mask := changed_mask;
      @new_window_state := new_window_state;
    }

    method : public : GetType() ~ EventType {
      return @type;
    }

    method : public : SetType(type : EventType) ~ Nil {
      @type := type;
    }

    method : public : GetWindow() ~ Window {
      return @window;
    }

    method : public : SetWindow(window : Window) ~ Nil {
      @window := window;
    }

    method : public : GetSendEvent() ~ Int {
      return @send_event;
    }

    method : public : SetSendEvent(send_event : Int) ~ Nil {
      @send_event := send_event;
    }

    method : public : GetChangedMask() ~ WindowState {
      return @changed_mask;
    }

    method : public : SetChangedMask(changed_mask : WindowState) ~ Nil {
      @changed_mask := changed_mask;
    }

    method : public : GetNewWindowState() ~ WindowState {
      return @new_window_state;
    }

    method : public : SetNewWindowState(new_window_state : WindowState) ~ Nil {
      @new_window_state := new_window_state;
    }
  }

  class FrameClockClass {
    New() {
    }

    }
  }

  class FrameClockPrivate {
    New() {
    }

    }
  }

  class FrameTimings {
    New() {
    }

    }

    method : public : GetComplete() ~ Bool {
      array_args := Base->New[2];
      array_args[0] := IntHolder->New();
      array_args[1] := @self;

      Proxy->GetDllProxy()->CallFunction("gdk_frame_timings_get_complete", array_args);

      value := array_args[0]->As(IntHolder);
      return value->Get() = 0 ? false : true;
    }

    method : public : GetFrameCounter() ~ gint64 {
      array_args := Base->New[2];
      array_args[0] := Nil;
      array_args[1] := @self;

      Proxy->GetDllProxy()->CallFunction("gdk_frame_timings_get_frame_counter", array_args);

      return Nil;
    }

    method : public : GetFrameTime() ~ gint64 {
      array_args := Base->New[2];
      array_args[0] := Nil;
      array_args[1] := @self;

      Proxy->GetDllProxy()->CallFunction("gdk_frame_timings_get_frame_time", array_args);

      return Nil;
    }

    method : public : GetPredictedPresentationTime() ~ gint64 {
      array_args := Base->New[2];
      array_args[0] := Nil;
      array_args[1] := @self;

      Proxy->GetDllProxy()->CallFunction("gdk_frame_timings_get_predicted_presentation_time", array_args);

      return Nil;
    }

    method : public : GetPresentationTime() ~ gint64 {
      array_args := Base->New[2];
      array_args[0] := Nil;
      array_args[1] := @self;

      Proxy->GetDllProxy()->CallFunction("gdk_frame_timings_get_presentation_time", array_args);

      return Nil;
    }

    method : public : GetRefreshInterval() ~ gint64 {
      array_args := Base->New[2];
      array_args[0] := Nil;
      array_args[1] := @self;

      Proxy->GetDllProxy()->CallFunction("gdk_frame_timings_get_refresh_interval", array_args);

      return Nil;
    }

    method : public : Ref() ~ FrameTimings {
      array_args := Base->New[2];
      array_args[0] := Nil;
      array_args[1] := @self;

      Proxy->GetDllProxy()->CallFunction("gdk_frame_timings_ref", array_args);

      return Nil;
    }

    method : public : Unref() ~ Nil {
      array_args := Base->New[2];
      array_args[0] := Nil;
      array_args[1] := @self;

      Proxy->GetDllProxy()->CallFunction("gdk_frame_timings_unref", array_args);
    }
  }

  class Geometry {
    @min_width : Int;
    @min_height : Int;
    @max_width : Int;
    @max_height : Int;
    @base_width : Int;
    @base_height : Int;
    @width_inc : Int;
    @height_inc : Int;
    @min_aspect : Float;
    @max_aspect : Float;
    @win_gravity : Gravity;

    New() {
    }

    New(min_width: Int, min_height: Int, max_width: Int, max_height: Int, base_width: Int, base_height: Int, width_inc: Int, height_inc: Int, min_aspect: Float, max_aspect: Float, win_gravity: Gravity) {
      @min_width := min_width;
      @min_height := min_height;
      @max_width := max_width;
      @max_height := max_height;
      @base_width := base_width;
      @base_height := base_height;
      @width_inc := width_inc;
      @height_inc := height_inc;
      @min_aspect := min_aspect;
      @max_aspect := max_aspect;
      @win_gravity := win_gravity;
    }

    method : public : GetMinWidth() ~ Int {
      return @min_width;
    }

    method : public : SetMinWidth(min_width : Int) ~ Nil {
      @min_width := min_width;
    }

    method : public : GetMinHeight() ~ Int {
      return @min_height;
    }

    method : public : SetMinHeight(min_height : Int) ~ Nil {
      @min_height := min_height;
    }

    method : public : GetMaxWidth() ~ Int {
      return @max_width;
    }

    method : public : SetMaxWidth(max_width : Int) ~ Nil {
      @max_width := max_width;
    }

    method : public : GetMaxHeight() ~ Int {
      return @max_height;
    }

    method : public : SetMaxHeight(max_height : Int) ~ Nil {
      @max_height := max_height;
    }

    method : public : GetBaseWidth() ~ Int {
      return @base_width;
    }

    method : public : SetBaseWidth(base_width : Int) ~ Nil {
      @base_width := base_width;
    }

    method : public : GetBaseHeight() ~ Int {
      return @base_height;
    }

    method : public : SetBaseHeight(base_height : Int) ~ Nil {
      @base_height := base_height;
    }

    method : public : GetWidthInc() ~ Int {
      return @width_inc;
    }

    method : public : SetWidthInc(width_inc : Int) ~ Nil {
      @width_inc := width_inc;
    }

    method : public : GetHeightInc() ~ Int {
      return @height_inc;
    }

    method : public : SetHeightInc(height_inc : Int) ~ Nil {
      @height_inc := height_inc;
    }

    method : public : GetMinAspect() ~ Float {
      return @min_aspect;
    }

    method : public : SetMinAspect(min_aspect : Float) ~ Nil {
      @min_aspect := min_aspect;
    }

    method : public : GetMaxAspect() ~ Float {
      return @max_aspect;
    }

    method : public : SetMaxAspect(max_aspect : Float) ~ Nil {
      @max_aspect := max_aspect;
    }

    method : public : GetWinGravity() ~ Gravity {
      return @win_gravity;
    }

    method : public : SetWinGravity(win_gravity : Gravity) ~ Nil {
      @win_gravity := win_gravity;
    }
  }

  class KeymapKey {
    @keycode : Int;
    @group : Int;
    @level : Int;

    New() {
    }

    New(keycode: Int, group: Int, level: Int) {
      @keycode := keycode;
      @group := group;
      @level := level;
    }

    method : public : GetKeycode() ~ Int {
      return @keycode;
    }

    method : public : SetKeycode(keycode : Int) ~ Nil {
      @keycode := keycode;
    }

    method : public : GetGroup() ~ Int {
      return @group;
    }

    method : public : SetGroup(group : Int) ~ Nil {
      @group := group;
    }

    method : public : GetLevel() ~ Int {
      return @level;
    }

    method : public : SetLevel(level : Int) ~ Nil {
      @level := level;
    }
  }

  class MonitorClass {
    New() {
    }

    }
  }

  class Point {
    @x : Int;
    @y : Int;

    New() {
    }

    New(x: Int, y: Int) {
      @x := x;
      @y := y;
    }

    method : public : GetX() ~ Int {
      return @x;
    }

    method : public : SetX(x : Int) ~ Nil {
      @x := x;
    }

    method : public : GetY() ~ Int {
      return @y;
    }

    method : public : SetY(y : Int) ~ Nil {
      @y := y;
    }
  }

  class RGBA {
    @red : Float;
    @green : Float;
    @blue : Float;
    @alpha : Float;

    New() {
    }

    New(red: Float, green: Float, blue: Float, alpha: Float) {
      @red := red;
      @green := green;
      @blue := blue;
      @alpha := alpha;
    }

    method : public : Copy() ~ RGBA {
      array_args := Base->New[2];
      array_args[0] := Nil;
      array_args[1] := @self;

      # TODO: write record copy

      Proxy->GetDllProxy()->CallFunction("gdk_rgba_copy", array_args);

      return Nil;
    }

    method : public : Equal(p2 : RGBA) ~ Bool {
      array_args := Base->New[3];
      array_args[0] := IntHolder->New();
      array_args[1] := @self;

      # TODO: write record equal

      Proxy->GetDllProxy()->CallFunction("gdk_rgba_equal", array_args);

      value := array_args[0]->As(IntHolder);
      return value->Get() = 0 ? false : true;
    }

    method : public : Free() ~ Nil {
      array_args := Base->New[2];
      array_args[0] := Nil;
      array_args[1] := @self;

      # TODO: write record free

      Proxy->GetDllProxy()->CallFunction("gdk_rgba_free", array_args);
    }

    method : public : Hash() ~ Int {
      array_args := Base->New[2];
      array_args[0] := IntHolder->New();
      array_args[1] := @self;

      Proxy->GetDllProxy()->CallFunction("gdk_rgba_hash", array_args);

      value := array_args[0]->As(IntHolder);
      return value->Get();
    }

    method : public : Parse(spec : String) ~ Bool {
      array_args := Base->New[3];
      array_args[0] := IntHolder->New();
      array_args[1] := @self;
      array_args[2] := spec;

      Proxy->GetDllProxy()->CallFunction("gdk_rgba_parse", array_args);

      value := array_args[0]->As(IntHolder);
      return value->Get() = 0 ? false : true;
    }

    method : public : ToString() ~ String {
      array_args := Base->New[2];
      array_args[0] := Nil;
      array_args[1] := @self;

      Proxy->GetDllProxy()->CallFunction("gdk_rgba_to_string", array_args);

      return Nil;
    }

    method : public : GetRed() ~ Float {
      return @red;
    }

    method : public : SetRed(red : Float) ~ Nil {
      @red := red;
    }

    method : public : GetGreen() ~ Float {
      return @green;
    }

    method : public : SetGreen(green : Float) ~ Nil {
      @green := green;
    }

    method : public : GetBlue() ~ Float {
      return @blue;
    }

    method : public : SetBlue(blue : Float) ~ Nil {
      @blue := blue;
    }

    method : public : GetAlpha() ~ Float {
      return @alpha;
    }

    method : public : SetAlpha(alpha : Float) ~ Nil {
      @alpha := alpha;
    }
  }

  class Rectangle {
    @x : Int;
    @y : Int;
    @width : Int;
    @height : Int;

    New() {
    }

    New(x: Int, y: Int, width: Int, height: Int) {
      @x := x;
      @y := y;
      @width := width;
      @height := height;
    }

    method : public : Equal(rect2 : Rectangle) ~ Bool {
      array_args := Base->New[3];
      array_args[0] := IntHolder->New();
      array_args[1] := @self;

      # TODO: write record equal

      Proxy->GetDllProxy()->CallFunction("gdk_rectangle_equal", array_args);

      value := array_args[0]->As(IntHolder);
      return value->Get() = 0 ? false : true;
    }

    method : public : Intersect(src2 : Rectangle, dest : Rectangle) ~ Bool {
      array_args := Base->New[4];
      array_args[0] := IntHolder->New();
      array_args[1] := @self;
      array_args[2] := src2;
      array_args[3] := dest;

      Proxy->GetDllProxy()->CallFunction("gdk_rectangle_intersect", array_args);

      value := array_args[0]->As(IntHolder);
      return value->Get() = 0 ? false : true;
    }

    method : public : Union(src2 : Rectangle, dest : Rectangle) ~ Nil {
      array_args := Base->New[4];
      array_args[0] := Nil;
      array_args[1] := @self;
      array_args[2] := src2;
      array_args[3] := dest;

      Proxy->GetDllProxy()->CallFunction("gdk_rectangle_union", array_args);
    }

    method : public : GetX() ~ Int {
      return @x;
    }

    method : public : SetX(x : Int) ~ Nil {
      @x := x;
    }

    method : public : GetY() ~ Int {
      return @y;
    }

    method : public : SetY(y : Int) ~ Nil {
      @y := y;
    }

    method : public : GetWidth() ~ Int {
      return @width;
    }

    method : public : SetWidth(width : Int) ~ Nil {
      @width := width;
    }

    method : public : GetHeight() ~ Int {
      return @height;
    }

    method : public : SetHeight(height : Int) ~ Nil {
      @height := height;
    }
  }

  class TimeCoord {
    @time : Int;

    New() {
    }

    New(time: Int) {
      @time := time;
    }

    method : public : GetTime() ~ Int {
      return @time;
    }

    method : public : SetTime(time : Int) ~ Nil {
      @time := time;
    }
  }

  class WindowAttr {
    @title : String;
    @event_mask : Int;
    @x : Int;
    @y : Int;
    @width : Int;
    @height : Int;
    @wclass : WindowWindowClass;
    @visual : Visual;
    @window_type : WindowType;
    @cursor : Cursor;
    @wmclass_name : String;
    @wmclass_class : String;
    @override_redirect : Bool;
    @type_hint : WindowTypeHint;

    New() {
    }

    New(title: String, event_mask: Int, x: Int, y: Int, width: Int, height: Int, wclass: WindowWindowClass, visual: Visual, window_type: WindowType, cursor: Cursor, wmclass_name: String, wmclass_class: String, override_redirect: Bool, type_hint: WindowTypeHint) {
      @title := title;
      @event_mask := event_mask;
      @x := x;
      @y := y;
      @width := width;
      @height := height;
      @wclass := wclass;
      @visual := visual;
      @window_type := window_type;
      @cursor := cursor;
      @wmclass_name := wmclass_name;
      @wmclass_class := wmclass_class;
      @override_redirect := override_redirect;
      @type_hint := type_hint;
    }

    method : public : GetTitle() ~ String {
      return @title;
    }

    method : public : SetTitle(title : String) ~ Nil {
      @title := title;
    }

    method : public : GetEventMask() ~ Int {
      return @event_mask;
    }

    method : public : SetEventMask(event_mask : Int) ~ Nil {
      @event_mask := event_mask;
    }

    method : public : GetX() ~ Int {
      return @x;
    }

    method : public : SetX(x : Int) ~ Nil {
      @x := x;
    }

    method : public : GetY() ~ Int {
      return @y;
    }

    method : public : SetY(y : Int) ~ Nil {
      @y := y;
    }

    method : public : GetWidth() ~ Int {
      return @width;
    }

    method : public : SetWidth(width : Int) ~ Nil {
      @width := width;
    }

    method : public : GetHeight() ~ Int {
      return @height;
    }

    method : public : SetHeight(height : Int) ~ Nil {
      @height := height;
    }

    method : public : GetWclass() ~ WindowWindowClass {
      return @wclass;
    }

    method : public : SetWclass(wclass : WindowWindowClass) ~ Nil {
      @wclass := wclass;
    }

    method : public : GetVisual() ~ Visual {
      return @visual;
    }

    method : public : SetVisual(visual : Visual) ~ Nil {
      @visual := visual;
    }

    method : public : GetWindowType() ~ WindowType {
      return @window_type;
    }

    method : public : SetWindowType(window_type : WindowType) ~ Nil {
      @window_type := window_type;
    }

    method : public : GetCursor() ~ Cursor {
      return @cursor;
    }

    method : public : SetCursor(cursor : Cursor) ~ Nil {
      @cursor := cursor;
    }

    method : public : GetWmclassName() ~ String {
      return @wmclass_name;
    }

    method : public : SetWmclassName(wmclass_name : String) ~ Nil {
      @wmclass_name := wmclass_name;
    }

    method : public : GetWmclassClass() ~ String {
      return @wmclass_class;
    }

    method : public : SetWmclassClass(wmclass_class : String) ~ Nil {
      @wmclass_class := wmclass_class;
    }

    method : public : GetOverrideRedirect() ~ Bool {
      return @override_redirect;
    }

    method : public : SetOverrideRedirect(override_redirect : Bool) ~ Nil {
      @override_redirect := override_redirect;
    }

    method : public : GetTypeHint() ~ WindowTypeHint {
      return @type_hint;
    }

    method : public : SetTypeHint(type_hint : WindowTypeHint) ~ Nil {
      @type_hint := type_hint;
    }
  }

  class WindowClass {
    @parent_class : GObject.ObjectClass;

    New() {
    }

    New(parent_class: GObject.ObjectClass) {
      @parent_class := parent_class;
    }

    method : public : GetParentClass() ~ GObject.ObjectClass {
      return @parent_class;
    }

    method : public : SetParentClass(parent_class : GObject.ObjectClass) ~ Nil {
      @parent_class := parent_class;
    }
  }

  class WindowRedirect {
    New() {
    }

    }
  }


###
time=3.22 sec(s)

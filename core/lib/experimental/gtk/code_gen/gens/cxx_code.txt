#include "gtk3_binder.h"

extern "C" {
	static ResourceManager* res_manager = nullptr;
	
	//
	// Initialize library
	//
#ifdef _WIN32
	__declspec(dllexport)
#endif
	void load_lib(VMContext& context) {
		if(!res_manager) {
			res_manager = new ResourceManager(context.alloc_managed_obj, context.call_method_by_id);
		}
	}

	//
	// Release library
	//
#ifdef _WIN32
	__declspec(dllexport)
#endif
	void unload_lib() {
		if(res_manager) {
			delete res_manager;
			res_manager = nullptr;
		}
	}

	//
	// GObject
	//
	static void callback_handler(GObject* handler, gpointer callback_data) {
		if(handler && callback_data) {
			std::pair<size_t, size_t*>* callback_params = (std::pair<size_t, size_t*>*)callback_data;
			size_t const mthd_cls_id = callback_params->first;
			const int cls_id = (mthd_cls_id >> (16 * (1))) & 0xFFFF;
			const int mthd_id = (mthd_cls_id >> (16 * (0))) & 0xFFFF;
			size_t* callback_data = callback_params->second;

			GType handler_ctype = G_TYPE_FROM_INSTANCE(handler);
			if(G_TYPE_IS_CLASSED(handler_ctype)) {
				const std::string handler_cname(g_type_name(handler_ctype));
				const char prefix_str[] = "Gtk";
				size_t handler_cname_prefix_offset = handler_cname.find(prefix_str);
				if(handler_cname_prefix_offset != std::string::npos) {
					std::pair<size_t*, long*> exec_stack_mem = res_manager->GetOpStackMemory();

					size_t* op_stack = exec_stack_mem.first;
					long* stack_pos = exec_stack_mem.second;
					
					const std::string post_objk_name = handler_cname.substr(handler_cname_prefix_offset + strlen(prefix_str));
					const std::string handler_objk_name("Gtk3." + post_objk_name);

					const APITools_AllocateObject_Ptr alloc_obj = res_manager->GetAllocateObject();
					size_t* gobject_obj = alloc_obj(BytesToUnicode(handler_objk_name).c_str(), op_stack, *stack_pos, true);
					if(gobject_obj) {
						gobject_obj[0] = (size_t)handler;

						// set stack
						op_stack[0] = (size_t)gobject_obj;
						op_stack[1] = (size_t)callback_data;
						(*stack_pos) = 2;

						// call method
						const APITools_MethodCallById_Ptr mthd_call_id = res_manager->GetMethodCallById();
						mthd_call_id(op_stack, stack_pos, nullptr, cls_id, mthd_id);
					}

					// clean up
					res_manager->ReleaseOpStackMemory(exec_stack_mem);
				}
			}
		}
	}


	//
	// Cursor
	//
#ifdef _WIN32
	__declspec(dllexport)
#endif
	void gtk3_gdk_cursor_new(VMContext& context) {
		const GdkCursorType p1 = (GdkCursorType)APITools_GetIntValue(context, 1);

		const auto status = (size_t)gdk_cursor_new(p1);

		APITools_SetIntValue(context, 0, (size_t)status);
	}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void gtk3_gdk_cursor_ref(VMContext& context) {
		GdkCursor* p1 = (GdkCursor*)APITools_GetIntValue(context, 1);

		const auto status = gdk_cursor_ref(p1);

		APITools_SetIntValue(context, 0, (size_t)status);
	}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void gtk3_gdk_cursor_unref(VMContext& context) {
		GdkCursor* p1 = (GdkCursor*)APITools_GetIntValue(context, 1);

		gdk_cursor_unref(p1);
	}


	//
	// Device
	//
#ifdef _WIN32
	__declspec(dllexport)
#endif
	void gtk3_gdk_device_grab(VMContext& context) {
		GdkDevice* p1 = (GdkDevice*)APITools_GetIntValue(context, 1);
		const size_t* p2_obj = APITools_GetObjectValue(context, 2);
		GdkWindow* p2 = (GdkWindow*)p2_obj[0];

		const GdkGrabOwnership p3 = (GdkGrabOwnership)APITools_GetIntValue(context, 3);
		const gboolean p4 = APITools_GetIntValue(context, 4) ? false : true;
		const GdkEventMask p5 = (GdkEventMask)APITools_GetIntValue(context, 5);
		const size_t* p6_obj = APITools_GetObjectValue(context, 6);
		GdkCursor* p6 = (GdkCursor*)p6_obj[0];

		const gint p7 = APITools_GetIntValue(context, 7);

		const auto status = gdk_device_grab(p1, p2, p3, p4, p5, p6, p7);

		APITools_SetIntValue(context, 0, (size_t)status);
	}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void gtk3_gdk_device_ungrab(VMContext& context) {
		GdkDevice* p1 = (GdkDevice*)APITools_GetIntValue(context, 1);
		const gint p2 = APITools_GetIntValue(context, 2);

		gdk_device_ungrab(p1, p2);
	}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void gtk3_gdk_device_grab_info_libgtk_only(VMContext& context) {
		const size_t* p1_obj = APITools_GetObjectValue(context, 1);
		GdkDisplay* p1 = (GdkDisplay*)p1_obj[0];

		const size_t* p2_obj = APITools_GetObjectValue(context, 2);
		GdkDevice* p2 = (GdkDevice*)p2_obj[0];

		const size_t* p3_obj = APITools_GetObjectValue(context, 3);
		GdkWindow** p3 = (GdkWindow**)p3_obj[0];

		const gboolean p4 = APITools_GetIntValue(context, 4) ? false : true;

		const auto status = gdk_device_grab_info_libgtk_only(p1, p2, p3);

		APITools_SetIntValue(context, 0, status);
	}


	//
	// DeviceManager
	//
#ifdef _WIN32
	__declspec(dllexport)
#endif
	void gtk3_gdk_device_manager_get_client_pointer(VMContext& context) {
		GdkDeviceManager* p1 = (GdkDeviceManager*)APITools_GetIntValue(context, 1);

		const auto status = gdk_device_manager_get_client_pointer(p1);

		APITools_SetIntValue(context, 0, (size_t)status);
	}


	//
	// Display
	//
#ifdef _WIN32
	__declspec(dllexport)
#endif
	void gtk3_gdk_display_get_device_manager(VMContext& context) {
		GdkDisplay* p1 = (GdkDisplay*)APITools_GetIntValue(context, 1);

		const auto status = gdk_display_get_device_manager(p1);

		APITools_SetIntValue(context, 0, (size_t)status);
	}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void gtk3_gdk_display_get_n_screens(VMContext& context) {
		GdkDisplay* p1 = (GdkDisplay*)APITools_GetIntValue(context, 1);

		const auto status = gdk_display_get_n_screens(p1);

		APITools_SetIntValue(context, 0, status);
	}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void gtk3_gdk_display_get_pointer(VMContext& context) {
		GdkDisplay* p1 = (GdkDisplay*)APITools_GetIntValue(context, 1);
		const size_t* p2_obj = APITools_GetObjectValue(context, 2);
		GdkScreen** p2 = (GdkScreen**)p2_obj[0];

		const gint p3 = APITools_GetIntValue(context, 3);
		const gint p4 = APITools_GetIntValue(context, 4);
		const GdkModifierType p5 = (GdkModifierType)APITools_GetIntValue(context, 5);

		gdk_display_get_pointer(p1, p2, p3, p4, p5);
	}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void gtk3_gdk_display_get_screen(VMContext& context) {
		GdkDisplay* p1 = (GdkDisplay*)APITools_GetIntValue(context, 1);
		const gint p2 = APITools_GetIntValue(context, 2);

		const auto status = gdk_display_get_screen(p1, p2);

		APITools_SetIntValue(context, 0, (size_t)status);
	}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void gtk3_gdk_display_get_window_at_pointer(VMContext& context) {
		GdkDisplay* p1 = (GdkDisplay*)APITools_GetIntValue(context, 1);
		const gint p2 = APITools_GetIntValue(context, 2);
		const gint p3 = APITools_GetIntValue(context, 3);

		const auto status = gdk_display_get_window_at_pointer(p1, p2, p3);

		APITools_SetIntValue(context, 0, (size_t)status);
	}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void gtk3_gdk_display_keyboard_ungrab(VMContext& context) {
		GdkDisplay* p1 = (GdkDisplay*)APITools_GetIntValue(context, 1);
		const gint p2 = APITools_GetIntValue(context, 2);

		gdk_display_keyboard_ungrab(p1, p2);
	}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void gtk3_gdk_display_pointer_is_grabbed(VMContext& context) {
		GdkDisplay* p1 = (GdkDisplay*)APITools_GetIntValue(context, 1);

		const auto status = gdk_display_pointer_is_grabbed(p1);

		APITools_SetIntValue(context, 0, status);
	}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void gtk3_gdk_display_pointer_ungrab(VMContext& context) {
		GdkDisplay* p1 = (GdkDisplay*)APITools_GetIntValue(context, 1);
		const gint p2 = APITools_GetIntValue(context, 2);

		gdk_display_pointer_ungrab(p1, p2);
	}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void gtk3_gdk_display_supports_composite(VMContext& context) {
		GdkDisplay* p1 = (GdkDisplay*)APITools_GetIntValue(context, 1);

		const auto status = gdk_display_supports_composite(p1);

		APITools_SetIntValue(context, 0, status);
	}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void gtk3_gdk_display_warp_pointer(VMContext& context) {
		GdkDisplay* p1 = (GdkDisplay*)APITools_GetIntValue(context, 1);
		const size_t* p2_obj = APITools_GetObjectValue(context, 2);
		GdkScreen* p2 = (GdkScreen*)p2_obj[0];

		const gint p3 = APITools_GetIntValue(context, 3);
		const gint p4 = APITools_GetIntValue(context, 4);

		gdk_display_warp_pointer(p1, p2, p3, p4);
	}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void gtk3_gdk_display_open_default_libgtk_only(VMContext& context) {

		APITools_SetIntValue(context, 0, (size_t)status);
	}


	//
	// Screen
	//
#ifdef _WIN32
	__declspec(dllexport)
#endif
	void gtk3_gdk_screen_get_height(VMContext& context) {
		GdkScreen* p1 = (GdkScreen*)APITools_GetIntValue(context, 1);

		const auto status = gdk_screen_get_height(p1);

		APITools_SetIntValue(context, 0, status);
	}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void gtk3_gdk_screen_get_height_mm(VMContext& context) {
		GdkScreen* p1 = (GdkScreen*)APITools_GetIntValue(context, 1);

		const auto status = gdk_screen_get_height_mm(p1);

		APITools_SetIntValue(context, 0, status);
	}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void gtk3_gdk_screen_get_monitor_at_point(VMContext& context) {
		GdkScreen* p1 = (GdkScreen*)APITools_GetIntValue(context, 1);
		const gint p2 = APITools_GetIntValue(context, 2);
		const gint p3 = APITools_GetIntValue(context, 3);

		const auto status = gdk_screen_get_monitor_at_point(p1, p2, p3);

		APITools_SetIntValue(context, 0, status);
	}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void gtk3_gdk_screen_get_monitor_at_window(VMContext& context) {
		GdkScreen* p1 = (GdkScreen*)APITools_GetIntValue(context, 1);
		const size_t* p2_obj = APITools_GetObjectValue(context, 2);
		GdkWindow* p2 = (GdkWindow*)p2_obj[0];

		const auto status = gdk_screen_get_monitor_at_window(p1, p2);

		APITools_SetIntValue(context, 0, status);
	}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void gtk3_gdk_screen_get_monitor_geometry(VMContext& context) {
		GdkScreen* p1 = (GdkScreen*)APITools_GetIntValue(context, 1);
		const gint p2 = APITools_GetIntValue(context, 2);
		const size_t* p3_obj = APITools_GetObjectValue(context, 3);
		GdkRectangle* p3 = (GdkRectangle*)p3_obj[0];

		gdk_screen_get_monitor_geometry(p1, p2, p3);
	}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void gtk3_gdk_screen_get_monitor_height_mm(VMContext& context) {
		GdkScreen* p1 = (GdkScreen*)APITools_GetIntValue(context, 1);
		const gint p2 = APITools_GetIntValue(context, 2);

		const auto status = gdk_screen_get_monitor_height_mm(p1, p2);

		APITools_SetIntValue(context, 0, status);
	}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void gtk3_gdk_screen_get_monitor_plug_name(VMContext& context) {
		GdkScreen* p1 = (GdkScreen*)APITools_GetIntValue(context, 1);
		const gint p2 = APITools_GetIntValue(context, 2);

		const auto status = gdk_screen_get_monitor_plug_name(p1, p2);

		APITools_SetStringValue(context, 0, status);
	}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void gtk3_gdk_screen_get_monitor_scale_factor(VMContext& context) {
		GdkScreen* p1 = (GdkScreen*)APITools_GetIntValue(context, 1);
		const gint p2 = APITools_GetIntValue(context, 2);

		const auto status = gdk_screen_get_monitor_scale_factor(p1, p2);

		APITools_SetIntValue(context, 0, status);
	}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void gtk3_gdk_screen_get_monitor_width_mm(VMContext& context) {
		GdkScreen* p1 = (GdkScreen*)APITools_GetIntValue(context, 1);
		const gint p2 = APITools_GetIntValue(context, 2);

		const auto status = gdk_screen_get_monitor_width_mm(p1, p2);

		APITools_SetIntValue(context, 0, status);
	}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void gtk3_gdk_screen_get_monitor_workarea(VMContext& context) {
		GdkScreen* p1 = (GdkScreen*)APITools_GetIntValue(context, 1);
		const gint p2 = APITools_GetIntValue(context, 2);
		const size_t* p3_obj = APITools_GetObjectValue(context, 3);
		GdkRectangle* p3 = (GdkRectangle*)p3_obj[0];

		gdk_screen_get_monitor_workarea(p1, p2, p3);
	}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void gtk3_gdk_screen_get_n_monitors(VMContext& context) {
		GdkScreen* p1 = (GdkScreen*)APITools_GetIntValue(context, 1);

		const auto status = gdk_screen_get_n_monitors(p1);

		APITools_SetIntValue(context, 0, status);
	}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void gtk3_gdk_screen_get_primary_monitor(VMContext& context) {
		GdkScreen* p1 = (GdkScreen*)APITools_GetIntValue(context, 1);

		const auto status = gdk_screen_get_primary_monitor(p1);

		APITools_SetIntValue(context, 0, status);
	}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void gtk3_gdk_screen_get_width(VMContext& context) {
		GdkScreen* p1 = (GdkScreen*)APITools_GetIntValue(context, 1);

		const auto status = gdk_screen_get_width(p1);

		APITools_SetIntValue(context, 0, status);
	}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void gtk3_gdk_screen_get_width_mm(VMContext& context) {
		GdkScreen* p1 = (GdkScreen*)APITools_GetIntValue(context, 1);

		const auto status = gdk_screen_get_width_mm(p1);

		APITools_SetIntValue(context, 0, status);
	}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void gtk3_gdk_screen_height(VMContext& context) {

		APITools_SetIntValue(context, 0, status);
	}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void gtk3_gdk_screen_height_mm(VMContext& context) {

		APITools_SetIntValue(context, 0, status);
	}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void gtk3_gdk_screen_width(VMContext& context) {

		APITools_SetIntValue(context, 0, status);
	}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void gtk3_gdk_screen_width_mm(VMContext& context) {

		APITools_SetIntValue(context, 0, status);
	}


	//
	// Window
	//
#ifdef _WIN32
	__declspec(dllexport)
#endif
	void gtk3_gdk_window_begin_paint_rect(VMContext& context) {
		GdkWindow* p1 = (GdkWindow*)APITools_GetIntValue(context, 1);
		const size_t* p2_obj = APITools_GetObjectValue(context, 2);
		const GdkRectangle* p2 = (const GdkRectangle*)p2_obj[0];

		gdk_window_begin_paint_rect(p1, p2);
	}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void gtk3_gdk_window_configure_finished(VMContext& context) {
		GdkWindow* p1 = (GdkWindow*)APITools_GetIntValue(context, 1);

		gdk_window_configure_finished(p1);
	}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void gtk3_gdk_window_enable_synchronized_configure(VMContext& context) {
		GdkWindow* p1 = (GdkWindow*)APITools_GetIntValue(context, 1);

		gdk_window_enable_synchronized_configure(p1);
	}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void gtk3_gdk_window_freeze_toplevel_updates_libgtk_only(VMContext& context) {
		GdkWindow* p1 = (GdkWindow*)APITools_GetIntValue(context, 1);

		gdk_window_freeze_toplevel_updates_libgtk_only(p1);
	}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void gtk3_gdk_window_get_composited(VMContext& context) {
		GdkWindow* p1 = (GdkWindow*)APITools_GetIntValue(context, 1);

		const auto status = gdk_window_get_composited(p1);

		APITools_SetIntValue(context, 0, status);
	}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void gtk3_gdk_window_get_pointer(VMContext& context) {
		GdkWindow* p1 = (GdkWindow*)APITools_GetIntValue(context, 1);
		const gint p2 = APITools_GetIntValue(context, 2);
		const gint p3 = APITools_GetIntValue(context, 3);
		const GdkModifierType p4 = (GdkModifierType)APITools_GetIntValue(context, 4);

		const auto status = gdk_window_get_pointer(p1, p2, p3, p4);

		APITools_SetIntValue(context, 0, (size_t)status);
	}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void gtk3_gdk_window_set_background(VMContext& context) {
		GdkWindow* p1 = (GdkWindow*)APITools_GetIntValue(context, 1);
		const size_t* p2_obj = APITools_GetObjectValue(context, 2);
		const GdkColor* p2 = (const GdkColor*)p2_obj[0];

		gdk_window_set_background(p1, p2);
	}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void gtk3_gdk_window_set_background_rgba(VMContext& context) {
		GdkWindow* p1 = (GdkWindow*)APITools_GetIntValue(context, 1);
		const size_t* p2_obj = APITools_GetObjectValue(context, 2);
		const GdkRGBA* p2 = (const GdkRGBA*)p2_obj[0];

		gdk_window_set_background_rgba(p1, p2);
	}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void gtk3_gdk_window_set_composited(VMContext& context) {
		GdkWindow* p1 = (GdkWindow*)APITools_GetIntValue(context, 1);
		const gboolean p2 = APITools_GetIntValue(context, 2) ? false : true;

		gdk_window_set_composited(p1, p2);
	}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void gtk3_gdk_window_set_static_gravities(VMContext& context) {
		GdkWindow* p1 = (GdkWindow*)APITools_GetIntValue(context, 1);
		const gboolean p2 = APITools_GetIntValue(context, 2) ? false : true;

		const auto status = gdk_window_set_static_gravities(p1, p2);

		APITools_SetIntValue(context, 0, status);
	}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void gtk3_gdk_window_thaw_toplevel_updates_libgtk_only(VMContext& context) {
		GdkWindow* p1 = (GdkWindow*)APITools_GetIntValue(context, 1);

		gdk_window_thaw_toplevel_updates_libgtk_only(p1);
	}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void gtk3_gdk_window_at_pointer(VMContext& context) {
		const gint p1 = APITools_GetIntValue(context, 1);
		const gint p2 = APITools_GetIntValue(context, 2);

		const auto status = gdk_window_at_pointer(p1);

		APITools_SetIntValue(context, 0, (size_t)status);
	}

	//
	// Color
	//
#ifdef _WIN32
	__declspec(dllexport)
#endif
void gobject_get_pixel(VMContext& context) {
}
#ifdef _WIN32
	__declspec(dllexport)
#endif
void gobject_get_red(VMContext& context) {
}
#ifdef _WIN32
	__declspec(dllexport)
#endif
void gobject_get_green(VMContext& context) {
}
#ifdef _WIN32
	__declspec(dllexport)
#endif
void gobject_get_blue(VMContext& context) {
}
#ifdef _WIN32
	__declspec(dllexport)
#endif
	void gtk3_gdk_color_copy(VMContext& context) {
		const GdkColor* p1 = (const GdkColor*)APITools_GetIntValue(context, 1);

		const auto status = gdk_color_copy(p1);

		APITools_SetIntValue(context, 0, (size_t)status);
	}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void gtk3_gdk_color_equal(VMContext& context) {
		const GdkColor* p1 = (const GdkColor*)APITools_GetIntValue(context, 1);
		const size_t* p2_obj = APITools_GetObjectValue(context, 2);
		const GdkColor* p2 = (const GdkColor*)p2_obj[0];

		const auto status = gdk_color_equal(p1, p2);

		APITools_SetIntValue(context, 0, status);
	}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void gtk3_gdk_color_free(VMContext& context) {
		GdkColor* p1 = (GdkColor*)APITools_GetIntValue(context, 1);

		gdk_color_free(p1);
	}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void gtk3_gdk_color_hash(VMContext& context) {
		const GdkColor* p1 = (const GdkColor*)APITools_GetIntValue(context, 1);

		const auto status = gdk_color_hash(p1);

		APITools_SetIntValue(context, 0, status);
	}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void gtk3_gdk_color_to_string(VMContext& context) {
		const GdkColor* p1 = (const GdkColor*)APITools_GetIntValue(context, 1);

		const auto status = gdk_color_to_string(p1);

		APITools_SetStringValue(context, 0, status);
	}

#ifdef _WIN32
	__declspec(dllexport)
#endif
	void gtk3_gdk_color_parse(VMContext& context) {
		const std::string parm1 = UnicodeToBytes(APITools_GetStringValue(context, 1));
		const size_t* p2_obj = APITools_GetObjectValue(context, 2);
		GdkColor* p2 = (GdkColor*)p2_obj[0];

		const auto status = gdk_color_parse(p1);

		APITools_SetIntValue(context, 0, status);
	}


	//
	// RGBA
	//
#ifdef _WIN32
	__declspec(dllexport)
#endif
void gobject_get_red(VMContext& context) {
}
#ifdef _WIN32
	__declspec(dllexport)
#endif
void gobject_get_green(VMContext& context) {
}
#ifdef _WIN32
	__declspec(dllexport)
#endif
void gobject_get_blue(VMContext& context) {
}
#ifdef _WIN32
	__declspec(dllexport)
#endif
void gobject_get_alpha(VMContext& context) {
}

	//
	// Rectangle
	//
#ifdef _WIN32
	__declspec(dllexport)
#endif
void gobject_get_x(VMContext& context) {
}
#ifdef _WIN32
	__declspec(dllexport)
#endif
void gobject_get_y(VMContext& context) {
}
#ifdef _WIN32
	__declspec(dllexport)
#endif
void gobject_get_width(VMContext& context) {
}
#ifdef _WIN32
	__declspec(dllexport)
#endif
void gobject_get_height(VMContext& context) {
}
}
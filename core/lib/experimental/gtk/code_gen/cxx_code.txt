#include "gtk3_test.h"

extern "C" {
  static ResourceManager* res_manager = nullptr;

  //
  // initialize library
  //
#ifdef _WIN32
  __declspec(dllexport)
#endif
  void load_lib(VMContext& context) {
    if(!res_manager) {
      res_manager = new ResourceManager(context.alloc_managed_obj, context.call_method_by_id);
    }
  }

  //
  // release library
  //
#ifdef _WIN32
  __declspec(dllexport)
#endif
  void unload_lib() {
    if(res_manager) {
      delete res_manager;
      res_manager = nullptr;
    }
  }

  //
  // GObject
  //
  static void callback_handler(GObject* handler, gpointer callback_data) {
    // well, want to reduce the code below... however what I learned from the SLD2
    // bindings is that UIs are order of magnitude slower then supporting program logic
    if(handler && callback_data) {
      std::pair<size_t, size_t*>* callback_params = (std::pair<size_t, size_t*>*)callback_data;
      size_t const mthd_cls_id = callback_params->first;
      const int cls_id = (mthd_cls_id >> (16 * (1))) & 0xFFFF;
      const int mthd_id = (mthd_cls_id >> (16 * (0))) & 0xFFFF;
      size_t* callback_data = callback_params->second;

      GType handler_ctype = G_TYPE_FROM_INSTANCE(handler);
      if(G_TYPE_IS_CLASSED(handler_ctype)) {
        const std::string handler_cname(g_type_name(handler_ctype));
        const char prefix_str[] = "Gtk
        size_t handler_cname_prefix_offset = handler_cname.find(prefix_str);
        if(handler_cname_prefix_offset != std::string::npos) {
          std::pair<size_t*, long*> exec_stack_mem = res_manager->GetOpStackMemory();

          size_t* op_stack = exec_stack_mem.first;
          long* stack_pos = exec_stack_mem.second;
          
          const std::string post_objk_name = handler_cname.substr(handler_cname_prefix_offset + strlen(prefix_str));
          const std::string handler_objk_name("Gtk3." + post_objk_name);

          const APITools_AllocateObject_Ptr alloc_obj = res_manager->GetAllocateObject();
          size_t* gobject_obj = alloc_obj(BytesToUnicode(handler_objk_name).c_str(), op_stack, *stack_pos, true);
          if(gobject_obj) {
            gobject_obj[0] = (size_t)handler;

            // set stack
            op_stack[0] = (size_t)gobject_obj;
            op_stack[1] = (size_t)callback_data;
            (*stack_pos) = 2;

            // call method
            const APITools_MethodCallById_Ptr mthd_call_id = res_manager->GetMethodCallById();
            mthd_call_id(op_stack, stack_pos, nullptr, cls_id, mthd_id);
          }

          // clean up
          res_manager->ReleaseOpStackMemory(exec_stack_mem);
        }
      }
    }
  }
}

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_add_filter(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_beep(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_begin_draw_frame(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_begin_move_drag(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_begin_move_drag_for_device(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_begin_paint_rect(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_begin_paint_region(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_begin_resize_drag(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_begin_resize_drag_for_device(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_configure_finished(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_coords_from_parent(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_coords_to_parent(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_create_gl_context(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_create_similar_image_surface(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_create_similar_surface(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_deiconify(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_destroy(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_destroy_notify(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_enable_synchronized_configure(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_end_draw_frame(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_end_paint(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_ensure_native(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_flush(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_focus(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_freeze_toplevel_updates_libgtk_only(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_freeze_updates(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_fullscreen(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_fullscreen_on_monitor(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_geometry_changed(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_get_accept_focus(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_get_background_pattern(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_get_children(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_get_children_with_user_data(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_get_clip_region(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_get_composited(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_get_cursor(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_get_decorations(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_get_device_cursor(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_get_device_events(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_get_device_position(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_get_device_position_double(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_get_display(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_get_drag_protocol(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_get_effective_parent(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_get_effective_toplevel(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_get_event_compression(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_get_events(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_get_focus_on_map(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_get_frame_clock(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_get_frame_extents(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_get_fullscreen_mode(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_get_geometry(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_get_group(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_get_height(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_get_modal_hint(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_get_origin(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_get_parent(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_get_pass_through(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_get_pointer(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_get_position(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_get_root_coords(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_get_root_origin(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_get_scale_factor(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_get_screen(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_get_source_events(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_get_state(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_get_support_multidevice(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_get_toplevel(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_get_type_hint(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_get_update_area(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_get_user_data(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_get_visible_region(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_get_visual(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_get_width(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_get_window_type(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_has_native(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_hide(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_iconify(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_input_shape_combine_region(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_invalidate_maybe_recurse(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_invalidate_rect(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_invalidate_region(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_is_destroyed(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_is_input_only(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_is_shaped(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_is_viewable(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_is_visible(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_lower(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_mark_paint_from_clip(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_maximize(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_merge_child_input_shapes(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_merge_child_shapes(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_move(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_move_region(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_move_resize(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_move_to_rect(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_peek_children(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_process_updates(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_raise(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_register_dnd(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_remove_filter(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_reparent(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_resize(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_restack(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_scroll(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_set_accept_focus(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_set_background(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_set_background_pattern(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_set_background_rgba(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_set_child_input_shapes(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_set_child_shapes(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_set_composited(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_set_cursor(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_set_decorations(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_set_device_cursor(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_set_device_events(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_set_event_compression(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_set_events(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_set_focus_on_map(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_set_fullscreen_mode(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_set_functions(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_set_geometry_hints(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_set_group(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_set_icon_list(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_set_icon_name(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_set_invalidate_handler(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_set_keep_above(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_set_keep_below(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_set_modal_hint(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_set_opacity(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_set_opaque_region(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_set_override_redirect(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_set_pass_through(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_set_role(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_set_shadow_width(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_set_skip_pager_hint(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_set_skip_taskbar_hint(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_set_source_events(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_set_startup_id(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_set_static_gravities(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_set_support_multidevice(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_set_title(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_set_transient_for(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_set_type_hint(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_set_urgency_hint(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_set_user_data(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_shape_combine_region(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_show(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_show_unraised(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_show_window_menu(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_stick(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_thaw_toplevel_updates_libgtk_only(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_thaw_updates(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_unfullscreen(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_unmaximize(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_unstick(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }

#ifdef _WIN32
    __declspec(dllexport)
#endif
    void gtk3_gdk_window_withdraw(VMContext& context) {
      GObject* gobject = (GObject*)APITools_GetIntValue(context, 0);
    }
}

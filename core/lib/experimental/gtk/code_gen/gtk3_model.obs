use Collection;

class GtkClass from GtkDocType {
	New(doc : String, type : GtkModel->Type) {
		Parent(doc, type);
	}

	method : public : ToString() ~ String {
		return "TODO";
	}
}

class GtkMethod from GtkDocType {
	New(doc : String, type : GtkModel->Type) {
		Parent(doc, type);
	}

	method : public : ToString() ~ String {
		return "TODO";
	}
}

class GtkConst from GtkDocType {
	@name : String;
	@ctype : String;

	New(name : String, ctype : String, doc : String) {
		Parent(doc, GtkModel->Type->ENUM_BITFIELD);

		@name := name;
		@ctype := ctype;
	}

	method : public : ToString() ~ String {
		doc_size := @doc->Size();
		return "[name='{$@name}'], cytpe='{$@ctype}', doc_size={$doc_size}]";
	}
}	

class GtkType from GtkModel {
	New(type : GtkModel->Type) {
		Parent(type);
	}

	method : public : ToString() ~ String {
		return "TODO";
	}
}

class GtkDocType from GtkModel {
	@doc : String;

	New(doc : String, type : GtkModel->Type) {
		Parent(type);
		@doc := doc;
	}

	method : virtual : public : ToString() ~ String;
}

class GtkModel {
	@type : GtkModel->Type;

	enum Type {
		ENUM_BITFIELD,
		UNION,
		CLASS,
		RECORD,
		METHOD,
		TYPE
	}

	New(type : GtkModel->Type) {
		@type := type;
	}

	method : public : GetType() ~ GtkModel->Type {
		return @type;
	}

	method : virtual : public : ToString() ~ String;

	function : ToCamelCase(name : String) ~ String {
		if(<>name->IsEmpty()) {
			name->Set(name->Get(0)->ToUpper(), 0);

			do {
				underscore_index := name->Find('_');
				if(underscore_index > -1) {
					name->Delete(underscore_index);
					name->Set(name->Get(underscore_index)->ToUpper(), underscore_index);
				};
			}
			while(underscore_index > -1);
		};

		return name;
	}
}
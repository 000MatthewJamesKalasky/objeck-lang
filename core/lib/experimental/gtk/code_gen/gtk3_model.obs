use Collection;

class GtkClass from GtkDocType {
	New(doc : String, type : GtkModel->Type) {
		Parent(doc, type);
	}

	method : public : ToString() ~ String {
		return "TODO";
	}
}

class GtkMethod from GtkDocType {
	New(doc : String, type : GtkModel->Type) {
		Parent(doc, type);
	}

	method : public : ToString() ~ String {
		return "TODO";
	}
}

class GtkRecord from GtkDocType {
	@fields : Vector<GtkFieldType>;
	@field_types : Vector<GtkFieldType>;

	New(name : String, ctype : String, doc : String) {
		Parent(doc, GtkModel->Type->RECORD);

		@field_types := Vector->New()<GtkFieldType>;
	}

	method : public : AddField(name : String, ctype : String, is_writable : Bool, doc : String := "") ~ Nil {
		@field_types->AddBack(GtkFieldType->New(name, ctype, is_writable, doc));
	}

	method : public : ToString() ~ String {
		return "TODO";
	}
}

class GtkFieldType from GtkModel {
	@name : String;
	@ctype : String;
	@is_writable : Bool;
	@doc : String;

	New(name : String, ctype : String, is_writable : Bool, doc : String) {
		Parent(GtkModel->Type->RECORD);

		@name := name;
		@ctype := ctype;
		@doc := doc;
		@is_writable := is_writable;
	}

	method : public : ToString() ~ String {
		doc_size := @doc->Size();
		return "\t[Member: name='{$@name}', cytpe='{$@ctype}', is_writable={$@is_writable}, doc_size={$doc_size}]";
	}
}

class GtkConst from GtkDocType {
	@name : String;
	@ctype : String;
	@consts_types : Vector<GtkConstType>;

	New(name : String, ctype : String, doc : String) {
		Parent(doc, GtkModel->Type->ENUM);

		@name := name;
		@ctype := ctype;
		
		@consts_types := Vector->New()<GtkConstType>;
	}

	method : public : AddConst(name : String, ctype : String, value : Int) ~ Nil {
		@consts_types->AddBack(GtkConstType->New(name, ctype, value));
	}

	method : public : ToString() ~ String {
		buffer := "";

		doc_size := @doc->Size();
		buffer += "[Const: name='{$@name}', cytpe='{$@ctype}', doc_size={$doc_size}]\n";
		each(cont_type := @consts_types) {
			buffer += cont_type->ToString();
			buffer += '\n';
		};

		return buffer;
	}
}	

class GtkConstType from GtkModel {
	@name : String;
	@ctype : String;
	@value : Int;

	New(name : String, ctype : String, value : Int) {
		Parent(GtkModel->Type->CONST);

		@name := name;
		@ctype := ctype;
		@value := value;
	}

	method : public : ToString() ~ String {
		return "\t[Member: name='{$@name}', cytpe='{$@ctype}', value={$@value}]";
	}
}

class GtkDocType from GtkModel {
	@doc : String;

	New(doc : String, type : GtkModel->Type) {
		Parent(type);
		@doc := doc;
	}

	method : virtual : public : ToString() ~ String;
}

interface CodeEmitter {
	method : virtual : EmitCxx() ~ String;

	method : virtual : EmitObjeck() ~ String;
}

class GtkModel {
	@type : GtkModel->Type;

	enum Type {
		ENUM,
		CONST,
		RECORD,
		CLASS,
		METHOD
	}

	New(type : GtkModel->Type) {
		@type := type;
	}

	method : public : GetType() ~ GtkModel->Type {
		return @type;
	}

	method : virtual : public : ToString() ~ String;

	function : ToCamelCase(name : String) ~ String {
		if(<>name->IsEmpty()) {
			name->Set(name->Get(0)->ToUpper(), 0);

			do {
				underscore_index := name->Find('_');
				if(underscore_index > -1) {
					name->Delete(underscore_index);
					name->Set(name->Get(underscore_index)->ToUpper(), underscore_index);
				};
			}
			while(underscore_index > -1);
		};

		return name;
	}
}
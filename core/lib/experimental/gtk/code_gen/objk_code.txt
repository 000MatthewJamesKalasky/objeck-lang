bundle GTK3 {
  class : private : Proxy {
    @lib_proxy : static : DllProxy;

    function : GetDllProxy() ~ DllProxy {
      if(@lib_proxy = Nil) {
        @lib_proxy := DllProxy->New("libobjk_gtk3");
      };

      return @lib_proxy;
    }
  }

  class Window {
    @gobject : Int;

    New(gobject : Int) {
      @gobject := gobject;
    }

    method : public : AddFilter(function : FilterFunc, data : Int) ~ Nil {
      array_args := Base->New[3];

      array_args[0] := IntHolder->New(@gobject);
      array_args[1] := function;
      array_args[2] := IntHolder->New(data);

      Proxy->GetDllProxy()->CallFunction("gdk_window_add_filter", array_args);
    }

    method : public : Beep() ~ Nil {
      array_args := Base->New[1];

      array_args[0] := IntHolder->New(@gobject);

      Proxy->GetDllProxy()->CallFunction("gdk_window_beep", array_args);
    }

    method : public : BeginMoveDrag(button : Int, root_x : Int, root_y : Int, timestamp : Int) ~ Nil {
      array_args := Base->New[5];

      array_args[0] := IntHolder->New(@gobject);
      array_args[1] := IntHolder->New(button);
      array_args[2] := IntHolder->New(root_x);
      array_args[3] := IntHolder->New(root_y);
      array_args[4] := IntHolder->New(timestamp);

      Proxy->GetDllProxy()->CallFunction("gdk_window_begin_move_drag", array_args);
    }

    method : public : BeginMoveDragForDevice(device : Device, button : Int, root_x : Int, root_y : Int, timestamp : Int) ~ Nil {
      array_args := Base->New[6];

      array_args[0] := IntHolder->New(@gobject);
      array_args[1] := device;
      array_args[2] := IntHolder->New(button);
      array_args[3] := IntHolder->New(root_x);
      array_args[4] := IntHolder->New(root_y);
      array_args[5] := IntHolder->New(timestamp);

      Proxy->GetDllProxy()->CallFunction("gdk_window_begin_move_drag_for_device", array_args);
    }

    method : public : BeginPaintRect(rectangle : Rectangle) ~ Nil {
      array_args := Base->New[2];

      array_args[0] := IntHolder->New(@gobject);
      array_args[1] := rectangle;

      Proxy->GetDllProxy()->CallFunction("gdk_window_begin_paint_rect", array_args);
    }

    method : public : BeginResizeDrag(edge : WindowEdge, button : Int, root_x : Int, root_y : Int, timestamp : Int) ~ Nil {
      array_args := Base->New[6];

      array_args[0] := IntHolder->New(@gobject);
      array_args[1] := edge;
      array_args[2] := IntHolder->New(button);
      array_args[3] := IntHolder->New(root_x);
      array_args[4] := IntHolder->New(root_y);
      array_args[5] := IntHolder->New(timestamp);

      Proxy->GetDllProxy()->CallFunction("gdk_window_begin_resize_drag", array_args);
    }

    method : public : BeginResizeDragForDevice(edge : WindowEdge, device : Device, button : Int, root_x : Int, root_y : Int, timestamp : Int) ~ Nil {
      array_args := Base->New[7];

      array_args[0] := IntHolder->New(@gobject);
      array_args[1] := edge;
      array_args[2] := device;
      array_args[3] := IntHolder->New(button);
      array_args[4] := IntHolder->New(root_x);
      array_args[5] := IntHolder->New(root_y);
      array_args[6] := IntHolder->New(timestamp);

      Proxy->GetDllProxy()->CallFunction("gdk_window_begin_resize_drag_for_device", array_args);
    }

    method : public : ConfigureFinished() ~ Nil {
      array_args := Base->New[1];

      array_args[0] := IntHolder->New(@gobject);

      Proxy->GetDllProxy()->CallFunction("gdk_window_configure_finished", array_args);
    }

    method : public : CoordsFromParent(parent_x : Float, parent_y : Float, x : Float, y : Float) ~ Nil {
      array_args := Base->New[5];

      array_args[0] := IntHolder->New(@gobject);
      array_args[1] := FloatHolder->New(parent_x);
      array_args[2] := FloatHolder->New(parent_y);
      array_args[3] := FloatHolder->New(x);
      array_args[4] := FloatHolder->New(y);

      Proxy->GetDllProxy()->CallFunction("gdk_window_coords_from_parent", array_args);
    }

    method : public : CoordsToParent(x : Float, y : Float, parent_x : Float, parent_y : Float) ~ Nil {
      array_args := Base->New[5];

      array_args[0] := IntHolder->New(@gobject);
      array_args[1] := FloatHolder->New(x);
      array_args[2] := FloatHolder->New(y);
      array_args[3] := FloatHolder->New(parent_x);
      array_args[4] := FloatHolder->New(parent_y);

      Proxy->GetDllProxy()->CallFunction("gdk_window_coords_to_parent", array_args);
    }

    method : public : CreateGlContext() ~ GLContext {
      array_args := Base->New[2];
      array_args[0] := Nil;
      array_args[1] := IntHolder->New(@gobject);

      Proxy->GetDllProxy()->CallFunction("gdk_window_create_gl_context", array_args);

      value := array_args[0]->As(IntHolder);
      return GLContext->New(value);
    }

    method : public : Deiconify() ~ Nil {
      array_args := Base->New[1];

      array_args[0] := IntHolder->New(@gobject);

      Proxy->GetDllProxy()->CallFunction("gdk_window_deiconify", array_args);
    }

    method : public : Destroy() ~ Nil {
      array_args := Base->New[1];

      array_args[0] := IntHolder->New(@gobject);

      Proxy->GetDllProxy()->CallFunction("gdk_window_destroy", array_args);
    }

    method : public : DestroyNotify() ~ Nil {
      array_args := Base->New[1];

      array_args[0] := IntHolder->New(@gobject);

      Proxy->GetDllProxy()->CallFunction("gdk_window_destroy_notify", array_args);
    }

    method : public : EnableSynchronizedConfigure() ~ Nil {
      array_args := Base->New[1];

      array_args[0] := IntHolder->New(@gobject);

      Proxy->GetDllProxy()->CallFunction("gdk_window_enable_synchronized_configure", array_args);
    }

    method : public : EndDrawFrame(context : DrawingContext) ~ Nil {
      array_args := Base->New[2];

      array_args[0] := IntHolder->New(@gobject);
      array_args[1] := context;

      Proxy->GetDllProxy()->CallFunction("gdk_window_end_draw_frame", array_args);
    }

    method : public : EndPaint() ~ Nil {
      array_args := Base->New[1];

      array_args[0] := IntHolder->New(@gobject);

      Proxy->GetDllProxy()->CallFunction("gdk_window_end_paint", array_args);
    }

    method : public : EnsureNative() ~ Bool {
      array_args := Base->New[2];
      array_args[0] := IntHolder->New();
      array_args[1] := IntHolder->New(@gobject);

      Proxy->GetDllProxy()->CallFunction("gdk_window_ensure_native", array_args);

      value := array_args[0]->As(IntHolder);
      return value->Get() = 0 ? false : true;
    }

    method : public : Flush() ~ Nil {
      array_args := Base->New[1];

      array_args[0] := IntHolder->New(@gobject);

      Proxy->GetDllProxy()->CallFunction("gdk_window_flush", array_args);
    }

    method : public : Focus(timestamp : Int) ~ Nil {
      array_args := Base->New[2];

      array_args[0] := IntHolder->New(@gobject);
      array_args[1] := IntHolder->New(timestamp);

      Proxy->GetDllProxy()->CallFunction("gdk_window_focus", array_args);
    }

    method : public : FreezeToplevelUpdatesLibgtkOnly() ~ Nil {
      array_args := Base->New[1];

      array_args[0] := IntHolder->New(@gobject);

      Proxy->GetDllProxy()->CallFunction("gdk_window_freeze_toplevel_updates_libgtk_only", array_args);
    }

    method : public : FreezeUpdates() ~ Nil {
      array_args := Base->New[1];

      array_args[0] := IntHolder->New(@gobject);

      Proxy->GetDllProxy()->CallFunction("gdk_window_freeze_updates", array_args);
    }

    method : public : Fullscreen() ~ Nil {
      array_args := Base->New[1];

      array_args[0] := IntHolder->New(@gobject);

      Proxy->GetDllProxy()->CallFunction("gdk_window_fullscreen", array_args);
    }

    method : public : FullscreenOnMonitor(monitor : Int) ~ Nil {
      array_args := Base->New[2];

      array_args[0] := IntHolder->New(@gobject);
      array_args[1] := IntHolder->New(monitor);

      Proxy->GetDllProxy()->CallFunction("gdk_window_fullscreen_on_monitor", array_args);
    }

    method : public : GeometryChanged() ~ Nil {
      array_args := Base->New[1];

      array_args[0] := IntHolder->New(@gobject);

      Proxy->GetDllProxy()->CallFunction("gdk_window_geometry_changed", array_args);
    }

    method : public : GetAcceptFocus() ~ Bool {
      array_args := Base->New[2];
      array_args[0] := IntHolder->New();
      array_args[1] := IntHolder->New(@gobject);

      Proxy->GetDllProxy()->CallFunction("gdk_window_get_accept_focus", array_args);

      value := array_args[0]->As(IntHolder);
      return value->Get() = 0 ? false : true;
    }

    method : public : GetComposited() ~ Bool {
      array_args := Base->New[2];
      array_args[0] := IntHolder->New();
      array_args[1] := IntHolder->New(@gobject);

      Proxy->GetDllProxy()->CallFunction("gdk_window_get_composited", array_args);

      value := array_args[0]->As(IntHolder);
      return value->Get() = 0 ? false : true;
    }

    method : public : GetCursor() ~ Cursor {
      array_args := Base->New[2];
      array_args[0] := Nil;
      array_args[1] := IntHolder->New(@gobject);

      Proxy->GetDllProxy()->CallFunction("gdk_window_get_cursor", array_args);

      value := array_args[0]->As(IntHolder);
      return Cursor->New(value);
    }

    method : public : GetDecorations(decorations : WMDecoration) ~ Bool {
      array_args := Base->New[3];
      array_args[0] := IntHolder->New();
      array_args[1] := IntHolder->New(@gobject);
      array_args[2] := decorations;

      Proxy->GetDllProxy()->CallFunction("gdk_window_get_decorations", array_args);

      value := array_args[0]->As(IntHolder);
      return value->Get() = 0 ? false : true;
    }

    method : public : GetDeviceCursor(device : Device) ~ Cursor {
      array_args := Base->New[3];
      array_args[0] := Nil;
      array_args[1] := IntHolder->New(@gobject);
      array_args[2] := device;

      Proxy->GetDllProxy()->CallFunction("gdk_window_get_device_cursor", array_args);

      value := array_args[0]->As(IntHolder);
      return Cursor->New(value);
    }

    method : public : GetDeviceEvents(device : Device) ~ EventMask {
      array_args := Base->New[3];
      array_args[0] := Nil;
      array_args[1] := IntHolder->New(@gobject);
      array_args[2] := device;

      Proxy->GetDllProxy()->CallFunction("gdk_window_get_device_events", array_args);

      value := array_args[0]->As(IntHolder);
      return EventMask->New(value);
    }

    method : public : GetDevicePosition(device : Device, x : Int, y : Int, mask : ModifierType) ~ Window {
      array_args := Base->New[6];
      array_args[0] := Nil;
      array_args[1] := IntHolder->New(@gobject);
      array_args[2] := device;
      array_args[3] := IntHolder->New(x);
      array_args[4] := IntHolder->New(y);
      array_args[5] := mask;

      Proxy->GetDllProxy()->CallFunction("gdk_window_get_device_position", array_args);

      value := array_args[0]->As(IntHolder);
      return Window->New(value);
    }

    method : public : GetDevicePositionDouble(device : Device, x : Float, y : Float, mask : ModifierType) ~ Window {
      array_args := Base->New[6];
      array_args[0] := Nil;
      array_args[1] := IntHolder->New(@gobject);
      array_args[2] := device;
      array_args[3] := FloatHolder->New(x);
      array_args[4] := FloatHolder->New(y);
      array_args[5] := mask;

      Proxy->GetDllProxy()->CallFunction("gdk_window_get_device_position_double", array_args);

      value := array_args[0]->As(IntHolder);
      return Window->New(value);
    }

    method : public : GetDisplay() ~ Display {
      array_args := Base->New[2];
      array_args[0] := Nil;
      array_args[1] := IntHolder->New(@gobject);

      Proxy->GetDllProxy()->CallFunction("gdk_window_get_display", array_args);

      value := array_args[0]->As(IntHolder);
      return Display->New(value);
    }

    method : public : GetDragProtocol(target : Window) ~ DragProtocol {
      array_args := Base->New[3];
      array_args[0] := Nil;
      array_args[1] := IntHolder->New(@gobject);
      array_args[2] := target;

      Proxy->GetDllProxy()->CallFunction("gdk_window_get_drag_protocol", array_args);

      value := array_args[0]->As(IntHolder);
      return DragProtocol->New(value);
    }

    method : public : GetEffectiveParent() ~ Window {
      array_args := Base->New[2];
      array_args[0] := Nil;
      array_args[1] := IntHolder->New(@gobject);

      Proxy->GetDllProxy()->CallFunction("gdk_window_get_effective_parent", array_args);

      value := array_args[0]->As(IntHolder);
      return Window->New(value);
    }

    method : public : GetEffectiveToplevel() ~ Window {
      array_args := Base->New[2];
      array_args[0] := Nil;
      array_args[1] := IntHolder->New(@gobject);

      Proxy->GetDllProxy()->CallFunction("gdk_window_get_effective_toplevel", array_args);

      value := array_args[0]->As(IntHolder);
      return Window->New(value);
    }

    method : public : GetEventCompression() ~ Bool {
      array_args := Base->New[2];
      array_args[0] := IntHolder->New();
      array_args[1] := IntHolder->New(@gobject);

      Proxy->GetDllProxy()->CallFunction("gdk_window_get_event_compression", array_args);

      value := array_args[0]->As(IntHolder);
      return value->Get() = 0 ? false : true;
    }

    method : public : GetEvents() ~ EventMask {
      array_args := Base->New[2];
      array_args[0] := Nil;
      array_args[1] := IntHolder->New(@gobject);

      Proxy->GetDllProxy()->CallFunction("gdk_window_get_events", array_args);

      value := array_args[0]->As(IntHolder);
      return EventMask->New(value);
    }

    method : public : GetFocusOnMap() ~ Bool {
      array_args := Base->New[2];
      array_args[0] := IntHolder->New();
      array_args[1] := IntHolder->New(@gobject);

      Proxy->GetDllProxy()->CallFunction("gdk_window_get_focus_on_map", array_args);

      value := array_args[0]->As(IntHolder);
      return value->Get() = 0 ? false : true;
    }

    method : public : GetFrameClock() ~ FrameClock {
      array_args := Base->New[2];
      array_args[0] := Nil;
      array_args[1] := IntHolder->New(@gobject);

      Proxy->GetDllProxy()->CallFunction("gdk_window_get_frame_clock", array_args);

      value := array_args[0]->As(IntHolder);
      return FrameClock->New(value);
    }

    method : public : GetFrameExtents(rect : Rectangle) ~ Nil {
      array_args := Base->New[2];

      array_args[0] := IntHolder->New(@gobject);
      array_args[1] := rect;

      Proxy->GetDllProxy()->CallFunction("gdk_window_get_frame_extents", array_args);
    }

    method : public : GetFullscreenMode() ~ FullscreenMode {
      array_args := Base->New[2];
      array_args[0] := Nil;
      array_args[1] := IntHolder->New(@gobject);

      Proxy->GetDllProxy()->CallFunction("gdk_window_get_fullscreen_mode", array_args);

      value := array_args[0]->As(IntHolder);
      return FullscreenMode->New(value);
    }

    method : public : GetGeometry(x : Int, y : Int, width : Int, height : Int) ~ Nil {
      array_args := Base->New[5];

      array_args[0] := IntHolder->New(@gobject);
      array_args[1] := IntHolder->New(x);
      array_args[2] := IntHolder->New(y);
      array_args[3] := IntHolder->New(width);
      array_args[4] := IntHolder->New(height);

      Proxy->GetDllProxy()->CallFunction("gdk_window_get_geometry", array_args);
    }

    method : public : GetGroup() ~ Window {
      array_args := Base->New[2];
      array_args[0] := Nil;
      array_args[1] := IntHolder->New(@gobject);

      Proxy->GetDllProxy()->CallFunction("gdk_window_get_group", array_args);

      value := array_args[0]->As(IntHolder);
      return Window->New(value);
    }

    method : public : GetHeight() ~ int {
      array_args := Base->New[2];
      array_args[0] := Nil;
      array_args[1] := IntHolder->New(@gobject);

      Proxy->GetDllProxy()->CallFunction("gdk_window_get_height", array_args);

      value := array_args[0]->As(IntHolder);
      return int->New(value);
    }

    method : public : GetModalHint() ~ Bool {
      array_args := Base->New[2];
      array_args[0] := IntHolder->New();
      array_args[1] := IntHolder->New(@gobject);

      Proxy->GetDllProxy()->CallFunction("gdk_window_get_modal_hint", array_args);

      value := array_args[0]->As(IntHolder);
      return value->Get() = 0 ? false : true;
    }

    method : public : GetOrigin(x : Int, y : Int) ~ Int {
      array_args := Base->New[4];
      array_args[0] := IntHolder->New();
      array_args[1] := IntHolder->New(@gobject);
      array_args[2] := IntHolder->New(x);
      array_args[3] := IntHolder->New(y);

      Proxy->GetDllProxy()->CallFunction("gdk_window_get_origin", array_args);

      value := array_args[0]->As(IntHolder);
      return value->Get();
    }

    method : public : GetParent() ~ Window {
      array_args := Base->New[2];
      array_args[0] := Nil;
      array_args[1] := IntHolder->New(@gobject);

      Proxy->GetDllProxy()->CallFunction("gdk_window_get_parent", array_args);

      value := array_args[0]->As(IntHolder);
      return Window->New(value);
    }

    method : public : GetPassThrough() ~ Bool {
      array_args := Base->New[2];
      array_args[0] := IntHolder->New();
      array_args[1] := IntHolder->New(@gobject);

      Proxy->GetDllProxy()->CallFunction("gdk_window_get_pass_through", array_args);

      value := array_args[0]->As(IntHolder);
      return value->Get() = 0 ? false : true;
    }

    method : public : GetPointer(x : Int, y : Int, mask : ModifierType) ~ Window {
      array_args := Base->New[5];
      array_args[0] := Nil;
      array_args[1] := IntHolder->New(@gobject);
      array_args[2] := IntHolder->New(x);
      array_args[3] := IntHolder->New(y);
      array_args[4] := mask;

      Proxy->GetDllProxy()->CallFunction("gdk_window_get_pointer", array_args);

      value := array_args[0]->As(IntHolder);
      return Window->New(value);
    }

    method : public : GetPosition(x : Int, y : Int) ~ Nil {
      array_args := Base->New[3];

      array_args[0] := IntHolder->New(@gobject);
      array_args[1] := IntHolder->New(x);
      array_args[2] := IntHolder->New(y);

      Proxy->GetDllProxy()->CallFunction("gdk_window_get_position", array_args);
    }

    method : public : GetRootCoords(x : Int, y : Int, root_x : Int, root_y : Int) ~ Nil {
      array_args := Base->New[5];

      array_args[0] := IntHolder->New(@gobject);
      array_args[1] := IntHolder->New(x);
      array_args[2] := IntHolder->New(y);
      array_args[3] := IntHolder->New(root_x);
      array_args[4] := IntHolder->New(root_y);

      Proxy->GetDllProxy()->CallFunction("gdk_window_get_root_coords", array_args);
    }

    method : public : GetRootOrigin(x : Int, y : Int) ~ Nil {
      array_args := Base->New[3];

      array_args[0] := IntHolder->New(@gobject);
      array_args[1] := IntHolder->New(x);
      array_args[2] := IntHolder->New(y);

      Proxy->GetDllProxy()->CallFunction("gdk_window_get_root_origin", array_args);
    }

    method : public : GetScaleFactor() ~ Int {
      array_args := Base->New[2];
      array_args[0] := IntHolder->New();
      array_args[1] := IntHolder->New(@gobject);

      Proxy->GetDllProxy()->CallFunction("gdk_window_get_scale_factor", array_args);

      value := array_args[0]->As(IntHolder);
      return value->Get();
    }

    method : public : GetScreen() ~ Screen {
      array_args := Base->New[2];
      array_args[0] := Nil;
      array_args[1] := IntHolder->New(@gobject);

      Proxy->GetDllProxy()->CallFunction("gdk_window_get_screen", array_args);

      value := array_args[0]->As(IntHolder);
      return Screen->New(value);
    }

    method : public : GetSourceEvents(source : InputSource) ~ EventMask {
      array_args := Base->New[3];
      array_args[0] := Nil;
      array_args[1] := IntHolder->New(@gobject);
      array_args[2] := source;

      Proxy->GetDllProxy()->CallFunction("gdk_window_get_source_events", array_args);

      value := array_args[0]->As(IntHolder);
      return EventMask->New(value);
    }

    method : public : GetState() ~ WindowState {
      array_args := Base->New[2];
      array_args[0] := Nil;
      array_args[1] := IntHolder->New(@gobject);

      Proxy->GetDllProxy()->CallFunction("gdk_window_get_state", array_args);

      value := array_args[0]->As(IntHolder);
      return WindowState->New(value);
    }

    method : public : GetSupportMultidevice() ~ Bool {
      array_args := Base->New[2];
      array_args[0] := IntHolder->New();
      array_args[1] := IntHolder->New(@gobject);

      Proxy->GetDllProxy()->CallFunction("gdk_window_get_support_multidevice", array_args);

      value := array_args[0]->As(IntHolder);
      return value->Get() = 0 ? false : true;
    }

    method : public : GetToplevel() ~ Window {
      array_args := Base->New[2];
      array_args[0] := Nil;
      array_args[1] := IntHolder->New(@gobject);

      Proxy->GetDllProxy()->CallFunction("gdk_window_get_toplevel", array_args);

      value := array_args[0]->As(IntHolder);
      return Window->New(value);
    }

    method : public : GetTypeHint() ~ WindowTypeHint {
      array_args := Base->New[2];
      array_args[0] := Nil;
      array_args[1] := IntHolder->New(@gobject);

      Proxy->GetDllProxy()->CallFunction("gdk_window_get_type_hint", array_args);

      value := array_args[0]->As(IntHolder);
      return WindowTypeHint->New(value);
    }

    method : public : GetUserData(data : Int) ~ Nil {
      array_args := Base->New[2];

      array_args[0] := IntHolder->New(@gobject);
      array_args[1] := IntHolder->New(data);

      Proxy->GetDllProxy()->CallFunction("gdk_window_get_user_data", array_args);
    }

    method : public : GetVisual() ~ Visual {
      array_args := Base->New[2];
      array_args[0] := Nil;
      array_args[1] := IntHolder->New(@gobject);

      Proxy->GetDllProxy()->CallFunction("gdk_window_get_visual", array_args);

      value := array_args[0]->As(IntHolder);
      return Visual->New(value);
    }

    method : public : GetWidth() ~ int {
      array_args := Base->New[2];
      array_args[0] := Nil;
      array_args[1] := IntHolder->New(@gobject);

      Proxy->GetDllProxy()->CallFunction("gdk_window_get_width", array_args);

      value := array_args[0]->As(IntHolder);
      return int->New(value);
    }

    method : public : GetWindowType() ~ WindowType {
      array_args := Base->New[2];
      array_args[0] := Nil;
      array_args[1] := IntHolder->New(@gobject);

      Proxy->GetDllProxy()->CallFunction("gdk_window_get_window_type", array_args);

      value := array_args[0]->As(IntHolder);
      return WindowType->New(value);
    }

    method : public : HasNative() ~ Bool {
      array_args := Base->New[2];
      array_args[0] := IntHolder->New();
      array_args[1] := IntHolder->New(@gobject);

      Proxy->GetDllProxy()->CallFunction("gdk_window_has_native", array_args);

      value := array_args[0]->As(IntHolder);
      return value->Get() = 0 ? false : true;
    }

    method : public : Hide() ~ Nil {
      array_args := Base->New[1];

      array_args[0] := IntHolder->New(@gobject);

      Proxy->GetDllProxy()->CallFunction("gdk_window_hide", array_args);
    }

    method : public : Iconify() ~ Nil {
      array_args := Base->New[1];

      array_args[0] := IntHolder->New(@gobject);

      Proxy->GetDllProxy()->CallFunction("gdk_window_iconify", array_args);
    }

    method : public : InvalidateRect(rect : Rectangle, invalidate_children : Bool) ~ Nil {
      array_args := Base->New[3];

      array_args[0] := IntHolder->New(@gobject);
      array_args[1] := rect;
      array_args[2] := IntHolder->New(invalidate_children = 0 ? 0 : 1);

      Proxy->GetDllProxy()->CallFunction("gdk_window_invalidate_rect", array_args);
    }

    method : public : IsDestroyed() ~ Bool {
      array_args := Base->New[2];
      array_args[0] := IntHolder->New();
      array_args[1] := IntHolder->New(@gobject);

      Proxy->GetDllProxy()->CallFunction("gdk_window_is_destroyed", array_args);

      value := array_args[0]->As(IntHolder);
      return value->Get() = 0 ? false : true;
    }

    method : public : IsInputOnly() ~ Bool {
      array_args := Base->New[2];
      array_args[0] := IntHolder->New();
      array_args[1] := IntHolder->New(@gobject);

      Proxy->GetDllProxy()->CallFunction("gdk_window_is_input_only", array_args);

      value := array_args[0]->As(IntHolder);
      return value->Get() = 0 ? false : true;
    }

    method : public : IsShaped() ~ Bool {
      array_args := Base->New[2];
      array_args[0] := IntHolder->New();
      array_args[1] := IntHolder->New(@gobject);

      Proxy->GetDllProxy()->CallFunction("gdk_window_is_shaped", array_args);

      value := array_args[0]->As(IntHolder);
      return value->Get() = 0 ? false : true;
    }

    method : public : IsViewable() ~ Bool {
      array_args := Base->New[2];
      array_args[0] := IntHolder->New();
      array_args[1] := IntHolder->New(@gobject);

      Proxy->GetDllProxy()->CallFunction("gdk_window_is_viewable", array_args);

      value := array_args[0]->As(IntHolder);
      return value->Get() = 0 ? false : true;
    }

    method : public : IsVisible() ~ Bool {
      array_args := Base->New[2];
      array_args[0] := IntHolder->New();
      array_args[1] := IntHolder->New(@gobject);

      Proxy->GetDllProxy()->CallFunction("gdk_window_is_visible", array_args);

      value := array_args[0]->As(IntHolder);
      return value->Get() = 0 ? false : true;
    }

    method : public : Lower() ~ Nil {
      array_args := Base->New[1];

      array_args[0] := IntHolder->New(@gobject);

      Proxy->GetDllProxy()->CallFunction("gdk_window_lower", array_args);
    }

    method : public : Maximize() ~ Nil {
      array_args := Base->New[1];

      array_args[0] := IntHolder->New(@gobject);

      Proxy->GetDllProxy()->CallFunction("gdk_window_maximize", array_args);
    }

    method : public : MergeChildInputShapes() ~ Nil {
      array_args := Base->New[1];

      array_args[0] := IntHolder->New(@gobject);

      Proxy->GetDllProxy()->CallFunction("gdk_window_merge_child_input_shapes", array_args);
    }

    method : public : MergeChildShapes() ~ Nil {
      array_args := Base->New[1];

      array_args[0] := IntHolder->New(@gobject);

      Proxy->GetDllProxy()->CallFunction("gdk_window_merge_child_shapes", array_args);
    }

    method : public : Move(x : Int, y : Int) ~ Nil {
      array_args := Base->New[3];

      array_args[0] := IntHolder->New(@gobject);
      array_args[1] := IntHolder->New(x);
      array_args[2] := IntHolder->New(y);

      Proxy->GetDllProxy()->CallFunction("gdk_window_move", array_args);
    }

    method : public : MoveResize(x : Int, y : Int, width : Int, height : Int) ~ Nil {
      array_args := Base->New[5];

      array_args[0] := IntHolder->New(@gobject);
      array_args[1] := IntHolder->New(x);
      array_args[2] := IntHolder->New(y);
      array_args[3] := IntHolder->New(width);
      array_args[4] := IntHolder->New(height);

      Proxy->GetDllProxy()->CallFunction("gdk_window_move_resize", array_args);
    }

    method : public : MoveToRect(rect : Rectangle, rect_anchor : Gravity, window_anchor : Gravity, anchor_hints : AnchorHints, rect_anchor_dx : Int, rect_anchor_dy : Int) ~ Nil {
      array_args := Base->New[7];

      array_args[0] := IntHolder->New(@gobject);
      array_args[1] := rect;
      array_args[2] := rect_anchor;
      array_args[3] := window_anchor;
      array_args[4] := anchor_hints;
      array_args[5] := IntHolder->New(rect_anchor_dx);
      array_args[6] := IntHolder->New(rect_anchor_dy);

      Proxy->GetDllProxy()->CallFunction("gdk_window_move_to_rect", array_args);
    }

    method : public : ProcessUpdates(update_children : Bool) ~ Nil {
      array_args := Base->New[2];

      array_args[0] := IntHolder->New(@gobject);
      array_args[1] := IntHolder->New(update_children = 0 ? 0 : 1);

      Proxy->GetDllProxy()->CallFunction("gdk_window_process_updates", array_args);
    }

    method : public : Raise() ~ Nil {
      array_args := Base->New[1];

      array_args[0] := IntHolder->New(@gobject);

      Proxy->GetDllProxy()->CallFunction("gdk_window_raise", array_args);
    }

    method : public : RegisterDnd() ~ Nil {
      array_args := Base->New[1];

      array_args[0] := IntHolder->New(@gobject);

      Proxy->GetDllProxy()->CallFunction("gdk_window_register_dnd", array_args);
    }

    method : public : RemoveFilter(function : FilterFunc, data : Int) ~ Nil {
      array_args := Base->New[3];

      array_args[0] := IntHolder->New(@gobject);
      array_args[1] := function;
      array_args[2] := IntHolder->New(data);

      Proxy->GetDllProxy()->CallFunction("gdk_window_remove_filter", array_args);
    }

    method : public : Reparent(new_parent : Window, x : Int, y : Int) ~ Nil {
      array_args := Base->New[4];

      array_args[0] := IntHolder->New(@gobject);
      array_args[1] := new_parent;
      array_args[2] := IntHolder->New(x);
      array_args[3] := IntHolder->New(y);

      Proxy->GetDllProxy()->CallFunction("gdk_window_reparent", array_args);
    }

    method : public : Resize(width : Int, height : Int) ~ Nil {
      array_args := Base->New[3];

      array_args[0] := IntHolder->New(@gobject);
      array_args[1] := IntHolder->New(width);
      array_args[2] := IntHolder->New(height);

      Proxy->GetDllProxy()->CallFunction("gdk_window_resize", array_args);
    }

    method : public : Restack(sibling : Window, above : Bool) ~ Nil {
      array_args := Base->New[3];

      array_args[0] := IntHolder->New(@gobject);
      array_args[1] := sibling;
      array_args[2] := IntHolder->New(above = 0 ? 0 : 1);

      Proxy->GetDllProxy()->CallFunction("gdk_window_restack", array_args);
    }

    method : public : Scroll(dx : Int, dy : Int) ~ Nil {
      array_args := Base->New[3];

      array_args[0] := IntHolder->New(@gobject);
      array_args[1] := IntHolder->New(dx);
      array_args[2] := IntHolder->New(dy);

      Proxy->GetDllProxy()->CallFunction("gdk_window_scroll", array_args);
    }

    method : public : SetAcceptFocus(accept_focus : Bool) ~ Nil {
      array_args := Base->New[2];

      array_args[0] := IntHolder->New(@gobject);
      array_args[1] := IntHolder->New(accept_focus = 0 ? 0 : 1);

      Proxy->GetDllProxy()->CallFunction("gdk_window_set_accept_focus", array_args);
    }

    method : public : SetBackground(color : Color) ~ Nil {
      array_args := Base->New[2];

      array_args[0] := IntHolder->New(@gobject);
      array_args[1] := color;

      Proxy->GetDllProxy()->CallFunction("gdk_window_set_background", array_args);
    }

    method : public : SetBackgroundRgba(rgba : RGBA) ~ Nil {
      array_args := Base->New[2];

      array_args[0] := IntHolder->New(@gobject);
      array_args[1] := rgba;

      Proxy->GetDllProxy()->CallFunction("gdk_window_set_background_rgba", array_args);
    }

    method : public : SetChildInputShapes() ~ Nil {
      array_args := Base->New[1];

      array_args[0] := IntHolder->New(@gobject);

      Proxy->GetDllProxy()->CallFunction("gdk_window_set_child_input_shapes", array_args);
    }

    method : public : SetChildShapes() ~ Nil {
      array_args := Base->New[1];

      array_args[0] := IntHolder->New(@gobject);

      Proxy->GetDllProxy()->CallFunction("gdk_window_set_child_shapes", array_args);
    }

    method : public : SetComposited(composited : Bool) ~ Nil {
      array_args := Base->New[2];

      array_args[0] := IntHolder->New(@gobject);
      array_args[1] := IntHolder->New(composited = 0 ? 0 : 1);

      Proxy->GetDllProxy()->CallFunction("gdk_window_set_composited", array_args);
    }

    method : public : SetCursor(cursor : Cursor) ~ Nil {
      array_args := Base->New[2];

      array_args[0] := IntHolder->New(@gobject);
      array_args[1] := cursor;

      Proxy->GetDllProxy()->CallFunction("gdk_window_set_cursor", array_args);
    }

    method : public : SetDecorations(decorations : WMDecoration) ~ Nil {
      array_args := Base->New[2];

      array_args[0] := IntHolder->New(@gobject);
      array_args[1] := decorations;

      Proxy->GetDllProxy()->CallFunction("gdk_window_set_decorations", array_args);
    }

    method : public : SetDeviceCursor(device : Device, cursor : Cursor) ~ Nil {
      array_args := Base->New[3];

      array_args[0] := IntHolder->New(@gobject);
      array_args[1] := device;
      array_args[2] := cursor;

      Proxy->GetDllProxy()->CallFunction("gdk_window_set_device_cursor", array_args);
    }

    method : public : SetDeviceEvents(device : Device, event_mask : EventMask) ~ Nil {
      array_args := Base->New[3];

      array_args[0] := IntHolder->New(@gobject);
      array_args[1] := device;
      array_args[2] := event_mask;

      Proxy->GetDllProxy()->CallFunction("gdk_window_set_device_events", array_args);
    }

    method : public : SetEventCompression(event_compression : Bool) ~ Nil {
      array_args := Base->New[2];

      array_args[0] := IntHolder->New(@gobject);
      array_args[1] := IntHolder->New(event_compression = 0 ? 0 : 1);

      Proxy->GetDllProxy()->CallFunction("gdk_window_set_event_compression", array_args);
    }

    method : public : SetEvents(event_mask : EventMask) ~ Nil {
      array_args := Base->New[2];

      array_args[0] := IntHolder->New(@gobject);
      array_args[1] := event_mask;

      Proxy->GetDllProxy()->CallFunction("gdk_window_set_events", array_args);
    }

    method : public : SetFocusOnMap(focus_on_map : Bool) ~ Nil {
      array_args := Base->New[2];

      array_args[0] := IntHolder->New(@gobject);
      array_args[1] := IntHolder->New(focus_on_map = 0 ? 0 : 1);

      Proxy->GetDllProxy()->CallFunction("gdk_window_set_focus_on_map", array_args);
    }

    method : public : SetFullscreenMode(mode : FullscreenMode) ~ Nil {
      array_args := Base->New[2];

      array_args[0] := IntHolder->New(@gobject);
      array_args[1] := mode;

      Proxy->GetDllProxy()->CallFunction("gdk_window_set_fullscreen_mode", array_args);
    }

    method : public : SetFunctions(functions : WMFunction) ~ Nil {
      array_args := Base->New[2];

      array_args[0] := IntHolder->New(@gobject);
      array_args[1] := functions;

      Proxy->GetDllProxy()->CallFunction("gdk_window_set_functions", array_args);
    }

    method : public : SetGeometryHints(geometry : Geometry, geom_mask : WindowHints) ~ Nil {
      array_args := Base->New[3];

      array_args[0] := IntHolder->New(@gobject);
      array_args[1] := geometry;
      array_args[2] := geom_mask;

      Proxy->GetDllProxy()->CallFunction("gdk_window_set_geometry_hints", array_args);
    }

    method : public : SetGroup(leader : Window) ~ Nil {
      array_args := Base->New[2];

      array_args[0] := IntHolder->New(@gobject);
      array_args[1] := leader;

      Proxy->GetDllProxy()->CallFunction("gdk_window_set_group", array_args);
    }

    method : public : SetIconName(name : String) ~ Nil {
      array_args := Base->New[2];

      array_args[0] := IntHolder->New(@gobject);
      array_args[1] := name;

      Proxy->GetDllProxy()->CallFunction("gdk_window_set_icon_name", array_args);
    }

    method : public : SetInvalidateHandler(handler : WindowInvalidateHandlerFunc) ~ Nil {
      array_args := Base->New[2];

      array_args[0] := IntHolder->New(@gobject);
      array_args[1] := handler;

      Proxy->GetDllProxy()->CallFunction("gdk_window_set_invalidate_handler", array_args);
    }

    method : public : SetKeepAbove(setting : Bool) ~ Nil {
      array_args := Base->New[2];

      array_args[0] := IntHolder->New(@gobject);
      array_args[1] := IntHolder->New(setting = 0 ? 0 : 1);

      Proxy->GetDllProxy()->CallFunction("gdk_window_set_keep_above", array_args);
    }

    method : public : SetKeepBelow(setting : Bool) ~ Nil {
      array_args := Base->New[2];

      array_args[0] := IntHolder->New(@gobject);
      array_args[1] := IntHolder->New(setting = 0 ? 0 : 1);

      Proxy->GetDllProxy()->CallFunction("gdk_window_set_keep_below", array_args);
    }

    method : public : SetModalHint(modal : Bool) ~ Nil {
      array_args := Base->New[2];

      array_args[0] := IntHolder->New(@gobject);
      array_args[1] := IntHolder->New(modal = 0 ? 0 : 1);

      Proxy->GetDllProxy()->CallFunction("gdk_window_set_modal_hint", array_args);
    }

    method : public : SetOpacity(opacity : Float) ~ Nil {
      array_args := Base->New[2];

      array_args[0] := IntHolder->New(@gobject);
      array_args[1] := FloatHolder->New(opacity);

      Proxy->GetDllProxy()->CallFunction("gdk_window_set_opacity", array_args);
    }

    method : public : SetOverrideRedirect(override_redirect : Bool) ~ Nil {
      array_args := Base->New[2];

      array_args[0] := IntHolder->New(@gobject);
      array_args[1] := IntHolder->New(override_redirect = 0 ? 0 : 1);

      Proxy->GetDllProxy()->CallFunction("gdk_window_set_override_redirect", array_args);
    }

    method : public : SetPassThrough(pass_through : Bool) ~ Nil {
      array_args := Base->New[2];

      array_args[0] := IntHolder->New(@gobject);
      array_args[1] := IntHolder->New(pass_through = 0 ? 0 : 1);

      Proxy->GetDllProxy()->CallFunction("gdk_window_set_pass_through", array_args);
    }

    method : public : SetRole(role : String) ~ Nil {
      array_args := Base->New[2];

      array_args[0] := IntHolder->New(@gobject);
      array_args[1] := role;

      Proxy->GetDllProxy()->CallFunction("gdk_window_set_role", array_args);
    }

    method : public : SetShadowWidth(left : Int, right : Int, top : Int, bottom : Int) ~ Nil {
      array_args := Base->New[5];

      array_args[0] := IntHolder->New(@gobject);
      array_args[1] := IntHolder->New(left);
      array_args[2] := IntHolder->New(right);
      array_args[3] := IntHolder->New(top);
      array_args[4] := IntHolder->New(bottom);

      Proxy->GetDllProxy()->CallFunction("gdk_window_set_shadow_width", array_args);
    }

    method : public : SetSkipPagerHint(skips_pager : Bool) ~ Nil {
      array_args := Base->New[2];

      array_args[0] := IntHolder->New(@gobject);
      array_args[1] := IntHolder->New(skips_pager = 0 ? 0 : 1);

      Proxy->GetDllProxy()->CallFunction("gdk_window_set_skip_pager_hint", array_args);
    }

    method : public : SetSkipTaskbarHint(skips_taskbar : Bool) ~ Nil {
      array_args := Base->New[2];

      array_args[0] := IntHolder->New(@gobject);
      array_args[1] := IntHolder->New(skips_taskbar = 0 ? 0 : 1);

      Proxy->GetDllProxy()->CallFunction("gdk_window_set_skip_taskbar_hint", array_args);
    }

    method : public : SetSourceEvents(source : InputSource, event_mask : EventMask) ~ Nil {
      array_args := Base->New[3];

      array_args[0] := IntHolder->New(@gobject);
      array_args[1] := source;
      array_args[2] := event_mask;

      Proxy->GetDllProxy()->CallFunction("gdk_window_set_source_events", array_args);
    }

    method : public : SetStartupId(startup_id : String) ~ Nil {
      array_args := Base->New[2];

      array_args[0] := IntHolder->New(@gobject);
      array_args[1] := startup_id;

      Proxy->GetDllProxy()->CallFunction("gdk_window_set_startup_id", array_args);
    }

    method : public : SetStaticGravities(use_static : Bool) ~ Bool {
      array_args := Base->New[3];
      array_args[0] := IntHolder->New();
      array_args[1] := IntHolder->New(@gobject);
      array_args[2] := IntHolder->New(use_static = 0 ? 0 : 1);

      Proxy->GetDllProxy()->CallFunction("gdk_window_set_static_gravities", array_args);

      value := array_args[0]->As(IntHolder);
      return value->Get() = 0 ? false : true;
    }

    method : public : SetSupportMultidevice(support_multidevice : Bool) ~ Nil {
      array_args := Base->New[2];

      array_args[0] := IntHolder->New(@gobject);
      array_args[1] := IntHolder->New(support_multidevice = 0 ? 0 : 1);

      Proxy->GetDllProxy()->CallFunction("gdk_window_set_support_multidevice", array_args);
    }

    method : public : SetTitle(title : String) ~ Nil {
      array_args := Base->New[2];

      array_args[0] := IntHolder->New(@gobject);
      array_args[1] := title;

      Proxy->GetDllProxy()->CallFunction("gdk_window_set_title", array_args);
    }

    method : public : SetTransientFor(parent : Window) ~ Nil {
      array_args := Base->New[2];

      array_args[0] := IntHolder->New(@gobject);
      array_args[1] := parent;

      Proxy->GetDllProxy()->CallFunction("gdk_window_set_transient_for", array_args);
    }

    method : public : SetTypeHint(hint : WindowTypeHint) ~ Nil {
      array_args := Base->New[2];

      array_args[0] := IntHolder->New(@gobject);
      array_args[1] := hint;

      Proxy->GetDllProxy()->CallFunction("gdk_window_set_type_hint", array_args);
    }

    method : public : SetUrgencyHint(urgent : Bool) ~ Nil {
      array_args := Base->New[2];

      array_args[0] := IntHolder->New(@gobject);
      array_args[1] := IntHolder->New(urgent = 0 ? 0 : 1);

      Proxy->GetDllProxy()->CallFunction("gdk_window_set_urgency_hint", array_args);
    }

    method : public : Show() ~ Nil {
      array_args := Base->New[1];

      array_args[0] := IntHolder->New(@gobject);

      Proxy->GetDllProxy()->CallFunction("gdk_window_show", array_args);
    }

    method : public : ShowUnraised() ~ Nil {
      array_args := Base->New[1];

      array_args[0] := IntHolder->New(@gobject);

      Proxy->GetDllProxy()->CallFunction("gdk_window_show_unraised", array_args);
    }

    method : public : ShowWindowMenu(event : Event) ~ Bool {
      array_args := Base->New[3];
      array_args[0] := IntHolder->New();
      array_args[1] := IntHolder->New(@gobject);
      array_args[2] := event;

      Proxy->GetDllProxy()->CallFunction("gdk_window_show_window_menu", array_args);

      value := array_args[0]->As(IntHolder);
      return value->Get() = 0 ? false : true;
    }

    method : public : Stick() ~ Nil {
      array_args := Base->New[1];

      array_args[0] := IntHolder->New(@gobject);

      Proxy->GetDllProxy()->CallFunction("gdk_window_stick", array_args);
    }

    method : public : ThawToplevelUpdatesLibgtkOnly() ~ Nil {
      array_args := Base->New[1];

      array_args[0] := IntHolder->New(@gobject);

      Proxy->GetDllProxy()->CallFunction("gdk_window_thaw_toplevel_updates_libgtk_only", array_args);
    }

    method : public : ThawUpdates() ~ Nil {
      array_args := Base->New[1];

      array_args[0] := IntHolder->New(@gobject);

      Proxy->GetDllProxy()->CallFunction("gdk_window_thaw_updates", array_args);
    }

    method : public : Unfullscreen() ~ Nil {
      array_args := Base->New[1];

      array_args[0] := IntHolder->New(@gobject);

      Proxy->GetDllProxy()->CallFunction("gdk_window_unfullscreen", array_args);
    }

    method : public : Unmaximize() ~ Nil {
      array_args := Base->New[1];

      array_args[0] := IntHolder->New(@gobject);

      Proxy->GetDllProxy()->CallFunction("gdk_window_unmaximize", array_args);
    }

    method : public : Unstick() ~ Nil {
      array_args := Base->New[1];

      array_args[0] := IntHolder->New(@gobject);

      Proxy->GetDllProxy()->CallFunction("gdk_window_unstick", array_args);
    }

    method : public : Withdraw() ~ Nil {
      array_args := Base->New[1];

      array_args[0] := IntHolder->New(@gobject);

      Proxy->GetDllProxy()->CallFunction("gdk_window_withdraw", array_args);
    }
  }
}
